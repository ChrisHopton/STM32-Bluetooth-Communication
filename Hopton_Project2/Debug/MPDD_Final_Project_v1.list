
MPDD_Final_Project_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a250  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800a418  0800a418  0001a418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a490  0800a490  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a490  0800a490  0001a490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a498  0800a498  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a498  0800a498  0001a498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a49c  0800a49c  0001a49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800a4a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf4  2000017c  0800a61c  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e70  0800a61c  00021e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cf07  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004144  00000000  00000000  0003d0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001790  00000000  00000000  00041240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001232  00000000  00000000  000429d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002919d  00000000  00000000  00043c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ec73  00000000  00000000  0006cd9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7508  00000000  00000000  0008ba12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000666c  00000000  00000000  00182f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00189588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000017c 	.word	0x2000017c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a400 	.word	0x0800a400

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000180 	.word	0x20000180
 8000204:	0800a400 	.word	0x0800a400

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000514:	480c      	ldr	r0, [pc, #48]	; (8000548 <ILI9163_writeCommand+0x44>)
 8000516:	f001 fd23 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000520:	4809      	ldr	r0, [pc, #36]	; (8000548 <ILI9163_writeCommand+0x44>)
 8000522:	f001 fd1d 	bl	8001f60 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 8000526:	1df9      	adds	r1, r7, #7
 8000528:	2300      	movs	r3, #0
 800052a:	2201      	movs	r2, #1
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <ILI9163_writeCommand+0x48>)
 800052e:	f004 f976 	bl	800481e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <ILI9163_writeCommand+0x44>)
 800053a:	f001 fd11 	bl	8001f60 <HAL_GPIO_WritePin>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40020400 	.word	0x40020400
 800054c:	20000198 	.word	0x20000198

08000550 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <ILI9163_writeData+0x44>)
 8000562:	f001 fcfd 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056c:	4809      	ldr	r0, [pc, #36]	; (8000594 <ILI9163_writeData+0x44>)
 800056e:	f001 fcf7 	bl	8001f60 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 8000572:	1df9      	adds	r1, r7, #7
 8000574:	2300      	movs	r3, #0
 8000576:	2201      	movs	r2, #1
 8000578:	4807      	ldr	r0, [pc, #28]	; (8000598 <ILI9163_writeData+0x48>)
 800057a:	f004 f950 	bl	800481e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <ILI9163_writeData+0x44>)
 8000586:	f001 fceb 	bl	8001f60 <HAL_GPIO_WritePin>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40020400 	.word	0x40020400
 8000598:	20000198 	.word	0x20000198

0800059c <ILI9163_reset>:

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
}

void ILI9163_reset(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <ILI9163_reset+0x2c>)
 80005a8:	f001 fcda 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80005ac:	2032      	movs	r0, #50	; 0x32
 80005ae:	f000 fed1 	bl	8001354 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <ILI9163_reset+0x2c>)
 80005ba:	f001 fcd1 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005be:	2064      	movs	r0, #100	; 0x64
 80005c0:	f000 fec8 	bl	8001354 <HAL_Delay>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40020c00 	.word	0x40020c00

080005cc <ILI9163_init>:

void ILI9163_init(int rotation) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005da:	486e      	ldr	r0, [pc, #440]	; (8000794 <ILI9163_init+0x1c8>)
 80005dc:	f001 fcc0 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e6:	486c      	ldr	r0, [pc, #432]	; (8000798 <ILI9163_init+0x1cc>)
 80005e8:	f001 fcba 	bl	8001f60 <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 80005ec:	f7ff ffd6 	bl	800059c <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 80005f0:	2011      	movs	r0, #17
 80005f2:	f7ff ff87 	bl	8000504 <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 80005f6:	2005      	movs	r0, #5
 80005f8:	f000 feac 	bl	8001354 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 80005fc:	203a      	movs	r0, #58	; 0x3a
 80005fe:	f7ff ff81 	bl	8000504 <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 8000602:	2005      	movs	r0, #5
 8000604:	f7ff ffa4 	bl	8000550 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 8000608:	2026      	movs	r0, #38	; 0x26
 800060a:	f7ff ff7b 	bl	8000504 <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 800060e:	2004      	movs	r0, #4
 8000610:	f7ff ff9e 	bl	8000550 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8000614:	20f2      	movs	r0, #242	; 0xf2
 8000616:	f7ff ff75 	bl	8000504 <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff ff98 	bl	8000550 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 8000620:	20e0      	movs	r0, #224	; 0xe0
 8000622:	f7ff ff6f 	bl	8000504 <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 8000626:	203f      	movs	r0, #63	; 0x3f
 8000628:	f7ff ff92 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800062c:	2025      	movs	r0, #37	; 0x25
 800062e:	f7ff ff8f 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 8000632:	201c      	movs	r0, #28
 8000634:	f7ff ff8c 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 8000638:	201e      	movs	r0, #30
 800063a:	f7ff ff89 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800063e:	2020      	movs	r0, #32
 8000640:	f7ff ff86 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 8000644:	2012      	movs	r0, #18
 8000646:	f7ff ff83 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 800064a:	202a      	movs	r0, #42	; 0x2a
 800064c:	f7ff ff80 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 8000650:	2090      	movs	r0, #144	; 0x90
 8000652:	f7ff ff7d 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 8000656:	2024      	movs	r0, #36	; 0x24
 8000658:	f7ff ff7a 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 800065c:	2011      	movs	r0, #17
 800065e:	f7ff ff77 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff ff74 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000668:	2000      	movs	r0, #0
 800066a:	f7ff ff71 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff ff6e 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000674:	2000      	movs	r0, #0
 8000676:	f7ff ff6b 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff ff68 	bl	8000550 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 8000680:	20e1      	movs	r0, #225	; 0xe1
 8000682:	f7ff ff3f 	bl	8000504 <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 8000686:	2020      	movs	r0, #32
 8000688:	f7ff ff62 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800068c:	2020      	movs	r0, #32
 800068e:	f7ff ff5f 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8000692:	2020      	movs	r0, #32
 8000694:	f7ff ff5c 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8000698:	2020      	movs	r0, #32
 800069a:	f7ff ff59 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 800069e:	2005      	movs	r0, #5
 80006a0:	f7ff ff56 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff ff53 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 80006aa:	2015      	movs	r0, #21
 80006ac:	f7ff ff50 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 80006b0:	20a7      	movs	r0, #167	; 0xa7
 80006b2:	f7ff ff4d 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 80006b6:	203d      	movs	r0, #61	; 0x3d
 80006b8:	f7ff ff4a 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 80006bc:	2018      	movs	r0, #24
 80006be:	f7ff ff47 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 80006c2:	2025      	movs	r0, #37	; 0x25
 80006c4:	f7ff ff44 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 80006c8:	202a      	movs	r0, #42	; 0x2a
 80006ca:	f7ff ff41 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 80006ce:	202b      	movs	r0, #43	; 0x2b
 80006d0:	f7ff ff3e 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 80006d4:	202b      	movs	r0, #43	; 0x2b
 80006d6:	f7ff ff3b 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 80006da:	203a      	movs	r0, #58	; 0x3a
 80006dc:	f7ff ff38 	bl	8000550 <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 80006e0:	20b1      	movs	r0, #177	; 0xb1
 80006e2:	f7ff ff0f 	bl	8000504 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 80006e6:	2008      	movs	r0, #8
 80006e8:	f7ff ff32 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 80006ec:	2002      	movs	r0, #2
 80006ee:	f7ff ff2f 	bl	8000550 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 80006f2:	20b2      	movs	r0, #178	; 0xb2
 80006f4:	f7ff ff06 	bl	8000504 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 80006f8:	2008      	movs	r0, #8
 80006fa:	f7ff ff29 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 80006fe:	2002      	movs	r0, #2
 8000700:	f7ff ff26 	bl	8000550 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8000704:	20b3      	movs	r0, #179	; 0xb3
 8000706:	f7ff fefd 	bl	8000504 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800070a:	2008      	movs	r0, #8
 800070c:	f7ff ff20 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8000710:	2002      	movs	r0, #2
 8000712:	f7ff ff1d 	bl	8000550 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8000716:	20b4      	movs	r0, #180	; 0xb4
 8000718:	f7ff fef4 	bl	8000504 <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 800071c:	2007      	movs	r0, #7
 800071e:	f7ff ff17 	bl	8000550 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8000722:	202a      	movs	r0, #42	; 0x2a
 8000724:	f7ff feee 	bl	8000504 <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff ff11 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 800072e:	2000      	movs	r0, #0
 8000730:	f7ff ff0e 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff ff0b 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 800073a:	207f      	movs	r0, #127	; 0x7f
 800073c:	f7ff ff08 	bl	8000550 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8000740:	202b      	movs	r0, #43	; 0x2b
 8000742:	f7ff fedf 	bl	8000504 <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff ff02 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff feff 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff fefc 	bl	8000550 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 8000758:	209f      	movs	r0, #159	; 0x9f
 800075a:	f7ff fef9 	bl	8000550 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 800075e:	2036      	movs	r0, #54	; 0x36
 8000760:	f7ff fed0 	bl	8000504 <ILI9163_writeCommand>
	if(rotation)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d003      	beq.n	8000772 <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 800076a:	20a8      	movs	r0, #168	; 0xa8
 800076c:	f7ff fef0 	bl	8000550 <ILI9163_writeData>
 8000770:	e002      	b.n	8000778 <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 8000772:	2068      	movs	r0, #104	; 0x68
 8000774:	f7ff feec 	bl	8000550 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 8000778:	2013      	movs	r0, #19
 800077a:	f7ff fec3 	bl	8000504 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 800077e:	2029      	movs	r0, #41	; 0x29
 8000780:	f7ff fec0 	bl	8000504 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 8000784:	202c      	movs	r0, #44	; 0x2c
 8000786:	f7ff febd 	bl	8000504 <ILI9163_writeCommand>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40020400 	.word	0x40020400
 8000798:	40020c00 	.word	0x40020c00

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a4:	f000 fd79 	bl	800129a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a8:	f000 f834 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ac:	f000 f94a 	bl	8000a44 <MX_GPIO_Init>
  MX_DMA_Init();
 80007b0:	f000 f92a 	bl	8000a08 <MX_DMA_Init>
  MX_SPI1_Init();
 80007b4:	f000 f896 	bl	80008e4 <MX_SPI1_Init>
  MX_TIM14_Init();
 80007b8:	f000 f8d2 	bl	8000960 <MX_TIM14_Init>
  MX_USART6_UART_Init();
 80007bc:	f000 f8f4 	bl	80009a8 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 80007c0:	f008 ff62 	bl	8009688 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  ILI9163_init(0);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff ff01 	bl	80005cc <ILI9163_init>


//	  uint32_t num = 0;
//	Write_Flash(((uint32_t *) num));
	uint32_t pinInt = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
	 uint8_t buffer[1024];
	    uint32_t count = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
	 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn on LED
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  statePinStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0); // Replace GPIOx with the actual GPIO port and STATE_PIN with the actual pin number
 80007d6:	2101      	movs	r1, #1
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <main+0x6c>)
 80007da:	f001 fba9 	bl	8001f30 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <main+0x70>)
 80007e4:	701a      	strb	r2, [r3, #0]

	  	  if(statePinStatus == GPIO_PIN_SET) {
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <main+0x70>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d105      	bne.n	80007fa <main+0x5e>
	  	      // The module is connected to another Bluetooth device
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn on LED
 80007ee:	2201      	movs	r2, #1
 80007f0:	2101      	movs	r1, #1
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <main+0x74>)
 80007f4:	f001 fbb4 	bl	8001f60 <HAL_GPIO_WritePin>
 80007f8:	e7ed      	b.n	80007d6 <main+0x3a>
//	  		char *msg = "Hello BLE Module!";
//	  		 HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

	  	  } else {
	  	      // The module is not connected
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn on LED
 80007fa:	2200      	movs	r2, #0
 80007fc:	2101      	movs	r1, #1
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <main+0x74>)
 8000800:	f001 fbae 	bl	8001f60 <HAL_GPIO_WritePin>
	  statePinStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0); // Replace GPIOx with the actual GPIO port and STATE_PIN with the actual pin number
 8000804:	e7e7      	b.n	80007d6 <main+0x3a>
 8000806:	bf00      	nop
 8000808:	40021800 	.word	0x40021800
 800080c:	20000334 	.word	0x20000334
 8000810:	40020400 	.word	0x40020400

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	; 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f009 fd5c 	bl	800a2e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000838:	f002 fe7c 	bl	8003534 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	4b27      	ldr	r3, [pc, #156]	; (80008dc <SystemClock_Config+0xc8>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a26      	ldr	r2, [pc, #152]	; (80008dc <SystemClock_Config+0xc8>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b24      	ldr	r3, [pc, #144]	; (80008dc <SystemClock_Config+0xc8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <SystemClock_Config+0xcc>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800085c:	4a20      	ldr	r2, [pc, #128]	; (80008e0 <SystemClock_Config+0xcc>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <SystemClock_Config+0xcc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000874:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000888:	2348      	movs	r3, #72	; 0x48
 800088a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000890:	2303      	movs	r3, #3
 8000892:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fe5b 	bl	8003554 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a4:	f000 f994 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2302      	movs	r3, #2
 80008ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2102      	movs	r1, #2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 f8e9 	bl	8003a9c <HAL_RCC_ClockConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008d0:	f000 f97e 	bl	8000bd0 <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3750      	adds	r7, #80	; 0x50
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_SPI1_Init+0x74>)
 80008ea:	4a1c      	ldr	r2, [pc, #112]	; (800095c <MX_SPI1_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_SPI1_Init+0x74>)
 80008f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_SPI1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_SPI1_Init+0x74>)
 80008fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000902:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_SPI1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_SPI1_Init+0x74>)
 8000912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000916:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI1_Init+0x74>)
 800091a:	2208      	movs	r2, #8
 800091c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_SPI1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_SPI1_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI1_Init+0x74>)
 8000932:	2207      	movs	r2, #7
 8000934:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_SPI1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_SPI1_Init+0x74>)
 8000944:	f003 fec0 	bl	80046c8 <HAL_SPI_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800094e:	f000 f93f 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000198 	.word	0x20000198
 800095c:	40013000 	.word	0x40013000

08000960 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_TIM14_Init+0x40>)
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <MX_TIM14_Init+0x44>)
 8000968:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <MX_TIM14_Init+0x40>)
 800096c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000970:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_TIM14_Init+0x40>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_TIM14_Init+0x40>)
 800097a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800097e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_TIM14_Init+0x40>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_TIM14_Init+0x40>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_TIM14_Init+0x40>)
 800098e:	f004 fb51 	bl	8005034 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000998:	f000 f91a 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000025c 	.word	0x2000025c
 80009a4:	40002000 	.word	0x40002000

080009a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_USART6_UART_Init+0x58>)
 80009ae:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <MX_USART6_UART_Init+0x5c>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_USART6_UART_Init+0x58>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART6_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_USART6_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART6_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART6_UART_Init+0x58>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART6_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART6_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART6_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART6_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART6_UART_Init+0x58>)
 80009ec:	f004 fe02 	bl	80055f4 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80009f6:	f000 f8eb 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200002a8 	.word	0x200002a8
 8000a04:	40011400 	.word	0x40011400

08000a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_DMA_Init+0x38>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <MX_DMA_Init+0x38>)
 8000a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_DMA_Init+0x38>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	203b      	movs	r0, #59	; 0x3b
 8000a2c:	f000 fd91 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a30:	203b      	movs	r0, #59	; 0x3b
 8000a32:	f000 fdaa 	bl	800158a <HAL_NVIC_EnableIRQ>

}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a5a:	4b4f      	ldr	r3, [pc, #316]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a4e      	ldr	r2, [pc, #312]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000a60:	f043 0310 	orr.w	r3, r3, #16
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b4c      	ldr	r3, [pc, #304]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	61bb      	str	r3, [r7, #24]
 8000a70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	4b49      	ldr	r3, [pc, #292]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a48      	ldr	r2, [pc, #288]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b46      	ldr	r3, [pc, #280]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	4b43      	ldr	r3, [pc, #268]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a42      	ldr	r2, [pc, #264]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b40      	ldr	r3, [pc, #256]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b3d      	ldr	r3, [pc, #244]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a3c      	ldr	r2, [pc, #240]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a36      	ldr	r2, [pc, #216]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad2:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a30      	ldr	r2, [pc, #192]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13
 8000aea:	2200      	movs	r2, #0
 8000aec:	f64a 3103 	movw	r1, #43779	; 0xab03
 8000af0:	482a      	ldr	r0, [pc, #168]	; (8000b9c <MX_GPIO_Init+0x158>)
 8000af2:	f001 fa35 	bl	8001f60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000af6:	2320      	movs	r3, #32
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000afa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4825      	ldr	r0, [pc, #148]	; (8000ba0 <MX_GPIO_Init+0x15c>)
 8000b0c:	f001 f864 	bl	8001bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 8000b10:	f240 3301 	movw	r3, #769	; 0x301
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	481c      	ldr	r0, [pc, #112]	; (8000b9c <MX_GPIO_Init+0x158>)
 8000b2a:	f001 f855 	bl	8001bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB11 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 8000b2e:	f64a 0302 	movw	r3, #43010	; 0xa802
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	4815      	ldr	r0, [pc, #84]	; (8000b9c <MX_GPIO_Init+0x158>)
 8000b48:	f001 f846 	bl	8001bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ble_state_Pin */
  GPIO_InitStruct.Pin = ble_state_Pin;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ble_state_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <MX_GPIO_Init+0x160>)
 8000b60:	f001 f83a 	bl	8001bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000b64:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <MX_GPIO_Init+0x164>)
 8000b7c:	f001 f82c 	bl	8001bd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2017      	movs	r0, #23
 8000b86:	f000 fce4 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b8a:	2017      	movs	r0, #23
 8000b8c:	f000 fcfd 	bl	800158a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b90:	bf00      	nop
 8000b92:	3730      	adds	r7, #48	; 0x30
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40021800 	.word	0x40021800
 8000ba8:	40020800 	.word	0x40020800

08000bac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13){
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bbc:	d102      	bne.n	8000bc4 <HAL_GPIO_EXTI_Callback+0x18>
	  HAL_TIM_Base_Start_IT(&htim14);
 8000bbe:	4803      	ldr	r0, [pc, #12]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x20>)
 8000bc0:	f004 fa90 	bl	80050e4 <HAL_TIM_Base_Start_IT>
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000025c 	.word	0x2000025c

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_MspInit+0x44>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_MspInit+0x44>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_MspInit+0x44>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_MspInit+0x44>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x44>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x44>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <HAL_SPI_MspInit+0xfc>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d168      	bne.n	8000d18 <HAL_SPI_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c46:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <HAL_SPI_MspInit+0x100>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a36      	ldr	r2, [pc, #216]	; (8000d24 <HAL_SPI_MspInit+0x100>)
 8000c4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <HAL_SPI_MspInit+0x100>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b31      	ldr	r3, [pc, #196]	; (8000d24 <HAL_SPI_MspInit+0x100>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a30      	ldr	r2, [pc, #192]	; (8000d24 <HAL_SPI_MspInit+0x100>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <HAL_SPI_MspInit+0x100>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c76:	23e0      	movs	r3, #224	; 0xe0
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c86:	2305      	movs	r3, #5
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4825      	ldr	r0, [pc, #148]	; (8000d28 <HAL_SPI_MspInit+0x104>)
 8000c92:	f000 ffa1 	bl	8001bd8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000c96:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000c98:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <HAL_SPI_MspInit+0x10c>)
 8000c9a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000c9e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ca2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ca4:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000ca6:	2240      	movs	r2, #64	; 0x40
 8000ca8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cbe:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000cec:	480f      	ldr	r0, [pc, #60]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000cee:	f000 fc67 	bl	80015c0 <HAL_DMA_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_SPI_MspInit+0xd8>
    {
      Error_Handler();
 8000cf8:	f7ff ff6a 	bl	8000bd0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000d00:	655a      	str	r2, [r3, #84]	; 0x54
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_SPI_MspInit+0x108>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2023      	movs	r0, #35	; 0x23
 8000d0e:	f000 fc20 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d12:	2023      	movs	r0, #35	; 0x23
 8000d14:	f000 fc39 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	; 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40013000 	.word	0x40013000
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	200001fc 	.word	0x200001fc
 8000d30:	40026458 	.word	0x40026458

08000d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_TIM_Base_MspInit+0x44>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d113      	bne.n	8000d6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_TIM_Base_MspInit+0x48>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <HAL_TIM_Base_MspInit+0x48>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_TIM_Base_MspInit+0x48>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	202d      	movs	r0, #45	; 0x2d
 8000d64:	f000 fbf5 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000d68:	202d      	movs	r0, #45	; 0x2d
 8000d6a:	f000 fc0e 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40002000 	.word	0x40002000
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0aa      	sub	sp, #168	; 0xa8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	2284      	movs	r2, #132	; 0x84
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f009 fa9d 	bl	800a2e0 <memset>
  if(huart->Instance==USART6)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <HAL_UART_MspInit+0xb4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d13c      	bne.n	8000e2a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000db0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000db4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000db6:	2300      	movs	r3, #0
 8000db8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 f892 	bl	8003ee8 <HAL_RCCEx_PeriphCLKConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dca:	f7ff ff01 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a19      	ldr	r2, [pc, #100]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000dd4:	f043 0320 	orr.w	r3, r3, #32
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f003 0320 	and.w	r3, r3, #32
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000dfe:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000e02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e1e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_UART_MspInit+0xbc>)
 8000e26:	f000 fed7 	bl	8001bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	37a8      	adds	r7, #168	; 0xa8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40011400 	.word	0x40011400
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40021800 	.word	0x40021800

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 fa3e 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	key = 0;
 8000ea2:	4b51      	ldr	r3, [pc, #324]	; (8000fe8 <EXTI9_5_IRQHandler+0x14c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	801a      	strh	r2, [r3, #0]
		for(uint8_t c=0 ; c<4 ; c++){
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	e075      	b.n	8000f9a <EXTI9_5_IRQHandler+0xfe>
			for(uint8_t i=0 ; i<4 ; i++){
 8000eae:	2300      	movs	r3, #0
 8000eb0:	71bb      	strb	r3, [r7, #6]
 8000eb2:	e00e      	b.n	8000ed2 <EXTI9_5_IRQHandler+0x36>
				HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000eb4:	79bb      	ldrb	r3, [r7, #6]
 8000eb6:	4a4d      	ldr	r2, [pc, #308]	; (8000fec <EXTI9_5_IRQHandler+0x150>)
 8000eb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	4a4c      	ldr	r2, [pc, #304]	; (8000ff0 <EXTI9_5_IRQHandler+0x154>)
 8000ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f001 f84a 	bl	8001f60 <HAL_GPIO_WritePin>
			for(uint8_t i=0 ; i<4 ; i++){
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	71bb      	strb	r3, [r7, #6]
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d9ed      	bls.n	8000eb4 <EXTI9_5_IRQHandler+0x18>
			}
			HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	4a44      	ldr	r2, [pc, #272]	; (8000fec <EXTI9_5_IRQHandler+0x150>)
 8000edc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4a43      	ldr	r2, [pc, #268]	; (8000ff0 <EXTI9_5_IRQHandler+0x154>)
 8000ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4619      	mov	r1, r3
 8000eec:	f001 f838 	bl	8001f60 <HAL_GPIO_WritePin>
			for(uint8_t r=0 ; r<4 ; r++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	717b      	strb	r3, [r7, #5]
 8000ef4:	e04b      	b.n	8000f8e <EXTI9_5_IRQHandler+0xf2>
				if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000ef6:	797b      	ldrb	r3, [r7, #5]
 8000ef8:	4a3e      	ldr	r2, [pc, #248]	; (8000ff4 <EXTI9_5_IRQHandler+0x158>)
 8000efa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000efe:	797b      	ldrb	r3, [r7, #5]
 8000f00:	493d      	ldr	r1, [pc, #244]	; (8000ff8 <EXTI9_5_IRQHandler+0x15c>)
 8000f02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f06:	4619      	mov	r1, r3
 8000f08:	4610      	mov	r0, r2
 8000f0a:	f001 f811 	bl	8001f30 <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d139      	bne.n	8000f88 <EXTI9_5_IRQHandler+0xec>
					if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000f14:	797b      	ldrb	r3, [r7, #5]
 8000f16:	4a37      	ldr	r2, [pc, #220]	; (8000ff4 <EXTI9_5_IRQHandler+0x158>)
 8000f18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f1c:	797b      	ldrb	r3, [r7, #5]
 8000f1e:	4936      	ldr	r1, [pc, #216]	; (8000ff8 <EXTI9_5_IRQHandler+0x15c>)
 8000f20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f001 f802 	bl	8001f30 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d12a      	bne.n	8000f88 <EXTI9_5_IRQHandler+0xec>
						key |= 1<<c;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2201      	movs	r2, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	b21a      	sxth	r2, r3
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <EXTI9_5_IRQHandler+0x14c>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <EXTI9_5_IRQHandler+0x14c>)
 8000f4a:	801a      	strh	r2, [r3, #0]
						key |= 1<<(r+8);
 8000f4c:	797b      	ldrb	r3, [r7, #5]
 8000f4e:	3308      	adds	r3, #8
 8000f50:	2201      	movs	r2, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <EXTI9_5_IRQHandler+0x14c>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <EXTI9_5_IRQHandler+0x14c>)
 8000f66:	801a      	strh	r2, [r3, #0]
						while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000f68:	bf00      	nop
 8000f6a:	797b      	ldrb	r3, [r7, #5]
 8000f6c:	4a21      	ldr	r2, [pc, #132]	; (8000ff4 <EXTI9_5_IRQHandler+0x158>)
 8000f6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f72:	797b      	ldrb	r3, [r7, #5]
 8000f74:	4920      	ldr	r1, [pc, #128]	; (8000ff8 <EXTI9_5_IRQHandler+0x15c>)
 8000f76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	f000 ffd7 	bl	8001f30 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f0      	beq.n	8000f6a <EXTI9_5_IRQHandler+0xce>
			for(uint8_t r=0 ; r<4 ; r++){
 8000f88:	797b      	ldrb	r3, [r7, #5]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	717b      	strb	r3, [r7, #5]
 8000f8e:	797b      	ldrb	r3, [r7, #5]
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d9b0      	bls.n	8000ef6 <EXTI9_5_IRQHandler+0x5a>
		for(uint8_t c=0 ; c<4 ; c++){
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	3301      	adds	r3, #1
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d986      	bls.n	8000eae <EXTI9_5_IRQHandler+0x12>
					}
				}
			}
		}

		keyChar = KeyPadGetChar(key);
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <EXTI9_5_IRQHandler+0x14c>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 f855 	bl	8001054 <KeyPadGetChar>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <EXTI9_5_IRQHandler+0x160>)
 8000fb0:	701a      	strb	r2, [r3, #0]
		key = 0;
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <EXTI9_5_IRQHandler+0x14c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f64a 0102 	movw	r1, #43010	; 0xa802
 8000fbe:	4810      	ldr	r0, [pc, #64]	; (8001000 <EXTI9_5_IRQHandler+0x164>)
 8000fc0:	f000 ffce 	bl	8001f60 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000fc4:	2020      	movs	r0, #32
 8000fc6:	f000 ffe5 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000fca:	2040      	movs	r0, #64	; 0x40
 8000fcc:	f000 ffe2 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000fd0:	2080      	movs	r0, #128	; 0x80
 8000fd2:	f000 ffdf 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000fd6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fda:	f000 ffdb 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000332 	.word	0x20000332
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	0800a460 	.word	0x0800a460
 8000ff4:	20000010 	.word	0x20000010
 8000ff8:	0800a468 	.word	0x0800a468
 8000ffc:	20000330 	.word	0x20000330
 8001000:	40020400 	.word	0x40020400

08001004 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <SPI1_IRQHandler+0x10>)
 800100a:	f003 fd77 	bl	8004afc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000198 	.word	0x20000198

08001018 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800101e:	f004 f8d9 	bl	80051d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000025c 	.word	0x2000025c

0800102c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <DMA2_Stream3_IRQHandler+0x10>)
 8001032:	f000 fb95 	bl	8001760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200001fc 	.word	0x200001fc

08001040 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <OTG_FS_IRQHandler+0x10>)
 8001046:	f001 f903 	bl	8002250 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20001820 	.word	0x20001820

08001054 <KeyPadGetChar>:

/* USER CODE BEGIN 1 */
char KeyPadGetChar(uint16_t	key)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
  switch(key)
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	f640 0208 	movw	r2, #2056	; 0x808
 8001064:	4293      	cmp	r3, r2
 8001066:	f300 809f 	bgt.w	80011a8 <KeyPadGetChar+0x154>
 800106a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800106e:	dc1a      	bgt.n	80010a6 <KeyPadGetChar+0x52>
 8001070:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8001074:	f300 8098 	bgt.w	80011a8 <KeyPadGetChar+0x154>
 8001078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107c:	dc2a      	bgt.n	80010d4 <KeyPadGetChar+0x80>
 800107e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8001082:	f300 8091 	bgt.w	80011a8 <KeyPadGetChar+0x154>
 8001086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800108a:	dc3b      	bgt.n	8001104 <KeyPadGetChar+0xb0>
 800108c:	2b00      	cmp	r3, #0
 800108e:	d069      	beq.n	8001164 <KeyPadGetChar+0x110>
 8001090:	2b00      	cmp	r3, #0
 8001092:	f2c0 8089 	blt.w	80011a8 <KeyPadGetChar+0x154>
 8001096:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800109a:	f300 8085 	bgt.w	80011a8 <KeyPadGetChar+0x154>
 800109e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010a2:	dc47      	bgt.n	8001134 <KeyPadGetChar+0xe0>
 80010a4:	e080      	b.n	80011a8 <KeyPadGetChar+0x154>
 80010a6:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 80010aa:	2b07      	cmp	r3, #7
 80010ac:	d87c      	bhi.n	80011a8 <KeyPadGetChar+0x154>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <KeyPadGetChar+0x60>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	08001175 	.word	0x08001175
 80010b8:	08001185 	.word	0x08001185
 80010bc:	080011a9 	.word	0x080011a9
 80010c0:	08001195 	.word	0x08001195
 80010c4:	080011a9 	.word	0x080011a9
 80010c8:	080011a9 	.word	0x080011a9
 80010cc:	080011a9 	.word	0x080011a9
 80010d0:	080011a5 	.word	0x080011a5
 80010d4:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d865      	bhi.n	80011a8 <KeyPadGetChar+0x154>
 80010dc:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <KeyPadGetChar+0x90>)
 80010de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e2:	bf00      	nop
 80010e4:	08001171 	.word	0x08001171
 80010e8:	08001181 	.word	0x08001181
 80010ec:	080011a9 	.word	0x080011a9
 80010f0:	08001191 	.word	0x08001191
 80010f4:	080011a9 	.word	0x080011a9
 80010f8:	080011a9 	.word	0x080011a9
 80010fc:	080011a9 	.word	0x080011a9
 8001100:	080011a1 	.word	0x080011a1
 8001104:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001108:	2b07      	cmp	r3, #7
 800110a:	d84d      	bhi.n	80011a8 <KeyPadGetChar+0x154>
 800110c:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <KeyPadGetChar+0xc0>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	0800116d 	.word	0x0800116d
 8001118:	0800117d 	.word	0x0800117d
 800111c:	080011a9 	.word	0x080011a9
 8001120:	0800118d 	.word	0x0800118d
 8001124:	080011a9 	.word	0x080011a9
 8001128:	080011a9 	.word	0x080011a9
 800112c:	080011a9 	.word	0x080011a9
 8001130:	0800119d 	.word	0x0800119d
 8001134:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8001138:	2b07      	cmp	r3, #7
 800113a:	d835      	bhi.n	80011a8 <KeyPadGetChar+0x154>
 800113c:	a201      	add	r2, pc, #4	; (adr r2, 8001144 <KeyPadGetChar+0xf0>)
 800113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001142:	bf00      	nop
 8001144:	08001169 	.word	0x08001169
 8001148:	08001179 	.word	0x08001179
 800114c:	080011a9 	.word	0x080011a9
 8001150:	08001189 	.word	0x08001189
 8001154:	080011a9 	.word	0x080011a9
 8001158:	080011a9 	.word	0x080011a9
 800115c:	080011a9 	.word	0x080011a9
 8001160:	08001199 	.word	0x08001199
  {
    case 0x0000:
      return 0;
 8001164:	2300      	movs	r3, #0
 8001166:	e020      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0101:
			return '1';
 8001168:	2331      	movs	r3, #49	; 0x31
 800116a:	e01e      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0201:
			return '2';
 800116c:	2332      	movs	r3, #50	; 0x32
 800116e:	e01c      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0401:
			return '3';
 8001170:	2333      	movs	r3, #51	; 0x33
 8001172:	e01a      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0801:
			return 'A';
 8001174:	2341      	movs	r3, #65	; 0x41
 8001176:	e018      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0102:
			return '4';
 8001178:	2334      	movs	r3, #52	; 0x34
 800117a:	e016      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0202:
			return '5';
 800117c:	2335      	movs	r3, #53	; 0x35
 800117e:	e014      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0402:
			return '6';
 8001180:	2336      	movs	r3, #54	; 0x36
 8001182:	e012      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0802:
			return 'B';
 8001184:	2342      	movs	r3, #66	; 0x42
 8001186:	e010      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0104:
			return '7';
 8001188:	2337      	movs	r3, #55	; 0x37
 800118a:	e00e      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0204:
			return '8';
 800118c:	2338      	movs	r3, #56	; 0x38
 800118e:	e00c      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0404:
			return '9';
 8001190:	2339      	movs	r3, #57	; 0x39
 8001192:	e00a      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0804:
			return 'C';
 8001194:	2343      	movs	r3, #67	; 0x43
 8001196:	e008      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0108:
			return '*';
 8001198:	232a      	movs	r3, #42	; 0x2a
 800119a:	e006      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0208:
			return '0';
 800119c:	2330      	movs	r3, #48	; 0x30
 800119e:	e004      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0408:
			return '#';
 80011a0:	2323      	movs	r3, #35	; 0x23
 80011a2:	e002      	b.n	80011aa <KeyPadGetChar+0x156>
		case 0x0808:
			return 'D';
 80011a4:	2344      	movs	r3, #68	; 0x44
 80011a6:	e000      	b.n	80011aa <KeyPadGetChar+0x156>
		default:
			return 0;
 80011a8:	2300      	movs	r3, #0
	}
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c0:	4a14      	ldr	r2, [pc, #80]	; (8001214 <_sbrk+0x5c>)
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <_sbrk+0x60>)
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <_sbrk+0x64>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <_sbrk+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d207      	bcs.n	80011f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e8:	f009 f892 	bl	800a310 <__errno>
 80011ec:	4603      	mov	r3, r0
 80011ee:	220c      	movs	r2, #12
 80011f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	e009      	b.n	800120c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <_sbrk+0x64>)
 8001208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20050000 	.word	0x20050000
 8001218:	00000400 	.word	0x00000400
 800121c:	20000338 	.word	0x20000338
 8001220:	20001e70 	.word	0x20001e70

08001224 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800124e:	490e      	ldr	r1, [pc, #56]	; (8001288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001254:	e002      	b.n	800125c <LoopCopyDataInit>

08001256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125a:	3304      	adds	r3, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800125c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001260:	d3f9      	bcc.n	8001256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001264:	4c0b      	ldr	r4, [pc, #44]	; (8001294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001268:	e001      	b.n	800126e <LoopFillZerobss>

0800126a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800126c:	3204      	adds	r2, #4

0800126e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001270:	d3fb      	bcc.n	800126a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001272:	f7ff ffd7 	bl	8001224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001276:	f009 f851 	bl	800a31c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127a:	f7ff fa8f 	bl	800079c <main>
  bx  lr    
 800127e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001280:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800128c:	0800a4a0 	.word	0x0800a4a0
  ldr r2, =_sbss
 8001290:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001294:	20001e70 	.word	0x20001e70

08001298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC_IRQHandler>

0800129a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129e:	2003      	movs	r0, #3
 80012a0:	f000 f94c 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 f805 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012aa:	f7ff fc97 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f967 	bl	80015a6 <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 f92f 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000020 	.word	0x20000020
 800130c:	20000028 	.word	0x20000028
 8001310:	20000024 	.word	0x20000024

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000028 	.word	0x20000028
 8001338:	2000033c 	.word	0x2000033c

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	2000033c 	.word	0x2000033c

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffde 	bl	800133c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000028 	.word	0x20000028

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <__NVIC_SetPriorityGrouping+0x40>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <__NVIC_SetPriorityGrouping+0x40>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00
 80013e0:	05fa0000 	.word	0x05fa0000

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <__NVIC_EnableIRQ+0x38>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff8e 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff29 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff3e 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff8e 	bl	8001490 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5d 	bl	800143c <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff31 	bl	8001400 <__NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffa2 	bl	80014f8 <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff feb6 	bl	800133c <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e099      	b.n	8001710 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015fc:	e00f      	b.n	800161e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015fe:	f7ff fe9d 	bl	800133c <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b05      	cmp	r3, #5
 800160a:	d908      	bls.n	800161e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2220      	movs	r2, #32
 8001610:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2203      	movs	r2, #3
 8001616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e078      	b.n	8001710 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1e8      	bne.n	80015fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	4b38      	ldr	r3, [pc, #224]	; (8001718 <HAL_DMA_Init+0x158>)
 8001638:	4013      	ands	r3, r2
 800163a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800164a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001656:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001662:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	4313      	orrs	r3, r2
 800166e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	2b04      	cmp	r3, #4
 8001676:	d107      	bne.n	8001688 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	4313      	orrs	r3, r2
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4313      	orrs	r3, r2
 8001686:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f023 0307 	bic.w	r3, r3, #7
 800169e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d117      	bne.n	80016e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00e      	beq.n	80016e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 fa0b 	bl	8001ae0 <DMA_CheckFifoParam>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2240      	movs	r2, #64	; 0x40
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016de:	2301      	movs	r3, #1
 80016e0:	e016      	b.n	8001710 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f9c2 	bl	8001a74 <DMA_CalcBaseAndBitshift>
 80016f0:	4603      	mov	r3, r0
 80016f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f8:	223f      	movs	r2, #63	; 0x3f
 80016fa:	409a      	lsls	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	f010803f 	.word	0xf010803f

0800171c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d004      	beq.n	800173a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e00c      	b.n	8001754 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2205      	movs	r2, #5
 800173e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800176c:	4b8e      	ldr	r3, [pc, #568]	; (80019a8 <HAL_DMA_IRQHandler+0x248>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a8e      	ldr	r2, [pc, #568]	; (80019ac <HAL_DMA_IRQHandler+0x24c>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	0a9b      	lsrs	r3, r3, #10
 8001778:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178a:	2208      	movs	r2, #8
 800178c:	409a      	lsls	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4013      	ands	r3, r2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d01a      	beq.n	80017cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d013      	beq.n	80017cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0204 	bic.w	r2, r2, #4
 80017b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	2208      	movs	r2, #8
 80017ba:	409a      	lsls	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c4:	f043 0201 	orr.w	r2, r3, #1
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d0:	2201      	movs	r2, #1
 80017d2:	409a      	lsls	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d012      	beq.n	8001802 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00b      	beq.n	8001802 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	2201      	movs	r2, #1
 80017f0:	409a      	lsls	r2, r3
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fa:	f043 0202 	orr.w	r2, r3, #2
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	2204      	movs	r2, #4
 8001808:	409a      	lsls	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4013      	ands	r3, r2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d012      	beq.n	8001838 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00b      	beq.n	8001838 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001824:	2204      	movs	r2, #4
 8001826:	409a      	lsls	r2, r3
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001830:	f043 0204 	orr.w	r2, r3, #4
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183c:	2210      	movs	r2, #16
 800183e:	409a      	lsls	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d043      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d03c      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185a:	2210      	movs	r2, #16
 800185c:	409a      	lsls	r2, r3
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d018      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d108      	bne.n	8001890 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	2b00      	cmp	r3, #0
 8001884:	d024      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	4798      	blx	r3
 800188e:	e01f      	b.n	80018d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001894:	2b00      	cmp	r3, #0
 8001896:	d01b      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	4798      	blx	r3
 80018a0:	e016      	b.n	80018d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d107      	bne.n	80018c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0208 	bic.w	r2, r2, #8
 80018be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d4:	2220      	movs	r2, #32
 80018d6:	409a      	lsls	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 808f 	beq.w	8001a00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 8087 	beq.w	8001a00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f6:	2220      	movs	r2, #32
 80018f8:	409a      	lsls	r2, r3
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b05      	cmp	r3, #5
 8001908:	d136      	bne.n	8001978 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0216 	bic.w	r2, r2, #22
 8001918:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695a      	ldr	r2, [r3, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001928:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	d103      	bne.n	800193a <HAL_DMA_IRQHandler+0x1da>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0208 	bic.w	r2, r2, #8
 8001948:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194e:	223f      	movs	r2, #63	; 0x3f
 8001950:	409a      	lsls	r2, r3
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196a:	2b00      	cmp	r3, #0
 800196c:	d07e      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	4798      	blx	r3
        }
        return;
 8001976:	e079      	b.n	8001a6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d01d      	beq.n	80019c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10d      	bne.n	80019b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001998:	2b00      	cmp	r3, #0
 800199a:	d031      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	4798      	blx	r3
 80019a4:	e02c      	b.n	8001a00 <HAL_DMA_IRQHandler+0x2a0>
 80019a6:	bf00      	nop
 80019a8:	20000020 	.word	0x20000020
 80019ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d023      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	4798      	blx	r3
 80019c0:	e01e      	b.n	8001a00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10f      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0210 	bic.w	r2, r2, #16
 80019de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d032      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d022      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2205      	movs	r2, #5
 8001a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0201 	bic.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d307      	bcc.n	8001a48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f2      	bne.n	8001a2c <HAL_DMA_IRQHandler+0x2cc>
 8001a46:	e000      	b.n	8001a4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4798      	blx	r3
 8001a6a:	e000      	b.n	8001a6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a6c:	bf00      	nop
    }
  }
}
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	3b10      	subs	r3, #16
 8001a84:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <DMA_CalcBaseAndBitshift+0x60>)
 8001a86:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8a:	091b      	lsrs	r3, r3, #4
 8001a8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <DMA_CalcBaseAndBitshift+0x64>)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d908      	bls.n	8001ab4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <DMA_CalcBaseAndBitshift+0x68>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	1d1a      	adds	r2, r3, #4
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	659a      	str	r2, [r3, #88]	; 0x58
 8001ab2:	e006      	b.n	8001ac2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <DMA_CalcBaseAndBitshift+0x68>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	aaaaaaab 	.word	0xaaaaaaab
 8001ad8:	0800a488 	.word	0x0800a488
 8001adc:	fffffc00 	.word	0xfffffc00

08001ae0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d11f      	bne.n	8001b3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d856      	bhi.n	8001bae <DMA_CheckFifoParam+0xce>
 8001b00:	a201      	add	r2, pc, #4	; (adr r2, 8001b08 <DMA_CheckFifoParam+0x28>)
 8001b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b06:	bf00      	nop
 8001b08:	08001b19 	.word	0x08001b19
 8001b0c:	08001b2b 	.word	0x08001b2b
 8001b10:	08001b19 	.word	0x08001b19
 8001b14:	08001baf 	.word	0x08001baf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d046      	beq.n	8001bb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b28:	e043      	b.n	8001bb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b32:	d140      	bne.n	8001bb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b38:	e03d      	b.n	8001bb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b42:	d121      	bne.n	8001b88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d837      	bhi.n	8001bba <DMA_CheckFifoParam+0xda>
 8001b4a:	a201      	add	r2, pc, #4	; (adr r2, 8001b50 <DMA_CheckFifoParam+0x70>)
 8001b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b50:	08001b61 	.word	0x08001b61
 8001b54:	08001b67 	.word	0x08001b67
 8001b58:	08001b61 	.word	0x08001b61
 8001b5c:	08001b79 	.word	0x08001b79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
      break;
 8001b64:	e030      	b.n	8001bc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d025      	beq.n	8001bbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b76:	e022      	b.n	8001bbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b80:	d11f      	bne.n	8001bc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b86:	e01c      	b.n	8001bc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d903      	bls.n	8001b96 <DMA_CheckFifoParam+0xb6>
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d003      	beq.n	8001b9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b94:	e018      	b.n	8001bc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
      break;
 8001b9a:	e015      	b.n	8001bc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00e      	beq.n	8001bc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
      break;
 8001bac:	e00b      	b.n	8001bc6 <DMA_CheckFifoParam+0xe6>
      break;
 8001bae:	bf00      	nop
 8001bb0:	e00a      	b.n	8001bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bb2:	bf00      	nop
 8001bb4:	e008      	b.n	8001bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bb6:	bf00      	nop
 8001bb8:	e006      	b.n	8001bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bba:	bf00      	nop
 8001bbc:	e004      	b.n	8001bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bbe:	bf00      	nop
 8001bc0:	e002      	b.n	8001bc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bc2:	bf00      	nop
 8001bc4:	e000      	b.n	8001bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bc6:	bf00      	nop
    }
  } 
  
  return status; 
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop

08001bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e175      	b.n	8001ee4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 8164 	bne.w	8001ede <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d005      	beq.n	8001c2e <HAL_GPIO_Init+0x56>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d130      	bne.n	8001c90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d017      	beq.n	8001ccc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d123      	bne.n	8001d20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80be 	beq.w	8001ede <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	4b66      	ldr	r3, [pc, #408]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a65      	ldr	r2, [pc, #404]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b63      	ldr	r3, [pc, #396]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d7a:	4a61      	ldr	r2, [pc, #388]	; (8001f00 <HAL_GPIO_Init+0x328>)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_GPIO_Init+0x32c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d037      	beq.n	8001e16 <HAL_GPIO_Init+0x23e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a57      	ldr	r2, [pc, #348]	; (8001f08 <HAL_GPIO_Init+0x330>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d031      	beq.n	8001e12 <HAL_GPIO_Init+0x23a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a56      	ldr	r2, [pc, #344]	; (8001f0c <HAL_GPIO_Init+0x334>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d02b      	beq.n	8001e0e <HAL_GPIO_Init+0x236>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a55      	ldr	r2, [pc, #340]	; (8001f10 <HAL_GPIO_Init+0x338>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d025      	beq.n	8001e0a <HAL_GPIO_Init+0x232>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a54      	ldr	r2, [pc, #336]	; (8001f14 <HAL_GPIO_Init+0x33c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01f      	beq.n	8001e06 <HAL_GPIO_Init+0x22e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a53      	ldr	r2, [pc, #332]	; (8001f18 <HAL_GPIO_Init+0x340>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d019      	beq.n	8001e02 <HAL_GPIO_Init+0x22a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a52      	ldr	r2, [pc, #328]	; (8001f1c <HAL_GPIO_Init+0x344>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <HAL_GPIO_Init+0x226>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a51      	ldr	r2, [pc, #324]	; (8001f20 <HAL_GPIO_Init+0x348>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00d      	beq.n	8001dfa <HAL_GPIO_Init+0x222>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a50      	ldr	r2, [pc, #320]	; (8001f24 <HAL_GPIO_Init+0x34c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d007      	beq.n	8001df6 <HAL_GPIO_Init+0x21e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4f      	ldr	r2, [pc, #316]	; (8001f28 <HAL_GPIO_Init+0x350>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <HAL_GPIO_Init+0x21a>
 8001dee:	2309      	movs	r3, #9
 8001df0:	e012      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001df2:	230a      	movs	r3, #10
 8001df4:	e010      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001df6:	2308      	movs	r3, #8
 8001df8:	e00e      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	e00c      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001dfe:	2306      	movs	r3, #6
 8001e00:	e00a      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e02:	2305      	movs	r3, #5
 8001e04:	e008      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e06:	2304      	movs	r3, #4
 8001e08:	e006      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e004      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e16:	2300      	movs	r3, #0
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	f002 0203 	and.w	r2, r2, #3
 8001e1e:	0092      	lsls	r2, r2, #2
 8001e20:	4093      	lsls	r3, r2
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e28:	4935      	ldr	r1, [pc, #212]	; (8001f00 <HAL_GPIO_Init+0x328>)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	3302      	adds	r3, #2
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5a:	4a34      	ldr	r2, [pc, #208]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e60:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e84:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e8a:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eae:	4a1f      	ldr	r2, [pc, #124]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed8:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <HAL_GPIO_Init+0x354>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b0f      	cmp	r3, #15
 8001ee8:	f67f ae86 	bls.w	8001bf8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40013800 	.word	0x40013800
 8001f04:	40020000 	.word	0x40020000
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	40020800 	.word	0x40020800
 8001f10:	40020c00 	.word	0x40020c00
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40021400 	.word	0x40021400
 8001f1c:	40021800 	.word	0x40021800
 8001f20:	40021c00 	.word	0x40021c00
 8001f24:	40022000 	.word	0x40022000
 8001f28:	40022400 	.word	0x40022400
 8001f2c:	40013c00 	.word	0x40013c00

08001f30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	e001      	b.n	8001f52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f70:	787b      	ldrb	r3, [r7, #1]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f76:	887a      	ldrh	r2, [r7, #2]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f7c:	e003      	b.n	8001f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	041a      	lsls	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	619a      	str	r2, [r3, #24]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d006      	beq.n	8001fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fdfa 	bl	8000bac <HAL_GPIO_EXTI_Callback>
  }
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40013c00 	.word	0x40013c00

08001fc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc6:	b08f      	sub	sp, #60	; 0x3c
 8001fc8:	af0a      	add	r7, sp, #40	; 0x28
 8001fca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e116      	b.n	8002204 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d106      	bne.n	8001ff6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f007 fd3b 	bl	8009a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f004 f84a 	bl	80060ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	687e      	ldr	r6, [r7, #4]
 8002022:	466d      	mov	r5, sp
 8002024:	f106 0410 	add.w	r4, r6, #16
 8002028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002030:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002034:	e885 0003 	stmia.w	r5, {r0, r1}
 8002038:	1d33      	adds	r3, r6, #4
 800203a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203c:	6838      	ldr	r0, [r7, #0]
 800203e:	f003 ff2b 	bl	8005e98 <USB_CoreInit>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0d7      	b.n	8002204 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f004 f838 	bl	80060d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	e04a      	b.n	80020fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	333d      	adds	r3, #61	; 0x3d
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	333c      	adds	r3, #60	; 0x3c
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	b298      	uxth	r0, r3
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3344      	adds	r3, #68	; 0x44
 80020a2:	4602      	mov	r2, r0
 80020a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	3340      	adds	r3, #64	; 0x40
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3348      	adds	r3, #72	; 0x48
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	334c      	adds	r3, #76	; 0x4c
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3354      	adds	r3, #84	; 0x54
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	3301      	adds	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3af      	bcc.n	8002066 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
 800210a:	e044      	b.n	8002196 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	3301      	adds	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	429a      	cmp	r2, r3
 800219e:	d3b5      	bcc.n	800210c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	687e      	ldr	r6, [r7, #4]
 80021a8:	466d      	mov	r5, sp
 80021aa:	f106 0410 	add.w	r4, r6, #16
 80021ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80021be:	1d33      	adds	r3, r6, #4
 80021c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c2:	6838      	ldr	r0, [r7, #0]
 80021c4:	f003 ffd0 	bl	8006168 <USB_DevInit>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2202      	movs	r2, #2
 80021d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e014      	b.n	8002204 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d102      	bne.n	80021f8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f001 f97a 	bl	80034ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f005 f91e 	bl	800743e <USB_DevDisconnect>

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800220c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_PCD_Start+0x16>
 800221e:	2302      	movs	r3, #2
 8002220:	e012      	b.n	8002248 <HAL_PCD_Start+0x3c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f003 ff2c 	bl	800608c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f005 f8df 	bl	80073fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b08d      	sub	sp, #52	; 0x34
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f005 f99d 	bl	80075a6 <USB_GetMode>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 84b7 	bne.w	8002be2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f005 f901 	bl	8007480 <USB_ReadInterrupts>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 84ad 	beq.w	8002be0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f005 f8ee 	bl	8007480 <USB_ReadInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d107      	bne.n	80022be <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f002 0202 	and.w	r2, r2, #2
 80022bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f005 f8dc 	bl	8007480 <USB_ReadInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d161      	bne.n	8002396 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699a      	ldr	r2, [r3, #24]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0210 	bic.w	r2, r2, #16
 80022e0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	f003 020f 	and.w	r2, r3, #15
 80022ee:	4613      	mov	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	3304      	adds	r3, #4
 8002300:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	0c5b      	lsrs	r3, r3, #17
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	2b02      	cmp	r3, #2
 800230c:	d124      	bne.n	8002358 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002314:	4013      	ands	r3, r2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d035      	beq.n	8002386 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002324:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002328:	b29b      	uxth	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	6a38      	ldr	r0, [r7, #32]
 800232e:	f004 ff13 	bl	8007158 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800233e:	441a      	add	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	6a1a      	ldr	r2, [r3, #32]
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002350:	441a      	add	r2, r3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	621a      	str	r2, [r3, #32]
 8002356:	e016      	b.n	8002386 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	0c5b      	lsrs	r3, r3, #17
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	2b06      	cmp	r3, #6
 8002362:	d110      	bne.n	8002386 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800236a:	2208      	movs	r2, #8
 800236c:	4619      	mov	r1, r3
 800236e:	6a38      	ldr	r0, [r7, #32]
 8002370:	f004 fef2 	bl	8007158 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	6a1a      	ldr	r2, [r3, #32]
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002380:	441a      	add	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0210 	orr.w	r2, r2, #16
 8002394:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f005 f870 	bl	8007480 <USB_ReadInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023aa:	f040 80a7 	bne.w	80024fc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f005 f875 	bl	80074a6 <USB_ReadDevAllOutEpInterrupt>
 80023bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80023be:	e099      	b.n	80024f4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 808e 	beq.w	80024e8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f005 f899 	bl	800750e <USB_ReadDevOutEPInterrupt>
 80023dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00c      	beq.n	8002402 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f4:	461a      	mov	r2, r3
 80023f6:	2301      	movs	r3, #1
 80023f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 feef 	bl	80031e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00c      	beq.n	8002426 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002418:	461a      	mov	r2, r3
 800241a:	2308      	movs	r3, #8
 800241c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800241e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 ffc5 	bl	80033b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243c:	461a      	mov	r2, r3
 800243e:	2310      	movs	r3, #16
 8002440:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d030      	beq.n	80024ae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002454:	2b80      	cmp	r3, #128	; 0x80
 8002456:	d109      	bne.n	800246c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800246a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800246c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	3304      	adds	r3, #4
 8002480:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	78db      	ldrb	r3, [r3, #3]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d108      	bne.n	800249c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2200      	movs	r2, #0
 800248e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	b2db      	uxtb	r3, r3
 8002494:	4619      	mov	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f007 fc1c 	bl	8009cd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a8:	461a      	mov	r2, r3
 80024aa:	2302      	movs	r3, #2
 80024ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c4:	461a      	mov	r2, r3
 80024c6:	2320      	movs	r3, #32
 80024c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e0:	461a      	mov	r2, r3
 80024e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	3301      	adds	r3, #1
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f47f af62 	bne.w	80023c0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f004 ffbd 	bl	8007480 <USB_ReadInterrupts>
 8002506:	4603      	mov	r3, r0
 8002508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800250c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002510:	f040 80db 	bne.w	80026ca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f004 ffde 	bl	80074da <USB_ReadDevAllInEpInterrupt>
 800251e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002524:	e0cd      	b.n	80026c2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80c2 	beq.w	80026b6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f005 f804 	bl	800754a <USB_ReadDevInEPInterrupt>
 8002542:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d057      	beq.n	80025fe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	2201      	movs	r2, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	43db      	mvns	r3, r3
 8002568:	69f9      	ldr	r1, [r7, #28]
 800256a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800256e:	4013      	ands	r3, r2
 8002570:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	4413      	add	r3, r2
 800257a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800257e:	461a      	mov	r2, r3
 8002580:	2301      	movs	r3, #1
 8002582:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d132      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	334c      	adds	r3, #76	; 0x4c
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4403      	add	r3, r0
 80025ac:	3348      	adds	r3, #72	; 0x48
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4419      	add	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4403      	add	r3, r0
 80025c0:	334c      	adds	r3, #76	; 0x4c
 80025c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d113      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x3a2>
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3354      	adds	r3, #84	; 0x54
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d108      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025ea:	461a      	mov	r2, r3
 80025ec:	2101      	movs	r1, #1
 80025ee:	f005 f80d 	bl	800760c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	4619      	mov	r1, r3
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f007 fae6 	bl	8009bca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002614:	461a      	mov	r2, r3
 8002616:	2308      	movs	r3, #8
 8002618:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4413      	add	r3, r2
 800262c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002630:	461a      	mov	r2, r3
 8002632:	2310      	movs	r3, #16
 8002634:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800264c:	461a      	mov	r2, r3
 800264e:	2340      	movs	r3, #64	; 0x40
 8002650:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d023      	beq.n	80026a4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800265c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265e:	6a38      	ldr	r0, [r7, #32]
 8002660:	f003 fee0 	bl	8006424 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	3338      	adds	r3, #56	; 0x38
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	3304      	adds	r3, #4
 8002676:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	78db      	ldrb	r3, [r3, #3]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d108      	bne.n	8002692 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2200      	movs	r2, #0
 8002684:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f007 fb33 	bl	8009cf8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	4413      	add	r3, r2
 800269a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800269e:	461a      	mov	r2, r3
 80026a0:	2302      	movs	r3, #2
 80026a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fd08 	bl	80030c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	3301      	adds	r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f47f af2e 	bne.w	8002526 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f004 fed6 	bl	8007480 <USB_ReadInterrupts>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026de:	d122      	bne.n	8002726 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d108      	bne.n	8002710 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002706:	2100      	movs	r1, #0
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f007 fcad 	bl	800a068 <HAL_PCDEx_LPM_Callback>
 800270e:	e002      	b.n	8002716 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f007 fad1 	bl	8009cb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002724:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f004 fea8 	bl	8007480 <USB_ReadInterrupts>
 8002730:	4603      	mov	r3, r0
 8002732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800273a:	d112      	bne.n	8002762 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d102      	bne.n	8002752 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f007 fa8d 	bl	8009c6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002760:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f004 fe8a 	bl	8007480 <USB_ReadInterrupts>
 800276c:	4603      	mov	r3, r0
 800276e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002776:	d121      	bne.n	80027bc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002786:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d111      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	f003 020f 	and.w	r2, r3, #15
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80027ac:	2101      	movs	r1, #1
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f007 fc5a 	bl	800a068 <HAL_PCDEx_LPM_Callback>
 80027b4:	e002      	b.n	80027bc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f007 fa58 	bl	8009c6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f004 fe5d 	bl	8007480 <USB_ReadInterrupts>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d0:	f040 80b7 	bne.w	8002942 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2110      	movs	r1, #16
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 fe18 	bl	8006424 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f4:	2300      	movs	r3, #0
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f8:	e046      	b.n	8002888 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	4413      	add	r3, r2
 8002802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002806:	461a      	mov	r2, r3
 8002808:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800280c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4413      	add	r3, r2
 8002816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800281e:	0151      	lsls	r1, r2, #5
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	440a      	add	r2, r1
 8002824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002828:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800282c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	4413      	add	r3, r2
 8002836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283a:	461a      	mov	r2, r3
 800283c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002840:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002852:	0151      	lsls	r1, r2, #5
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	440a      	add	r2, r1
 8002858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800285c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002860:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002872:	0151      	lsls	r1, r2, #5
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	440a      	add	r2, r1
 8002878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800287c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002880:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	3301      	adds	r3, #1
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800288e:	429a      	cmp	r2, r3
 8002890:	d3b3      	bcc.n	80027fa <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d016      	beq.n	80028dc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028be:	f043 030b 	orr.w	r3, r3, #11
 80028c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d4:	f043 030b 	orr.w	r3, r3, #11
 80028d8:	6453      	str	r3, [r2, #68]	; 0x44
 80028da:	e015      	b.n	8002908 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ea:	4619      	mov	r1, r3
 80028ec:	f242 032b 	movw	r3, #8235	; 0x202b
 80028f0:	4313      	orrs	r3, r2
 80028f2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002902:	f043 030b 	orr.w	r3, r3, #11
 8002906:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002916:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800291a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800292c:	461a      	mov	r2, r3
 800292e:	f004 fe6d 	bl	800760c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002940:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f004 fd9a 	bl	8007480 <USB_ReadInterrupts>
 800294c:	4603      	mov	r3, r0
 800294e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002956:	d124      	bne.n	80029a2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f004 fe31 	bl	80075c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f003 fdd9 	bl	800651e <USB_GetDevSpeed>
 800296c:	4603      	mov	r3, r0
 800296e:	461a      	mov	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681c      	ldr	r4, [r3, #0]
 8002978:	f001 fa82 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 800297c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	4620      	mov	r0, r4
 8002988:	f003 fade 	bl	8005f48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f007 f944 	bl	8009c1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f004 fd6a 	bl	8007480 <USB_ReadInterrupts>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d10a      	bne.n	80029cc <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f007 f921 	bl	8009bfe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f002 0208 	and.w	r2, r2, #8
 80029ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f004 fd55 	bl	8007480 <USB_ReadInterrupts>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029dc:	2b80      	cmp	r3, #128	; 0x80
 80029de:	d122      	bne.n	8002a26 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ec:	2301      	movs	r3, #1
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
 80029f0:	e014      	b.n	8002a1c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d105      	bne.n	8002a16 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fb27 	bl	8003064 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	3301      	adds	r3, #1
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3e5      	bcc.n	80029f2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 fd28 	bl	8007480 <USB_ReadInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a3a:	d13b      	bne.n	8002ab4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a40:	e02b      	b.n	8002a9a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	3340      	adds	r3, #64	; 0x40
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d115      	bne.n	8002a94 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	da12      	bge.n	8002a94 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	333f      	adds	r3, #63	; 0x3f
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fae8 	bl	8003064 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	3301      	adds	r3, #1
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d3ce      	bcc.n	8002a42 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f004 fce1 	bl	8007480 <USB_ReadInterrupts>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ac8:	d155      	bne.n	8002b76 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aca:	2301      	movs	r3, #1
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ace:	e045      	b.n	8002b5c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d12e      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002af8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	da2b      	bge.n	8002b56 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b0a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d121      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b52:	6053      	str	r3, [r2, #4]
            break;
 8002b54:	e007      	b.n	8002b66 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	3301      	adds	r3, #1
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d3b4      	bcc.n	8002ad0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f004 fc80 	bl	8007480 <USB_ReadInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8a:	d10a      	bne.n	8002ba2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f007 f8c5 	bl	8009d1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 fc6a 	bl	8007480 <USB_ReadInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d115      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f007 f8b5 	bl	8009d38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6859      	ldr	r1, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	e000      	b.n	8002be2 <HAL_PCD_IRQHandler+0x992>
      return;
 8002be0:	bf00      	nop
    }
  }
}
 8002be2:	3734      	adds	r7, #52	; 0x34
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}

08002be8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_PCD_SetAddress+0x1a>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e013      	b.n	8002c2a <HAL_PCD_SetAddress+0x42>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f004 fbc8 	bl	80073b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	4608      	mov	r0, r1
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4603      	mov	r3, r0
 8002c42:	70fb      	strb	r3, [r7, #3]
 8002c44:	460b      	mov	r3, r1
 8002c46:	803b      	strh	r3, [r7, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	da0f      	bge.n	8002c78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	f003 020f 	and.w	r2, r3, #15
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	3338      	adds	r3, #56	; 0x38
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	705a      	strb	r2, [r3, #1]
 8002c76:	e00f      	b.n	8002c98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	f003 020f 	and.w	r2, r3, #15
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3304      	adds	r3, #4
 8002c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ca4:	883a      	ldrh	r2, [r7, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	78ba      	ldrb	r2, [r7, #2]
 8002cae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	785b      	ldrb	r3, [r3, #1]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d004      	beq.n	8002cc2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cc2:	78bb      	ldrb	r3, [r7, #2]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d102      	bne.n	8002cce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_PCD_EP_Open+0xaa>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e00e      	b.n	8002cfa <HAL_PCD_EP_Open+0xc8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68f9      	ldr	r1, [r7, #12]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 fc3c 	bl	8006568 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002cf8:	7afb      	ldrb	r3, [r7, #11]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	da0f      	bge.n	8002d36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	3338      	adds	r3, #56	; 0x38
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	705a      	strb	r2, [r3, #1]
 8002d34:	e00f      	b.n	8002d56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	f003 020f 	and.w	r2, r3, #15
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_PCD_EP_Close+0x6e>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e00e      	b.n	8002d8e <HAL_PCD_EP_Close+0x8c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68f9      	ldr	r1, [r7, #12]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f003 fc7a 	bl	8006678 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b086      	sub	sp, #24
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
 8002da2:	460b      	mov	r3, r1
 8002da4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002da6:	7afb      	ldrb	r3, [r7, #11]
 8002da8:	f003 020f 	and.w	r2, r3, #15
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd8:	7afb      	ldrb	r3, [r7, #11]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002df2:	7afb      	ldrb	r3, [r7, #11]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	6979      	ldr	r1, [r7, #20]
 8002e0a:	f003 ff61 	bl	8006cd0 <USB_EP0StartXfer>
 8002e0e:	e008      	b.n	8002e22 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6979      	ldr	r1, [r7, #20]
 8002e1e:	f003 fd07 	bl	8006830 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	f003 020f 	and.w	r2, r3, #15
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6c:	7afb      	ldrb	r3, [r7, #11]
 8002e6e:	f003 020f 	and.w	r2, r3, #15
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	3338      	adds	r3, #56	; 0x38
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	3304      	adds	r3, #4
 8002e82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2200      	movs	r2, #0
 8002e94:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9c:	7afb      	ldrb	r3, [r7, #11]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d102      	bne.n	8002eb6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eb6:	7afb      	ldrb	r3, [r7, #11]
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	6979      	ldr	r1, [r7, #20]
 8002ece:	f003 feff 	bl	8006cd0 <USB_EP0StartXfer>
 8002ed2:	e008      	b.n	8002ee6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	6979      	ldr	r1, [r7, #20]
 8002ee2:	f003 fca5 	bl	8006830 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	f003 020f 	and.w	r2, r3, #15
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d901      	bls.n	8002f0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e050      	b.n	8002fb0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	da0f      	bge.n	8002f36 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	f003 020f 	and.w	r2, r3, #15
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	3338      	adds	r3, #56	; 0x38
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	705a      	strb	r2, [r3, #1]
 8002f34:	e00d      	b.n	8002f52 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	4413      	add	r3, r2
 8002f48:	3304      	adds	r3, #4
 8002f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_PCD_EP_SetStall+0x82>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e01e      	b.n	8002fb0 <HAL_PCD_EP_SetStall+0xc0>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68f9      	ldr	r1, [r7, #12]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 f941 	bl	8007208 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10a      	bne.n	8002fa6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	b2d9      	uxtb	r1, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f004 fb33 	bl	800760c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	f003 020f 	and.w	r2, r3, #15
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d901      	bls.n	8002fd6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e042      	b.n	800305c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	da0f      	bge.n	8002ffe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	f003 020f 	and.w	r2, r3, #15
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	3338      	adds	r3, #56	; 0x38
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	705a      	strb	r2, [r3, #1]
 8002ffc:	e00f      	b.n	800301e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	f003 020f 	and.w	r2, r3, #15
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	3304      	adds	r3, #4
 8003016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	b2da      	uxtb	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_PCD_EP_ClrStall+0x86>
 800303a:	2302      	movs	r3, #2
 800303c:	e00e      	b.n	800305c <HAL_PCD_EP_ClrStall+0xa4>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68f9      	ldr	r1, [r7, #12]
 800304c:	4618      	mov	r0, r3
 800304e:	f004 f949 	bl	80072e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003074:	2b00      	cmp	r3, #0
 8003076:	da0c      	bge.n	8003092 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	f003 020f 	and.w	r2, r3, #15
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	3338      	adds	r3, #56	; 0x38
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	3304      	adds	r3, #4
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e00c      	b.n	80030ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	3304      	adds	r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68f9      	ldr	r1, [r7, #12]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 ff68 	bl	8006f88 <USB_EPStopXfer>
 80030b8:	4603      	mov	r3, r0
 80030ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030bc:	7afb      	ldrb	r3, [r7, #11]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b08a      	sub	sp, #40	; 0x28
 80030ca:	af02      	add	r7, sp, #8
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	3338      	adds	r3, #56	; 0x38
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	3304      	adds	r3, #4
 80030ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d901      	bls.n	80030fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e06c      	b.n	80031d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	429a      	cmp	r2, r3
 8003112:	d902      	bls.n	800311a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3303      	adds	r3, #3
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003122:	e02b      	b.n	800317c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	429a      	cmp	r2, r3
 8003138:	d902      	bls.n	8003140 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	3303      	adds	r3, #3
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6919      	ldr	r1, [r3, #16]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003158:	b2db      	uxtb	r3, r3
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	4603      	mov	r3, r0
 800315e:	6978      	ldr	r0, [r7, #20]
 8003160:	f003 ffbc 	bl	80070dc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	441a      	add	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a1a      	ldr	r2, [r3, #32]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	441a      	add	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	429a      	cmp	r2, r3
 8003190:	d809      	bhi.n	80031a6 <PCD_WriteEmptyTxFifo+0xe0>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1a      	ldr	r2, [r3, #32]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800319a:	429a      	cmp	r2, r3
 800319c:	d203      	bcs.n	80031a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1be      	bne.n	8003124 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d811      	bhi.n	80031d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	2201      	movs	r2, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	6939      	ldr	r1, [r7, #16]
 80031ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031d2:	4013      	ands	r3, r2
 80031d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	333c      	adds	r3, #60	; 0x3c
 80031f8:	3304      	adds	r3, #4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d17b      	bne.n	800330e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d015      	beq.n	800324c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	4a61      	ldr	r2, [pc, #388]	; (80033a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	f240 80b9 	bls.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80b3 	beq.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003242:	461a      	mov	r2, r3
 8003244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003248:	6093      	str	r3, [r2, #8]
 800324a:	e0a7      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003262:	461a      	mov	r2, r3
 8003264:	2320      	movs	r3, #32
 8003266:	6093      	str	r3, [r2, #8]
 8003268:	e098      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	f040 8093 	bne.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	4a4b      	ldr	r2, [pc, #300]	; (80033a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d90f      	bls.n	800329e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003294:	461a      	mov	r2, r3
 8003296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329a:	6093      	str	r3, [r2, #8]
 800329c:	e07e      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	3304      	adds	r3, #4
 80032b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	0159      	lsls	r1, r3, #5
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	440b      	add	r3, r1
 80032c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ca:	1ad2      	subs	r2, r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d114      	bne.n	8003300 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032e8:	461a      	mov	r2, r3
 80032ea:	2101      	movs	r1, #1
 80032ec:	f004 f98e 	bl	800760c <USB_EP0_OutStart>
 80032f0:	e006      	b.n	8003300 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	441a      	add	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f006 fc44 	bl	8009b94 <HAL_PCD_DataOutStageCallback>
 800330c:	e046      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	4a26      	ldr	r2, [pc, #152]	; (80033ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d124      	bne.n	8003360 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332c:	461a      	mov	r2, r3
 800332e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003332:	6093      	str	r3, [r2, #8]
 8003334:	e032      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	2320      	movs	r3, #32
 8003350:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f006 fc1b 	bl	8009b94 <HAL_PCD_DataOutStageCallback>
 800335e:	e01d      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d114      	bne.n	8003390 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d108      	bne.n	8003390 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003388:	461a      	mov	r2, r3
 800338a:	2100      	movs	r1, #0
 800338c:	f004 f93e 	bl	800760c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	4619      	mov	r1, r3
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f006 fbfc 	bl	8009b94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	4f54300a 	.word	0x4f54300a
 80033ac:	4f54310a 	.word	0x4f54310a

080033b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	333c      	adds	r3, #60	; 0x3c
 80033c8:	3304      	adds	r3, #4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a15      	ldr	r2, [pc, #84]	; (8003438 <PCD_EP_OutSetupPacket_int+0x88>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d90e      	bls.n	8003404 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d009      	beq.n	8003404 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fc:	461a      	mov	r2, r3
 80033fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003402:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f006 fbb3 	bl	8009b70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <PCD_EP_OutSetupPacket_int+0x88>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d90c      	bls.n	800342c <PCD_EP_OutSetupPacket_int+0x7c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d108      	bne.n	800342c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003424:	461a      	mov	r2, r3
 8003426:	2101      	movs	r1, #1
 8003428:	f004 f8f0 	bl	800760c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	4f54300a 	.word	0x4f54300a

0800343c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	70fb      	strb	r3, [r7, #3]
 8003448:	4613      	mov	r3, r2
 800344a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800345a:	883b      	ldrh	r3, [r7, #0]
 800345c:	0419      	lsls	r1, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	430a      	orrs	r2, r1
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
 8003468:	e028      	b.n	80034bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	4413      	add	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003478:	2300      	movs	r3, #0
 800347a:	73fb      	strb	r3, [r7, #15]
 800347c:	e00d      	b.n	800349a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	3340      	adds	r3, #64	; 0x40
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	4413      	add	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	3301      	adds	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	7bfa      	ldrb	r2, [r7, #15]
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	3b01      	subs	r3, #1
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d3ec      	bcc.n	800347e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034a4:	883b      	ldrh	r3, [r7, #0]
 80034a6:	0418      	lsls	r0, r3, #16
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6819      	ldr	r1, [r3, #0]
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	4302      	orrs	r2, r0
 80034b4:	3340      	adds	r3, #64	; 0x40
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800351a:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_PCDEx_ActivateLPM+0x44>)
 800351c:	4313      	orrs	r3, r2
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	10000003 	.word	0x10000003

08003534 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a04      	ldr	r2, [pc, #16]	; (8003550 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800353e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003542:	6013      	str	r3, [r2, #0]
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40007000 	.word	0x40007000

08003554 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800355c:	2300      	movs	r3, #0
 800355e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e291      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8087 	beq.w	8003686 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003578:	4b96      	ldr	r3, [pc, #600]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b04      	cmp	r3, #4
 8003582:	d00c      	beq.n	800359e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003584:	4b93      	ldr	r3, [pc, #588]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b08      	cmp	r3, #8
 800358e:	d112      	bne.n	80035b6 <HAL_RCC_OscConfig+0x62>
 8003590:	4b90      	ldr	r3, [pc, #576]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359c:	d10b      	bne.n	80035b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359e:	4b8d      	ldr	r3, [pc, #564]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d06c      	beq.n	8003684 <HAL_RCC_OscConfig+0x130>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d168      	bne.n	8003684 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e26b      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x7a>
 80035c0:	4b84      	ldr	r3, [pc, #528]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a83      	ldr	r2, [pc, #524]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80035c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e02e      	b.n	800362c <HAL_RCC_OscConfig+0xd8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x9c>
 80035d6:	4b7f      	ldr	r3, [pc, #508]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a7e      	ldr	r2, [pc, #504]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80035dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b7c      	ldr	r3, [pc, #496]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a7b      	ldr	r2, [pc, #492]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80035e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e01d      	b.n	800362c <HAL_RCC_OscConfig+0xd8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0xc0>
 80035fa:	4b76      	ldr	r3, [pc, #472]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a75      	ldr	r2, [pc, #468]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b73      	ldr	r3, [pc, #460]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a72      	ldr	r2, [pc, #456]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0xd8>
 8003614:	4b6f      	ldr	r3, [pc, #444]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a6e      	ldr	r2, [pc, #440]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b6c      	ldr	r3, [pc, #432]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a6b      	ldr	r2, [pc, #428]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fd fe82 	bl	800133c <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fd fe7e 	bl	800133c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e21f      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	4b61      	ldr	r3, [pc, #388]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0xe8>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fd fe6e 	bl	800133c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7fd fe6a 	bl	800133c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e20b      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	4b57      	ldr	r3, [pc, #348]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x110>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d069      	beq.n	8003766 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003692:	4b50      	ldr	r3, [pc, #320]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369e:	4b4d      	ldr	r3, [pc, #308]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d11c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x190>
 80036aa:	4b4a      	ldr	r3, [pc, #296]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d116      	bne.n	80036e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x17a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e1df      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ce:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	493d      	ldr	r1, [pc, #244]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	e040      	b.n	8003766 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d023      	beq.n	8003734 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ec:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a38      	ldr	r2, [pc, #224]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fd fe20 	bl	800133c <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003700:	f7fd fe1c 	bl	800133c <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e1bd      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003712:	4b30      	ldr	r3, [pc, #192]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371e:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4929      	ldr	r1, [pc, #164]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]
 8003732:	e018      	b.n	8003766 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003734:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a26      	ldr	r2, [pc, #152]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fd fdfc 	bl	800133c <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003748:	f7fd fdf8 	bl	800133c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e199      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375a:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d038      	beq.n	80037e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d019      	beq.n	80037ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377a:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 800377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377e:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003786:	f7fd fdd9 	bl	800133c <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800378e:	f7fd fdd5 	bl	800133c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e176      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80037a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x23a>
 80037ac:	e01a      	b.n	80037e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80037b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b2:	4a08      	ldr	r2, [pc, #32]	; (80037d4 <HAL_RCC_OscConfig+0x280>)
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ba:	f7fd fdbf 	bl	800133c <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c2:	f7fd fdbb 	bl	800133c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d903      	bls.n	80037d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e15c      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
 80037d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d8:	4b91      	ldr	r3, [pc, #580]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80037da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1ee      	bne.n	80037c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80a4 	beq.w	800393a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f2:	4b8b      	ldr	r3, [pc, #556]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10d      	bne.n	800381a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fe:	4b88      	ldr	r3, [pc, #544]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	4a87      	ldr	r2, [pc, #540]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 8003804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003808:	6413      	str	r3, [r2, #64]	; 0x40
 800380a:	4b85      	ldr	r3, [pc, #532]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003816:	2301      	movs	r3, #1
 8003818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800381a:	4b82      	ldr	r3, [pc, #520]	; (8003a24 <HAL_RCC_OscConfig+0x4d0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d118      	bne.n	8003858 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003826:	4b7f      	ldr	r3, [pc, #508]	; (8003a24 <HAL_RCC_OscConfig+0x4d0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a7e      	ldr	r2, [pc, #504]	; (8003a24 <HAL_RCC_OscConfig+0x4d0>)
 800382c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003832:	f7fd fd83 	bl	800133c <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383a:	f7fd fd7f 	bl	800133c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b64      	cmp	r3, #100	; 0x64
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e120      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800384c:	4b75      	ldr	r3, [pc, #468]	; (8003a24 <HAL_RCC_OscConfig+0x4d0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d106      	bne.n	800386e <HAL_RCC_OscConfig+0x31a>
 8003860:	4b6f      	ldr	r3, [pc, #444]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	4a6e      	ldr	r2, [pc, #440]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	6713      	str	r3, [r2, #112]	; 0x70
 800386c:	e02d      	b.n	80038ca <HAL_RCC_OscConfig+0x376>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10c      	bne.n	8003890 <HAL_RCC_OscConfig+0x33c>
 8003876:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	4a69      	ldr	r2, [pc, #420]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	6713      	str	r3, [r2, #112]	; 0x70
 8003882:	4b67      	ldr	r3, [pc, #412]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	4a66      	ldr	r2, [pc, #408]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 8003888:	f023 0304 	bic.w	r3, r3, #4
 800388c:	6713      	str	r3, [r2, #112]	; 0x70
 800388e:	e01c      	b.n	80038ca <HAL_RCC_OscConfig+0x376>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b05      	cmp	r3, #5
 8003896:	d10c      	bne.n	80038b2 <HAL_RCC_OscConfig+0x35e>
 8003898:	4b61      	ldr	r3, [pc, #388]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	4a60      	ldr	r2, [pc, #384]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 800389e:	f043 0304 	orr.w	r3, r3, #4
 80038a2:	6713      	str	r3, [r2, #112]	; 0x70
 80038a4:	4b5e      	ldr	r3, [pc, #376]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	4a5d      	ldr	r2, [pc, #372]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	6713      	str	r3, [r2, #112]	; 0x70
 80038b0:	e00b      	b.n	80038ca <HAL_RCC_OscConfig+0x376>
 80038b2:	4b5b      	ldr	r3, [pc, #364]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	4a5a      	ldr	r2, [pc, #360]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80038b8:	f023 0301 	bic.w	r3, r3, #1
 80038bc:	6713      	str	r3, [r2, #112]	; 0x70
 80038be:	4b58      	ldr	r3, [pc, #352]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	4a57      	ldr	r2, [pc, #348]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80038c4:	f023 0304 	bic.w	r3, r3, #4
 80038c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d015      	beq.n	80038fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d2:	f7fd fd33 	bl	800133c <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d8:	e00a      	b.n	80038f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fd fd2f 	bl	800133c <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e0ce      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f0:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0ee      	beq.n	80038da <HAL_RCC_OscConfig+0x386>
 80038fc:	e014      	b.n	8003928 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fe:	f7fd fd1d 	bl	800133c <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003904:	e00a      	b.n	800391c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003906:	f7fd fd19 	bl	800133c <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	f241 3288 	movw	r2, #5000	; 0x1388
 8003914:	4293      	cmp	r3, r2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e0b8      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391c:	4b40      	ldr	r3, [pc, #256]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1ee      	bne.n	8003906 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003928:	7dfb      	ldrb	r3, [r7, #23]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d105      	bne.n	800393a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800392e:	4b3c      	ldr	r3, [pc, #240]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	4a3b      	ldr	r2, [pc, #236]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 8003934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003938:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80a4 	beq.w	8003a8c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003944:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 030c 	and.w	r3, r3, #12
 800394c:	2b08      	cmp	r3, #8
 800394e:	d06b      	beq.n	8003a28 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d149      	bne.n	80039ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003958:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a30      	ldr	r2, [pc, #192]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 800395e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fd fcea 	bl	800133c <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396c:	f7fd fce6 	bl	800133c <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e087      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397e:	4b28      	ldr	r3, [pc, #160]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69da      	ldr	r2, [r3, #28]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	3b01      	subs	r3, #1
 80039a4:	041b      	lsls	r3, r3, #16
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	4313      	orrs	r3, r2
 80039b0:	4a1b      	ldr	r2, [pc, #108]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80039b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b8:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a18      	ldr	r2, [pc, #96]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80039be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fd fcba 	bl	800133c <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fd fcb6 	bl	800133c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e057      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039de:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x478>
 80039ea:	e04f      	b.n	8003a8c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0b      	ldr	r2, [pc, #44]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 80039f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fd fca0 	bl	800133c <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fd fc9c 	bl	800133c <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e03d      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCC_OscConfig+0x4cc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4ac>
 8003a1e:	e035      	b.n	8003a8c <HAL_RCC_OscConfig+0x538>
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_RCC_OscConfig+0x544>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d028      	beq.n	8003a88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d121      	bne.n	8003a88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d11a      	bne.n	8003a88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d111      	bne.n	8003a88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	085b      	lsrs	r3, r3, #1
 8003a70:	3b01      	subs	r3, #1
 8003a72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d107      	bne.n	8003a88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800

08003a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0d0      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d910      	bls.n	8003ae4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b67      	ldr	r3, [pc, #412]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 020f 	bic.w	r2, r3, #15
 8003aca:	4965      	ldr	r1, [pc, #404]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b63      	ldr	r3, [pc, #396]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0b8      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d020      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003afc:	4b59      	ldr	r3, [pc, #356]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4a58      	ldr	r2, [pc, #352]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b14:	4b53      	ldr	r3, [pc, #332]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a52      	ldr	r2, [pc, #328]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b20:	4b50      	ldr	r3, [pc, #320]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	494d      	ldr	r1, [pc, #308]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d040      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d107      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	4b47      	ldr	r3, [pc, #284]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d115      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e07f      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5e:	4b41      	ldr	r3, [pc, #260]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e073      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6e:	4b3d      	ldr	r3, [pc, #244]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e06b      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b7e:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f023 0203 	bic.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4936      	ldr	r1, [pc, #216]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b90:	f7fd fbd4 	bl	800133c <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b98:	f7fd fbd0 	bl	800133c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e053      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bae:	4b2d      	ldr	r3, [pc, #180]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 020c 	and.w	r2, r3, #12
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d1eb      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d210      	bcs.n	8003bf0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 020f 	bic.w	r2, r3, #15
 8003bd6:	4922      	ldr	r1, [pc, #136]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e032      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bfc:	4b19      	ldr	r3, [pc, #100]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4916      	ldr	r1, [pc, #88]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c1a:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	490e      	ldr	r1, [pc, #56]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c2e:	f000 f821 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8003c32:	4602      	mov	r2, r0
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	490a      	ldr	r1, [pc, #40]	; (8003c68 <HAL_RCC_ClockConfig+0x1cc>)
 8003c40:	5ccb      	ldrb	r3, [r1, r3]
 8003c42:	fa22 f303 	lsr.w	r3, r2, r3
 8003c46:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <HAL_RCC_ClockConfig+0x1d0>)
 8003c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <HAL_RCC_ClockConfig+0x1d4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd fb30 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023c00 	.word	0x40023c00
 8003c64:	40023800 	.word	0x40023800
 8003c68:	0800a470 	.word	0x0800a470
 8003c6c:	20000020 	.word	0x20000020
 8003c70:	20000024 	.word	0x20000024

08003c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c78:	b094      	sub	sp, #80	; 0x50
 8003c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c80:	2300      	movs	r3, #0
 8003c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c84:	2300      	movs	r3, #0
 8003c86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c8c:	4b79      	ldr	r3, [pc, #484]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 030c 	and.w	r3, r3, #12
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d00d      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	f200 80e1 	bhi.w	8003e60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d003      	beq.n	8003cae <HAL_RCC_GetSysClockFreq+0x3a>
 8003ca6:	e0db      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ca8:	4b73      	ldr	r3, [pc, #460]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003caa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cac:	e0db      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cae:	4b73      	ldr	r3, [pc, #460]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x208>)
 8003cb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cb2:	e0d8      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cb4:	4b6f      	ldr	r3, [pc, #444]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cbc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cbe:	4b6d      	ldr	r3, [pc, #436]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d063      	beq.n	8003d92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cca:	4b6a      	ldr	r3, [pc, #424]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	099b      	lsrs	r3, r3, #6
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cde:	2300      	movs	r3, #0
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	462b      	mov	r3, r5
 8003cea:	f04f 0000 	mov.w	r0, #0
 8003cee:	f04f 0100 	mov.w	r1, #0
 8003cf2:	0159      	lsls	r1, r3, #5
 8003cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf8:	0150      	lsls	r0, r2, #5
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4621      	mov	r1, r4
 8003d00:	1a51      	subs	r1, r2, r1
 8003d02:	6139      	str	r1, [r7, #16]
 8003d04:	4629      	mov	r1, r5
 8003d06:	eb63 0301 	sbc.w	r3, r3, r1
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d18:	4659      	mov	r1, fp
 8003d1a:	018b      	lsls	r3, r1, #6
 8003d1c:	4651      	mov	r1, sl
 8003d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d22:	4651      	mov	r1, sl
 8003d24:	018a      	lsls	r2, r1, #6
 8003d26:	4651      	mov	r1, sl
 8003d28:	ebb2 0801 	subs.w	r8, r2, r1
 8003d2c:	4659      	mov	r1, fp
 8003d2e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d46:	4690      	mov	r8, r2
 8003d48:	4699      	mov	r9, r3
 8003d4a:	4623      	mov	r3, r4
 8003d4c:	eb18 0303 	adds.w	r3, r8, r3
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	462b      	mov	r3, r5
 8003d54:	eb49 0303 	adc.w	r3, r9, r3
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d66:	4629      	mov	r1, r5
 8003d68:	024b      	lsls	r3, r1, #9
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d70:	4621      	mov	r1, r4
 8003d72:	024a      	lsls	r2, r1, #9
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d84:	f7fc fa40 	bl	8000208 <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d90:	e058      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d92:	4b38      	ldr	r3, [pc, #224]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	099b      	lsrs	r3, r3, #6
 8003d98:	2200      	movs	r2, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003da2:	623b      	str	r3, [r7, #32]
 8003da4:	2300      	movs	r3, #0
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
 8003da8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dac:	4642      	mov	r2, r8
 8003dae:	464b      	mov	r3, r9
 8003db0:	f04f 0000 	mov.w	r0, #0
 8003db4:	f04f 0100 	mov.w	r1, #0
 8003db8:	0159      	lsls	r1, r3, #5
 8003dba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dbe:	0150      	lsls	r0, r2, #5
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dca:	4649      	mov	r1, r9
 8003dcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ddc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003de0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003de4:	ebb2 040a 	subs.w	r4, r2, sl
 8003de8:	eb63 050b 	sbc.w	r5, r3, fp
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	00eb      	lsls	r3, r5, #3
 8003df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dfa:	00e2      	lsls	r2, r4, #3
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	461d      	mov	r5, r3
 8003e00:	4643      	mov	r3, r8
 8003e02:	18e3      	adds	r3, r4, r3
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	464b      	mov	r3, r9
 8003e08:	eb45 0303 	adc.w	r3, r5, r3
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	028b      	lsls	r3, r1, #10
 8003e1e:	4621      	mov	r1, r4
 8003e20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e24:	4621      	mov	r1, r4
 8003e26:	028a      	lsls	r2, r1, #10
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2e:	2200      	movs	r2, #0
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	61fa      	str	r2, [r7, #28]
 8003e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e38:	f7fc f9e6 	bl	8000208 <__aeabi_uldivmod>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4613      	mov	r3, r2
 8003e42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003e54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e5e:	e002      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3750      	adds	r7, #80	; 0x50
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800
 8003e78:	00f42400 	.word	0x00f42400
 8003e7c:	007a1200 	.word	0x007a1200

08003e80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e86:	681b      	ldr	r3, [r3, #0]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000020 	.word	0x20000020

08003e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e9c:	f7ff fff0 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	0a9b      	lsrs	r3, r3, #10
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4903      	ldr	r1, [pc, #12]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	0800a480 	.word	0x0800a480

08003ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ec4:	f7ff ffdc 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	0b5b      	lsrs	r3, r3, #13
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	4903      	ldr	r1, [pc, #12]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ed6:	5ccb      	ldrb	r3, [r1, r3]
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	0800a480 	.word	0x0800a480

08003ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d012      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f10:	4b69      	ldr	r3, [pc, #420]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a68      	ldr	r2, [pc, #416]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f1a:	6093      	str	r3, [r2, #8]
 8003f1c:	4b66      	ldr	r3, [pc, #408]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	4964      	ldr	r1, [pc, #400]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f32:	2301      	movs	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d017      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f42:	4b5d      	ldr	r3, [pc, #372]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f50:	4959      	ldr	r1, [pc, #356]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f60:	d101      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f62:	2301      	movs	r3, #1
 8003f64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d017      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f7e:	4b4e      	ldr	r3, [pc, #312]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	494a      	ldr	r1, [pc, #296]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003faa:	2301      	movs	r3, #1
 8003fac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 808b 	beq.w	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fcc:	4b3a      	ldr	r3, [pc, #232]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	4a39      	ldr	r2, [pc, #228]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd8:	4b37      	ldr	r3, [pc, #220]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fe4:	4b35      	ldr	r3, [pc, #212]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a34      	ldr	r2, [pc, #208]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff0:	f7fd f9a4 	bl	800133c <HAL_GetTick>
 8003ff4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff8:	f7fd f9a0 	bl	800133c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e357      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800400a:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004016:	4b28      	ldr	r3, [pc, #160]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d035      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	429a      	cmp	r2, r3
 8004032:	d02e      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004034:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800403e:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800404a:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a1a      	ldr	r2, [pc, #104]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004054:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004056:	4a18      	ldr	r2, [pc, #96]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800405c:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b01      	cmp	r3, #1
 8004066:	d114      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fd f968 	bl	800133c <HAL_GetTick>
 800406c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406e:	e00a      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fd f964 	bl	800133c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e319      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004086:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0ee      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800409e:	d111      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040ae:	400b      	ands	r3, r1
 80040b0:	4901      	ldr	r1, [pc, #4]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
 80040b6:	e00b      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40007000 	.word	0x40007000
 80040c0:	0ffffcff 	.word	0x0ffffcff
 80040c4:	4baa      	ldr	r3, [pc, #680]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4aa9      	ldr	r2, [pc, #676]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040ce:	6093      	str	r3, [r2, #8]
 80040d0:	4ba7      	ldr	r3, [pc, #668]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040dc:	49a4      	ldr	r1, [pc, #656]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d010      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040ee:	4ba0      	ldr	r3, [pc, #640]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f4:	4a9e      	ldr	r2, [pc, #632]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040fe:	4b9c      	ldr	r3, [pc, #624]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004100:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	4999      	ldr	r1, [pc, #612]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800411c:	4b94      	ldr	r3, [pc, #592]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412a:	4991      	ldr	r1, [pc, #580]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800413e:	4b8c      	ldr	r3, [pc, #560]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414c:	4988      	ldr	r1, [pc, #544]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004160:	4b83      	ldr	r3, [pc, #524]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004166:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416e:	4980      	ldr	r1, [pc, #512]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004182:	4b7b      	ldr	r3, [pc, #492]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004188:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	4977      	ldr	r1, [pc, #476]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a4:	4b72      	ldr	r3, [pc, #456]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f023 0203 	bic.w	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	496f      	ldr	r1, [pc, #444]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041c6:	4b6a      	ldr	r3, [pc, #424]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041cc:	f023 020c 	bic.w	r2, r3, #12
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d4:	4966      	ldr	r1, [pc, #408]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041e8:	4b61      	ldr	r3, [pc, #388]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f6:	495e      	ldr	r1, [pc, #376]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800420a:	4b59      	ldr	r3, [pc, #356]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004210:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004218:	4955      	ldr	r1, [pc, #340]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800422c:	4b50      	ldr	r3, [pc, #320]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	494d      	ldr	r1, [pc, #308]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800424e:	4b48      	ldr	r3, [pc, #288]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004254:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	4944      	ldr	r1, [pc, #272]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004270:	4b3f      	ldr	r3, [pc, #252]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427e:	493c      	ldr	r1, [pc, #240]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004292:	4b37      	ldr	r3, [pc, #220]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a0:	4933      	ldr	r1, [pc, #204]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042b4:	4b2e      	ldr	r3, [pc, #184]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c2:	492b      	ldr	r1, [pc, #172]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d011      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042d6:	4b26      	ldr	r3, [pc, #152]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e4:	4922      	ldr	r1, [pc, #136]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f4:	d101      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042f6:	2301      	movs	r3, #1
 80042f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004306:	2301      	movs	r3, #1
 8004308:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004316:	4b16      	ldr	r3, [pc, #88]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004324:	4912      	ldr	r1, [pc, #72]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00b      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004338:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004348:	4909      	ldr	r1, [pc, #36]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d006      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 80d9 	beq.w	8004516 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004364:	4b02      	ldr	r3, [pc, #8]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a01      	ldr	r2, [pc, #4]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800436e:	e001      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004370:	40023800 	.word	0x40023800
 8004374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004376:	f7fc ffe1 	bl	800133c <HAL_GetTick>
 800437a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800437e:	f7fc ffdd 	bl	800133c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b64      	cmp	r3, #100	; 0x64
 800438a:	d901      	bls.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e194      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004390:	4b6c      	ldr	r3, [pc, #432]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f0      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d021      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x504>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d11d      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043b0:	4b64      	ldr	r3, [pc, #400]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b6:	0c1b      	lsrs	r3, r3, #16
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043be:	4b61      	ldr	r3, [pc, #388]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c4:	0e1b      	lsrs	r3, r3, #24
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	019a      	lsls	r2, r3, #6
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	041b      	lsls	r3, r3, #16
 80043d6:	431a      	orrs	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	061b      	lsls	r3, r3, #24
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	071b      	lsls	r3, r3, #28
 80043e4:	4957      	ldr	r1, [pc, #348]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d004      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800440a:	2b00      	cmp	r3, #0
 800440c:	d02e      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004416:	d129      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004418:	4b4a      	ldr	r3, [pc, #296]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800441a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441e:	0c1b      	lsrs	r3, r3, #16
 8004420:	f003 0303 	and.w	r3, r3, #3
 8004424:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004426:	4b47      	ldr	r3, [pc, #284]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442c:	0f1b      	lsrs	r3, r3, #28
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	019a      	lsls	r2, r3, #6
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	061b      	lsls	r3, r3, #24
 8004446:	431a      	orrs	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	071b      	lsls	r3, r3, #28
 800444c:	493d      	ldr	r1, [pc, #244]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004454:	4b3b      	ldr	r3, [pc, #236]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800445a:	f023 021f 	bic.w	r2, r3, #31
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	3b01      	subs	r3, #1
 8004464:	4937      	ldr	r1, [pc, #220]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01d      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004478:	4b32      	ldr	r3, [pc, #200]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800447a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447e:	0e1b      	lsrs	r3, r3, #24
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004486:	4b2f      	ldr	r3, [pc, #188]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448c:	0f1b      	lsrs	r3, r3, #28
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	019a      	lsls	r2, r3, #6
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	041b      	lsls	r3, r3, #16
 80044a0:	431a      	orrs	r2, r3
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	431a      	orrs	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	071b      	lsls	r3, r3, #28
 80044ac:	4925      	ldr	r1, [pc, #148]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d011      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	019a      	lsls	r2, r3, #6
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	041b      	lsls	r3, r3, #16
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	061b      	lsls	r3, r3, #24
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	071b      	lsls	r3, r3, #28
 80044dc:	4919      	ldr	r1, [pc, #100]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044e4:	4b17      	ldr	r3, [pc, #92]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a16      	ldr	r2, [pc, #88]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f0:	f7fc ff24 	bl	800133c <HAL_GetTick>
 80044f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044f8:	f7fc ff20 	bl	800133c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	; 0x64
 8004504:	d901      	bls.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e0d7      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800450a:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b01      	cmp	r3, #1
 800451a:	f040 80cd 	bne.w	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a08      	ldr	r2, [pc, #32]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452a:	f7fc ff07 	bl	800133c <HAL_GetTick>
 800452e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004530:	e00a      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004532:	f7fc ff03 	bl	800133c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b64      	cmp	r3, #100	; 0x64
 800453e:	d903      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e0ba      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004544:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004548:	4b5e      	ldr	r3, [pc, #376]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004554:	d0ed      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02e      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d12a      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800457e:	4b51      	ldr	r3, [pc, #324]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800458c:	4b4d      	ldr	r3, [pc, #308]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004592:	0f1b      	lsrs	r3, r3, #28
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	019a      	lsls	r2, r3, #6
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	041b      	lsls	r3, r3, #16
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	061b      	lsls	r3, r3, #24
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	071b      	lsls	r3, r3, #28
 80045b2:	4944      	ldr	r1, [pc, #272]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045ba:	4b42      	ldr	r3, [pc, #264]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	3b01      	subs	r3, #1
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	493d      	ldr	r1, [pc, #244]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d022      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045e8:	d11d      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045ea:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f0:	0e1b      	lsrs	r3, r3, #24
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045f8:	4b32      	ldr	r3, [pc, #200]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	0f1b      	lsrs	r3, r3, #28
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	019a      	lsls	r2, r3, #6
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	431a      	orrs	r2, r3
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	061b      	lsls	r3, r3, #24
 8004618:	431a      	orrs	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	071b      	lsls	r3, r3, #28
 800461e:	4929      	ldr	r1, [pc, #164]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d028      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004632:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	0e1b      	lsrs	r3, r3, #24
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004640:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	019a      	lsls	r2, r3, #6
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	431a      	orrs	r2, r3
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	061b      	lsls	r3, r3, #24
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	071b      	lsls	r3, r3, #28
 8004666:	4917      	ldr	r1, [pc, #92]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800466e:	4b15      	ldr	r3, [pc, #84]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	4911      	ldr	r1, [pc, #68]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a0e      	ldr	r2, [pc, #56]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800468a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004690:	f7fc fe54 	bl	800133c <HAL_GetTick>
 8004694:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004698:	f7fc fe50 	bl	800133c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	; 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e007      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046b6:	d1ef      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800

080046c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e09d      	b.n	8004816 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d108      	bne.n	80046f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ea:	d009      	beq.n	8004700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	61da      	str	r2, [r3, #28]
 80046f2:	e005      	b.n	8004700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fc fa82 	bl	8000c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004736:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004740:	d902      	bls.n	8004748 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e002      	b.n	800474e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800474c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004756:	d007      	beq.n	8004768 <HAL_SPI_Init+0xa0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004760:	d002      	beq.n	8004768 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047aa:	ea42 0103 	orr.w	r1, r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	f003 0204 	and.w	r2, r3, #4
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047e4:	ea42 0103 	orr.w	r1, r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004804:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b088      	sub	sp, #32
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	4613      	mov	r3, r2
 800482c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_SPI_Transmit+0x22>
 800483c:	2302      	movs	r3, #2
 800483e:	e158      	b.n	8004af2 <HAL_SPI_Transmit+0x2d4>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004848:	f7fc fd78 	bl	800133c <HAL_GetTick>
 800484c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b01      	cmp	r3, #1
 800485c:	d002      	beq.n	8004864 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800485e:	2302      	movs	r3, #2
 8004860:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004862:	e13d      	b.n	8004ae0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_SPI_Transmit+0x52>
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d102      	bne.n	8004876 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004874:	e134      	b.n	8004ae0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2203      	movs	r2, #3
 800487a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	88fa      	ldrh	r2, [r7, #6]
 800488e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	88fa      	ldrh	r2, [r7, #6]
 8004894:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c0:	d10f      	bne.n	80048e2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ec:	2b40      	cmp	r3, #64	; 0x40
 80048ee:	d007      	beq.n	8004900 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004908:	d94b      	bls.n	80049a2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <HAL_SPI_Transmit+0xfa>
 8004912:	8afb      	ldrh	r3, [r7, #22]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d13e      	bne.n	8004996 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	881a      	ldrh	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	1c9a      	adds	r2, r3, #2
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800493c:	e02b      	b.n	8004996 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b02      	cmp	r3, #2
 800494a:	d112      	bne.n	8004972 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	881a      	ldrh	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	1c9a      	adds	r2, r3, #2
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004970:	e011      	b.n	8004996 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004972:	f7fc fce3 	bl	800133c <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d803      	bhi.n	800498a <HAL_SPI_Transmit+0x16c>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004988:	d102      	bne.n	8004990 <HAL_SPI_Transmit+0x172>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d102      	bne.n	8004996 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004994:	e0a4      	b.n	8004ae0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1ce      	bne.n	800493e <HAL_SPI_Transmit+0x120>
 80049a0:	e07c      	b.n	8004a9c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_SPI_Transmit+0x192>
 80049aa:	8afb      	ldrh	r3, [r7, #22]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d170      	bne.n	8004a92 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d912      	bls.n	80049e0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	881a      	ldrh	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	1c9a      	adds	r2, r3, #2
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b02      	subs	r3, #2
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049de:	e058      	b.n	8004a92 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	330c      	adds	r3, #12
 80049ea:	7812      	ldrb	r2, [r2, #0]
 80049ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a06:	e044      	b.n	8004a92 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d12b      	bne.n	8004a6e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d912      	bls.n	8004a46 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	881a      	ldrh	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	1c9a      	adds	r2, r3, #2
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b02      	subs	r3, #2
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a44:	e025      	b.n	8004a92 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	330c      	adds	r3, #12
 8004a50:	7812      	ldrb	r2, [r2, #0]
 8004a52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a6c:	e011      	b.n	8004a92 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a6e:	f7fc fc65 	bl	800133c <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d803      	bhi.n	8004a86 <HAL_SPI_Transmit+0x268>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d102      	bne.n	8004a8c <HAL_SPI_Transmit+0x26e>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a90:	e026      	b.n	8004ae0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1b5      	bne.n	8004a08 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	6839      	ldr	r1, [r7, #0]
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 fa5d 	bl	8004f60 <SPI_EndRxTxTransaction>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aba:	2300      	movs	r3, #0
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	77fb      	strb	r3, [r7, #31]
 8004adc:	e000      	b.n	8004ae0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004ade:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004af0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10e      	bne.n	8004b3c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d009      	beq.n	8004b3c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d004      	beq.n	8004b3c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4798      	blx	r3
    return;
 8004b3a:	e0ce      	b.n	8004cda <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <HAL_SPI_IRQHandler+0x5e>
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d004      	beq.n	8004b5a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
    return;
 8004b58:	e0bf      	b.n	8004cda <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <HAL_SPI_IRQHandler+0x7e>
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80b0 	beq.w	8004cda <HAL_SPI_IRQHandler+0x1de>
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80aa 	beq.w	8004cda <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d023      	beq.n	8004bd8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d011      	beq.n	8004bc0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba0:	f043 0204 	orr.w	r2, r3, #4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	e00b      	b.n	8004bd8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	693b      	ldr	r3, [r7, #16]
        return;
 8004bd6:	e080      	b.n	8004cda <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d014      	beq.n	8004c0c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be6:	f043 0201 	orr.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00c      	beq.n	8004c30 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1a:	f043 0208 	orr.w	r2, r3, #8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d04f      	beq.n	8004cd8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c46:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <HAL_SPI_IRQHandler+0x168>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d034      	beq.n	8004cce <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0203 	bic.w	r2, r2, #3
 8004c72:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d011      	beq.n	8004ca0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c80:	4a17      	ldr	r2, [pc, #92]	; (8004ce0 <HAL_SPI_IRQHandler+0x1e4>)
 8004c82:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7fc fd47 	bl	800171c <HAL_DMA_Abort_IT>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d016      	beq.n	8004cd6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cac:	4a0c      	ldr	r2, [pc, #48]	; (8004ce0 <HAL_SPI_IRQHandler+0x1e4>)
 8004cae:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fc fd31 	bl	800171c <HAL_DMA_Abort_IT>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004ccc:	e003      	b.n	8004cd6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f808 	bl	8004ce4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004cd4:	e000      	b.n	8004cd8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004cd6:	bf00      	nop
    return;
 8004cd8:	bf00      	nop
  }
}
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	08004cf9 	.word	0x08004cf9

08004ce4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7ff ffe5 	bl	8004ce4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d34:	f7fc fb02 	bl	800133c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	4413      	add	r3, r2
 8004d42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d44:	f7fc fafa 	bl	800133c <HAL_GetTick>
 8004d48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d4a:	4b39      	ldr	r3, [pc, #228]	; (8004e30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	015b      	lsls	r3, r3, #5
 8004d50:	0d1b      	lsrs	r3, r3, #20
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	fb02 f303 	mul.w	r3, r2, r3
 8004d58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d5a:	e054      	b.n	8004e06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d050      	beq.n	8004e06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d64:	f7fc faea 	bl	800133c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d902      	bls.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d13d      	bne.n	8004df6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d92:	d111      	bne.n	8004db8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9c:	d004      	beq.n	8004da8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da6:	d107      	bne.n	8004db8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc0:	d10f      	bne.n	8004de2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004de0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e017      	b.n	8004e26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	bf0c      	ite	eq
 8004e16:	2301      	moveq	r3, #1
 8004e18:	2300      	movne	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d19b      	bne.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000020 	.word	0x20000020

08004e34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	; 0x28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e46:	f7fc fa79 	bl	800133c <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	4413      	add	r3, r2
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e56:	f7fc fa71 	bl	800133c <HAL_GetTick>
 8004e5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	330c      	adds	r3, #12
 8004e62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e64:	4b3d      	ldr	r3, [pc, #244]	; (8004f5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	00da      	lsls	r2, r3, #3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	0d1b      	lsrs	r3, r3, #20
 8004e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e7c:	e060      	b.n	8004f40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e84:	d107      	bne.n	8004e96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d104      	bne.n	8004e96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d050      	beq.n	8004f40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e9e:	f7fc fa4d 	bl	800133c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d902      	bls.n	8004eb4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d13d      	bne.n	8004f30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ec2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ecc:	d111      	bne.n	8004ef2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed6:	d004      	beq.n	8004ee2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee0:	d107      	bne.n	8004ef2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efa:	d10f      	bne.n	8004f1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e010      	b.n	8004f52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d196      	bne.n	8004e7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3728      	adds	r7, #40	; 0x28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20000020 	.word	0x20000020

08004f60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7ff ff5b 	bl	8004e34 <SPI_WaitFifoStateUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f88:	f043 0220 	orr.w	r2, r3, #32
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e046      	b.n	8005022 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f94:	4b25      	ldr	r3, [pc, #148]	; (800502c <SPI_EndRxTxTransaction+0xcc>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a25      	ldr	r2, [pc, #148]	; (8005030 <SPI_EndRxTxTransaction+0xd0>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	0d5b      	lsrs	r3, r3, #21
 8004fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fa4:	fb02 f303 	mul.w	r3, r2, r3
 8004fa8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb2:	d112      	bne.n	8004fda <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2180      	movs	r1, #128	; 0x80
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f7ff feb0 	bl	8004d24 <SPI_WaitFlagStateUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fce:	f043 0220 	orr.w	r2, r3, #32
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e023      	b.n	8005022 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff0:	2b80      	cmp	r3, #128	; 0x80
 8004ff2:	d0f2      	beq.n	8004fda <SPI_EndRxTxTransaction+0x7a>
 8004ff4:	e000      	b.n	8004ff8 <SPI_EndRxTxTransaction+0x98>
        break;
 8004ff6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f7ff ff15 	bl	8004e34 <SPI_WaitFifoStateUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005014:	f043 0220 	orr.w	r2, r3, #32
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e000      	b.n	8005022 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000020 	.word	0x20000020
 8005030:	165e9f81 	.word	0x165e9f81

08005034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e049      	b.n	80050da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fb fe6a 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3304      	adds	r3, #4
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f000 fa00 	bl	8005478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d001      	beq.n	80050fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e054      	b.n	80051a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a26      	ldr	r2, [pc, #152]	; (80051b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d022      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005126:	d01d      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a22      	ldr	r2, [pc, #136]	; (80051b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d018      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a21      	ldr	r2, [pc, #132]	; (80051bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d013      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00e      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d009      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1c      	ldr	r2, [pc, #112]	; (80051c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <HAL_TIM_Base_Start_IT+0xe8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d115      	bne.n	8005190 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	4b19      	ldr	r3, [pc, #100]	; (80051d0 <HAL_TIM_Base_Start_IT+0xec>)
 800516c:	4013      	ands	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b06      	cmp	r3, #6
 8005174:	d015      	beq.n	80051a2 <HAL_TIM_Base_Start_IT+0xbe>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517c:	d011      	beq.n	80051a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0201 	orr.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518e:	e008      	b.n	80051a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	e000      	b.n	80051a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40010000 	.word	0x40010000
 80051b8:	40000400 	.word	0x40000400
 80051bc:	40000800 	.word	0x40000800
 80051c0:	40000c00 	.word	0x40000c00
 80051c4:	40010400 	.word	0x40010400
 80051c8:	40014000 	.word	0x40014000
 80051cc:	40001800 	.word	0x40001800
 80051d0:	00010007 	.word	0x00010007

080051d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d122      	bne.n	8005230 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d11b      	bne.n	8005230 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0202 	mvn.w	r2, #2
 8005200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f90f 	bl	800543a <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f901 	bl	8005426 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f912 	bl	800544e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b04      	cmp	r3, #4
 800523c:	d122      	bne.n	8005284 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b04      	cmp	r3, #4
 800524a:	d11b      	bne.n	8005284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0204 	mvn.w	r2, #4
 8005254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f8e5 	bl	800543a <HAL_TIM_IC_CaptureCallback>
 8005270:	e005      	b.n	800527e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f8d7 	bl	8005426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f8e8 	bl	800544e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b08      	cmp	r3, #8
 8005290:	d122      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b08      	cmp	r3, #8
 800529e:	d11b      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0208 	mvn.w	r2, #8
 80052a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2204      	movs	r2, #4
 80052ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f8bb 	bl	800543a <HAL_TIM_IC_CaptureCallback>
 80052c4:	e005      	b.n	80052d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f8ad 	bl	8005426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f8be 	bl	800544e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d122      	bne.n	800532c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d11b      	bne.n	800532c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0210 	mvn.w	r2, #16
 80052fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2208      	movs	r2, #8
 8005302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f891 	bl	800543a <HAL_TIM_IC_CaptureCallback>
 8005318:	e005      	b.n	8005326 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f883 	bl	8005426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f894 	bl	800544e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b01      	cmp	r3, #1
 8005338:	d10e      	bne.n	8005358 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b01      	cmp	r3, #1
 8005346:	d107      	bne.n	8005358 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0201 	mvn.w	r2, #1
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f85d 	bl	8005412 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005362:	2b80      	cmp	r3, #128	; 0x80
 8005364:	d10e      	bne.n	8005384 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005370:	2b80      	cmp	r3, #128	; 0x80
 8005372:	d107      	bne.n	8005384 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f924 	bl	80055cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005392:	d10e      	bne.n	80053b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	2b80      	cmp	r3, #128	; 0x80
 80053a0:	d107      	bne.n	80053b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f917 	bl	80055e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053bc:	2b40      	cmp	r3, #64	; 0x40
 80053be:	d10e      	bne.n	80053de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ca:	2b40      	cmp	r3, #64	; 0x40
 80053cc:	d107      	bne.n	80053de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f842 	bl	8005462 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d10e      	bne.n	800540a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d107      	bne.n	800540a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f06f 0220 	mvn.w	r2, #32
 8005402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f8d7 	bl	80055b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a40      	ldr	r2, [pc, #256]	; (800558c <TIM_Base_SetConfig+0x114>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d013      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005496:	d00f      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a3d      	ldr	r2, [pc, #244]	; (8005590 <TIM_Base_SetConfig+0x118>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00b      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a3c      	ldr	r2, [pc, #240]	; (8005594 <TIM_Base_SetConfig+0x11c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d007      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a3b      	ldr	r2, [pc, #236]	; (8005598 <TIM_Base_SetConfig+0x120>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a3a      	ldr	r2, [pc, #232]	; (800559c <TIM_Base_SetConfig+0x124>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d108      	bne.n	80054ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a2f      	ldr	r2, [pc, #188]	; (800558c <TIM_Base_SetConfig+0x114>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d02b      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d8:	d027      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2c      	ldr	r2, [pc, #176]	; (8005590 <TIM_Base_SetConfig+0x118>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d023      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a2b      	ldr	r2, [pc, #172]	; (8005594 <TIM_Base_SetConfig+0x11c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01f      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a2a      	ldr	r2, [pc, #168]	; (8005598 <TIM_Base_SetConfig+0x120>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01b      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a29      	ldr	r2, [pc, #164]	; (800559c <TIM_Base_SetConfig+0x124>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d017      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a28      	ldr	r2, [pc, #160]	; (80055a0 <TIM_Base_SetConfig+0x128>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a27      	ldr	r2, [pc, #156]	; (80055a4 <TIM_Base_SetConfig+0x12c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00f      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a26      	ldr	r2, [pc, #152]	; (80055a8 <TIM_Base_SetConfig+0x130>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00b      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a25      	ldr	r2, [pc, #148]	; (80055ac <TIM_Base_SetConfig+0x134>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a24      	ldr	r2, [pc, #144]	; (80055b0 <TIM_Base_SetConfig+0x138>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a23      	ldr	r2, [pc, #140]	; (80055b4 <TIM_Base_SetConfig+0x13c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d108      	bne.n	800553c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a0a      	ldr	r2, [pc, #40]	; (800558c <TIM_Base_SetConfig+0x114>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <TIM_Base_SetConfig+0xf8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a0c      	ldr	r2, [pc, #48]	; (800559c <TIM_Base_SetConfig+0x124>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d103      	bne.n	8005578 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	615a      	str	r2, [r3, #20]
}
 800557e:	bf00      	nop
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40010000 	.word	0x40010000
 8005590:	40000400 	.word	0x40000400
 8005594:	40000800 	.word	0x40000800
 8005598:	40000c00 	.word	0x40000c00
 800559c:	40010400 	.word	0x40010400
 80055a0:	40014000 	.word	0x40014000
 80055a4:	40014400 	.word	0x40014400
 80055a8:	40014800 	.word	0x40014800
 80055ac:	40001800 	.word	0x40001800
 80055b0:	40001c00 	.word	0x40001c00
 80055b4:	40002000 	.word	0x40002000

080055b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e040      	b.n	8005688 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fb fbb2 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2224      	movs	r2, #36	; 0x24
 8005620:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0201 	bic.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f82c 	bl	8005690 <UART_SetConfig>
 8005638:	4603      	mov	r3, r0
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e022      	b.n	8005688 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fa84 	bl	8005b58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800565e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800566e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fb0b 	bl	8005c9c <UART_CheckIdleState>
 8005686:	4603      	mov	r3, r0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	431a      	orrs	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	4ba6      	ldr	r3, [pc, #664]	; (8005954 <UART_SetConfig+0x2c4>)
 80056bc:	4013      	ands	r3, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6812      	ldr	r2, [r2, #0]
 80056c2:	6979      	ldr	r1, [r7, #20]
 80056c4:	430b      	orrs	r3, r1
 80056c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	430a      	orrs	r2, r1
 8005700:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a94      	ldr	r2, [pc, #592]	; (8005958 <UART_SetConfig+0x2c8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d120      	bne.n	800574e <UART_SetConfig+0xbe>
 800570c:	4b93      	ldr	r3, [pc, #588]	; (800595c <UART_SetConfig+0x2cc>)
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	2b03      	cmp	r3, #3
 8005718:	d816      	bhi.n	8005748 <UART_SetConfig+0xb8>
 800571a:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <UART_SetConfig+0x90>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	08005731 	.word	0x08005731
 8005724:	0800573d 	.word	0x0800573d
 8005728:	08005737 	.word	0x08005737
 800572c:	08005743 	.word	0x08005743
 8005730:	2301      	movs	r3, #1
 8005732:	77fb      	strb	r3, [r7, #31]
 8005734:	e150      	b.n	80059d8 <UART_SetConfig+0x348>
 8005736:	2302      	movs	r3, #2
 8005738:	77fb      	strb	r3, [r7, #31]
 800573a:	e14d      	b.n	80059d8 <UART_SetConfig+0x348>
 800573c:	2304      	movs	r3, #4
 800573e:	77fb      	strb	r3, [r7, #31]
 8005740:	e14a      	b.n	80059d8 <UART_SetConfig+0x348>
 8005742:	2308      	movs	r3, #8
 8005744:	77fb      	strb	r3, [r7, #31]
 8005746:	e147      	b.n	80059d8 <UART_SetConfig+0x348>
 8005748:	2310      	movs	r3, #16
 800574a:	77fb      	strb	r3, [r7, #31]
 800574c:	e144      	b.n	80059d8 <UART_SetConfig+0x348>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a83      	ldr	r2, [pc, #524]	; (8005960 <UART_SetConfig+0x2d0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d132      	bne.n	80057be <UART_SetConfig+0x12e>
 8005758:	4b80      	ldr	r3, [pc, #512]	; (800595c <UART_SetConfig+0x2cc>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575e:	f003 030c 	and.w	r3, r3, #12
 8005762:	2b0c      	cmp	r3, #12
 8005764:	d828      	bhi.n	80057b8 <UART_SetConfig+0x128>
 8005766:	a201      	add	r2, pc, #4	; (adr r2, 800576c <UART_SetConfig+0xdc>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	080057a1 	.word	0x080057a1
 8005770:	080057b9 	.word	0x080057b9
 8005774:	080057b9 	.word	0x080057b9
 8005778:	080057b9 	.word	0x080057b9
 800577c:	080057ad 	.word	0x080057ad
 8005780:	080057b9 	.word	0x080057b9
 8005784:	080057b9 	.word	0x080057b9
 8005788:	080057b9 	.word	0x080057b9
 800578c:	080057a7 	.word	0x080057a7
 8005790:	080057b9 	.word	0x080057b9
 8005794:	080057b9 	.word	0x080057b9
 8005798:	080057b9 	.word	0x080057b9
 800579c:	080057b3 	.word	0x080057b3
 80057a0:	2300      	movs	r3, #0
 80057a2:	77fb      	strb	r3, [r7, #31]
 80057a4:	e118      	b.n	80059d8 <UART_SetConfig+0x348>
 80057a6:	2302      	movs	r3, #2
 80057a8:	77fb      	strb	r3, [r7, #31]
 80057aa:	e115      	b.n	80059d8 <UART_SetConfig+0x348>
 80057ac:	2304      	movs	r3, #4
 80057ae:	77fb      	strb	r3, [r7, #31]
 80057b0:	e112      	b.n	80059d8 <UART_SetConfig+0x348>
 80057b2:	2308      	movs	r3, #8
 80057b4:	77fb      	strb	r3, [r7, #31]
 80057b6:	e10f      	b.n	80059d8 <UART_SetConfig+0x348>
 80057b8:	2310      	movs	r3, #16
 80057ba:	77fb      	strb	r3, [r7, #31]
 80057bc:	e10c      	b.n	80059d8 <UART_SetConfig+0x348>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a68      	ldr	r2, [pc, #416]	; (8005964 <UART_SetConfig+0x2d4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d120      	bne.n	800580a <UART_SetConfig+0x17a>
 80057c8:	4b64      	ldr	r3, [pc, #400]	; (800595c <UART_SetConfig+0x2cc>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057d2:	2b30      	cmp	r3, #48	; 0x30
 80057d4:	d013      	beq.n	80057fe <UART_SetConfig+0x16e>
 80057d6:	2b30      	cmp	r3, #48	; 0x30
 80057d8:	d814      	bhi.n	8005804 <UART_SetConfig+0x174>
 80057da:	2b20      	cmp	r3, #32
 80057dc:	d009      	beq.n	80057f2 <UART_SetConfig+0x162>
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d810      	bhi.n	8005804 <UART_SetConfig+0x174>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <UART_SetConfig+0x15c>
 80057e6:	2b10      	cmp	r3, #16
 80057e8:	d006      	beq.n	80057f8 <UART_SetConfig+0x168>
 80057ea:	e00b      	b.n	8005804 <UART_SetConfig+0x174>
 80057ec:	2300      	movs	r3, #0
 80057ee:	77fb      	strb	r3, [r7, #31]
 80057f0:	e0f2      	b.n	80059d8 <UART_SetConfig+0x348>
 80057f2:	2302      	movs	r3, #2
 80057f4:	77fb      	strb	r3, [r7, #31]
 80057f6:	e0ef      	b.n	80059d8 <UART_SetConfig+0x348>
 80057f8:	2304      	movs	r3, #4
 80057fa:	77fb      	strb	r3, [r7, #31]
 80057fc:	e0ec      	b.n	80059d8 <UART_SetConfig+0x348>
 80057fe:	2308      	movs	r3, #8
 8005800:	77fb      	strb	r3, [r7, #31]
 8005802:	e0e9      	b.n	80059d8 <UART_SetConfig+0x348>
 8005804:	2310      	movs	r3, #16
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e0e6      	b.n	80059d8 <UART_SetConfig+0x348>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a56      	ldr	r2, [pc, #344]	; (8005968 <UART_SetConfig+0x2d8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d120      	bne.n	8005856 <UART_SetConfig+0x1c6>
 8005814:	4b51      	ldr	r3, [pc, #324]	; (800595c <UART_SetConfig+0x2cc>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800581e:	2bc0      	cmp	r3, #192	; 0xc0
 8005820:	d013      	beq.n	800584a <UART_SetConfig+0x1ba>
 8005822:	2bc0      	cmp	r3, #192	; 0xc0
 8005824:	d814      	bhi.n	8005850 <UART_SetConfig+0x1c0>
 8005826:	2b80      	cmp	r3, #128	; 0x80
 8005828:	d009      	beq.n	800583e <UART_SetConfig+0x1ae>
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	d810      	bhi.n	8005850 <UART_SetConfig+0x1c0>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <UART_SetConfig+0x1a8>
 8005832:	2b40      	cmp	r3, #64	; 0x40
 8005834:	d006      	beq.n	8005844 <UART_SetConfig+0x1b4>
 8005836:	e00b      	b.n	8005850 <UART_SetConfig+0x1c0>
 8005838:	2300      	movs	r3, #0
 800583a:	77fb      	strb	r3, [r7, #31]
 800583c:	e0cc      	b.n	80059d8 <UART_SetConfig+0x348>
 800583e:	2302      	movs	r3, #2
 8005840:	77fb      	strb	r3, [r7, #31]
 8005842:	e0c9      	b.n	80059d8 <UART_SetConfig+0x348>
 8005844:	2304      	movs	r3, #4
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	e0c6      	b.n	80059d8 <UART_SetConfig+0x348>
 800584a:	2308      	movs	r3, #8
 800584c:	77fb      	strb	r3, [r7, #31]
 800584e:	e0c3      	b.n	80059d8 <UART_SetConfig+0x348>
 8005850:	2310      	movs	r3, #16
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e0c0      	b.n	80059d8 <UART_SetConfig+0x348>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a44      	ldr	r2, [pc, #272]	; (800596c <UART_SetConfig+0x2dc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d125      	bne.n	80058ac <UART_SetConfig+0x21c>
 8005860:	4b3e      	ldr	r3, [pc, #248]	; (800595c <UART_SetConfig+0x2cc>)
 8005862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800586e:	d017      	beq.n	80058a0 <UART_SetConfig+0x210>
 8005870:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005874:	d817      	bhi.n	80058a6 <UART_SetConfig+0x216>
 8005876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800587a:	d00b      	beq.n	8005894 <UART_SetConfig+0x204>
 800587c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005880:	d811      	bhi.n	80058a6 <UART_SetConfig+0x216>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <UART_SetConfig+0x1fe>
 8005886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588a:	d006      	beq.n	800589a <UART_SetConfig+0x20a>
 800588c:	e00b      	b.n	80058a6 <UART_SetConfig+0x216>
 800588e:	2300      	movs	r3, #0
 8005890:	77fb      	strb	r3, [r7, #31]
 8005892:	e0a1      	b.n	80059d8 <UART_SetConfig+0x348>
 8005894:	2302      	movs	r3, #2
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e09e      	b.n	80059d8 <UART_SetConfig+0x348>
 800589a:	2304      	movs	r3, #4
 800589c:	77fb      	strb	r3, [r7, #31]
 800589e:	e09b      	b.n	80059d8 <UART_SetConfig+0x348>
 80058a0:	2308      	movs	r3, #8
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e098      	b.n	80059d8 <UART_SetConfig+0x348>
 80058a6:	2310      	movs	r3, #16
 80058a8:	77fb      	strb	r3, [r7, #31]
 80058aa:	e095      	b.n	80059d8 <UART_SetConfig+0x348>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a2f      	ldr	r2, [pc, #188]	; (8005970 <UART_SetConfig+0x2e0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d125      	bne.n	8005902 <UART_SetConfig+0x272>
 80058b6:	4b29      	ldr	r3, [pc, #164]	; (800595c <UART_SetConfig+0x2cc>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058c4:	d017      	beq.n	80058f6 <UART_SetConfig+0x266>
 80058c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058ca:	d817      	bhi.n	80058fc <UART_SetConfig+0x26c>
 80058cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058d0:	d00b      	beq.n	80058ea <UART_SetConfig+0x25a>
 80058d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058d6:	d811      	bhi.n	80058fc <UART_SetConfig+0x26c>
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <UART_SetConfig+0x254>
 80058dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e0:	d006      	beq.n	80058f0 <UART_SetConfig+0x260>
 80058e2:	e00b      	b.n	80058fc <UART_SetConfig+0x26c>
 80058e4:	2301      	movs	r3, #1
 80058e6:	77fb      	strb	r3, [r7, #31]
 80058e8:	e076      	b.n	80059d8 <UART_SetConfig+0x348>
 80058ea:	2302      	movs	r3, #2
 80058ec:	77fb      	strb	r3, [r7, #31]
 80058ee:	e073      	b.n	80059d8 <UART_SetConfig+0x348>
 80058f0:	2304      	movs	r3, #4
 80058f2:	77fb      	strb	r3, [r7, #31]
 80058f4:	e070      	b.n	80059d8 <UART_SetConfig+0x348>
 80058f6:	2308      	movs	r3, #8
 80058f8:	77fb      	strb	r3, [r7, #31]
 80058fa:	e06d      	b.n	80059d8 <UART_SetConfig+0x348>
 80058fc:	2310      	movs	r3, #16
 80058fe:	77fb      	strb	r3, [r7, #31]
 8005900:	e06a      	b.n	80059d8 <UART_SetConfig+0x348>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1b      	ldr	r2, [pc, #108]	; (8005974 <UART_SetConfig+0x2e4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d138      	bne.n	800597e <UART_SetConfig+0x2ee>
 800590c:	4b13      	ldr	r3, [pc, #76]	; (800595c <UART_SetConfig+0x2cc>)
 800590e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005912:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005916:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800591a:	d017      	beq.n	800594c <UART_SetConfig+0x2bc>
 800591c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005920:	d82a      	bhi.n	8005978 <UART_SetConfig+0x2e8>
 8005922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005926:	d00b      	beq.n	8005940 <UART_SetConfig+0x2b0>
 8005928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592c:	d824      	bhi.n	8005978 <UART_SetConfig+0x2e8>
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <UART_SetConfig+0x2aa>
 8005932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005936:	d006      	beq.n	8005946 <UART_SetConfig+0x2b6>
 8005938:	e01e      	b.n	8005978 <UART_SetConfig+0x2e8>
 800593a:	2300      	movs	r3, #0
 800593c:	77fb      	strb	r3, [r7, #31]
 800593e:	e04b      	b.n	80059d8 <UART_SetConfig+0x348>
 8005940:	2302      	movs	r3, #2
 8005942:	77fb      	strb	r3, [r7, #31]
 8005944:	e048      	b.n	80059d8 <UART_SetConfig+0x348>
 8005946:	2304      	movs	r3, #4
 8005948:	77fb      	strb	r3, [r7, #31]
 800594a:	e045      	b.n	80059d8 <UART_SetConfig+0x348>
 800594c:	2308      	movs	r3, #8
 800594e:	77fb      	strb	r3, [r7, #31]
 8005950:	e042      	b.n	80059d8 <UART_SetConfig+0x348>
 8005952:	bf00      	nop
 8005954:	efff69f3 	.word	0xefff69f3
 8005958:	40011000 	.word	0x40011000
 800595c:	40023800 	.word	0x40023800
 8005960:	40004400 	.word	0x40004400
 8005964:	40004800 	.word	0x40004800
 8005968:	40004c00 	.word	0x40004c00
 800596c:	40005000 	.word	0x40005000
 8005970:	40011400 	.word	0x40011400
 8005974:	40007800 	.word	0x40007800
 8005978:	2310      	movs	r3, #16
 800597a:	77fb      	strb	r3, [r7, #31]
 800597c:	e02c      	b.n	80059d8 <UART_SetConfig+0x348>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a72      	ldr	r2, [pc, #456]	; (8005b4c <UART_SetConfig+0x4bc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d125      	bne.n	80059d4 <UART_SetConfig+0x344>
 8005988:	4b71      	ldr	r3, [pc, #452]	; (8005b50 <UART_SetConfig+0x4c0>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005992:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005996:	d017      	beq.n	80059c8 <UART_SetConfig+0x338>
 8005998:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800599c:	d817      	bhi.n	80059ce <UART_SetConfig+0x33e>
 800599e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a2:	d00b      	beq.n	80059bc <UART_SetConfig+0x32c>
 80059a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a8:	d811      	bhi.n	80059ce <UART_SetConfig+0x33e>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <UART_SetConfig+0x326>
 80059ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059b2:	d006      	beq.n	80059c2 <UART_SetConfig+0x332>
 80059b4:	e00b      	b.n	80059ce <UART_SetConfig+0x33e>
 80059b6:	2300      	movs	r3, #0
 80059b8:	77fb      	strb	r3, [r7, #31]
 80059ba:	e00d      	b.n	80059d8 <UART_SetConfig+0x348>
 80059bc:	2302      	movs	r3, #2
 80059be:	77fb      	strb	r3, [r7, #31]
 80059c0:	e00a      	b.n	80059d8 <UART_SetConfig+0x348>
 80059c2:	2304      	movs	r3, #4
 80059c4:	77fb      	strb	r3, [r7, #31]
 80059c6:	e007      	b.n	80059d8 <UART_SetConfig+0x348>
 80059c8:	2308      	movs	r3, #8
 80059ca:	77fb      	strb	r3, [r7, #31]
 80059cc:	e004      	b.n	80059d8 <UART_SetConfig+0x348>
 80059ce:	2310      	movs	r3, #16
 80059d0:	77fb      	strb	r3, [r7, #31]
 80059d2:	e001      	b.n	80059d8 <UART_SetConfig+0x348>
 80059d4:	2310      	movs	r3, #16
 80059d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e0:	d15b      	bne.n	8005a9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80059e2:	7ffb      	ldrb	r3, [r7, #31]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d828      	bhi.n	8005a3a <UART_SetConfig+0x3aa>
 80059e8:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <UART_SetConfig+0x360>)
 80059ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ee:	bf00      	nop
 80059f0:	08005a15 	.word	0x08005a15
 80059f4:	08005a1d 	.word	0x08005a1d
 80059f8:	08005a25 	.word	0x08005a25
 80059fc:	08005a3b 	.word	0x08005a3b
 8005a00:	08005a2b 	.word	0x08005a2b
 8005a04:	08005a3b 	.word	0x08005a3b
 8005a08:	08005a3b 	.word	0x08005a3b
 8005a0c:	08005a3b 	.word	0x08005a3b
 8005a10:	08005a33 	.word	0x08005a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a14:	f7fe fa40 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8005a18:	61b8      	str	r0, [r7, #24]
        break;
 8005a1a:	e013      	b.n	8005a44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a1c:	f7fe fa50 	bl	8003ec0 <HAL_RCC_GetPCLK2Freq>
 8005a20:	61b8      	str	r0, [r7, #24]
        break;
 8005a22:	e00f      	b.n	8005a44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a24:	4b4b      	ldr	r3, [pc, #300]	; (8005b54 <UART_SetConfig+0x4c4>)
 8005a26:	61bb      	str	r3, [r7, #24]
        break;
 8005a28:	e00c      	b.n	8005a44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a2a:	f7fe f923 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8005a2e:	61b8      	str	r0, [r7, #24]
        break;
 8005a30:	e008      	b.n	8005a44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a36:	61bb      	str	r3, [r7, #24]
        break;
 8005a38:	e004      	b.n	8005a44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	77bb      	strb	r3, [r7, #30]
        break;
 8005a42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d074      	beq.n	8005b34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	005a      	lsls	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	441a      	add	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2b0f      	cmp	r3, #15
 8005a64:	d916      	bls.n	8005a94 <UART_SetConfig+0x404>
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6c:	d212      	bcs.n	8005a94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	f023 030f 	bic.w	r3, r3, #15
 8005a76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	89fb      	ldrh	r3, [r7, #14]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	89fa      	ldrh	r2, [r7, #14]
 8005a90:	60da      	str	r2, [r3, #12]
 8005a92:	e04f      	b.n	8005b34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	77bb      	strb	r3, [r7, #30]
 8005a98:	e04c      	b.n	8005b34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a9a:	7ffb      	ldrb	r3, [r7, #31]
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d828      	bhi.n	8005af2 <UART_SetConfig+0x462>
 8005aa0:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <UART_SetConfig+0x418>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005acd 	.word	0x08005acd
 8005aac:	08005ad5 	.word	0x08005ad5
 8005ab0:	08005add 	.word	0x08005add
 8005ab4:	08005af3 	.word	0x08005af3
 8005ab8:	08005ae3 	.word	0x08005ae3
 8005abc:	08005af3 	.word	0x08005af3
 8005ac0:	08005af3 	.word	0x08005af3
 8005ac4:	08005af3 	.word	0x08005af3
 8005ac8:	08005aeb 	.word	0x08005aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005acc:	f7fe f9e4 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8005ad0:	61b8      	str	r0, [r7, #24]
        break;
 8005ad2:	e013      	b.n	8005afc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad4:	f7fe f9f4 	bl	8003ec0 <HAL_RCC_GetPCLK2Freq>
 8005ad8:	61b8      	str	r0, [r7, #24]
        break;
 8005ada:	e00f      	b.n	8005afc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005adc:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <UART_SetConfig+0x4c4>)
 8005ade:	61bb      	str	r3, [r7, #24]
        break;
 8005ae0:	e00c      	b.n	8005afc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae2:	f7fe f8c7 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8005ae6:	61b8      	str	r0, [r7, #24]
        break;
 8005ae8:	e008      	b.n	8005afc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aee:	61bb      	str	r3, [r7, #24]
        break;
 8005af0:	e004      	b.n	8005afc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	77bb      	strb	r3, [r7, #30]
        break;
 8005afa:	bf00      	nop
    }

    if (pclk != 0U)
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d018      	beq.n	8005b34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	085a      	lsrs	r2, r3, #1
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	441a      	add	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b0f      	cmp	r3, #15
 8005b1a:	d909      	bls.n	8005b30 <UART_SetConfig+0x4a0>
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b22:	d205      	bcs.n	8005b30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	e001      	b.n	8005b34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b40:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3720      	adds	r7, #32
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40007c00 	.word	0x40007c00
 8005b50:	40023800 	.word	0x40023800
 8005b54:	00f42400 	.word	0x00f42400

08005b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01a      	beq.n	8005c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c56:	d10a      	bne.n	8005c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	605a      	str	r2, [r3, #4]
  }
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cac:	f7fb fb46 	bl	800133c <HAL_GetTick>
 8005cb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d10e      	bne.n	8005cde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f81b 	bl	8005d0a <UART_WaitOnFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e011      	b.n	8005d02 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b09c      	sub	sp, #112	; 0x70
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	603b      	str	r3, [r7, #0]
 8005d16:	4613      	mov	r3, r2
 8005d18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1a:	e0a7      	b.n	8005e6c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d22:	f000 80a3 	beq.w	8005e6c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d26:	f7fb fb09 	bl	800133c <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d302      	bcc.n	8005d3c <UART_WaitOnFlagUntilTimeout+0x32>
 8005d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d13f      	bne.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d50:	667b      	str	r3, [r7, #100]	; 0x64
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e6      	bne.n	8005d3c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3308      	adds	r3, #8
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	663b      	str	r3, [r7, #96]	; 0x60
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e5      	bne.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e068      	b.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d050      	beq.n	8005e6c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd8:	d148      	bne.n	8005e6c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005de2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005df8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e02:	637b      	str	r3, [r7, #52]	; 0x34
 8005e04:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e0a:	e841 2300 	strex	r3, r2, [r1]
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e6      	bne.n	8005de4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	613b      	str	r3, [r7, #16]
   return(result);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f023 0301 	bic.w	r3, r3, #1
 8005e2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3308      	adds	r3, #8
 8005e34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e36:	623a      	str	r2, [r7, #32]
 8005e38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	69f9      	ldr	r1, [r7, #28]
 8005e3c:	6a3a      	ldr	r2, [r7, #32]
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e5      	bne.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e010      	b.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69da      	ldr	r2, [r3, #28]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	4013      	ands	r3, r2
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	bf0c      	ite	eq
 8005e7c:	2301      	moveq	r3, #1
 8005e7e:	2300      	movne	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	461a      	mov	r2, r3
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	f43f af48 	beq.w	8005d1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3770      	adds	r7, #112	; 0x70
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e98:	b084      	sub	sp, #16
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	f107 001c 	add.w	r0, r7, #28
 8005ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d120      	bne.n	8005ef2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	4b20      	ldr	r3, [pc, #128]	; (8005f44 <USB_CoreInit+0xac>)
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d105      	bne.n	8005ee6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f001 fbee 	bl	80076c8 <USB_CoreReset>
 8005eec:	4603      	mov	r3, r0
 8005eee:	73fb      	strb	r3, [r7, #15]
 8005ef0:	e010      	b.n	8005f14 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f001 fbe2 	bl	80076c8 <USB_CoreReset>
 8005f04:	4603      	mov	r3, r0
 8005f06:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d10b      	bne.n	8005f32 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f043 0206 	orr.w	r2, r3, #6
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f043 0220 	orr.w	r2, r3, #32
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f3e:	b004      	add	sp, #16
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	ffbdffbf 	.word	0xffbdffbf

08005f48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	4613      	mov	r3, r2
 8005f54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d165      	bne.n	8006028 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4a41      	ldr	r2, [pc, #260]	; (8006064 <USB_SetTurnaroundTime+0x11c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d906      	bls.n	8005f72 <USB_SetTurnaroundTime+0x2a>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4a40      	ldr	r2, [pc, #256]	; (8006068 <USB_SetTurnaroundTime+0x120>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d202      	bcs.n	8005f72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f6c:	230f      	movs	r3, #15
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	e062      	b.n	8006038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	4a3c      	ldr	r2, [pc, #240]	; (8006068 <USB_SetTurnaroundTime+0x120>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d306      	bcc.n	8005f88 <USB_SetTurnaroundTime+0x40>
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4a3b      	ldr	r2, [pc, #236]	; (800606c <USB_SetTurnaroundTime+0x124>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d202      	bcs.n	8005f88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005f82:	230e      	movs	r3, #14
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	e057      	b.n	8006038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4a38      	ldr	r2, [pc, #224]	; (800606c <USB_SetTurnaroundTime+0x124>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d306      	bcc.n	8005f9e <USB_SetTurnaroundTime+0x56>
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4a37      	ldr	r2, [pc, #220]	; (8006070 <USB_SetTurnaroundTime+0x128>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d202      	bcs.n	8005f9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005f98:	230d      	movs	r3, #13
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	e04c      	b.n	8006038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	4a33      	ldr	r2, [pc, #204]	; (8006070 <USB_SetTurnaroundTime+0x128>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d306      	bcc.n	8005fb4 <USB_SetTurnaroundTime+0x6c>
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	4a32      	ldr	r2, [pc, #200]	; (8006074 <USB_SetTurnaroundTime+0x12c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d802      	bhi.n	8005fb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005fae:	230c      	movs	r3, #12
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	e041      	b.n	8006038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4a2f      	ldr	r2, [pc, #188]	; (8006074 <USB_SetTurnaroundTime+0x12c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d906      	bls.n	8005fca <USB_SetTurnaroundTime+0x82>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4a2e      	ldr	r2, [pc, #184]	; (8006078 <USB_SetTurnaroundTime+0x130>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d802      	bhi.n	8005fca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005fc4:	230b      	movs	r3, #11
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	e036      	b.n	8006038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4a2a      	ldr	r2, [pc, #168]	; (8006078 <USB_SetTurnaroundTime+0x130>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d906      	bls.n	8005fe0 <USB_SetTurnaroundTime+0x98>
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	4a29      	ldr	r2, [pc, #164]	; (800607c <USB_SetTurnaroundTime+0x134>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d802      	bhi.n	8005fe0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005fda:	230a      	movs	r3, #10
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	e02b      	b.n	8006038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4a26      	ldr	r2, [pc, #152]	; (800607c <USB_SetTurnaroundTime+0x134>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d906      	bls.n	8005ff6 <USB_SetTurnaroundTime+0xae>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4a25      	ldr	r2, [pc, #148]	; (8006080 <USB_SetTurnaroundTime+0x138>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d202      	bcs.n	8005ff6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ff0:	2309      	movs	r3, #9
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	e020      	b.n	8006038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	4a21      	ldr	r2, [pc, #132]	; (8006080 <USB_SetTurnaroundTime+0x138>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d306      	bcc.n	800600c <USB_SetTurnaroundTime+0xc4>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	4a20      	ldr	r2, [pc, #128]	; (8006084 <USB_SetTurnaroundTime+0x13c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d802      	bhi.n	800600c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006006:	2308      	movs	r3, #8
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	e015      	b.n	8006038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <USB_SetTurnaroundTime+0x13c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d906      	bls.n	8006022 <USB_SetTurnaroundTime+0xda>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4a1c      	ldr	r2, [pc, #112]	; (8006088 <USB_SetTurnaroundTime+0x140>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d202      	bcs.n	8006022 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800601c:	2307      	movs	r3, #7
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	e00a      	b.n	8006038 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006022:	2306      	movs	r3, #6
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e007      	b.n	8006038 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d102      	bne.n	8006034 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800602e:	2309      	movs	r3, #9
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	e001      	b.n	8006038 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006034:	2309      	movs	r3, #9
 8006036:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	68da      	ldr	r2, [r3, #12]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	029b      	lsls	r3, r3, #10
 800604c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006050:	431a      	orrs	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	00d8acbf 	.word	0x00d8acbf
 8006068:	00e4e1c0 	.word	0x00e4e1c0
 800606c:	00f42400 	.word	0x00f42400
 8006070:	01067380 	.word	0x01067380
 8006074:	011a499f 	.word	0x011a499f
 8006078:	01312cff 	.word	0x01312cff
 800607c:	014ca43f 	.word	0x014ca43f
 8006080:	016e3600 	.word	0x016e3600
 8006084:	01a6ab1f 	.word	0x01a6ab1f
 8006088:	01e84800 	.word	0x01e84800

0800608c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f043 0201 	orr.w	r2, r3, #1
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f023 0201 	bic.w	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d115      	bne.n	800611e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060fe:	2001      	movs	r0, #1
 8006100:	f7fb f928 	bl	8001354 <HAL_Delay>
      ms++;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3301      	adds	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f001 fa4b 	bl	80075a6 <USB_GetMode>
 8006110:	4603      	mov	r3, r0
 8006112:	2b01      	cmp	r3, #1
 8006114:	d01e      	beq.n	8006154 <USB_SetCurrentMode+0x84>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b31      	cmp	r3, #49	; 0x31
 800611a:	d9f0      	bls.n	80060fe <USB_SetCurrentMode+0x2e>
 800611c:	e01a      	b.n	8006154 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d115      	bne.n	8006150 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006130:	2001      	movs	r0, #1
 8006132:	f7fb f90f 	bl	8001354 <HAL_Delay>
      ms++;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3301      	adds	r3, #1
 800613a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 fa32 	bl	80075a6 <USB_GetMode>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <USB_SetCurrentMode+0x84>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b31      	cmp	r3, #49	; 0x31
 800614c:	d9f0      	bls.n	8006130 <USB_SetCurrentMode+0x60>
 800614e:	e001      	b.n	8006154 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e005      	b.n	8006160 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b32      	cmp	r3, #50	; 0x32
 8006158:	d101      	bne.n	800615e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006168:	b084      	sub	sp, #16
 800616a:	b580      	push	{r7, lr}
 800616c:	b086      	sub	sp, #24
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006182:	2300      	movs	r3, #0
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	e009      	b.n	800619c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	3340      	adds	r3, #64	; 0x40
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	2200      	movs	r2, #0
 8006194:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	3301      	adds	r3, #1
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	2b0e      	cmp	r3, #14
 80061a0:	d9f2      	bls.n	8006188 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d11c      	bne.n	80061e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061b6:	f043 0302 	orr.w	r3, r3, #2
 80061ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	e005      	b.n	80061ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061f4:	461a      	mov	r2, r3
 80061f6:	2300      	movs	r3, #0
 80061f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006200:	4619      	mov	r1, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006208:	461a      	mov	r2, r3
 800620a:	680b      	ldr	r3, [r1, #0]
 800620c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	2b01      	cmp	r3, #1
 8006212:	d10c      	bne.n	800622e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	2b00      	cmp	r3, #0
 8006218:	d104      	bne.n	8006224 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800621a:	2100      	movs	r1, #0
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f965 	bl	80064ec <USB_SetDevSpeed>
 8006222:	e008      	b.n	8006236 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006224:	2101      	movs	r1, #1
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f960 	bl	80064ec <USB_SetDevSpeed>
 800622c:	e003      	b.n	8006236 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800622e:	2103      	movs	r1, #3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f95b 	bl	80064ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006236:	2110      	movs	r1, #16
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f8f3 	bl	8006424 <USB_FlushTxFifo>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f91f 	bl	800648c <USB_FlushRxFifo>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625e:	461a      	mov	r2, r3
 8006260:	2300      	movs	r3, #0
 8006262:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626a:	461a      	mov	r2, r3
 800626c:	2300      	movs	r3, #0
 800626e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006276:	461a      	mov	r2, r3
 8006278:	2300      	movs	r3, #0
 800627a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800627c:	2300      	movs	r3, #0
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	e043      	b.n	800630a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006298:	d118      	bne.n	80062cc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ac:	461a      	mov	r2, r3
 80062ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	e013      	b.n	80062de <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c2:	461a      	mov	r2, r3
 80062c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	e008      	b.n	80062de <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d8:	461a      	mov	r2, r3
 80062da:	2300      	movs	r3, #0
 80062dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ea:	461a      	mov	r2, r3
 80062ec:	2300      	movs	r3, #0
 80062ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fc:	461a      	mov	r2, r3
 80062fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006302:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	3301      	adds	r3, #1
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	429a      	cmp	r2, r3
 8006310:	d3b7      	bcc.n	8006282 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006312:	2300      	movs	r3, #0
 8006314:	613b      	str	r3, [r7, #16]
 8006316:	e043      	b.n	80063a0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800632a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800632e:	d118      	bne.n	8006362 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10a      	bne.n	800634c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006342:	461a      	mov	r2, r3
 8006344:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	e013      	b.n	8006374 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006358:	461a      	mov	r2, r3
 800635a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	e008      	b.n	8006374 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636e:	461a      	mov	r2, r3
 8006370:	2300      	movs	r3, #0
 8006372:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006380:	461a      	mov	r2, r3
 8006382:	2300      	movs	r3, #0
 8006384:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006392:	461a      	mov	r2, r3
 8006394:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006398:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	3301      	adds	r3, #1
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d3b7      	bcc.n	8006318 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80063c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d105      	bne.n	80063dc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f043 0210 	orr.w	r2, r3, #16
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699a      	ldr	r2, [r3, #24]
 80063e0:	4b0e      	ldr	r3, [pc, #56]	; (800641c <USB_DevInit+0x2b4>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d005      	beq.n	80063fa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f043 0208 	orr.w	r2, r3, #8
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d105      	bne.n	800640c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699a      	ldr	r2, [r3, #24]
 8006404:	4b06      	ldr	r3, [pc, #24]	; (8006420 <USB_DevInit+0x2b8>)
 8006406:	4313      	orrs	r3, r2
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800640c:	7dfb      	ldrb	r3, [r7, #23]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006418:	b004      	add	sp, #16
 800641a:	4770      	bx	lr
 800641c:	803c3800 	.word	0x803c3800
 8006420:	40000004 	.word	0x40000004

08006424 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3301      	adds	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4a13      	ldr	r2, [pc, #76]	; (8006488 <USB_FlushTxFifo+0x64>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d901      	bls.n	8006444 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e01b      	b.n	800647c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	daf2      	bge.n	8006432 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	019b      	lsls	r3, r3, #6
 8006454:	f043 0220 	orr.w	r2, r3, #32
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3301      	adds	r3, #1
 8006460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	4a08      	ldr	r2, [pc, #32]	; (8006488 <USB_FlushTxFifo+0x64>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d901      	bls.n	800646e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e006      	b.n	800647c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b20      	cmp	r3, #32
 8006478:	d0f0      	beq.n	800645c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	00030d40 	.word	0x00030d40

0800648c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4a11      	ldr	r2, [pc, #68]	; (80064e8 <USB_FlushRxFifo+0x5c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d901      	bls.n	80064aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e018      	b.n	80064dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	daf2      	bge.n	8006498 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2210      	movs	r2, #16
 80064ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3301      	adds	r3, #1
 80064c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4a08      	ldr	r2, [pc, #32]	; (80064e8 <USB_FlushRxFifo+0x5c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d901      	bls.n	80064ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e006      	b.n	80064dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0310 	and.w	r3, r3, #16
 80064d6:	2b10      	cmp	r3, #16
 80064d8:	d0f0      	beq.n	80064bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	00030d40 	.word	0x00030d40

080064ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	78fb      	ldrb	r3, [r7, #3]
 8006506:	68f9      	ldr	r1, [r7, #12]
 8006508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800650c:	4313      	orrs	r3, r2
 800650e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800651e:	b480      	push	{r7}
 8006520:	b087      	sub	sp, #28
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 0306 	and.w	r3, r3, #6
 8006536:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d102      	bne.n	8006544 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800653e:	2300      	movs	r3, #0
 8006540:	75fb      	strb	r3, [r7, #23]
 8006542:	e00a      	b.n	800655a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d002      	beq.n	8006550 <USB_GetDevSpeed+0x32>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b06      	cmp	r3, #6
 800654e:	d102      	bne.n	8006556 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006550:	2302      	movs	r3, #2
 8006552:	75fb      	strb	r3, [r7, #23]
 8006554:	e001      	b.n	800655a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006556:	230f      	movs	r3, #15
 8006558:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800655a:	7dfb      	ldrb	r3, [r7, #23]
}
 800655c:	4618      	mov	r0, r3
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	785b      	ldrb	r3, [r3, #1]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d139      	bne.n	80065f8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658a:	69da      	ldr	r2, [r3, #28]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	f003 030f 	and.w	r3, r3, #15
 8006594:	2101      	movs	r1, #1
 8006596:	fa01 f303 	lsl.w	r3, r1, r3
 800659a:	b29b      	uxth	r3, r3
 800659c:	68f9      	ldr	r1, [r7, #12]
 800659e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a2:	4313      	orrs	r3, r2
 80065a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d153      	bne.n	8006664 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	791b      	ldrb	r3, [r3, #4]
 80065d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	059b      	lsls	r3, r3, #22
 80065de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065e0:	431a      	orrs	r2, r3
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	0159      	lsls	r1, r3, #5
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	440b      	add	r3, r1
 80065ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ee:	4619      	mov	r1, r3
 80065f0:	4b20      	ldr	r3, [pc, #128]	; (8006674 <USB_ActivateEndpoint+0x10c>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	600b      	str	r3, [r1, #0]
 80065f6:	e035      	b.n	8006664 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fe:	69da      	ldr	r2, [r3, #28]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	f003 030f 	and.w	r3, r3, #15
 8006608:	2101      	movs	r1, #1
 800660a:	fa01 f303 	lsl.w	r3, r1, r3
 800660e:	041b      	lsls	r3, r3, #16
 8006610:	68f9      	ldr	r1, [r7, #12]
 8006612:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006616:	4313      	orrs	r3, r2
 8006618:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d119      	bne.n	8006664 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	791b      	ldrb	r3, [r3, #4]
 800664a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800664c:	430b      	orrs	r3, r1
 800664e:	431a      	orrs	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	0159      	lsls	r1, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	440b      	add	r3, r1
 8006658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665c:	4619      	mov	r1, r3
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <USB_ActivateEndpoint+0x10c>)
 8006660:	4313      	orrs	r3, r2
 8006662:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	10008000 	.word	0x10008000

08006678 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	785b      	ldrb	r3, [r3, #1]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d161      	bne.n	8006758 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066aa:	d11f      	bne.n	80066ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	0151      	lsls	r1, r2, #5
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	440a      	add	r2, r1
 80066c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	2101      	movs	r1, #1
 80066fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006702:	b29b      	uxth	r3, r3
 8006704:	43db      	mvns	r3, r3
 8006706:	68f9      	ldr	r1, [r7, #12]
 8006708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800670c:	4013      	ands	r3, r2
 800670e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006716:	69da      	ldr	r2, [r3, #28]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	f003 030f 	and.w	r3, r3, #15
 8006720:	2101      	movs	r1, #1
 8006722:	fa01 f303 	lsl.w	r3, r1, r3
 8006726:	b29b      	uxth	r3, r3
 8006728:	43db      	mvns	r3, r3
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006730:	4013      	ands	r3, r2
 8006732:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	0159      	lsls	r1, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	440b      	add	r3, r1
 800674a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674e:	4619      	mov	r1, r3
 8006750:	4b35      	ldr	r3, [pc, #212]	; (8006828 <USB_DeactivateEndpoint+0x1b0>)
 8006752:	4013      	ands	r3, r2
 8006754:	600b      	str	r3, [r1, #0]
 8006756:	e060      	b.n	800681a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800676a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800676e:	d11f      	bne.n	80067b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	440a      	add	r2, r1
 8006786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800678e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f003 030f 	and.w	r3, r3, #15
 80067c0:	2101      	movs	r1, #1
 80067c2:	fa01 f303 	lsl.w	r3, r1, r3
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	43db      	mvns	r3, r3
 80067ca:	68f9      	ldr	r1, [r7, #12]
 80067cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067d0:	4013      	ands	r3, r2
 80067d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067da:	69da      	ldr	r2, [r3, #28]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	2101      	movs	r1, #1
 80067e6:	fa01 f303 	lsl.w	r3, r1, r3
 80067ea:	041b      	lsls	r3, r3, #16
 80067ec:	43db      	mvns	r3, r3
 80067ee:	68f9      	ldr	r1, [r7, #12]
 80067f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067f4:	4013      	ands	r3, r2
 80067f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	0159      	lsls	r1, r3, #5
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	440b      	add	r3, r1
 800680e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006812:	4619      	mov	r1, r3
 8006814:	4b05      	ldr	r3, [pc, #20]	; (800682c <USB_DeactivateEndpoint+0x1b4>)
 8006816:	4013      	ands	r3, r2
 8006818:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	ec337800 	.word	0xec337800
 800682c:	eff37800 	.word	0xeff37800

08006830 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	; 0x28
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	4613      	mov	r3, r2
 800683c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	785b      	ldrb	r3, [r3, #1]
 800684c:	2b01      	cmp	r3, #1
 800684e:	f040 8163 	bne.w	8006b18 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d132      	bne.n	80068c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	0159      	lsls	r1, r3, #5
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	440b      	add	r3, r1
 8006870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006874:	4619      	mov	r1, r3
 8006876:	4ba5      	ldr	r3, [pc, #660]	; (8006b0c <USB_EPStartXfer+0x2dc>)
 8006878:	4013      	ands	r3, r2
 800687a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	0151      	lsls	r1, r2, #5
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	440a      	add	r2, r1
 8006892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006896:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800689a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	691a      	ldr	r2, [r3, #16]
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	0159      	lsls	r1, r3, #5
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	440b      	add	r3, r1
 80068b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b6:	4619      	mov	r1, r3
 80068b8:	4b95      	ldr	r3, [pc, #596]	; (8006b10 <USB_EPStartXfer+0x2e0>)
 80068ba:	4013      	ands	r3, r2
 80068bc:	610b      	str	r3, [r1, #16]
 80068be:	e074      	b.n	80069aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068cc:	691a      	ldr	r2, [r3, #16]
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	0159      	lsls	r1, r3, #5
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	440b      	add	r3, r1
 80068d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068da:	4619      	mov	r1, r3
 80068dc:	4b8c      	ldr	r3, [pc, #560]	; (8006b10 <USB_EPStartXfer+0x2e0>)
 80068de:	4013      	ands	r3, r2
 80068e0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ee:	691a      	ldr	r2, [r3, #16]
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	0159      	lsls	r1, r3, #5
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	440b      	add	r3, r1
 80068f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fc:	4619      	mov	r1, r3
 80068fe:	4b83      	ldr	r3, [pc, #524]	; (8006b0c <USB_EPStartXfer+0x2dc>)
 8006900:	4013      	ands	r3, r2
 8006902:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006910:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	6999      	ldr	r1, [r3, #24]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	440b      	add	r3, r1
 800691c:	1e59      	subs	r1, r3, #1
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	fbb1 f3f3 	udiv	r3, r1, r3
 8006926:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006928:	4b7a      	ldr	r3, [pc, #488]	; (8006b14 <USB_EPStartXfer+0x2e4>)
 800692a:	400b      	ands	r3, r1
 800692c:	69b9      	ldr	r1, [r7, #24]
 800692e:	0148      	lsls	r0, r1, #5
 8006930:	69f9      	ldr	r1, [r7, #28]
 8006932:	4401      	add	r1, r0
 8006934:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006938:	4313      	orrs	r3, r2
 800693a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006952:	69b9      	ldr	r1, [r7, #24]
 8006954:	0148      	lsls	r0, r1, #5
 8006956:	69f9      	ldr	r1, [r7, #28]
 8006958:	4401      	add	r1, r0
 800695a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800695e:	4313      	orrs	r3, r2
 8006960:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	791b      	ldrb	r3, [r3, #4]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d11f      	bne.n	80069aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	4413      	add	r3, r2
 8006972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	0151      	lsls	r1, r2, #5
 800697c:	69fa      	ldr	r2, [r7, #28]
 800697e:	440a      	add	r2, r1
 8006980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006984:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006988:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	0151      	lsls	r1, r2, #5
 800699c:	69fa      	ldr	r2, [r7, #28]
 800699e:	440a      	add	r2, r1
 80069a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80069aa:	79fb      	ldrb	r3, [r7, #7]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d14b      	bne.n	8006a48 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d009      	beq.n	80069cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c4:	461a      	mov	r2, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	791b      	ldrb	r3, [r3, #4]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d128      	bne.n	8006a26 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d110      	bne.n	8006a06 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	e00f      	b.n	8006a26 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	0151      	lsls	r1, r2, #5
 8006a18:	69fa      	ldr	r2, [r7, #28]
 8006a1a:	440a      	add	r2, r1
 8006a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a24:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	0151      	lsls	r1, r2, #5
 8006a38:	69fa      	ldr	r2, [r7, #28]
 8006a3a:	440a      	add	r2, r1
 8006a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	e137      	b.n	8006cb8 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	0151      	lsls	r1, r2, #5
 8006a5a:	69fa      	ldr	r2, [r7, #28]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a66:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	791b      	ldrb	r3, [r3, #4]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d015      	beq.n	8006a9c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 811f 	beq.w	8006cb8 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a90:	69f9      	ldr	r1, [r7, #28]
 8006a92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a96:	4313      	orrs	r3, r2
 8006a98:	634b      	str	r3, [r1, #52]	; 0x34
 8006a9a:	e10d      	b.n	8006cb8 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d110      	bne.n	8006ace <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	0151      	lsls	r1, r2, #5
 8006abe:	69fa      	ldr	r2, [r7, #28]
 8006ac0:	440a      	add	r2, r1
 8006ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	e00f      	b.n	8006aee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	0151      	lsls	r1, r2, #5
 8006ae0:	69fa      	ldr	r2, [r7, #28]
 8006ae2:	440a      	add	r2, r1
 8006ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	6919      	ldr	r1, [r3, #16]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	781a      	ldrb	r2, [r3, #0]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	b298      	uxth	r0, r3
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	4603      	mov	r3, r0
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 faea 	bl	80070dc <USB_WritePacket>
 8006b08:	e0d6      	b.n	8006cb8 <USB_EPStartXfer+0x488>
 8006b0a:	bf00      	nop
 8006b0c:	e007ffff 	.word	0xe007ffff
 8006b10:	fff80000 	.word	0xfff80000
 8006b14:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	0159      	lsls	r1, r3, #5
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	440b      	add	r3, r1
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b32:	4619      	mov	r1, r3
 8006b34:	4b63      	ldr	r3, [pc, #396]	; (8006cc4 <USB_EPStartXfer+0x494>)
 8006b36:	4013      	ands	r3, r2
 8006b38:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	0159      	lsls	r1, r3, #5
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	440b      	add	r3, r1
 8006b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b54:	4619      	mov	r1, r3
 8006b56:	4b5c      	ldr	r3, [pc, #368]	; (8006cc8 <USB_EPStartXfer+0x498>)
 8006b58:	4013      	ands	r3, r2
 8006b5a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d123      	bne.n	8006bac <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b7a:	69b9      	ldr	r1, [r7, #24]
 8006b7c:	0148      	lsls	r0, r1, #5
 8006b7e:	69f9      	ldr	r1, [r7, #28]
 8006b80:	4401      	add	r1, r0
 8006b82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b86:	4313      	orrs	r3, r2
 8006b88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	0151      	lsls	r1, r2, #5
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	440a      	add	r2, r1
 8006ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ba8:	6113      	str	r3, [r2, #16]
 8006baa:	e037      	b.n	8006c1c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	699a      	ldr	r2, [r3, #24]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	1e5a      	subs	r2, r3, #1
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	8afa      	ldrh	r2, [r7, #22]
 8006bc8:	fb03 f202 	mul.w	r2, r3, r2
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bdc:	691a      	ldr	r2, [r3, #16]
 8006bde:	8afb      	ldrh	r3, [r7, #22]
 8006be0:	04d9      	lsls	r1, r3, #19
 8006be2:	4b3a      	ldr	r3, [pc, #232]	; (8006ccc <USB_EPStartXfer+0x49c>)
 8006be4:	400b      	ands	r3, r1
 8006be6:	69b9      	ldr	r1, [r7, #24]
 8006be8:	0148      	lsls	r0, r1, #5
 8006bea:	69f9      	ldr	r1, [r7, #28]
 8006bec:	4401      	add	r1, r0
 8006bee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c02:	691a      	ldr	r2, [r3, #16]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c0c:	69b9      	ldr	r1, [r7, #24]
 8006c0e:	0148      	lsls	r0, r1, #5
 8006c10:	69f9      	ldr	r1, [r7, #28]
 8006c12:	4401      	add	r1, r0
 8006c14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d10d      	bne.n	8006c3e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d009      	beq.n	8006c3e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	6919      	ldr	r1, [r3, #16]
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3a:	460a      	mov	r2, r1
 8006c3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	791b      	ldrb	r3, [r3, #4]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d128      	bne.n	8006c98 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d110      	bne.n	8006c78 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	0151      	lsls	r1, r2, #5
 8006c68:	69fa      	ldr	r2, [r7, #28]
 8006c6a:	440a      	add	r2, r1
 8006c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	e00f      	b.n	8006c98 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	0151      	lsls	r1, r2, #5
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	440a      	add	r2, r1
 8006c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	0151      	lsls	r1, r2, #5
 8006caa:	69fa      	ldr	r2, [r7, #28]
 8006cac:	440a      	add	r2, r1
 8006cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	fff80000 	.word	0xfff80000
 8006cc8:	e007ffff 	.word	0xe007ffff
 8006ccc:	1ff80000 	.word	0x1ff80000

08006cd0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	785b      	ldrb	r3, [r3, #1]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	f040 80ce 	bne.w	8006e8e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d132      	bne.n	8006d60 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	0159      	lsls	r1, r3, #5
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	440b      	add	r3, r1
 8006d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d14:	4619      	mov	r1, r3
 8006d16:	4b9a      	ldr	r3, [pc, #616]	; (8006f80 <USB_EP0StartXfer+0x2b0>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	0159      	lsls	r1, r3, #5
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	440b      	add	r3, r1
 8006d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d56:	4619      	mov	r1, r3
 8006d58:	4b8a      	ldr	r3, [pc, #552]	; (8006f84 <USB_EP0StartXfer+0x2b4>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	610b      	str	r3, [r1, #16]
 8006d5e:	e04e      	b.n	8006dfe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6c:	691a      	ldr	r2, [r3, #16]
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	0159      	lsls	r1, r3, #5
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	440b      	add	r3, r1
 8006d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4b81      	ldr	r3, [pc, #516]	; (8006f84 <USB_EP0StartXfer+0x2b4>)
 8006d7e:	4013      	ands	r3, r2
 8006d80:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8e:	691a      	ldr	r2, [r3, #16]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	0159      	lsls	r1, r3, #5
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	440b      	add	r3, r1
 8006d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4b78      	ldr	r3, [pc, #480]	; (8006f80 <USB_EP0StartXfer+0x2b0>)
 8006da0:	4013      	ands	r3, r2
 8006da2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	699a      	ldr	r2, [r3, #24]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d903      	bls.n	8006db8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	691a      	ldr	r2, [r3, #16]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dee:	6939      	ldr	r1, [r7, #16]
 8006df0:	0148      	lsls	r0, r1, #5
 8006df2:	6979      	ldr	r1, [r7, #20]
 8006df4:	4401      	add	r1, r0
 8006df6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d11e      	bne.n	8006e42 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d009      	beq.n	8006e20 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e18:	461a      	mov	r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	e097      	b.n	8006f72 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	0151      	lsls	r1, r2, #5
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	440a      	add	r2, r1
 8006e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e60:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 8083 	beq.w	8006f72 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	f003 030f 	and.w	r3, r3, #15
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e82:	6979      	ldr	r1, [r7, #20]
 8006e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	634b      	str	r3, [r1, #52]	; 0x34
 8006e8c:	e071      	b.n	8006f72 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9a:	691a      	ldr	r2, [r3, #16]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	0159      	lsls	r1, r3, #5
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	440b      	add	r3, r1
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4b36      	ldr	r3, [pc, #216]	; (8006f84 <USB_EP0StartXfer+0x2b4>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebc:	691a      	ldr	r2, [r3, #16]
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	0159      	lsls	r1, r3, #5
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	440b      	add	r3, r1
 8006ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eca:	4619      	mov	r1, r3
 8006ecc:	4b2c      	ldr	r3, [pc, #176]	; (8006f80 <USB_EP0StartXfer+0x2b0>)
 8006ece:	4013      	ands	r3, r2
 8006ed0:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	68da      	ldr	r2, [r3, #12]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	0151      	lsls	r1, r2, #5
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	440a      	add	r2, r1
 8006f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f16:	691a      	ldr	r2, [r3, #16]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f20:	6939      	ldr	r1, [r7, #16]
 8006f22:	0148      	lsls	r0, r1, #5
 8006f24:	6979      	ldr	r1, [r7, #20]
 8006f26:	4401      	add	r1, r0
 8006f28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006f30:	79fb      	ldrb	r3, [r7, #7]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d10d      	bne.n	8006f52 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	6919      	ldr	r1, [r3, #16]
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4e:	460a      	mov	r2, r1
 8006f50:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	0151      	lsls	r1, r2, #5
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	440a      	add	r2, r1
 8006f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	371c      	adds	r7, #28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	e007ffff 	.word	0xe007ffff
 8006f84:	fff80000 	.word	0xfff80000

08006f88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	785b      	ldrb	r3, [r3, #1]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d14a      	bne.n	800703c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fbe:	f040 8086 	bne.w	80070ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	7812      	ldrb	r2, [r2, #0]
 8006fd6:	0151      	lsls	r1, r2, #5
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	440a      	add	r2, r1
 8006fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fe4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	7812      	ldrb	r2, [r2, #0]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007008:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f242 7210 	movw	r2, #10000	; 0x2710
 8007016:	4293      	cmp	r3, r2
 8007018:	d902      	bls.n	8007020 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	75fb      	strb	r3, [r7, #23]
          break;
 800701e:	e056      	b.n	80070ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	4413      	add	r3, r2
 800702a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007038:	d0e7      	beq.n	800700a <USB_EPStopXfer+0x82>
 800703a:	e048      	b.n	80070ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007054:	d13b      	bne.n	80070ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	7812      	ldrb	r2, [r2, #0]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	440a      	add	r2, r1
 8007070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007074:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007078:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	7812      	ldrb	r2, [r2, #0]
 800708e:	0151      	lsls	r1, r2, #5
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	440a      	add	r2, r1
 8007094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007098:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800709c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3301      	adds	r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d902      	bls.n	80070b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	75fb      	strb	r3, [r7, #23]
          break;
 80070b2:	e00c      	b.n	80070ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070cc:	d0e7      	beq.n	800709e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	371c      	adds	r7, #28
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80070dc:	b480      	push	{r7}
 80070de:	b089      	sub	sp, #36	; 0x24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	4611      	mov	r1, r2
 80070e8:	461a      	mov	r2, r3
 80070ea:	460b      	mov	r3, r1
 80070ec:	71fb      	strb	r3, [r7, #7]
 80070ee:	4613      	mov	r3, r2
 80070f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80070fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d123      	bne.n	800714a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007102:	88bb      	ldrh	r3, [r7, #4]
 8007104:	3303      	adds	r3, #3
 8007106:	089b      	lsrs	r3, r3, #2
 8007108:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800710a:	2300      	movs	r3, #0
 800710c:	61bb      	str	r3, [r7, #24]
 800710e:	e018      	b.n	8007142 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	031a      	lsls	r2, r3, #12
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	4413      	add	r3, r2
 8007118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800711c:	461a      	mov	r2, r3
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	3301      	adds	r3, #1
 8007128:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	3301      	adds	r3, #1
 800712e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	3301      	adds	r3, #1
 8007134:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	3301      	adds	r3, #1
 800713a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	3301      	adds	r3, #1
 8007140:	61bb      	str	r3, [r7, #24]
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	429a      	cmp	r2, r3
 8007148:	d3e2      	bcc.n	8007110 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3724      	adds	r7, #36	; 0x24
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007158:	b480      	push	{r7}
 800715a:	b08b      	sub	sp, #44	; 0x2c
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	4613      	mov	r3, r2
 8007164:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800716e:	88fb      	ldrh	r3, [r7, #6]
 8007170:	089b      	lsrs	r3, r3, #2
 8007172:	b29b      	uxth	r3, r3
 8007174:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	f003 0303 	and.w	r3, r3, #3
 800717c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800717e:	2300      	movs	r3, #0
 8007180:	623b      	str	r3, [r7, #32]
 8007182:	e014      	b.n	80071ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	3301      	adds	r3, #1
 8007194:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	3301      	adds	r3, #1
 800719a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	3301      	adds	r3, #1
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	3301      	adds	r3, #1
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	3301      	adds	r3, #1
 80071ac:	623b      	str	r3, [r7, #32]
 80071ae:	6a3a      	ldr	r2, [r7, #32]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d3e6      	bcc.n	8007184 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071b6:	8bfb      	ldrh	r3, [r7, #30]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d01e      	beq.n	80071fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c6:	461a      	mov	r2, r3
 80071c8:	f107 0310 	add.w	r3, r7, #16
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	fa22 f303 	lsr.w	r3, r2, r3
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	701a      	strb	r2, [r3, #0]
      i++;
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	3301      	adds	r3, #1
 80071e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	3301      	adds	r3, #1
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80071ee:	8bfb      	ldrh	r3, [r7, #30]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80071f4:	8bfb      	ldrh	r3, [r7, #30]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1ea      	bne.n	80071d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	372c      	adds	r7, #44	; 0x2c
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d12c      	bne.n	800727e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	db12      	blt.n	800725c <USB_EPSetStall+0x54>
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00f      	beq.n	800725c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	440a      	add	r2, r1
 8007252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007256:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800725a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	0151      	lsls	r1, r2, #5
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	440a      	add	r2, r1
 8007272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	e02b      	b.n	80072d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	db12      	blt.n	80072b6 <USB_EPSetStall+0xae>
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00f      	beq.n	80072b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	0151      	lsls	r1, r2, #5
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	440a      	add	r2, r1
 80072cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d128      	bne.n	8007352 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	0151      	lsls	r1, r2, #5
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	440a      	add	r2, r1
 8007316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800731a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800731e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	791b      	ldrb	r3, [r3, #4]
 8007324:	2b03      	cmp	r3, #3
 8007326:	d003      	beq.n	8007330 <USB_EPClearStall+0x4c>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	791b      	ldrb	r3, [r3, #4]
 800732c:	2b02      	cmp	r3, #2
 800732e:	d138      	bne.n	80073a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	0151      	lsls	r1, r2, #5
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	440a      	add	r2, r1
 8007346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800734a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	e027      	b.n	80073a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	440a      	add	r2, r1
 8007368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007370:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	791b      	ldrb	r3, [r3, #4]
 8007376:	2b03      	cmp	r3, #3
 8007378:	d003      	beq.n	8007382 <USB_EPClearStall+0x9e>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	791b      	ldrb	r3, [r3, #4]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d10f      	bne.n	80073a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	0151      	lsls	r1, r2, #5
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	440a      	add	r2, r1
 8007398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800739c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80073d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80073e4:	68f9      	ldr	r1, [r7, #12]
 80073e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073ea:	4313      	orrs	r3, r2
 80073ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007416:	f023 0303 	bic.w	r3, r3, #3
 800741a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800742a:	f023 0302 	bic.w	r3, r3, #2
 800742e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007458:	f023 0303 	bic.w	r3, r3, #3
 800745c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800746c:	f043 0302 	orr.w	r3, r3, #2
 8007470:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4013      	ands	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007498:	68fb      	ldr	r3, [r7, #12]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b085      	sub	sp, #20
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	4013      	ands	r3, r2
 80074c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	0c1b      	lsrs	r3, r3, #16
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074da:	b480      	push	{r7}
 80074dc:	b085      	sub	sp, #20
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	4013      	ands	r3, r2
 80074fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	b29b      	uxth	r3, r3
}
 8007502:	4618      	mov	r0, r3
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800750e:	b480      	push	{r7}
 8007510:	b085      	sub	sp, #20
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	460b      	mov	r3, r1
 8007518:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800751e:	78fb      	ldrb	r3, [r7, #3]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	4013      	ands	r3, r2
 800753a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800753c:	68bb      	ldr	r3, [r7, #8]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800754a:	b480      	push	{r7}
 800754c:	b087      	sub	sp, #28
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800756e:	78fb      	ldrb	r3, [r7, #3]
 8007570:	f003 030f 	and.w	r3, r3, #15
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	fa22 f303 	lsr.w	r3, r2, r3
 800757a:	01db      	lsls	r3, r3, #7
 800757c:	b2db      	uxtb	r3, r3
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4313      	orrs	r3, r2
 8007582:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007584:	78fb      	ldrb	r3, [r7, #3]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	4013      	ands	r3, r2
 8007596:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007598:	68bb      	ldr	r3, [r7, #8]
}
 800759a:	4618      	mov	r0, r3
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	f003 0301 	and.w	r3, r3, #1
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
	...

080075c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075de:	4619      	mov	r1, r3
 80075e0:	4b09      	ldr	r3, [pc, #36]	; (8007608 <USB_ActivateSetup+0x44>)
 80075e2:	4013      	ands	r3, r2
 80075e4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	fffff800 	.word	0xfffff800

0800760c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	460b      	mov	r3, r1
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	333c      	adds	r3, #60	; 0x3c
 8007622:	3304      	adds	r3, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	4a26      	ldr	r2, [pc, #152]	; (80076c4 <USB_EP0_OutStart+0xb8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d90a      	bls.n	8007646 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800763c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007640:	d101      	bne.n	8007646 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	e037      	b.n	80076b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764c:	461a      	mov	r2, r3
 800764e:	2300      	movs	r3, #0
 8007650:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007660:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007664:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007674:	f043 0318 	orr.w	r3, r3, #24
 8007678:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007688:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800768c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800768e:	7afb      	ldrb	r3, [r7, #11]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d10f      	bne.n	80076b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	461a      	mov	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80076b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	4f54300a 	.word	0x4f54300a

080076c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3301      	adds	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4a13      	ldr	r2, [pc, #76]	; (800772c <USB_CoreReset+0x64>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d901      	bls.n	80076e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e01b      	b.n	800771e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	daf2      	bge.n	80076d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f043 0201 	orr.w	r2, r3, #1
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3301      	adds	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4a09      	ldr	r2, [pc, #36]	; (800772c <USB_CoreReset+0x64>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d901      	bls.n	8007710 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e006      	b.n	800771e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	2b01      	cmp	r3, #1
 800771a:	d0f0      	beq.n	80076fe <USB_CoreReset+0x36>

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	00030d40 	.word	0x00030d40

08007730 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800773c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007740:	f002 fd12 	bl	800a168 <malloc>
 8007744:	4603      	mov	r3, r0
 8007746:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d109      	bne.n	8007762 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	32b0      	adds	r2, #176	; 0xb0
 8007758:	2100      	movs	r1, #0
 800775a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800775e:	2302      	movs	r3, #2
 8007760:	e0d4      	b.n	800790c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007762:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007766:	2100      	movs	r1, #0
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f002 fdb9 	bl	800a2e0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	32b0      	adds	r2, #176	; 0xb0
 8007778:	68f9      	ldr	r1, [r7, #12]
 800777a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	32b0      	adds	r2, #176	; 0xb0
 8007788:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	7c1b      	ldrb	r3, [r3, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d138      	bne.n	800780c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800779a:	4b5e      	ldr	r3, [pc, #376]	; (8007914 <USBD_CDC_Init+0x1e4>)
 800779c:	7819      	ldrb	r1, [r3, #0]
 800779e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077a2:	2202      	movs	r2, #2
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f002 fb3c 	bl	8009e22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077aa:	4b5a      	ldr	r3, [pc, #360]	; (8007914 <USBD_CDC_Init+0x1e4>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	f003 020f 	and.w	r2, r3, #15
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	3324      	adds	r3, #36	; 0x24
 80077c0:	2201      	movs	r2, #1
 80077c2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80077c4:	4b54      	ldr	r3, [pc, #336]	; (8007918 <USBD_CDC_Init+0x1e8>)
 80077c6:	7819      	ldrb	r1, [r3, #0]
 80077c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077cc:	2202      	movs	r2, #2
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f002 fb27 	bl	8009e22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80077d4:	4b50      	ldr	r3, [pc, #320]	; (8007918 <USBD_CDC_Init+0x1e8>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	f003 020f 	and.w	r2, r3, #15
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	440b      	add	r3, r1
 80077e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80077ec:	2201      	movs	r2, #1
 80077ee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80077f0:	4b4a      	ldr	r3, [pc, #296]	; (800791c <USBD_CDC_Init+0x1ec>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f003 020f 	and.w	r2, r3, #15
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	440b      	add	r3, r1
 8007804:	3326      	adds	r3, #38	; 0x26
 8007806:	2210      	movs	r2, #16
 8007808:	801a      	strh	r2, [r3, #0]
 800780a:	e035      	b.n	8007878 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800780c:	4b41      	ldr	r3, [pc, #260]	; (8007914 <USBD_CDC_Init+0x1e4>)
 800780e:	7819      	ldrb	r1, [r3, #0]
 8007810:	2340      	movs	r3, #64	; 0x40
 8007812:	2202      	movs	r2, #2
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f002 fb04 	bl	8009e22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800781a:	4b3e      	ldr	r3, [pc, #248]	; (8007914 <USBD_CDC_Init+0x1e4>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	f003 020f 	and.w	r2, r3, #15
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	4613      	mov	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	440b      	add	r3, r1
 800782e:	3324      	adds	r3, #36	; 0x24
 8007830:	2201      	movs	r2, #1
 8007832:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007834:	4b38      	ldr	r3, [pc, #224]	; (8007918 <USBD_CDC_Init+0x1e8>)
 8007836:	7819      	ldrb	r1, [r3, #0]
 8007838:	2340      	movs	r3, #64	; 0x40
 800783a:	2202      	movs	r2, #2
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f002 faf0 	bl	8009e22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007842:	4b35      	ldr	r3, [pc, #212]	; (8007918 <USBD_CDC_Init+0x1e8>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	f003 020f 	and.w	r2, r3, #15
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	440b      	add	r3, r1
 8007856:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800785a:	2201      	movs	r2, #1
 800785c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800785e:	4b2f      	ldr	r3, [pc, #188]	; (800791c <USBD_CDC_Init+0x1ec>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f003 020f 	and.w	r2, r3, #15
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	4613      	mov	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	440b      	add	r3, r1
 8007872:	3326      	adds	r3, #38	; 0x26
 8007874:	2210      	movs	r2, #16
 8007876:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007878:	4b28      	ldr	r3, [pc, #160]	; (800791c <USBD_CDC_Init+0x1ec>)
 800787a:	7819      	ldrb	r1, [r3, #0]
 800787c:	2308      	movs	r3, #8
 800787e:	2203      	movs	r2, #3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f002 face 	bl	8009e22 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007886:	4b25      	ldr	r3, [pc, #148]	; (800791c <USBD_CDC_Init+0x1ec>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	f003 020f 	and.w	r2, r3, #15
 800788e:	6879      	ldr	r1, [r7, #4]
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	440b      	add	r3, r1
 800789a:	3324      	adds	r3, #36	; 0x24
 800789c:	2201      	movs	r2, #1
 800789e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	33b0      	adds	r3, #176	; 0xb0
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80078d6:	2302      	movs	r3, #2
 80078d8:	e018      	b.n	800790c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	7c1b      	ldrb	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078e2:	4b0d      	ldr	r3, [pc, #52]	; (8007918 <USBD_CDC_Init+0x1e8>)
 80078e4:	7819      	ldrb	r1, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f002 fb85 	bl	800a000 <USBD_LL_PrepareReceive>
 80078f6:	e008      	b.n	800790a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078f8:	4b07      	ldr	r3, [pc, #28]	; (8007918 <USBD_CDC_Init+0x1e8>)
 80078fa:	7819      	ldrb	r1, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007902:	2340      	movs	r3, #64	; 0x40
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f002 fb7b 	bl	800a000 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	200000b3 	.word	0x200000b3
 8007918:	200000b4 	.word	0x200000b4
 800791c:	200000b5 	.word	0x200000b5

08007920 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	460b      	mov	r3, r1
 800792a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800792c:	4b3a      	ldr	r3, [pc, #232]	; (8007a18 <USBD_CDC_DeInit+0xf8>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f002 fa9b 	bl	8009e6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007938:	4b37      	ldr	r3, [pc, #220]	; (8007a18 <USBD_CDC_DeInit+0xf8>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f003 020f 	and.w	r2, r3, #15
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	3324      	adds	r3, #36	; 0x24
 800794e:	2200      	movs	r2, #0
 8007950:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007952:	4b32      	ldr	r3, [pc, #200]	; (8007a1c <USBD_CDC_DeInit+0xfc>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f002 fa88 	bl	8009e6e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800795e:	4b2f      	ldr	r3, [pc, #188]	; (8007a1c <USBD_CDC_DeInit+0xfc>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	f003 020f 	and.w	r2, r3, #15
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	4613      	mov	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	440b      	add	r3, r1
 8007972:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007976:	2200      	movs	r2, #0
 8007978:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800797a:	4b29      	ldr	r3, [pc, #164]	; (8007a20 <USBD_CDC_DeInit+0x100>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f002 fa74 	bl	8009e6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007986:	4b26      	ldr	r3, [pc, #152]	; (8007a20 <USBD_CDC_DeInit+0x100>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	f003 020f 	and.w	r2, r3, #15
 800798e:	6879      	ldr	r1, [r7, #4]
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	440b      	add	r3, r1
 800799a:	3324      	adds	r3, #36	; 0x24
 800799c:	2200      	movs	r2, #0
 800799e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80079a0:	4b1f      	ldr	r3, [pc, #124]	; (8007a20 <USBD_CDC_DeInit+0x100>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	f003 020f 	and.w	r2, r3, #15
 80079a8:	6879      	ldr	r1, [r7, #4]
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	440b      	add	r3, r1
 80079b4:	3326      	adds	r3, #38	; 0x26
 80079b6:	2200      	movs	r2, #0
 80079b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	32b0      	adds	r2, #176	; 0xb0
 80079c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01f      	beq.n	8007a0c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	33b0      	adds	r3, #176	; 0xb0
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	32b0      	adds	r2, #176	; 0xb0
 80079ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f002 fbc2 	bl	800a178 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	32b0      	adds	r2, #176	; 0xb0
 80079fe:	2100      	movs	r1, #0
 8007a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	200000b3 	.word	0x200000b3
 8007a1c:	200000b4 	.word	0x200000b4
 8007a20:	200000b5 	.word	0x200000b5

08007a24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	32b0      	adds	r2, #176	; 0xb0
 8007a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e0bf      	b.n	8007bd4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d050      	beq.n	8007b02 <USBD_CDC_Setup+0xde>
 8007a60:	2b20      	cmp	r3, #32
 8007a62:	f040 80af 	bne.w	8007bc4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	88db      	ldrh	r3, [r3, #6]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d03a      	beq.n	8007ae4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	b25b      	sxtb	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	da1b      	bge.n	8007ab0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	33b0      	adds	r3, #176	; 0xb0
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007a8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	88d2      	ldrh	r2, [r2, #6]
 8007a94:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	88db      	ldrh	r3, [r3, #6]
 8007a9a:	2b07      	cmp	r3, #7
 8007a9c:	bf28      	it	cs
 8007a9e:	2307      	movcs	r3, #7
 8007aa0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	89fa      	ldrh	r2, [r7, #14]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f001 fd6d 	bl	8009588 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007aae:	e090      	b.n	8007bd2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	785a      	ldrb	r2, [r3, #1]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	88db      	ldrh	r3, [r3, #6]
 8007abe:	2b3f      	cmp	r3, #63	; 0x3f
 8007ac0:	d803      	bhi.n	8007aca <USBD_CDC_Setup+0xa6>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	88db      	ldrh	r3, [r3, #6]
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	e000      	b.n	8007acc <USBD_CDC_Setup+0xa8>
 8007aca:	2240      	movs	r2, #64	; 0x40
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007ad2:	6939      	ldr	r1, [r7, #16]
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007ada:	461a      	mov	r2, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 fd7f 	bl	80095e0 <USBD_CtlPrepareRx>
      break;
 8007ae2:	e076      	b.n	8007bd2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	33b0      	adds	r3, #176	; 0xb0
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	7850      	ldrb	r0, [r2, #1]
 8007afa:	2200      	movs	r2, #0
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	4798      	blx	r3
      break;
 8007b00:	e067      	b.n	8007bd2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	785b      	ldrb	r3, [r3, #1]
 8007b06:	2b0b      	cmp	r3, #11
 8007b08:	d851      	bhi.n	8007bae <USBD_CDC_Setup+0x18a>
 8007b0a:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <USBD_CDC_Setup+0xec>)
 8007b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b10:	08007b41 	.word	0x08007b41
 8007b14:	08007bbd 	.word	0x08007bbd
 8007b18:	08007baf 	.word	0x08007baf
 8007b1c:	08007baf 	.word	0x08007baf
 8007b20:	08007baf 	.word	0x08007baf
 8007b24:	08007baf 	.word	0x08007baf
 8007b28:	08007baf 	.word	0x08007baf
 8007b2c:	08007baf 	.word	0x08007baf
 8007b30:	08007baf 	.word	0x08007baf
 8007b34:	08007baf 	.word	0x08007baf
 8007b38:	08007b6b 	.word	0x08007b6b
 8007b3c:	08007b95 	.word	0x08007b95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d107      	bne.n	8007b5c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b4c:	f107 030a 	add.w	r3, r7, #10
 8007b50:	2202      	movs	r2, #2
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f001 fd17 	bl	8009588 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b5a:	e032      	b.n	8007bc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 fca1 	bl	80094a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b64:	2303      	movs	r3, #3
 8007b66:	75fb      	strb	r3, [r7, #23]
          break;
 8007b68:	e02b      	b.n	8007bc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d107      	bne.n	8007b86 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b76:	f107 030d 	add.w	r3, r7, #13
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 fd02 	bl	8009588 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b84:	e01d      	b.n	8007bc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 fc8c 	bl	80094a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	75fb      	strb	r3, [r7, #23]
          break;
 8007b92:	e016      	b.n	8007bc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d00f      	beq.n	8007bc0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f001 fc7f 	bl	80094a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bac:	e008      	b.n	8007bc0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 fc78 	bl	80094a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8007bba:	e002      	b.n	8007bc2 <USBD_CDC_Setup+0x19e>
          break;
 8007bbc:	bf00      	nop
 8007bbe:	e008      	b.n	8007bd2 <USBD_CDC_Setup+0x1ae>
          break;
 8007bc0:	bf00      	nop
      }
      break;
 8007bc2:	e006      	b.n	8007bd2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 fc6d 	bl	80094a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	32b0      	adds	r2, #176	; 0xb0
 8007bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e065      	b.n	8007cd2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	32b0      	adds	r2, #176	; 0xb0
 8007c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c16:	78fb      	ldrb	r3, [r7, #3]
 8007c18:	f003 020f 	and.w	r2, r3, #15
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	3318      	adds	r3, #24
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d02f      	beq.n	8007c90 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	f003 020f 	and.w	r2, r3, #15
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	3318      	adds	r3, #24
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	f003 010f 	and.w	r1, r3, #15
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	460b      	mov	r3, r1
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	440b      	add	r3, r1
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4403      	add	r3, r0
 8007c58:	3348      	adds	r3, #72	; 0x48
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c60:	fb01 f303 	mul.w	r3, r1, r3
 8007c64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d112      	bne.n	8007c90 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	f003 020f 	and.w	r2, r3, #15
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	3318      	adds	r3, #24
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c82:	78f9      	ldrb	r1, [r7, #3]
 8007c84:	2300      	movs	r3, #0
 8007c86:	2200      	movs	r2, #0
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f002 f998 	bl	8009fbe <USBD_LL_Transmit>
 8007c8e:	e01f      	b.n	8007cd0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	33b0      	adds	r3, #176	; 0xb0
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d010      	beq.n	8007cd0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	33b0      	adds	r3, #176	; 0xb0
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007ccc:	78fa      	ldrb	r2, [r7, #3]
 8007cce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	32b0      	adds	r2, #176	; 0xb0
 8007cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	32b0      	adds	r2, #176	; 0xb0
 8007d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e01a      	b.n	8007d42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f002 f996 	bl	800a042 <USBD_LL_GetRxDataSize>
 8007d16:	4602      	mov	r2, r0
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	33b0      	adds	r3, #176	; 0xb0
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	32b0      	adds	r2, #176	; 0xb0
 8007d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e025      	b.n	8007db8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	33b0      	adds	r3, #176	; 0xb0
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01a      	beq.n	8007db6 <USBD_CDC_EP0_RxReady+0x6c>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d86:	2bff      	cmp	r3, #255	; 0xff
 8007d88:	d015      	beq.n	8007db6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	33b0      	adds	r3, #176	; 0xb0
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007da2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007daa:	b292      	uxth	r2, r2
 8007dac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	22ff      	movs	r2, #255	; 0xff
 8007db2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007dc8:	2182      	movs	r1, #130	; 0x82
 8007dca:	4818      	ldr	r0, [pc, #96]	; (8007e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007dcc:	f000 fd09 	bl	80087e2 <USBD_GetEpDesc>
 8007dd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	4815      	ldr	r0, [pc, #84]	; (8007e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007dd6:	f000 fd04 	bl	80087e2 <USBD_GetEpDesc>
 8007dda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ddc:	2181      	movs	r1, #129	; 0x81
 8007dde:	4813      	ldr	r0, [pc, #76]	; (8007e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007de0:	f000 fcff 	bl	80087e2 <USBD_GetEpDesc>
 8007de4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d002      	beq.n	8007df2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	2210      	movs	r2, #16
 8007df0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d006      	beq.n	8007e06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e00:	711a      	strb	r2, [r3, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d006      	beq.n	8007e1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e14:	711a      	strb	r2, [r3, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2243      	movs	r2, #67	; 0x43
 8007e1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e20:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000070 	.word	0x20000070

08007e30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e38:	2182      	movs	r1, #130	; 0x82
 8007e3a:	4818      	ldr	r0, [pc, #96]	; (8007e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e3c:	f000 fcd1 	bl	80087e2 <USBD_GetEpDesc>
 8007e40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e42:	2101      	movs	r1, #1
 8007e44:	4815      	ldr	r0, [pc, #84]	; (8007e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e46:	f000 fccc 	bl	80087e2 <USBD_GetEpDesc>
 8007e4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e4c:	2181      	movs	r1, #129	; 0x81
 8007e4e:	4813      	ldr	r0, [pc, #76]	; (8007e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e50:	f000 fcc7 	bl	80087e2 <USBD_GetEpDesc>
 8007e54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2210      	movs	r2, #16
 8007e60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d006      	beq.n	8007e76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	711a      	strb	r2, [r3, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f042 0202 	orr.w	r2, r2, #2
 8007e74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d006      	beq.n	8007e8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	711a      	strb	r2, [r3, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f042 0202 	orr.w	r2, r2, #2
 8007e88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2243      	movs	r2, #67	; 0x43
 8007e8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e90:	4b02      	ldr	r3, [pc, #8]	; (8007e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000070 	.word	0x20000070

08007ea0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ea8:	2182      	movs	r1, #130	; 0x82
 8007eaa:	4818      	ldr	r0, [pc, #96]	; (8007f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007eac:	f000 fc99 	bl	80087e2 <USBD_GetEpDesc>
 8007eb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	4815      	ldr	r0, [pc, #84]	; (8007f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007eb6:	f000 fc94 	bl	80087e2 <USBD_GetEpDesc>
 8007eba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ebc:	2181      	movs	r1, #129	; 0x81
 8007ebe:	4813      	ldr	r0, [pc, #76]	; (8007f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ec0:	f000 fc8f 	bl	80087e2 <USBD_GetEpDesc>
 8007ec4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2210      	movs	r2, #16
 8007ed0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d006      	beq.n	8007ee6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ee0:	711a      	strb	r2, [r3, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d006      	beq.n	8007efa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ef4:	711a      	strb	r2, [r3, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2243      	movs	r2, #67	; 0x43
 8007efe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f00:	4b02      	ldr	r3, [pc, #8]	; (8007f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000070 	.word	0x20000070

08007f10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	220a      	movs	r2, #10
 8007f1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f1e:	4b03      	ldr	r3, [pc, #12]	; (8007f2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	2000002c 	.word	0x2000002c

08007f30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e009      	b.n	8007f58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	33b0      	adds	r3, #176	; 0xb0
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b087      	sub	sp, #28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	32b0      	adds	r2, #176	; 0xb0
 8007f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e008      	b.n	8007f9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	371c      	adds	r7, #28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	32b0      	adds	r2, #176	; 0xb0
 8007fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e004      	b.n	8007fd6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
	...

08007fe4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	32b0      	adds	r2, #176	; 0xb0
 8007ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	32b0      	adds	r2, #176	; 0xb0
 8008006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800800e:	2303      	movs	r3, #3
 8008010:	e018      	b.n	8008044 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	7c1b      	ldrb	r3, [r3, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10a      	bne.n	8008030 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800801a:	4b0c      	ldr	r3, [pc, #48]	; (800804c <USBD_CDC_ReceivePacket+0x68>)
 800801c:	7819      	ldrb	r1, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 ffe9 	bl	800a000 <USBD_LL_PrepareReceive>
 800802e:	e008      	b.n	8008042 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008030:	4b06      	ldr	r3, [pc, #24]	; (800804c <USBD_CDC_ReceivePacket+0x68>)
 8008032:	7819      	ldrb	r1, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800803a:	2340      	movs	r3, #64	; 0x40
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 ffdf 	bl	800a000 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	200000b4 	.word	0x200000b4

08008050 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	4613      	mov	r3, r2
 800805c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008064:	2303      	movs	r3, #3
 8008066:	e01f      	b.n	80080a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	79fa      	ldrb	r2, [r7, #7]
 800809a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f001 fe59 	bl	8009d54 <USBD_LL_Init>
 80080a2:	4603      	mov	r3, r0
 80080a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e025      	b.n	8008114 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	32ae      	adds	r2, #174	; 0xae
 80080da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00f      	beq.n	8008104 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	32ae      	adds	r2, #174	; 0xae
 80080ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	f107 020e 	add.w	r2, r7, #14
 80080f8:	4610      	mov	r0, r2
 80080fa:	4798      	blx	r3
 80080fc:	4602      	mov	r2, r0
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f001 fe61 	bl	8009dec <USBD_LL_Start>
 800812a:	4603      	mov	r3, r0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800813c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800813e:	4618      	mov	r0, r3
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b084      	sub	sp, #16
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008160:	2b00      	cmp	r3, #0
 8008162:	d009      	beq.n	8008178 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	78fa      	ldrb	r2, [r7, #3]
 800816e:	4611      	mov	r1, r2
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
 8008174:	4603      	mov	r3, r0
 8008176:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	460b      	mov	r3, r1
 800818c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	78fa      	ldrb	r2, [r7, #3]
 800819c:	4611      	mov	r1, r2
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80081a8:	2303      	movs	r3, #3
 80081aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f001 f932 	bl	8009432 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80081dc:	461a      	mov	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081ea:	f003 031f 	and.w	r3, r3, #31
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d01a      	beq.n	8008228 <USBD_LL_SetupStage+0x72>
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d822      	bhi.n	800823c <USBD_LL_SetupStage+0x86>
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <USBD_LL_SetupStage+0x4a>
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d00a      	beq.n	8008214 <USBD_LL_SetupStage+0x5e>
 80081fe:	e01d      	b.n	800823c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fb5f 	bl	80088cc <USBD_StdDevReq>
 800820e:	4603      	mov	r3, r0
 8008210:	73fb      	strb	r3, [r7, #15]
      break;
 8008212:	e020      	b.n	8008256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fbc7 	bl	80089b0 <USBD_StdItfReq>
 8008222:	4603      	mov	r3, r0
 8008224:	73fb      	strb	r3, [r7, #15]
      break;
 8008226:	e016      	b.n	8008256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fc29 	bl	8008a88 <USBD_StdEPReq>
 8008236:	4603      	mov	r3, r0
 8008238:	73fb      	strb	r3, [r7, #15]
      break;
 800823a:	e00c      	b.n	8008256 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008242:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008246:	b2db      	uxtb	r3, r3
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 fe2e 	bl	8009eac <USBD_LL_StallEP>
 8008250:	4603      	mov	r3, r0
 8008252:	73fb      	strb	r3, [r7, #15]
      break;
 8008254:	bf00      	nop
  }

  return ret;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	460b      	mov	r3, r1
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008272:	7afb      	ldrb	r3, [r7, #11]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d16e      	bne.n	8008356 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800827e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008286:	2b03      	cmp	r3, #3
 8008288:	f040 8098 	bne.w	80083bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	429a      	cmp	r2, r3
 8008296:	d913      	bls.n	80082c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	689a      	ldr	r2, [r3, #8]
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	1ad2      	subs	r2, r2, r3
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	4293      	cmp	r3, r2
 80082b0:	bf28      	it	cs
 80082b2:	4613      	movcs	r3, r2
 80082b4:	461a      	mov	r2, r3
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f001 f9ae 	bl	800961a <USBD_CtlContinueRx>
 80082be:	e07d      	b.n	80083bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082c6:	f003 031f 	and.w	r3, r3, #31
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d014      	beq.n	80082f8 <USBD_LL_DataOutStage+0x98>
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d81d      	bhi.n	800830e <USBD_LL_DataOutStage+0xae>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <USBD_LL_DataOutStage+0x7c>
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d003      	beq.n	80082e2 <USBD_LL_DataOutStage+0x82>
 80082da:	e018      	b.n	800830e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	75bb      	strb	r3, [r7, #22]
            break;
 80082e0:	e018      	b.n	8008314 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	4619      	mov	r1, r3
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 fa5e 	bl	80087ae <USBD_CoreFindIF>
 80082f2:	4603      	mov	r3, r0
 80082f4:	75bb      	strb	r3, [r7, #22]
            break;
 80082f6:	e00d      	b.n	8008314 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	4619      	mov	r1, r3
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 fa60 	bl	80087c8 <USBD_CoreFindEP>
 8008308:	4603      	mov	r3, r0
 800830a:	75bb      	strb	r3, [r7, #22]
            break;
 800830c:	e002      	b.n	8008314 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	75bb      	strb	r3, [r7, #22]
            break;
 8008312:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008314:	7dbb      	ldrb	r3, [r7, #22]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d119      	bne.n	800834e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b03      	cmp	r3, #3
 8008324:	d113      	bne.n	800834e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008326:	7dba      	ldrb	r2, [r7, #22]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	32ae      	adds	r2, #174	; 0xae
 800832c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00b      	beq.n	800834e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008336:	7dba      	ldrb	r2, [r7, #22]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800833e:	7dba      	ldrb	r2, [r7, #22]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	32ae      	adds	r2, #174	; 0xae
 8008344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f001 f974 	bl	800963c <USBD_CtlSendStatus>
 8008354:	e032      	b.n	80083bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008356:	7afb      	ldrb	r3, [r7, #11]
 8008358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800835c:	b2db      	uxtb	r3, r3
 800835e:	4619      	mov	r1, r3
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 fa31 	bl	80087c8 <USBD_CoreFindEP>
 8008366:	4603      	mov	r3, r0
 8008368:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800836a:	7dbb      	ldrb	r3, [r7, #22]
 800836c:	2bff      	cmp	r3, #255	; 0xff
 800836e:	d025      	beq.n	80083bc <USBD_LL_DataOutStage+0x15c>
 8008370:	7dbb      	ldrb	r3, [r7, #22]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d122      	bne.n	80083bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b03      	cmp	r3, #3
 8008380:	d117      	bne.n	80083b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008382:	7dba      	ldrb	r2, [r7, #22]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	32ae      	adds	r2, #174	; 0xae
 8008388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00f      	beq.n	80083b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008392:	7dba      	ldrb	r2, [r7, #22]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800839a:	7dba      	ldrb	r2, [r7, #22]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	32ae      	adds	r2, #174	; 0xae
 80083a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	7afa      	ldrb	r2, [r7, #11]
 80083a8:	4611      	mov	r1, r2
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	4798      	blx	r3
 80083ae:	4603      	mov	r3, r0
 80083b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
 80083ba:	e000      	b.n	80083be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b086      	sub	sp, #24
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	460b      	mov	r3, r1
 80083d0:	607a      	str	r2, [r7, #4]
 80083d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80083d4:	7afb      	ldrb	r3, [r7, #11]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d16f      	bne.n	80084ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	3314      	adds	r3, #20
 80083de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d15a      	bne.n	80084a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d914      	bls.n	8008420 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	689a      	ldr	r2, [r3, #8]
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	1ad2      	subs	r2, r2, r3
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	461a      	mov	r2, r3
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f001 f8d6 	bl	80095be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008412:	2300      	movs	r3, #0
 8008414:	2200      	movs	r2, #0
 8008416:	2100      	movs	r1, #0
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f001 fdf1 	bl	800a000 <USBD_LL_PrepareReceive>
 800841e:	e03f      	b.n	80084a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	429a      	cmp	r2, r3
 800842a:	d11c      	bne.n	8008466 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008434:	429a      	cmp	r2, r3
 8008436:	d316      	bcc.n	8008466 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008442:	429a      	cmp	r2, r3
 8008444:	d20f      	bcs.n	8008466 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008446:	2200      	movs	r2, #0
 8008448:	2100      	movs	r1, #0
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f001 f8b7 	bl	80095be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008458:	2300      	movs	r3, #0
 800845a:	2200      	movs	r2, #0
 800845c:	2100      	movs	r1, #0
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f001 fdce 	bl	800a000 <USBD_LL_PrepareReceive>
 8008464:	e01c      	b.n	80084a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b03      	cmp	r3, #3
 8008470:	d10f      	bne.n	8008492 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d009      	beq.n	8008492 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008492:	2180      	movs	r1, #128	; 0x80
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f001 fd09 	bl	8009eac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f001 f8e1 	bl	8009662 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d03a      	beq.n	8008520 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f7ff fe42 	bl	8008134 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80084b8:	e032      	b.n	8008520 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80084ba:	7afb      	ldrb	r3, [r7, #11]
 80084bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	4619      	mov	r1, r3
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 f97f 	bl	80087c8 <USBD_CoreFindEP>
 80084ca:	4603      	mov	r3, r0
 80084cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
 80084d0:	2bff      	cmp	r3, #255	; 0xff
 80084d2:	d025      	beq.n	8008520 <USBD_LL_DataInStage+0x15a>
 80084d4:	7dfb      	ldrb	r3, [r7, #23]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d122      	bne.n	8008520 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d11c      	bne.n	8008520 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80084e6:	7dfa      	ldrb	r2, [r7, #23]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	32ae      	adds	r2, #174	; 0xae
 80084ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d014      	beq.n	8008520 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80084f6:	7dfa      	ldrb	r2, [r7, #23]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80084fe:	7dfa      	ldrb	r2, [r7, #23]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	32ae      	adds	r2, #174	; 0xae
 8008504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	7afa      	ldrb	r2, [r7, #11]
 800850c:	4611      	mov	r1, r2
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	4798      	blx	r3
 8008512:	4603      	mov	r3, r0
 8008514:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008516:	7dbb      	ldrb	r3, [r7, #22]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800851c:	7dbb      	ldrb	r3, [r7, #22]
 800851e:	e000      	b.n	8008522 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3718      	adds	r7, #24
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008562:	2b00      	cmp	r3, #0
 8008564:	d014      	beq.n	8008590 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00e      	beq.n	8008590 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6852      	ldr	r2, [r2, #4]
 800857e:	b2d2      	uxtb	r2, r2
 8008580:	4611      	mov	r1, r2
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	4798      	blx	r3
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800858c:	2303      	movs	r3, #3
 800858e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008590:	2340      	movs	r3, #64	; 0x40
 8008592:	2200      	movs	r2, #0
 8008594:	2100      	movs	r1, #0
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 fc43 	bl	8009e22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2240      	movs	r2, #64	; 0x40
 80085a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085ac:	2340      	movs	r3, #64	; 0x40
 80085ae:	2200      	movs	r2, #0
 80085b0:	2180      	movs	r1, #128	; 0x80
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 fc35 	bl	8009e22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2240      	movs	r2, #64	; 0x40
 80085c2:	621a      	str	r2, [r3, #32]

  return ret;
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	460b      	mov	r3, r1
 80085d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	78fa      	ldrb	r2, [r7, #3]
 80085de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	370c      	adds	r7, #12
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2204      	movs	r2, #4
 8008608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b04      	cmp	r3, #4
 800862c:	d106      	bne.n	800863c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008634:	b2da      	uxtb	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b082      	sub	sp, #8
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b03      	cmp	r3, #3
 800865c:	d110      	bne.n	8008680 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00b      	beq.n	8008680 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	460b      	mov	r3, r1
 8008694:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	32ae      	adds	r2, #174	; 0xae
 80086a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e01c      	b.n	80086e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d115      	bne.n	80086e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	32ae      	adds	r2, #174	; 0xae
 80086c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	32ae      	adds	r2, #174	; 0xae
 80086d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	78fa      	ldrb	r2, [r7, #3]
 80086de:	4611      	mov	r1, r2
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b082      	sub	sp, #8
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	460b      	mov	r3, r1
 80086f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	32ae      	adds	r2, #174	; 0xae
 8008704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800870c:	2303      	movs	r3, #3
 800870e:	e01c      	b.n	800874a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b03      	cmp	r3, #3
 800871a:	d115      	bne.n	8008748 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	32ae      	adds	r2, #174	; 0xae
 8008726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00b      	beq.n	8008748 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	32ae      	adds	r2, #174	; 0xae
 800873a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	78fa      	ldrb	r2, [r7, #3]
 8008742:	4611      	mov	r1, r2
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00e      	beq.n	80087a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6852      	ldr	r2, [r2, #4]
 8008792:	b2d2      	uxtb	r2, r2
 8008794:	4611      	mov	r1, r2
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	4798      	blx	r3
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80087a0:	2303      	movs	r3, #3
 80087a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	460b      	mov	r3, r1
 80087b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80087ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80087bc:	4618      	mov	r0, r3
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80087d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b086      	sub	sp, #24
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	460b      	mov	r3, r1
 80087ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	885b      	ldrh	r3, [r3, #2]
 80087fe:	b29a      	uxth	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	b29b      	uxth	r3, r3
 8008806:	429a      	cmp	r2, r3
 8008808:	d920      	bls.n	800884c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	b29b      	uxth	r3, r3
 8008810:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008812:	e013      	b.n	800883c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008814:	f107 030a 	add.w	r3, r7, #10
 8008818:	4619      	mov	r1, r3
 800881a:	6978      	ldr	r0, [r7, #20]
 800881c:	f000 f81b 	bl	8008856 <USBD_GetNextDesc>
 8008820:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	785b      	ldrb	r3, [r3, #1]
 8008826:	2b05      	cmp	r3, #5
 8008828:	d108      	bne.n	800883c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	789b      	ldrb	r3, [r3, #2]
 8008832:	78fa      	ldrb	r2, [r7, #3]
 8008834:	429a      	cmp	r2, r3
 8008836:	d008      	beq.n	800884a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008838:	2300      	movs	r3, #0
 800883a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	885b      	ldrh	r3, [r3, #2]
 8008840:	b29a      	uxth	r2, r3
 8008842:	897b      	ldrh	r3, [r7, #10]
 8008844:	429a      	cmp	r2, r3
 8008846:	d8e5      	bhi.n	8008814 <USBD_GetEpDesc+0x32>
 8008848:	e000      	b.n	800884c <USBD_GetEpDesc+0x6a>
          break;
 800884a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800884c:	693b      	ldr	r3, [r7, #16]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008856:	b480      	push	{r7}
 8008858:	b085      	sub	sp, #20
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	881a      	ldrh	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	b29b      	uxth	r3, r3
 800886e:	4413      	add	r3, r2
 8008870:	b29a      	uxth	r2, r3
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4413      	add	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008882:	68fb      	ldr	r3, [r7, #12]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	3301      	adds	r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80088ae:	8a3b      	ldrh	r3, [r7, #16]
 80088b0:	021b      	lsls	r3, r3, #8
 80088b2:	b21a      	sxth	r2, r3
 80088b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	b21b      	sxth	r3, r3
 80088bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088be:	89fb      	ldrh	r3, [r7, #14]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	371c      	adds	r7, #28
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088e2:	2b40      	cmp	r3, #64	; 0x40
 80088e4:	d005      	beq.n	80088f2 <USBD_StdDevReq+0x26>
 80088e6:	2b40      	cmp	r3, #64	; 0x40
 80088e8:	d857      	bhi.n	800899a <USBD_StdDevReq+0xce>
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00f      	beq.n	800890e <USBD_StdDevReq+0x42>
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	d153      	bne.n	800899a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	32ae      	adds	r2, #174	; 0xae
 80088fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	4798      	blx	r3
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]
      break;
 800890c:	e04a      	b.n	80089a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	785b      	ldrb	r3, [r3, #1]
 8008912:	2b09      	cmp	r3, #9
 8008914:	d83b      	bhi.n	800898e <USBD_StdDevReq+0xc2>
 8008916:	a201      	add	r2, pc, #4	; (adr r2, 800891c <USBD_StdDevReq+0x50>)
 8008918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891c:	08008971 	.word	0x08008971
 8008920:	08008985 	.word	0x08008985
 8008924:	0800898f 	.word	0x0800898f
 8008928:	0800897b 	.word	0x0800897b
 800892c:	0800898f 	.word	0x0800898f
 8008930:	0800894f 	.word	0x0800894f
 8008934:	08008945 	.word	0x08008945
 8008938:	0800898f 	.word	0x0800898f
 800893c:	08008967 	.word	0x08008967
 8008940:	08008959 	.word	0x08008959
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa3c 	bl	8008dc4 <USBD_GetDescriptor>
          break;
 800894c:	e024      	b.n	8008998 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fbcb 	bl	80090ec <USBD_SetAddress>
          break;
 8008956:	e01f      	b.n	8008998 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fc0a 	bl	8009174 <USBD_SetConfig>
 8008960:	4603      	mov	r3, r0
 8008962:	73fb      	strb	r3, [r7, #15]
          break;
 8008964:	e018      	b.n	8008998 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fcad 	bl	80092c8 <USBD_GetConfig>
          break;
 800896e:	e013      	b.n	8008998 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fcde 	bl	8009334 <USBD_GetStatus>
          break;
 8008978:	e00e      	b.n	8008998 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fd0d 	bl	800939c <USBD_SetFeature>
          break;
 8008982:	e009      	b.n	8008998 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fd31 	bl	80093ee <USBD_ClrFeature>
          break;
 800898c:	e004      	b.n	8008998 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fd88 	bl	80094a6 <USBD_CtlError>
          break;
 8008996:	bf00      	nop
      }
      break;
 8008998:	e004      	b.n	80089a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fd82 	bl	80094a6 <USBD_CtlError>
      break;
 80089a2:	bf00      	nop
  }

  return ret;
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop

080089b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089c6:	2b40      	cmp	r3, #64	; 0x40
 80089c8:	d005      	beq.n	80089d6 <USBD_StdItfReq+0x26>
 80089ca:	2b40      	cmp	r3, #64	; 0x40
 80089cc:	d852      	bhi.n	8008a74 <USBD_StdItfReq+0xc4>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <USBD_StdItfReq+0x26>
 80089d2:	2b20      	cmp	r3, #32
 80089d4:	d14e      	bne.n	8008a74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	3b01      	subs	r3, #1
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d840      	bhi.n	8008a66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	889b      	ldrh	r3, [r3, #4]
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d836      	bhi.n	8008a5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	889b      	ldrh	r3, [r3, #4]
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff fed9 	bl	80087ae <USBD_CoreFindIF>
 80089fc:	4603      	mov	r3, r0
 80089fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	2bff      	cmp	r3, #255	; 0xff
 8008a04:	d01d      	beq.n	8008a42 <USBD_StdItfReq+0x92>
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d11a      	bne.n	8008a42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008a0c:	7bba      	ldrb	r2, [r7, #14]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	32ae      	adds	r2, #174	; 0xae
 8008a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00f      	beq.n	8008a3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008a1c:	7bba      	ldrb	r2, [r7, #14]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a24:	7bba      	ldrb	r2, [r7, #14]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	32ae      	adds	r2, #174	; 0xae
 8008a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	4798      	blx	r3
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a3a:	e004      	b.n	8008a46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a40:	e001      	b.n	8008a46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008a42:	2303      	movs	r3, #3
 8008a44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	88db      	ldrh	r3, [r3, #6]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d110      	bne.n	8008a70 <USBD_StdItfReq+0xc0>
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10d      	bne.n	8008a70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fdf1 	bl	800963c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a5a:	e009      	b.n	8008a70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fd21 	bl	80094a6 <USBD_CtlError>
          break;
 8008a64:	e004      	b.n	8008a70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fd1c 	bl	80094a6 <USBD_CtlError>
          break;
 8008a6e:	e000      	b.n	8008a72 <USBD_StdItfReq+0xc2>
          break;
 8008a70:	bf00      	nop
      }
      break;
 8008a72:	e004      	b.n	8008a7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fd15 	bl	80094a6 <USBD_CtlError>
      break;
 8008a7c:	bf00      	nop
  }

  return ret;
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	889b      	ldrh	r3, [r3, #4]
 8008a9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008aa4:	2b40      	cmp	r3, #64	; 0x40
 8008aa6:	d007      	beq.n	8008ab8 <USBD_StdEPReq+0x30>
 8008aa8:	2b40      	cmp	r3, #64	; 0x40
 8008aaa:	f200 817f 	bhi.w	8008dac <USBD_StdEPReq+0x324>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d02a      	beq.n	8008b08 <USBD_StdEPReq+0x80>
 8008ab2:	2b20      	cmp	r3, #32
 8008ab4:	f040 817a 	bne.w	8008dac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff fe83 	bl	80087c8 <USBD_CoreFindEP>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ac6:	7b7b      	ldrb	r3, [r7, #13]
 8008ac8:	2bff      	cmp	r3, #255	; 0xff
 8008aca:	f000 8174 	beq.w	8008db6 <USBD_StdEPReq+0x32e>
 8008ace:	7b7b      	ldrb	r3, [r7, #13]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f040 8170 	bne.w	8008db6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008ad6:	7b7a      	ldrb	r2, [r7, #13]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008ade:	7b7a      	ldrb	r2, [r7, #13]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	32ae      	adds	r2, #174	; 0xae
 8008ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 8163 	beq.w	8008db6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008af0:	7b7a      	ldrb	r2, [r7, #13]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	32ae      	adds	r2, #174	; 0xae
 8008af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
 8008b02:	4603      	mov	r3, r0
 8008b04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b06:	e156      	b.n	8008db6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	785b      	ldrb	r3, [r3, #1]
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d008      	beq.n	8008b22 <USBD_StdEPReq+0x9a>
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	f300 8145 	bgt.w	8008da0 <USBD_StdEPReq+0x318>
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 809b 	beq.w	8008c52 <USBD_StdEPReq+0x1ca>
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d03c      	beq.n	8008b9a <USBD_StdEPReq+0x112>
 8008b20:	e13e      	b.n	8008da0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d002      	beq.n	8008b34 <USBD_StdEPReq+0xac>
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d016      	beq.n	8008b60 <USBD_StdEPReq+0xd8>
 8008b32:	e02c      	b.n	8008b8e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00d      	beq.n	8008b56 <USBD_StdEPReq+0xce>
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	2b80      	cmp	r3, #128	; 0x80
 8008b3e:	d00a      	beq.n	8008b56 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 f9b1 	bl	8009eac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b4a:	2180      	movs	r1, #128	; 0x80
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f001 f9ad 	bl	8009eac <USBD_LL_StallEP>
 8008b52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b54:	e020      	b.n	8008b98 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fca4 	bl	80094a6 <USBD_CtlError>
              break;
 8008b5e:	e01b      	b.n	8008b98 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	885b      	ldrh	r3, [r3, #2]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10e      	bne.n	8008b86 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00b      	beq.n	8008b86 <USBD_StdEPReq+0xfe>
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	2b80      	cmp	r3, #128	; 0x80
 8008b72:	d008      	beq.n	8008b86 <USBD_StdEPReq+0xfe>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	88db      	ldrh	r3, [r3, #6]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d104      	bne.n	8008b86 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b7c:	7bbb      	ldrb	r3, [r7, #14]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 f993 	bl	8009eac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fd58 	bl	800963c <USBD_CtlSendStatus>

              break;
 8008b8c:	e004      	b.n	8008b98 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fc88 	bl	80094a6 <USBD_CtlError>
              break;
 8008b96:	bf00      	nop
          }
          break;
 8008b98:	e107      	b.n	8008daa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d002      	beq.n	8008bac <USBD_StdEPReq+0x124>
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d016      	beq.n	8008bd8 <USBD_StdEPReq+0x150>
 8008baa:	e04b      	b.n	8008c44 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00d      	beq.n	8008bce <USBD_StdEPReq+0x146>
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	2b80      	cmp	r3, #128	; 0x80
 8008bb6:	d00a      	beq.n	8008bce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f001 f975 	bl	8009eac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bc2:	2180      	movs	r1, #128	; 0x80
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 f971 	bl	8009eac <USBD_LL_StallEP>
 8008bca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bcc:	e040      	b.n	8008c50 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fc68 	bl	80094a6 <USBD_CtlError>
              break;
 8008bd6:	e03b      	b.n	8008c50 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	885b      	ldrh	r3, [r3, #2]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d136      	bne.n	8008c4e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d004      	beq.n	8008bf4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	4619      	mov	r1, r3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f001 f97b 	bl	8009eea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fd21 	bl	800963c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff fde2 	bl	80087c8 <USBD_CoreFindEP>
 8008c04:	4603      	mov	r3, r0
 8008c06:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c08:	7b7b      	ldrb	r3, [r7, #13]
 8008c0a:	2bff      	cmp	r3, #255	; 0xff
 8008c0c:	d01f      	beq.n	8008c4e <USBD_StdEPReq+0x1c6>
 8008c0e:	7b7b      	ldrb	r3, [r7, #13]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d11c      	bne.n	8008c4e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008c14:	7b7a      	ldrb	r2, [r7, #13]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008c1c:	7b7a      	ldrb	r2, [r7, #13]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	32ae      	adds	r2, #174	; 0xae
 8008c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d010      	beq.n	8008c4e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c2c:	7b7a      	ldrb	r2, [r7, #13]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	32ae      	adds	r2, #174	; 0xae
 8008c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	4798      	blx	r3
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008c42:	e004      	b.n	8008c4e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fc2d 	bl	80094a6 <USBD_CtlError>
              break;
 8008c4c:	e000      	b.n	8008c50 <USBD_StdEPReq+0x1c8>
              break;
 8008c4e:	bf00      	nop
          }
          break;
 8008c50:	e0ab      	b.n	8008daa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d002      	beq.n	8008c64 <USBD_StdEPReq+0x1dc>
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d032      	beq.n	8008cc8 <USBD_StdEPReq+0x240>
 8008c62:	e097      	b.n	8008d94 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d007      	beq.n	8008c7a <USBD_StdEPReq+0x1f2>
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	2b80      	cmp	r3, #128	; 0x80
 8008c6e:	d004      	beq.n	8008c7a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fc17 	bl	80094a6 <USBD_CtlError>
                break;
 8008c78:	e091      	b.n	8008d9e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	da0b      	bge.n	8008c9a <USBD_StdEPReq+0x212>
 8008c82:	7bbb      	ldrb	r3, [r7, #14]
 8008c84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c88:	4613      	mov	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	3310      	adds	r3, #16
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	4413      	add	r3, r2
 8008c96:	3304      	adds	r3, #4
 8008c98:	e00b      	b.n	8008cb2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	4413      	add	r3, r2
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fc61 	bl	8009588 <USBD_CtlSendData>
              break;
 8008cc6:	e06a      	b.n	8008d9e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	da11      	bge.n	8008cf4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	f003 020f 	and.w	r2, r3, #15
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	3324      	adds	r3, #36	; 0x24
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d117      	bne.n	8008d1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fbda 	bl	80094a6 <USBD_CtlError>
                  break;
 8008cf2:	e054      	b.n	8008d9e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	f003 020f 	and.w	r2, r3, #15
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	440b      	add	r3, r1
 8008d06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d0a:	881b      	ldrh	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d104      	bne.n	8008d1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fbc7 	bl	80094a6 <USBD_CtlError>
                  break;
 8008d18:	e041      	b.n	8008d9e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	da0b      	bge.n	8008d3a <USBD_StdEPReq+0x2b2>
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	3310      	adds	r3, #16
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	4413      	add	r3, r2
 8008d36:	3304      	adds	r3, #4
 8008d38:	e00b      	b.n	8008d52 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
 8008d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d40:	4613      	mov	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	4413      	add	r3, r2
 8008d50:	3304      	adds	r3, #4
 8008d52:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <USBD_StdEPReq+0x2d8>
 8008d5a:	7bbb      	ldrb	r3, [r7, #14]
 8008d5c:	2b80      	cmp	r3, #128	; 0x80
 8008d5e:	d103      	bne.n	8008d68 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	e00e      	b.n	8008d86 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f001 f8db 	bl	8009f28 <USBD_LL_IsStallEP>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	e002      	b.n	8008d86 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2202      	movs	r2, #2
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fbfb 	bl	8009588 <USBD_CtlSendData>
              break;
 8008d92:	e004      	b.n	8008d9e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fb85 	bl	80094a6 <USBD_CtlError>
              break;
 8008d9c:	bf00      	nop
          }
          break;
 8008d9e:	e004      	b.n	8008daa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fb7f 	bl	80094a6 <USBD_CtlError>
          break;
 8008da8:	bf00      	nop
      }
      break;
 8008daa:	e005      	b.n	8008db8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fb79 	bl	80094a6 <USBD_CtlError>
      break;
 8008db4:	e000      	b.n	8008db8 <USBD_StdEPReq+0x330>
      break;
 8008db6:	bf00      	nop
  }

  return ret;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	885b      	ldrh	r3, [r3, #2]
 8008dde:	0a1b      	lsrs	r3, r3, #8
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	3b01      	subs	r3, #1
 8008de4:	2b0e      	cmp	r3, #14
 8008de6:	f200 8152 	bhi.w	800908e <USBD_GetDescriptor+0x2ca>
 8008dea:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <USBD_GetDescriptor+0x2c>)
 8008dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df0:	08008e61 	.word	0x08008e61
 8008df4:	08008e79 	.word	0x08008e79
 8008df8:	08008eb9 	.word	0x08008eb9
 8008dfc:	0800908f 	.word	0x0800908f
 8008e00:	0800908f 	.word	0x0800908f
 8008e04:	0800902f 	.word	0x0800902f
 8008e08:	0800905b 	.word	0x0800905b
 8008e0c:	0800908f 	.word	0x0800908f
 8008e10:	0800908f 	.word	0x0800908f
 8008e14:	0800908f 	.word	0x0800908f
 8008e18:	0800908f 	.word	0x0800908f
 8008e1c:	0800908f 	.word	0x0800908f
 8008e20:	0800908f 	.word	0x0800908f
 8008e24:	0800908f 	.word	0x0800908f
 8008e28:	08008e2d 	.word	0x08008e2d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e32:	69db      	ldr	r3, [r3, #28]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00b      	beq.n	8008e50 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	7c12      	ldrb	r2, [r2, #16]
 8008e44:	f107 0108 	add.w	r1, r7, #8
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4798      	blx	r3
 8008e4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e4e:	e126      	b.n	800909e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fb27 	bl	80094a6 <USBD_CtlError>
        err++;
 8008e58:	7afb      	ldrb	r3, [r7, #11]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	72fb      	strb	r3, [r7, #11]
      break;
 8008e5e:	e11e      	b.n	800909e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	7c12      	ldrb	r2, [r2, #16]
 8008e6c:	f107 0108 	add.w	r1, r7, #8
 8008e70:	4610      	mov	r0, r2
 8008e72:	4798      	blx	r3
 8008e74:	60f8      	str	r0, [r7, #12]
      break;
 8008e76:	e112      	b.n	800909e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	7c1b      	ldrb	r3, [r3, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10d      	bne.n	8008e9c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e88:	f107 0208 	add.w	r2, r7, #8
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4798      	blx	r3
 8008e90:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	2202      	movs	r2, #2
 8008e98:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e9a:	e100      	b.n	800909e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea4:	f107 0208 	add.w	r2, r7, #8
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4798      	blx	r3
 8008eac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	701a      	strb	r2, [r3, #0]
      break;
 8008eb6:	e0f2      	b.n	800909e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	885b      	ldrh	r3, [r3, #2]
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b05      	cmp	r3, #5
 8008ec0:	f200 80ac 	bhi.w	800901c <USBD_GetDescriptor+0x258>
 8008ec4:	a201      	add	r2, pc, #4	; (adr r2, 8008ecc <USBD_GetDescriptor+0x108>)
 8008ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eca:	bf00      	nop
 8008ecc:	08008ee5 	.word	0x08008ee5
 8008ed0:	08008f19 	.word	0x08008f19
 8008ed4:	08008f4d 	.word	0x08008f4d
 8008ed8:	08008f81 	.word	0x08008f81
 8008edc:	08008fb5 	.word	0x08008fb5
 8008ee0:	08008fe9 	.word	0x08008fe9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	7c12      	ldrb	r2, [r2, #16]
 8008efc:	f107 0108 	add.w	r1, r7, #8
 8008f00:	4610      	mov	r0, r2
 8008f02:	4798      	blx	r3
 8008f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f06:	e091      	b.n	800902c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 facb 	bl	80094a6 <USBD_CtlError>
            err++;
 8008f10:	7afb      	ldrb	r3, [r7, #11]
 8008f12:	3301      	adds	r3, #1
 8008f14:	72fb      	strb	r3, [r7, #11]
          break;
 8008f16:	e089      	b.n	800902c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00b      	beq.n	8008f3c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	7c12      	ldrb	r2, [r2, #16]
 8008f30:	f107 0108 	add.w	r1, r7, #8
 8008f34:	4610      	mov	r0, r2
 8008f36:	4798      	blx	r3
 8008f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f3a:	e077      	b.n	800902c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fab1 	bl	80094a6 <USBD_CtlError>
            err++;
 8008f44:	7afb      	ldrb	r3, [r7, #11]
 8008f46:	3301      	adds	r3, #1
 8008f48:	72fb      	strb	r3, [r7, #11]
          break;
 8008f4a:	e06f      	b.n	800902c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00b      	beq.n	8008f70 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	7c12      	ldrb	r2, [r2, #16]
 8008f64:	f107 0108 	add.w	r1, r7, #8
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4798      	blx	r3
 8008f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f6e:	e05d      	b.n	800902c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fa97 	bl	80094a6 <USBD_CtlError>
            err++;
 8008f78:	7afb      	ldrb	r3, [r7, #11]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f7e:	e055      	b.n	800902c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	7c12      	ldrb	r2, [r2, #16]
 8008f98:	f107 0108 	add.w	r1, r7, #8
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	4798      	blx	r3
 8008fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fa2:	e043      	b.n	800902c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fa4:	6839      	ldr	r1, [r7, #0]
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fa7d 	bl	80094a6 <USBD_CtlError>
            err++;
 8008fac:	7afb      	ldrb	r3, [r7, #11]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fb2:	e03b      	b.n	800902c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00b      	beq.n	8008fd8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fc6:	695b      	ldr	r3, [r3, #20]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	7c12      	ldrb	r2, [r2, #16]
 8008fcc:	f107 0108 	add.w	r1, r7, #8
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	4798      	blx	r3
 8008fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fd6:	e029      	b.n	800902c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fa63 	bl	80094a6 <USBD_CtlError>
            err++;
 8008fe0:	7afb      	ldrb	r3, [r7, #11]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fe6:	e021      	b.n	800902c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00b      	beq.n	800900c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	7c12      	ldrb	r2, [r2, #16]
 8009000:	f107 0108 	add.w	r1, r7, #8
 8009004:	4610      	mov	r0, r2
 8009006:	4798      	blx	r3
 8009008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800900a:	e00f      	b.n	800902c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fa49 	bl	80094a6 <USBD_CtlError>
            err++;
 8009014:	7afb      	ldrb	r3, [r7, #11]
 8009016:	3301      	adds	r3, #1
 8009018:	72fb      	strb	r3, [r7, #11]
          break;
 800901a:	e007      	b.n	800902c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa41 	bl	80094a6 <USBD_CtlError>
          err++;
 8009024:	7afb      	ldrb	r3, [r7, #11]
 8009026:	3301      	adds	r3, #1
 8009028:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800902a:	bf00      	nop
      }
      break;
 800902c:	e037      	b.n	800909e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	7c1b      	ldrb	r3, [r3, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d109      	bne.n	800904a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800903c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903e:	f107 0208 	add.w	r2, r7, #8
 8009042:	4610      	mov	r0, r2
 8009044:	4798      	blx	r3
 8009046:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009048:	e029      	b.n	800909e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fa2a 	bl	80094a6 <USBD_CtlError>
        err++;
 8009052:	7afb      	ldrb	r3, [r7, #11]
 8009054:	3301      	adds	r3, #1
 8009056:	72fb      	strb	r3, [r7, #11]
      break;
 8009058:	e021      	b.n	800909e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	7c1b      	ldrb	r3, [r3, #16]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10d      	bne.n	800907e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906a:	f107 0208 	add.w	r2, r7, #8
 800906e:	4610      	mov	r0, r2
 8009070:	4798      	blx	r3
 8009072:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	3301      	adds	r3, #1
 8009078:	2207      	movs	r2, #7
 800907a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800907c:	e00f      	b.n	800909e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fa10 	bl	80094a6 <USBD_CtlError>
        err++;
 8009086:	7afb      	ldrb	r3, [r7, #11]
 8009088:	3301      	adds	r3, #1
 800908a:	72fb      	strb	r3, [r7, #11]
      break;
 800908c:	e007      	b.n	800909e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fa08 	bl	80094a6 <USBD_CtlError>
      err++;
 8009096:	7afb      	ldrb	r3, [r7, #11]
 8009098:	3301      	adds	r3, #1
 800909a:	72fb      	strb	r3, [r7, #11]
      break;
 800909c:	bf00      	nop
  }

  if (err != 0U)
 800909e:	7afb      	ldrb	r3, [r7, #11]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d11e      	bne.n	80090e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	88db      	ldrh	r3, [r3, #6]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d016      	beq.n	80090da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80090ac:	893b      	ldrh	r3, [r7, #8]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00e      	beq.n	80090d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	88da      	ldrh	r2, [r3, #6]
 80090b6:	893b      	ldrh	r3, [r7, #8]
 80090b8:	4293      	cmp	r3, r2
 80090ba:	bf28      	it	cs
 80090bc:	4613      	movcs	r3, r2
 80090be:	b29b      	uxth	r3, r3
 80090c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090c2:	893b      	ldrh	r3, [r7, #8]
 80090c4:	461a      	mov	r2, r3
 80090c6:	68f9      	ldr	r1, [r7, #12]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fa5d 	bl	8009588 <USBD_CtlSendData>
 80090ce:	e009      	b.n	80090e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f9e7 	bl	80094a6 <USBD_CtlError>
 80090d8:	e004      	b.n	80090e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 faae 	bl	800963c <USBD_CtlSendStatus>
 80090e0:	e000      	b.n	80090e4 <USBD_GetDescriptor+0x320>
    return;
 80090e2:	bf00      	nop
  }
}
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop

080090ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	889b      	ldrh	r3, [r3, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d131      	bne.n	8009162 <USBD_SetAddress+0x76>
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	88db      	ldrh	r3, [r3, #6]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d12d      	bne.n	8009162 <USBD_SetAddress+0x76>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	885b      	ldrh	r3, [r3, #2]
 800910a:	2b7f      	cmp	r3, #127	; 0x7f
 800910c:	d829      	bhi.n	8009162 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	885b      	ldrh	r3, [r3, #2]
 8009112:	b2db      	uxtb	r3, r3
 8009114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009118:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b03      	cmp	r3, #3
 8009124:	d104      	bne.n	8009130 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f9bc 	bl	80094a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800912e:	e01d      	b.n	800916c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	7bfa      	ldrb	r2, [r7, #15]
 8009134:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 ff1f 	bl	8009f80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fa7a 	bl	800963c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009148:	7bfb      	ldrb	r3, [r7, #15]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d004      	beq.n	8009158 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2202      	movs	r2, #2
 8009152:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009156:	e009      	b.n	800916c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009160:	e004      	b.n	800916c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f99e 	bl	80094a6 <USBD_CtlError>
  }
}
 800916a:	bf00      	nop
 800916c:	bf00      	nop
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	885b      	ldrh	r3, [r3, #2]
 8009186:	b2da      	uxtb	r2, r3
 8009188:	4b4e      	ldr	r3, [pc, #312]	; (80092c4 <USBD_SetConfig+0x150>)
 800918a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800918c:	4b4d      	ldr	r3, [pc, #308]	; (80092c4 <USBD_SetConfig+0x150>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d905      	bls.n	80091a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f985 	bl	80094a6 <USBD_CtlError>
    return USBD_FAIL;
 800919c:	2303      	movs	r3, #3
 800919e:	e08c      	b.n	80092ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d002      	beq.n	80091b2 <USBD_SetConfig+0x3e>
 80091ac:	2b03      	cmp	r3, #3
 80091ae:	d029      	beq.n	8009204 <USBD_SetConfig+0x90>
 80091b0:	e075      	b.n	800929e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80091b2:	4b44      	ldr	r3, [pc, #272]	; (80092c4 <USBD_SetConfig+0x150>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d020      	beq.n	80091fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80091ba:	4b42      	ldr	r3, [pc, #264]	; (80092c4 <USBD_SetConfig+0x150>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091c4:	4b3f      	ldr	r3, [pc, #252]	; (80092c4 <USBD_SetConfig+0x150>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	4619      	mov	r1, r3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7fe ffbd 	bl	800814a <USBD_SetClassConfig>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d008      	beq.n	80091ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f962 	bl	80094a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2202      	movs	r2, #2
 80091e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091ea:	e065      	b.n	80092b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fa25 	bl	800963c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2203      	movs	r2, #3
 80091f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091fa:	e05d      	b.n	80092b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fa1d 	bl	800963c <USBD_CtlSendStatus>
      break;
 8009202:	e059      	b.n	80092b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009204:	4b2f      	ldr	r3, [pc, #188]	; (80092c4 <USBD_SetConfig+0x150>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d112      	bne.n	8009232 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2202      	movs	r2, #2
 8009210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009214:	4b2b      	ldr	r3, [pc, #172]	; (80092c4 <USBD_SetConfig+0x150>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	461a      	mov	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800921e:	4b29      	ldr	r3, [pc, #164]	; (80092c4 <USBD_SetConfig+0x150>)
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7fe ffac 	bl	8008182 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fa06 	bl	800963c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009230:	e042      	b.n	80092b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009232:	4b24      	ldr	r3, [pc, #144]	; (80092c4 <USBD_SetConfig+0x150>)
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	429a      	cmp	r2, r3
 800923e:	d02a      	beq.n	8009296 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	b2db      	uxtb	r3, r3
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7fe ff9a 	bl	8008182 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800924e:	4b1d      	ldr	r3, [pc, #116]	; (80092c4 <USBD_SetConfig+0x150>)
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009258:	4b1a      	ldr	r3, [pc, #104]	; (80092c4 <USBD_SetConfig+0x150>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	4619      	mov	r1, r3
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7fe ff73 	bl	800814a <USBD_SetClassConfig>
 8009264:	4603      	mov	r3, r0
 8009266:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00f      	beq.n	800928e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f918 	bl	80094a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	b2db      	uxtb	r3, r3
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7fe ff7f 	bl	8008182 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2202      	movs	r2, #2
 8009288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800928c:	e014      	b.n	80092b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f9d4 	bl	800963c <USBD_CtlSendStatus>
      break;
 8009294:	e010      	b.n	80092b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f9d0 	bl	800963c <USBD_CtlSendStatus>
      break;
 800929c:	e00c      	b.n	80092b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f900 	bl	80094a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092a6:	4b07      	ldr	r3, [pc, #28]	; (80092c4 <USBD_SetConfig+0x150>)
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f7fe ff68 	bl	8008182 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80092b2:	2303      	movs	r3, #3
 80092b4:	73fb      	strb	r3, [r7, #15]
      break;
 80092b6:	bf00      	nop
  }

  return ret;
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20000340 	.word	0x20000340

080092c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	88db      	ldrh	r3, [r3, #6]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d004      	beq.n	80092e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f8e2 	bl	80094a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092e2:	e023      	b.n	800932c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	dc02      	bgt.n	80092f6 <USBD_GetConfig+0x2e>
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	dc03      	bgt.n	80092fc <USBD_GetConfig+0x34>
 80092f4:	e015      	b.n	8009322 <USBD_GetConfig+0x5a>
 80092f6:	2b03      	cmp	r3, #3
 80092f8:	d00b      	beq.n	8009312 <USBD_GetConfig+0x4a>
 80092fa:	e012      	b.n	8009322 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	3308      	adds	r3, #8
 8009306:	2201      	movs	r2, #1
 8009308:	4619      	mov	r1, r3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f93c 	bl	8009588 <USBD_CtlSendData>
        break;
 8009310:	e00c      	b.n	800932c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	3304      	adds	r3, #4
 8009316:	2201      	movs	r2, #1
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f934 	bl	8009588 <USBD_CtlSendData>
        break;
 8009320:	e004      	b.n	800932c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f8be 	bl	80094a6 <USBD_CtlError>
        break;
 800932a:	bf00      	nop
}
 800932c:	bf00      	nop
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009344:	b2db      	uxtb	r3, r3
 8009346:	3b01      	subs	r3, #1
 8009348:	2b02      	cmp	r3, #2
 800934a:	d81e      	bhi.n	800938a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	88db      	ldrh	r3, [r3, #6]
 8009350:	2b02      	cmp	r3, #2
 8009352:	d004      	beq.n	800935e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f8a5 	bl	80094a6 <USBD_CtlError>
        break;
 800935c:	e01a      	b.n	8009394 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800936a:	2b00      	cmp	r3, #0
 800936c:	d005      	beq.n	800937a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f043 0202 	orr.w	r2, r3, #2
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	330c      	adds	r3, #12
 800937e:	2202      	movs	r2, #2
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f900 	bl	8009588 <USBD_CtlSendData>
      break;
 8009388:	e004      	b.n	8009394 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f88a 	bl	80094a6 <USBD_CtlError>
      break;
 8009392:	bf00      	nop
  }
}
 8009394:	bf00      	nop
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	885b      	ldrh	r3, [r3, #2]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d107      	bne.n	80093be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f940 	bl	800963c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80093bc:	e013      	b.n	80093e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	885b      	ldrh	r3, [r3, #2]
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d10b      	bne.n	80093de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	889b      	ldrh	r3, [r3, #4]
 80093ca:	0a1b      	lsrs	r3, r3, #8
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f930 	bl	800963c <USBD_CtlSendStatus>
}
 80093dc:	e003      	b.n	80093e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 f860 	bl	80094a6 <USBD_CtlError>
}
 80093e6:	bf00      	nop
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	3b01      	subs	r3, #1
 8009402:	2b02      	cmp	r3, #2
 8009404:	d80b      	bhi.n	800941e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	885b      	ldrh	r3, [r3, #2]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d10c      	bne.n	8009428 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f910 	bl	800963c <USBD_CtlSendStatus>
      }
      break;
 800941c:	e004      	b.n	8009428 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f840 	bl	80094a6 <USBD_CtlError>
      break;
 8009426:	e000      	b.n	800942a <USBD_ClrFeature+0x3c>
      break;
 8009428:	bf00      	nop
  }
}
 800942a:	bf00      	nop
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b084      	sub	sp, #16
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	781a      	ldrb	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	3301      	adds	r3, #1
 800944c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	781a      	ldrb	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3301      	adds	r3, #1
 800945a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f7ff fa17 	bl	8008890 <SWAPBYTE>
 8009462:	4603      	mov	r3, r0
 8009464:	461a      	mov	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3301      	adds	r3, #1
 800946e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3301      	adds	r3, #1
 8009474:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f7ff fa0a 	bl	8008890 <SWAPBYTE>
 800947c:	4603      	mov	r3, r0
 800947e:	461a      	mov	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	3301      	adds	r3, #1
 8009488:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3301      	adds	r3, #1
 800948e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f7ff f9fd 	bl	8008890 <SWAPBYTE>
 8009496:	4603      	mov	r3, r0
 8009498:	461a      	mov	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	80da      	strh	r2, [r3, #6]
}
 800949e:	bf00      	nop
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b082      	sub	sp, #8
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094b0:	2180      	movs	r1, #128	; 0x80
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fcfa 	bl	8009eac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80094b8:	2100      	movs	r1, #0
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fcf6 	bl	8009eac <USBD_LL_StallEP>
}
 80094c0:	bf00      	nop
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094d4:	2300      	movs	r3, #0
 80094d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d036      	beq.n	800954c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80094e2:	6938      	ldr	r0, [r7, #16]
 80094e4:	f000 f836 	bl	8009554 <USBD_GetLen>
 80094e8:	4603      	mov	r3, r0
 80094ea:	3301      	adds	r3, #1
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	005b      	lsls	r3, r3, #1
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80094f6:	7dfb      	ldrb	r3, [r7, #23]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	4413      	add	r3, r2
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	7812      	ldrb	r2, [r2, #0]
 8009500:	701a      	strb	r2, [r3, #0]
  idx++;
 8009502:	7dfb      	ldrb	r3, [r7, #23]
 8009504:	3301      	adds	r3, #1
 8009506:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009508:	7dfb      	ldrb	r3, [r7, #23]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	4413      	add	r3, r2
 800950e:	2203      	movs	r2, #3
 8009510:	701a      	strb	r2, [r3, #0]
  idx++;
 8009512:	7dfb      	ldrb	r3, [r7, #23]
 8009514:	3301      	adds	r3, #1
 8009516:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009518:	e013      	b.n	8009542 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800951a:	7dfb      	ldrb	r3, [r7, #23]
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	4413      	add	r3, r2
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	7812      	ldrb	r2, [r2, #0]
 8009524:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	3301      	adds	r3, #1
 800952a:	613b      	str	r3, [r7, #16]
    idx++;
 800952c:	7dfb      	ldrb	r3, [r7, #23]
 800952e:	3301      	adds	r3, #1
 8009530:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009532:	7dfb      	ldrb	r3, [r7, #23]
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	4413      	add	r3, r2
 8009538:	2200      	movs	r2, #0
 800953a:	701a      	strb	r2, [r3, #0]
    idx++;
 800953c:	7dfb      	ldrb	r3, [r7, #23]
 800953e:	3301      	adds	r3, #1
 8009540:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1e7      	bne.n	800951a <USBD_GetString+0x52>
 800954a:	e000      	b.n	800954e <USBD_GetString+0x86>
    return;
 800954c:	bf00      	nop
  }
}
 800954e:	3718      	adds	r7, #24
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009564:	e005      	b.n	8009572 <USBD_GetLen+0x1e>
  {
    len++;
 8009566:	7bfb      	ldrb	r3, [r7, #15]
 8009568:	3301      	adds	r3, #1
 800956a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	3301      	adds	r3, #1
 8009570:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1f5      	bne.n	8009566 <USBD_GetLen+0x12>
  }

  return len;
 800957a:	7bfb      	ldrb	r3, [r7, #15]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2202      	movs	r2, #2
 8009598:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	2100      	movs	r1, #0
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f000 fd05 	bl	8009fbe <USBD_LL_Transmit>

  return USBD_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	60f8      	str	r0, [r7, #12]
 80095c6:	60b9      	str	r1, [r7, #8]
 80095c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	2100      	movs	r1, #0
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 fcf4 	bl	8009fbe <USBD_LL_Transmit>

  return USBD_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2203      	movs	r2, #3
 80095f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	2100      	movs	r1, #0
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f000 fcf8 	bl	800a000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	60f8      	str	r0, [r7, #12]
 8009622:	60b9      	str	r1, [r7, #8]
 8009624:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	2100      	movs	r1, #0
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 fce7 	bl	800a000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2204      	movs	r2, #4
 8009648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800964c:	2300      	movs	r3, #0
 800964e:	2200      	movs	r2, #0
 8009650:	2100      	movs	r1, #0
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fcb3 	bl	8009fbe <USBD_LL_Transmit>

  return USBD_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2205      	movs	r2, #5
 800966e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009672:	2300      	movs	r3, #0
 8009674:	2200      	movs	r2, #0
 8009676:	2100      	movs	r1, #0
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fcc1 	bl	800a000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800968c:	2200      	movs	r2, #0
 800968e:	4912      	ldr	r1, [pc, #72]	; (80096d8 <MX_USB_DEVICE_Init+0x50>)
 8009690:	4812      	ldr	r0, [pc, #72]	; (80096dc <MX_USB_DEVICE_Init+0x54>)
 8009692:	f7fe fcdd 	bl	8008050 <USBD_Init>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800969c:	f7f7 fa98 	bl	8000bd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80096a0:	490f      	ldr	r1, [pc, #60]	; (80096e0 <MX_USB_DEVICE_Init+0x58>)
 80096a2:	480e      	ldr	r0, [pc, #56]	; (80096dc <MX_USB_DEVICE_Init+0x54>)
 80096a4:	f7fe fd04 	bl	80080b0 <USBD_RegisterClass>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d001      	beq.n	80096b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80096ae:	f7f7 fa8f 	bl	8000bd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80096b2:	490c      	ldr	r1, [pc, #48]	; (80096e4 <MX_USB_DEVICE_Init+0x5c>)
 80096b4:	4809      	ldr	r0, [pc, #36]	; (80096dc <MX_USB_DEVICE_Init+0x54>)
 80096b6:	f7fe fc3b 	bl	8007f30 <USBD_CDC_RegisterInterface>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80096c0:	f7f7 fa86 	bl	8000bd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80096c4:	4805      	ldr	r0, [pc, #20]	; (80096dc <MX_USB_DEVICE_Init+0x54>)
 80096c6:	f7fe fd29 	bl	800811c <USBD_Start>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80096d0:	f7f7 fa7e 	bl	8000bd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80096d4:	bf00      	nop
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	200000cc 	.word	0x200000cc
 80096dc:	20000344 	.word	0x20000344
 80096e0:	20000038 	.word	0x20000038
 80096e4:	200000b8 	.word	0x200000b8

080096e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80096ec:	2200      	movs	r2, #0
 80096ee:	4905      	ldr	r1, [pc, #20]	; (8009704 <CDC_Init_FS+0x1c>)
 80096f0:	4805      	ldr	r0, [pc, #20]	; (8009708 <CDC_Init_FS+0x20>)
 80096f2:	f7fe fc37 	bl	8007f64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80096f6:	4905      	ldr	r1, [pc, #20]	; (800970c <CDC_Init_FS+0x24>)
 80096f8:	4803      	ldr	r0, [pc, #12]	; (8009708 <CDC_Init_FS+0x20>)
 80096fa:	f7fe fc55 	bl	8007fa8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80096fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009700:	4618      	mov	r0, r3
 8009702:	bd80      	pop	{r7, pc}
 8009704:	20000e20 	.word	0x20000e20
 8009708:	20000344 	.word	0x20000344
 800970c:	20000620 	.word	0x20000620

08009710 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009710:	b480      	push	{r7}
 8009712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009714:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009716:	4618      	mov	r0, r3
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	6039      	str	r1, [r7, #0]
 800972a:	71fb      	strb	r3, [r7, #7]
 800972c:	4613      	mov	r3, r2
 800972e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009730:	79fb      	ldrb	r3, [r7, #7]
 8009732:	2b23      	cmp	r3, #35	; 0x23
 8009734:	d84a      	bhi.n	80097cc <CDC_Control_FS+0xac>
 8009736:	a201      	add	r2, pc, #4	; (adr r2, 800973c <CDC_Control_FS+0x1c>)
 8009738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973c:	080097cd 	.word	0x080097cd
 8009740:	080097cd 	.word	0x080097cd
 8009744:	080097cd 	.word	0x080097cd
 8009748:	080097cd 	.word	0x080097cd
 800974c:	080097cd 	.word	0x080097cd
 8009750:	080097cd 	.word	0x080097cd
 8009754:	080097cd 	.word	0x080097cd
 8009758:	080097cd 	.word	0x080097cd
 800975c:	080097cd 	.word	0x080097cd
 8009760:	080097cd 	.word	0x080097cd
 8009764:	080097cd 	.word	0x080097cd
 8009768:	080097cd 	.word	0x080097cd
 800976c:	080097cd 	.word	0x080097cd
 8009770:	080097cd 	.word	0x080097cd
 8009774:	080097cd 	.word	0x080097cd
 8009778:	080097cd 	.word	0x080097cd
 800977c:	080097cd 	.word	0x080097cd
 8009780:	080097cd 	.word	0x080097cd
 8009784:	080097cd 	.word	0x080097cd
 8009788:	080097cd 	.word	0x080097cd
 800978c:	080097cd 	.word	0x080097cd
 8009790:	080097cd 	.word	0x080097cd
 8009794:	080097cd 	.word	0x080097cd
 8009798:	080097cd 	.word	0x080097cd
 800979c:	080097cd 	.word	0x080097cd
 80097a0:	080097cd 	.word	0x080097cd
 80097a4:	080097cd 	.word	0x080097cd
 80097a8:	080097cd 	.word	0x080097cd
 80097ac:	080097cd 	.word	0x080097cd
 80097b0:	080097cd 	.word	0x080097cd
 80097b4:	080097cd 	.word	0x080097cd
 80097b8:	080097cd 	.word	0x080097cd
 80097bc:	080097cd 	.word	0x080097cd
 80097c0:	080097cd 	.word	0x080097cd
 80097c4:	080097cd 	.word	0x080097cd
 80097c8:	080097cd 	.word	0x080097cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80097cc:	bf00      	nop
  }

  return (USBD_OK);
 80097ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	4805      	ldr	r0, [pc, #20]	; (8009800 <CDC_Receive_FS+0x24>)
 80097ea:	f7fe fbdd 	bl	8007fa8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80097ee:	4804      	ldr	r0, [pc, #16]	; (8009800 <CDC_Receive_FS+0x24>)
 80097f0:	f7fe fbf8 	bl	8007fe4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80097f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	20000344 	.word	0x20000344

08009804 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009804:	b480      	push	{r7}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	4613      	mov	r3, r2
 8009810:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009816:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800981a:	4618      	mov	r0, r3
 800981c:	371c      	adds	r7, #28
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
	...

08009828 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	4603      	mov	r3, r0
 8009830:	6039      	str	r1, [r7, #0]
 8009832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	2212      	movs	r2, #18
 8009838:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800983a:	4b03      	ldr	r3, [pc, #12]	; (8009848 <USBD_FS_DeviceDescriptor+0x20>)
}
 800983c:	4618      	mov	r0, r3
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	200000ec 	.word	0x200000ec

0800984c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	6039      	str	r1, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2204      	movs	r2, #4
 800985c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800985e:	4b03      	ldr	r3, [pc, #12]	; (800986c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009860:	4618      	mov	r0, r3
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	2000010c 	.word	0x2000010c

08009870 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	4603      	mov	r3, r0
 8009878:	6039      	str	r1, [r7, #0]
 800987a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800987c:	79fb      	ldrb	r3, [r7, #7]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d105      	bne.n	800988e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	4907      	ldr	r1, [pc, #28]	; (80098a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009886:	4808      	ldr	r0, [pc, #32]	; (80098a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009888:	f7ff fe1e 	bl	80094c8 <USBD_GetString>
 800988c:	e004      	b.n	8009898 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	4904      	ldr	r1, [pc, #16]	; (80098a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009892:	4805      	ldr	r0, [pc, #20]	; (80098a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009894:	f7ff fe18 	bl	80094c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009898:	4b02      	ldr	r3, [pc, #8]	; (80098a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	20001620 	.word	0x20001620
 80098a8:	0800a418 	.word	0x0800a418

080098ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	6039      	str	r1, [r7, #0]
 80098b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	4904      	ldr	r1, [pc, #16]	; (80098cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80098bc:	4804      	ldr	r0, [pc, #16]	; (80098d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80098be:	f7ff fe03 	bl	80094c8 <USBD_GetString>
  return USBD_StrDesc;
 80098c2:	4b02      	ldr	r3, [pc, #8]	; (80098cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	20001620 	.word	0x20001620
 80098d0:	0800a430 	.word	0x0800a430

080098d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	4603      	mov	r3, r0
 80098dc:	6039      	str	r1, [r7, #0]
 80098de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	221a      	movs	r2, #26
 80098e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80098e6:	f000 f855 	bl	8009994 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80098ea:	4b02      	ldr	r3, [pc, #8]	; (80098f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	20000110 	.word	0x20000110

080098f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	6039      	str	r1, [r7, #0]
 8009902:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d105      	bne.n	8009916 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	4907      	ldr	r1, [pc, #28]	; (800992c <USBD_FS_ConfigStrDescriptor+0x34>)
 800990e:	4808      	ldr	r0, [pc, #32]	; (8009930 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009910:	f7ff fdda 	bl	80094c8 <USBD_GetString>
 8009914:	e004      	b.n	8009920 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	4904      	ldr	r1, [pc, #16]	; (800992c <USBD_FS_ConfigStrDescriptor+0x34>)
 800991a:	4805      	ldr	r0, [pc, #20]	; (8009930 <USBD_FS_ConfigStrDescriptor+0x38>)
 800991c:	f7ff fdd4 	bl	80094c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009920:	4b02      	ldr	r3, [pc, #8]	; (800992c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009922:	4618      	mov	r0, r3
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	20001620 	.word	0x20001620
 8009930:	0800a444 	.word	0x0800a444

08009934 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	4603      	mov	r3, r0
 800993c:	6039      	str	r1, [r7, #0]
 800993e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009940:	79fb      	ldrb	r3, [r7, #7]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d105      	bne.n	8009952 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	4907      	ldr	r1, [pc, #28]	; (8009968 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800994a:	4808      	ldr	r0, [pc, #32]	; (800996c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800994c:	f7ff fdbc 	bl	80094c8 <USBD_GetString>
 8009950:	e004      	b.n	800995c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	4904      	ldr	r1, [pc, #16]	; (8009968 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009956:	4805      	ldr	r0, [pc, #20]	; (800996c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009958:	f7ff fdb6 	bl	80094c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800995c:	4b02      	ldr	r3, [pc, #8]	; (8009968 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20001620 	.word	0x20001620
 800996c:	0800a450 	.word	0x0800a450

08009970 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	6039      	str	r1, [r7, #0]
 800997a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	220c      	movs	r2, #12
 8009980:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009982:	4b03      	ldr	r3, [pc, #12]	; (8009990 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009984:	4618      	mov	r0, r3
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	20000100 	.word	0x20000100

08009994 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800999a:	4b0f      	ldr	r3, [pc, #60]	; (80099d8 <Get_SerialNum+0x44>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80099a0:	4b0e      	ldr	r3, [pc, #56]	; (80099dc <Get_SerialNum+0x48>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80099a6:	4b0e      	ldr	r3, [pc, #56]	; (80099e0 <Get_SerialNum+0x4c>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4413      	add	r3, r2
 80099b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d009      	beq.n	80099ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80099ba:	2208      	movs	r2, #8
 80099bc:	4909      	ldr	r1, [pc, #36]	; (80099e4 <Get_SerialNum+0x50>)
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f000 f814 	bl	80099ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80099c4:	2204      	movs	r2, #4
 80099c6:	4908      	ldr	r1, [pc, #32]	; (80099e8 <Get_SerialNum+0x54>)
 80099c8:	68b8      	ldr	r0, [r7, #8]
 80099ca:	f000 f80f 	bl	80099ec <IntToUnicode>
  }
}
 80099ce:	bf00      	nop
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	1ff0f420 	.word	0x1ff0f420
 80099dc:	1ff0f424 	.word	0x1ff0f424
 80099e0:	1ff0f428 	.word	0x1ff0f428
 80099e4:	20000112 	.word	0x20000112
 80099e8:	20000122 	.word	0x20000122

080099ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	4613      	mov	r3, r2
 80099f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80099fe:	2300      	movs	r3, #0
 8009a00:	75fb      	strb	r3, [r7, #23]
 8009a02:	e027      	b.n	8009a54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	0f1b      	lsrs	r3, r3, #28
 8009a08:	2b09      	cmp	r3, #9
 8009a0a:	d80b      	bhi.n	8009a24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	0f1b      	lsrs	r3, r3, #28
 8009a10:	b2da      	uxtb	r2, r3
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	4619      	mov	r1, r3
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	440b      	add	r3, r1
 8009a1c:	3230      	adds	r2, #48	; 0x30
 8009a1e:	b2d2      	uxtb	r2, r2
 8009a20:	701a      	strb	r2, [r3, #0]
 8009a22:	e00a      	b.n	8009a3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	0f1b      	lsrs	r3, r3, #28
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	4619      	mov	r1, r3
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	440b      	add	r3, r1
 8009a34:	3237      	adds	r2, #55	; 0x37
 8009a36:	b2d2      	uxtb	r2, r2
 8009a38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	011b      	lsls	r3, r3, #4
 8009a3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
 8009a42:	005b      	lsls	r3, r3, #1
 8009a44:	3301      	adds	r3, #1
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	4413      	add	r3, r2
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a4e:	7dfb      	ldrb	r3, [r7, #23]
 8009a50:	3301      	adds	r3, #1
 8009a52:	75fb      	strb	r3, [r7, #23]
 8009a54:	7dfa      	ldrb	r2, [r7, #23]
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d3d3      	bcc.n	8009a04 <IntToUnicode+0x18>
  }
}
 8009a5c:	bf00      	nop
 8009a5e:	bf00      	nop
 8009a60:	371c      	adds	r7, #28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
	...

08009a6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b0ac      	sub	sp, #176	; 0xb0
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009a78:	2200      	movs	r2, #0
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	605a      	str	r2, [r3, #4]
 8009a7e:	609a      	str	r2, [r3, #8]
 8009a80:	60da      	str	r2, [r3, #12]
 8009a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009a84:	f107 0318 	add.w	r3, r7, #24
 8009a88:	2284      	movs	r2, #132	; 0x84
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 fc27 	bl	800a2e0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a9a:	d161      	bne.n	8009b60 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009a9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009aa0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009aa8:	f107 0318 	add.w	r3, r7, #24
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fa fa1b 	bl	8003ee8 <HAL_RCCEx_PeriphCLKConfig>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8009ab8:	f7f7 f88a 	bl	8000bd0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009abc:	4b2a      	ldr	r3, [pc, #168]	; (8009b68 <HAL_PCD_MspInit+0xfc>)
 8009abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac0:	4a29      	ldr	r2, [pc, #164]	; (8009b68 <HAL_PCD_MspInit+0xfc>)
 8009ac2:	f043 0301 	orr.w	r3, r3, #1
 8009ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8009ac8:	4b27      	ldr	r3, [pc, #156]	; (8009b68 <HAL_PCD_MspInit+0xfc>)
 8009aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	617b      	str	r3, [r7, #20]
 8009ad2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009ad4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8009ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009adc:	2302      	movs	r3, #2
 8009ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009aee:	230a      	movs	r3, #10
 8009af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009af4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009af8:	4619      	mov	r1, r3
 8009afa:	481c      	ldr	r0, [pc, #112]	; (8009b6c <HAL_PCD_MspInit+0x100>)
 8009afc:	f7f8 f86c 	bl	8001bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009b14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009b18:	4619      	mov	r1, r3
 8009b1a:	4814      	ldr	r0, [pc, #80]	; (8009b6c <HAL_PCD_MspInit+0x100>)
 8009b1c:	f7f8 f85c 	bl	8001bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b20:	4b11      	ldr	r3, [pc, #68]	; (8009b68 <HAL_PCD_MspInit+0xfc>)
 8009b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b24:	4a10      	ldr	r2, [pc, #64]	; (8009b68 <HAL_PCD_MspInit+0xfc>)
 8009b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b2a:	6353      	str	r3, [r2, #52]	; 0x34
 8009b2c:	4b0e      	ldr	r3, [pc, #56]	; (8009b68 <HAL_PCD_MspInit+0xfc>)
 8009b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b34:	613b      	str	r3, [r7, #16]
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	4b0b      	ldr	r3, [pc, #44]	; (8009b68 <HAL_PCD_MspInit+0xfc>)
 8009b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b3c:	4a0a      	ldr	r2, [pc, #40]	; (8009b68 <HAL_PCD_MspInit+0xfc>)
 8009b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b42:	6453      	str	r3, [r2, #68]	; 0x44
 8009b44:	4b08      	ldr	r3, [pc, #32]	; (8009b68 <HAL_PCD_MspInit+0xfc>)
 8009b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b4c:	60fb      	str	r3, [r7, #12]
 8009b4e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b50:	2200      	movs	r2, #0
 8009b52:	2100      	movs	r1, #0
 8009b54:	2043      	movs	r0, #67	; 0x43
 8009b56:	f7f7 fcfc 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b5a:	2043      	movs	r0, #67	; 0x43
 8009b5c:	f7f7 fd15 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b60:	bf00      	nop
 8009b62:	37b0      	adds	r7, #176	; 0xb0
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	40023800 	.word	0x40023800
 8009b6c:	40020000 	.word	0x40020000

08009b70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b84:	4619      	mov	r1, r3
 8009b86:	4610      	mov	r0, r2
 8009b88:	f7fe fb15 	bl	80081b6 <USBD_LL_SetupStage>
}
 8009b8c:	bf00      	nop
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8009ba6:	78fa      	ldrb	r2, [r7, #3]
 8009ba8:	6879      	ldr	r1, [r7, #4]
 8009baa:	4613      	mov	r3, r2
 8009bac:	00db      	lsls	r3, r3, #3
 8009bae:	4413      	add	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	440b      	add	r3, r1
 8009bb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	78fb      	ldrb	r3, [r7, #3]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	f7fe fb4f 	bl	8008260 <USBD_LL_DataOutStage>
}
 8009bc2:	bf00      	nop
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b082      	sub	sp, #8
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8009bdc:	78fa      	ldrb	r2, [r7, #3]
 8009bde:	6879      	ldr	r1, [r7, #4]
 8009be0:	4613      	mov	r3, r2
 8009be2:	00db      	lsls	r3, r3, #3
 8009be4:	4413      	add	r3, r2
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	440b      	add	r3, r1
 8009bea:	334c      	adds	r3, #76	; 0x4c
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	78fb      	ldrb	r3, [r7, #3]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	f7fe fbe8 	bl	80083c6 <USBD_LL_DataInStage>
}
 8009bf6:	bf00      	nop
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b082      	sub	sp, #8
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fe fd1c 	bl	800864a <USBD_LL_SOF>
}
 8009c12:	bf00      	nop
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b084      	sub	sp, #16
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c22:	2301      	movs	r3, #1
 8009c24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d102      	bne.n	8009c34 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	73fb      	strb	r3, [r7, #15]
 8009c32:	e008      	b.n	8009c46 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d102      	bne.n	8009c42 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	73fb      	strb	r3, [r7, #15]
 8009c40:	e001      	b.n	8009c46 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009c42:	f7f6 ffc5 	bl	8000bd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009c4c:	7bfa      	ldrb	r2, [r7, #15]
 8009c4e:	4611      	mov	r1, r2
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fcbc 	bl	80085ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fe fc64 	bl	800852a <USBD_LL_Reset>
}
 8009c62:	bf00      	nop
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fe fcb7 	bl	80085ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	6812      	ldr	r2, [r2, #0]
 8009c8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c92:	f043 0301 	orr.w	r3, r3, #1
 8009c96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a1b      	ldr	r3, [r3, #32]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d005      	beq.n	8009cac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ca0:	4b04      	ldr	r3, [pc, #16]	; (8009cb4 <HAL_PCD_SuspendCallback+0x48>)
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	4a03      	ldr	r2, [pc, #12]	; (8009cb4 <HAL_PCD_SuspendCallback+0x48>)
 8009ca6:	f043 0306 	orr.w	r3, r3, #6
 8009caa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009cac:	bf00      	nop
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	e000ed00 	.word	0xe000ed00

08009cb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe fca7 	bl	800861a <USBD_LL_Resume>
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009ce6:	78fa      	ldrb	r2, [r7, #3]
 8009ce8:	4611      	mov	r1, r2
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe fcff 	bl	80086ee <USBD_LL_IsoOUTIncomplete>
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009d0a:	78fa      	ldrb	r2, [r7, #3]
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fe fcbb 	bl	800868a <USBD_LL_IsoINIncomplete>
}
 8009d14:	bf00      	nop
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe fd11 	bl	8008752 <USBD_LL_DevConnected>
}
 8009d30:	bf00      	nop
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fe fd0e 	bl	8008768 <USBD_LL_DevDisconnected>
}
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d13c      	bne.n	8009dde <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d64:	4a20      	ldr	r2, [pc, #128]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a1e      	ldr	r2, [pc, #120]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d70:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d74:	4b1c      	ldr	r3, [pc, #112]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009d7c:	4b1a      	ldr	r3, [pc, #104]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d7e:	2206      	movs	r2, #6
 8009d80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d82:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d84:	2202      	movs	r2, #2
 8009d86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d88:	4b17      	ldr	r3, [pc, #92]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d8e:	4b16      	ldr	r3, [pc, #88]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d90:	2202      	movs	r2, #2
 8009d92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d94:	4b14      	ldr	r3, [pc, #80]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009d9a:	4b13      	ldr	r3, [pc, #76]	; (8009de8 <USBD_LL_Init+0x94>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009da0:	4b11      	ldr	r3, [pc, #68]	; (8009de8 <USBD_LL_Init+0x94>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009da6:	4b10      	ldr	r3, [pc, #64]	; (8009de8 <USBD_LL_Init+0x94>)
 8009da8:	2200      	movs	r2, #0
 8009daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009dac:	4b0e      	ldr	r3, [pc, #56]	; (8009de8 <USBD_LL_Init+0x94>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009db2:	480d      	ldr	r0, [pc, #52]	; (8009de8 <USBD_LL_Init+0x94>)
 8009db4:	f7f8 f906 	bl	8001fc4 <HAL_PCD_Init>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009dbe:	f7f6 ff07 	bl	8000bd0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009dc2:	2180      	movs	r1, #128	; 0x80
 8009dc4:	4808      	ldr	r0, [pc, #32]	; (8009de8 <USBD_LL_Init+0x94>)
 8009dc6:	f7f9 fb80 	bl	80034ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009dca:	2240      	movs	r2, #64	; 0x40
 8009dcc:	2100      	movs	r1, #0
 8009dce:	4806      	ldr	r0, [pc, #24]	; (8009de8 <USBD_LL_Init+0x94>)
 8009dd0:	f7f9 fb34 	bl	800343c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009dd4:	2280      	movs	r2, #128	; 0x80
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	4803      	ldr	r0, [pc, #12]	; (8009de8 <USBD_LL_Init+0x94>)
 8009dda:	f7f9 fb2f 	bl	800343c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20001820 	.word	0x20001820

08009dec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7f8 fa02 	bl	800220c <HAL_PCD_Start>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 f97e 	bl	800a110 <USBD_Get_USB_Status>
 8009e14:	4603      	mov	r3, r0
 8009e16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	4608      	mov	r0, r1
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	461a      	mov	r2, r3
 8009e30:	4603      	mov	r3, r0
 8009e32:	70fb      	strb	r3, [r7, #3]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70bb      	strb	r3, [r7, #2]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009e4a:	78bb      	ldrb	r3, [r7, #2]
 8009e4c:	883a      	ldrh	r2, [r7, #0]
 8009e4e:	78f9      	ldrb	r1, [r7, #3]
 8009e50:	f7f8 feef 	bl	8002c32 <HAL_PCD_EP_Open>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 f958 	bl	800a110 <USBD_Get_USB_Status>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e88:	78fa      	ldrb	r2, [r7, #3]
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7f8 ff38 	bl	8002d02 <HAL_PCD_EP_Close>
 8009e92:	4603      	mov	r3, r0
 8009e94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 f939 	bl	800a110 <USBD_Get_USB_Status>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ea2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ec6:	78fa      	ldrb	r2, [r7, #3]
 8009ec8:	4611      	mov	r1, r2
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7f9 f810 	bl	8002ef0 <HAL_PCD_EP_SetStall>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ed4:	7bfb      	ldrb	r3, [r7, #15]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 f91a 	bl	800a110 <USBD_Get_USB_Status>
 8009edc:	4603      	mov	r3, r0
 8009ede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f04:	78fa      	ldrb	r2, [r7, #3]
 8009f06:	4611      	mov	r1, r2
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7f9 f855 	bl	8002fb8 <HAL_PCD_EP_ClrStall>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 f8fb 	bl	800a110 <USBD_Get_USB_Status>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	da0b      	bge.n	8009f5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	4413      	add	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	440b      	add	r3, r1
 8009f56:	333e      	adds	r3, #62	; 0x3e
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	e00b      	b.n	8009f74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f5c:	78fb      	ldrb	r3, [r7, #3]
 8009f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f62:	68f9      	ldr	r1, [r7, #12]
 8009f64:	4613      	mov	r3, r2
 8009f66:	00db      	lsls	r3, r3, #3
 8009f68:	4413      	add	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	440b      	add	r3, r1
 8009f6e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009f72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f9a:	78fa      	ldrb	r2, [r7, #3]
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7f8 fe22 	bl	8002be8 <HAL_PCD_SetAddress>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 f8b0 	bl	800a110 <USBD_Get_USB_Status>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b086      	sub	sp, #24
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009fdc:	7af9      	ldrb	r1, [r7, #11]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	f7f8 ff3b 	bl	8002e5c <HAL_PCD_EP_Transmit>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 f88f 	bl	800a110 <USBD_Get_USB_Status>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ff6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3718      	adds	r7, #24
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	460b      	mov	r3, r1
 800a00e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a014:	2300      	movs	r3, #0
 800a016:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a01e:	7af9      	ldrb	r1, [r7, #11]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	f7f8 feb7 	bl	8002d96 <HAL_PCD_EP_Receive>
 800a028:	4603      	mov	r3, r0
 800a02a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 f86e 	bl	800a110 <USBD_Get_USB_Status>
 800a034:	4603      	mov	r3, r0
 800a036:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a038:	7dbb      	ldrb	r3, [r7, #22]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	460b      	mov	r3, r1
 800a04c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a054:	78fa      	ldrb	r2, [r7, #3]
 800a056:	4611      	mov	r1, r2
 800a058:	4618      	mov	r0, r3
 800a05a:	f7f8 fee7 	bl	8002e2c <HAL_PCD_EP_GetRxCount>
 800a05e:	4603      	mov	r3, r0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	460b      	mov	r3, r1
 800a072:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a074:	78fb      	ldrb	r3, [r7, #3]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d002      	beq.n	800a080 <HAL_PCDEx_LPM_Callback+0x18>
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d01f      	beq.n	800a0be <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a07e:	e03b      	b.n	800a0f8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a1b      	ldr	r3, [r3, #32]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d007      	beq.n	800a098 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a088:	f000 f83c 	bl	800a104 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a08c:	4b1c      	ldr	r3, [pc, #112]	; (800a100 <HAL_PCDEx_LPM_Callback+0x98>)
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	4a1b      	ldr	r2, [pc, #108]	; (800a100 <HAL_PCDEx_LPM_Callback+0x98>)
 800a092:	f023 0306 	bic.w	r3, r3, #6
 800a096:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	6812      	ldr	r2, [r2, #0]
 800a0a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0aa:	f023 0301 	bic.w	r3, r3, #1
 800a0ae:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe faaf 	bl	800861a <USBD_LL_Resume>
    break;
 800a0bc:	e01c      	b.n	800a0f8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	6812      	ldr	r2, [r2, #0]
 800a0cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0d0:	f043 0301 	orr.w	r3, r3, #1
 800a0d4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7fe fa86 	bl	80085ee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d005      	beq.n	800a0f6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0ea:	4b05      	ldr	r3, [pc, #20]	; (800a100 <HAL_PCDEx_LPM_Callback+0x98>)
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	4a04      	ldr	r2, [pc, #16]	; (800a100 <HAL_PCDEx_LPM_Callback+0x98>)
 800a0f0:	f043 0306 	orr.w	r3, r3, #6
 800a0f4:	6113      	str	r3, [r2, #16]
    break;
 800a0f6:	bf00      	nop
}
 800a0f8:	bf00      	nop
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	e000ed00 	.word	0xe000ed00

0800a104 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a108:	f7f6 fb84 	bl	8000814 <SystemClock_Config>
}
 800a10c:	bf00      	nop
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a11e:	79fb      	ldrb	r3, [r7, #7]
 800a120:	2b03      	cmp	r3, #3
 800a122:	d817      	bhi.n	800a154 <USBD_Get_USB_Status+0x44>
 800a124:	a201      	add	r2, pc, #4	; (adr r2, 800a12c <USBD_Get_USB_Status+0x1c>)
 800a126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12a:	bf00      	nop
 800a12c:	0800a13d 	.word	0x0800a13d
 800a130:	0800a143 	.word	0x0800a143
 800a134:	0800a149 	.word	0x0800a149
 800a138:	0800a14f 	.word	0x0800a14f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]
    break;
 800a140:	e00b      	b.n	800a15a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a142:	2303      	movs	r3, #3
 800a144:	73fb      	strb	r3, [r7, #15]
    break;
 800a146:	e008      	b.n	800a15a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a148:	2301      	movs	r3, #1
 800a14a:	73fb      	strb	r3, [r7, #15]
    break;
 800a14c:	e005      	b.n	800a15a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a14e:	2303      	movs	r3, #3
 800a150:	73fb      	strb	r3, [r7, #15]
    break;
 800a152:	e002      	b.n	800a15a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a154:	2303      	movs	r3, #3
 800a156:	73fb      	strb	r3, [r7, #15]
    break;
 800a158:	bf00      	nop
  }
  return usb_status;
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <malloc>:
 800a168:	4b02      	ldr	r3, [pc, #8]	; (800a174 <malloc+0xc>)
 800a16a:	4601      	mov	r1, r0
 800a16c:	6818      	ldr	r0, [r3, #0]
 800a16e:	f000 b82b 	b.w	800a1c8 <_malloc_r>
 800a172:	bf00      	nop
 800a174:	20000178 	.word	0x20000178

0800a178 <free>:
 800a178:	4b02      	ldr	r3, [pc, #8]	; (800a184 <free+0xc>)
 800a17a:	4601      	mov	r1, r0
 800a17c:	6818      	ldr	r0, [r3, #0]
 800a17e:	f000 b8f3 	b.w	800a368 <_free_r>
 800a182:	bf00      	nop
 800a184:	20000178 	.word	0x20000178

0800a188 <sbrk_aligned>:
 800a188:	b570      	push	{r4, r5, r6, lr}
 800a18a:	4e0e      	ldr	r6, [pc, #56]	; (800a1c4 <sbrk_aligned+0x3c>)
 800a18c:	460c      	mov	r4, r1
 800a18e:	6831      	ldr	r1, [r6, #0]
 800a190:	4605      	mov	r5, r0
 800a192:	b911      	cbnz	r1, 800a19a <sbrk_aligned+0x12>
 800a194:	f000 f8ac 	bl	800a2f0 <_sbrk_r>
 800a198:	6030      	str	r0, [r6, #0]
 800a19a:	4621      	mov	r1, r4
 800a19c:	4628      	mov	r0, r5
 800a19e:	f000 f8a7 	bl	800a2f0 <_sbrk_r>
 800a1a2:	1c43      	adds	r3, r0, #1
 800a1a4:	d00a      	beq.n	800a1bc <sbrk_aligned+0x34>
 800a1a6:	1cc4      	adds	r4, r0, #3
 800a1a8:	f024 0403 	bic.w	r4, r4, #3
 800a1ac:	42a0      	cmp	r0, r4
 800a1ae:	d007      	beq.n	800a1c0 <sbrk_aligned+0x38>
 800a1b0:	1a21      	subs	r1, r4, r0
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f000 f89c 	bl	800a2f0 <_sbrk_r>
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d101      	bne.n	800a1c0 <sbrk_aligned+0x38>
 800a1bc:	f04f 34ff 	mov.w	r4, #4294967295
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
 800a1c4:	20001d2c 	.word	0x20001d2c

0800a1c8 <_malloc_r>:
 800a1c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1cc:	1ccd      	adds	r5, r1, #3
 800a1ce:	f025 0503 	bic.w	r5, r5, #3
 800a1d2:	3508      	adds	r5, #8
 800a1d4:	2d0c      	cmp	r5, #12
 800a1d6:	bf38      	it	cc
 800a1d8:	250c      	movcc	r5, #12
 800a1da:	2d00      	cmp	r5, #0
 800a1dc:	4607      	mov	r7, r0
 800a1de:	db01      	blt.n	800a1e4 <_malloc_r+0x1c>
 800a1e0:	42a9      	cmp	r1, r5
 800a1e2:	d905      	bls.n	800a1f0 <_malloc_r+0x28>
 800a1e4:	230c      	movs	r3, #12
 800a1e6:	603b      	str	r3, [r7, #0]
 800a1e8:	2600      	movs	r6, #0
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2c4 <_malloc_r+0xfc>
 800a1f4:	f000 f868 	bl	800a2c8 <__malloc_lock>
 800a1f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a1fc:	461c      	mov	r4, r3
 800a1fe:	bb5c      	cbnz	r4, 800a258 <_malloc_r+0x90>
 800a200:	4629      	mov	r1, r5
 800a202:	4638      	mov	r0, r7
 800a204:	f7ff ffc0 	bl	800a188 <sbrk_aligned>
 800a208:	1c43      	adds	r3, r0, #1
 800a20a:	4604      	mov	r4, r0
 800a20c:	d155      	bne.n	800a2ba <_malloc_r+0xf2>
 800a20e:	f8d8 4000 	ldr.w	r4, [r8]
 800a212:	4626      	mov	r6, r4
 800a214:	2e00      	cmp	r6, #0
 800a216:	d145      	bne.n	800a2a4 <_malloc_r+0xdc>
 800a218:	2c00      	cmp	r4, #0
 800a21a:	d048      	beq.n	800a2ae <_malloc_r+0xe6>
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	4631      	mov	r1, r6
 800a220:	4638      	mov	r0, r7
 800a222:	eb04 0903 	add.w	r9, r4, r3
 800a226:	f000 f863 	bl	800a2f0 <_sbrk_r>
 800a22a:	4581      	cmp	r9, r0
 800a22c:	d13f      	bne.n	800a2ae <_malloc_r+0xe6>
 800a22e:	6821      	ldr	r1, [r4, #0]
 800a230:	1a6d      	subs	r5, r5, r1
 800a232:	4629      	mov	r1, r5
 800a234:	4638      	mov	r0, r7
 800a236:	f7ff ffa7 	bl	800a188 <sbrk_aligned>
 800a23a:	3001      	adds	r0, #1
 800a23c:	d037      	beq.n	800a2ae <_malloc_r+0xe6>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	442b      	add	r3, r5
 800a242:	6023      	str	r3, [r4, #0]
 800a244:	f8d8 3000 	ldr.w	r3, [r8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d038      	beq.n	800a2be <_malloc_r+0xf6>
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	42a2      	cmp	r2, r4
 800a250:	d12b      	bne.n	800a2aa <_malloc_r+0xe2>
 800a252:	2200      	movs	r2, #0
 800a254:	605a      	str	r2, [r3, #4]
 800a256:	e00f      	b.n	800a278 <_malloc_r+0xb0>
 800a258:	6822      	ldr	r2, [r4, #0]
 800a25a:	1b52      	subs	r2, r2, r5
 800a25c:	d41f      	bmi.n	800a29e <_malloc_r+0xd6>
 800a25e:	2a0b      	cmp	r2, #11
 800a260:	d917      	bls.n	800a292 <_malloc_r+0xca>
 800a262:	1961      	adds	r1, r4, r5
 800a264:	42a3      	cmp	r3, r4
 800a266:	6025      	str	r5, [r4, #0]
 800a268:	bf18      	it	ne
 800a26a:	6059      	strne	r1, [r3, #4]
 800a26c:	6863      	ldr	r3, [r4, #4]
 800a26e:	bf08      	it	eq
 800a270:	f8c8 1000 	streq.w	r1, [r8]
 800a274:	5162      	str	r2, [r4, r5]
 800a276:	604b      	str	r3, [r1, #4]
 800a278:	4638      	mov	r0, r7
 800a27a:	f104 060b 	add.w	r6, r4, #11
 800a27e:	f000 f829 	bl	800a2d4 <__malloc_unlock>
 800a282:	f026 0607 	bic.w	r6, r6, #7
 800a286:	1d23      	adds	r3, r4, #4
 800a288:	1af2      	subs	r2, r6, r3
 800a28a:	d0ae      	beq.n	800a1ea <_malloc_r+0x22>
 800a28c:	1b9b      	subs	r3, r3, r6
 800a28e:	50a3      	str	r3, [r4, r2]
 800a290:	e7ab      	b.n	800a1ea <_malloc_r+0x22>
 800a292:	42a3      	cmp	r3, r4
 800a294:	6862      	ldr	r2, [r4, #4]
 800a296:	d1dd      	bne.n	800a254 <_malloc_r+0x8c>
 800a298:	f8c8 2000 	str.w	r2, [r8]
 800a29c:	e7ec      	b.n	800a278 <_malloc_r+0xb0>
 800a29e:	4623      	mov	r3, r4
 800a2a0:	6864      	ldr	r4, [r4, #4]
 800a2a2:	e7ac      	b.n	800a1fe <_malloc_r+0x36>
 800a2a4:	4634      	mov	r4, r6
 800a2a6:	6876      	ldr	r6, [r6, #4]
 800a2a8:	e7b4      	b.n	800a214 <_malloc_r+0x4c>
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	e7cc      	b.n	800a248 <_malloc_r+0x80>
 800a2ae:	230c      	movs	r3, #12
 800a2b0:	603b      	str	r3, [r7, #0]
 800a2b2:	4638      	mov	r0, r7
 800a2b4:	f000 f80e 	bl	800a2d4 <__malloc_unlock>
 800a2b8:	e797      	b.n	800a1ea <_malloc_r+0x22>
 800a2ba:	6025      	str	r5, [r4, #0]
 800a2bc:	e7dc      	b.n	800a278 <_malloc_r+0xb0>
 800a2be:	605b      	str	r3, [r3, #4]
 800a2c0:	deff      	udf	#255	; 0xff
 800a2c2:	bf00      	nop
 800a2c4:	20001d28 	.word	0x20001d28

0800a2c8 <__malloc_lock>:
 800a2c8:	4801      	ldr	r0, [pc, #4]	; (800a2d0 <__malloc_lock+0x8>)
 800a2ca:	f000 b84b 	b.w	800a364 <__retarget_lock_acquire_recursive>
 800a2ce:	bf00      	nop
 800a2d0:	20001e6c 	.word	0x20001e6c

0800a2d4 <__malloc_unlock>:
 800a2d4:	4801      	ldr	r0, [pc, #4]	; (800a2dc <__malloc_unlock+0x8>)
 800a2d6:	f000 b846 	b.w	800a366 <__retarget_lock_release_recursive>
 800a2da:	bf00      	nop
 800a2dc:	20001e6c 	.word	0x20001e6c

0800a2e0 <memset>:
 800a2e0:	4402      	add	r2, r0
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d100      	bne.n	800a2ea <memset+0xa>
 800a2e8:	4770      	bx	lr
 800a2ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a2ee:	e7f9      	b.n	800a2e4 <memset+0x4>

0800a2f0 <_sbrk_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4d06      	ldr	r5, [pc, #24]	; (800a30c <_sbrk_r+0x1c>)
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	4608      	mov	r0, r1
 800a2fa:	602b      	str	r3, [r5, #0]
 800a2fc:	f7f6 ff5c 	bl	80011b8 <_sbrk>
 800a300:	1c43      	adds	r3, r0, #1
 800a302:	d102      	bne.n	800a30a <_sbrk_r+0x1a>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	b103      	cbz	r3, 800a30a <_sbrk_r+0x1a>
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	bd38      	pop	{r3, r4, r5, pc}
 800a30c:	20001e68 	.word	0x20001e68

0800a310 <__errno>:
 800a310:	4b01      	ldr	r3, [pc, #4]	; (800a318 <__errno+0x8>)
 800a312:	6818      	ldr	r0, [r3, #0]
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	20000178 	.word	0x20000178

0800a31c <__libc_init_array>:
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	4d0d      	ldr	r5, [pc, #52]	; (800a354 <__libc_init_array+0x38>)
 800a320:	4c0d      	ldr	r4, [pc, #52]	; (800a358 <__libc_init_array+0x3c>)
 800a322:	1b64      	subs	r4, r4, r5
 800a324:	10a4      	asrs	r4, r4, #2
 800a326:	2600      	movs	r6, #0
 800a328:	42a6      	cmp	r6, r4
 800a32a:	d109      	bne.n	800a340 <__libc_init_array+0x24>
 800a32c:	4d0b      	ldr	r5, [pc, #44]	; (800a35c <__libc_init_array+0x40>)
 800a32e:	4c0c      	ldr	r4, [pc, #48]	; (800a360 <__libc_init_array+0x44>)
 800a330:	f000 f866 	bl	800a400 <_init>
 800a334:	1b64      	subs	r4, r4, r5
 800a336:	10a4      	asrs	r4, r4, #2
 800a338:	2600      	movs	r6, #0
 800a33a:	42a6      	cmp	r6, r4
 800a33c:	d105      	bne.n	800a34a <__libc_init_array+0x2e>
 800a33e:	bd70      	pop	{r4, r5, r6, pc}
 800a340:	f855 3b04 	ldr.w	r3, [r5], #4
 800a344:	4798      	blx	r3
 800a346:	3601      	adds	r6, #1
 800a348:	e7ee      	b.n	800a328 <__libc_init_array+0xc>
 800a34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a34e:	4798      	blx	r3
 800a350:	3601      	adds	r6, #1
 800a352:	e7f2      	b.n	800a33a <__libc_init_array+0x1e>
 800a354:	0800a498 	.word	0x0800a498
 800a358:	0800a498 	.word	0x0800a498
 800a35c:	0800a498 	.word	0x0800a498
 800a360:	0800a49c 	.word	0x0800a49c

0800a364 <__retarget_lock_acquire_recursive>:
 800a364:	4770      	bx	lr

0800a366 <__retarget_lock_release_recursive>:
 800a366:	4770      	bx	lr

0800a368 <_free_r>:
 800a368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a36a:	2900      	cmp	r1, #0
 800a36c:	d044      	beq.n	800a3f8 <_free_r+0x90>
 800a36e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a372:	9001      	str	r0, [sp, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	f1a1 0404 	sub.w	r4, r1, #4
 800a37a:	bfb8      	it	lt
 800a37c:	18e4      	addlt	r4, r4, r3
 800a37e:	f7ff ffa3 	bl	800a2c8 <__malloc_lock>
 800a382:	4a1e      	ldr	r2, [pc, #120]	; (800a3fc <_free_r+0x94>)
 800a384:	9801      	ldr	r0, [sp, #4]
 800a386:	6813      	ldr	r3, [r2, #0]
 800a388:	b933      	cbnz	r3, 800a398 <_free_r+0x30>
 800a38a:	6063      	str	r3, [r4, #4]
 800a38c:	6014      	str	r4, [r2, #0]
 800a38e:	b003      	add	sp, #12
 800a390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a394:	f7ff bf9e 	b.w	800a2d4 <__malloc_unlock>
 800a398:	42a3      	cmp	r3, r4
 800a39a:	d908      	bls.n	800a3ae <_free_r+0x46>
 800a39c:	6825      	ldr	r5, [r4, #0]
 800a39e:	1961      	adds	r1, r4, r5
 800a3a0:	428b      	cmp	r3, r1
 800a3a2:	bf01      	itttt	eq
 800a3a4:	6819      	ldreq	r1, [r3, #0]
 800a3a6:	685b      	ldreq	r3, [r3, #4]
 800a3a8:	1949      	addeq	r1, r1, r5
 800a3aa:	6021      	streq	r1, [r4, #0]
 800a3ac:	e7ed      	b.n	800a38a <_free_r+0x22>
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	b10b      	cbz	r3, 800a3b8 <_free_r+0x50>
 800a3b4:	42a3      	cmp	r3, r4
 800a3b6:	d9fa      	bls.n	800a3ae <_free_r+0x46>
 800a3b8:	6811      	ldr	r1, [r2, #0]
 800a3ba:	1855      	adds	r5, r2, r1
 800a3bc:	42a5      	cmp	r5, r4
 800a3be:	d10b      	bne.n	800a3d8 <_free_r+0x70>
 800a3c0:	6824      	ldr	r4, [r4, #0]
 800a3c2:	4421      	add	r1, r4
 800a3c4:	1854      	adds	r4, r2, r1
 800a3c6:	42a3      	cmp	r3, r4
 800a3c8:	6011      	str	r1, [r2, #0]
 800a3ca:	d1e0      	bne.n	800a38e <_free_r+0x26>
 800a3cc:	681c      	ldr	r4, [r3, #0]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	6053      	str	r3, [r2, #4]
 800a3d2:	440c      	add	r4, r1
 800a3d4:	6014      	str	r4, [r2, #0]
 800a3d6:	e7da      	b.n	800a38e <_free_r+0x26>
 800a3d8:	d902      	bls.n	800a3e0 <_free_r+0x78>
 800a3da:	230c      	movs	r3, #12
 800a3dc:	6003      	str	r3, [r0, #0]
 800a3de:	e7d6      	b.n	800a38e <_free_r+0x26>
 800a3e0:	6825      	ldr	r5, [r4, #0]
 800a3e2:	1961      	adds	r1, r4, r5
 800a3e4:	428b      	cmp	r3, r1
 800a3e6:	bf04      	itt	eq
 800a3e8:	6819      	ldreq	r1, [r3, #0]
 800a3ea:	685b      	ldreq	r3, [r3, #4]
 800a3ec:	6063      	str	r3, [r4, #4]
 800a3ee:	bf04      	itt	eq
 800a3f0:	1949      	addeq	r1, r1, r5
 800a3f2:	6021      	streq	r1, [r4, #0]
 800a3f4:	6054      	str	r4, [r2, #4]
 800a3f6:	e7ca      	b.n	800a38e <_free_r+0x26>
 800a3f8:	b003      	add	sp, #12
 800a3fa:	bd30      	pop	{r4, r5, pc}
 800a3fc:	20001d28 	.word	0x20001d28

0800a400 <_init>:
 800a400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a402:	bf00      	nop
 800a404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a406:	bc08      	pop	{r3}
 800a408:	469e      	mov	lr, r3
 800a40a:	4770      	bx	lr

0800a40c <_fini>:
 800a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40e:	bf00      	nop
 800a410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a412:	bc08      	pop	{r3}
 800a414:	469e      	mov	lr, r3
 800a416:	4770      	bx	lr
