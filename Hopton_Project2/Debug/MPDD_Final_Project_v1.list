
MPDD_Final_Project_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005194  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001698  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069fc  080069fc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080069fc  080069fc  000169fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a04  08006a04  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a04  08006a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a2a0  20000090  08006a9c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a330  08006a9c  0002a330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1ca  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002808  00000000  00000000  0002f2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00031ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e5c  00000000  00000000  000329e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c1f  00000000  00000000  00059844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2eaa  00000000  00000000  0006b463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000b87  00000000  00000000  0015e30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004440  00000000  00000000  0015ee94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  001632d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800534c 	.word	0x0800534c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	0800534c 	.word	0x0800534c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005ce:	f002 fb35 	bl	8002c3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005da:	f002 fb2f 	bl	8002c3c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 80005de:	1df9      	adds	r1, r7, #7
 80005e0:	2300      	movs	r3, #0
 80005e2:	2201      	movs	r2, #1
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <ILI9163_writeCommand+0x48>)
 80005e6:	f003 f8ac 	bl	8003742 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005f2:	f002 fb23 	bl	8002c3c <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020400 	.word	0x40020400
 8000604:	2000a0ac 	.word	0x2000a0ac

08000608 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <ILI9163_writeData+0x44>)
 800061a:	f002 fb0f 	bl	8002c3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <ILI9163_writeData+0x44>)
 8000626:	f002 fb09 	bl	8002c3c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 800062a:	1df9      	adds	r1, r7, #7
 800062c:	2300      	movs	r3, #0
 800062e:	2201      	movs	r2, #1
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <ILI9163_writeData+0x48>)
 8000632:	f003 f886 	bl	8003742 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <ILI9163_writeData+0x44>)
 800063e:	f002 fafd 	bl	8002c3c <HAL_GPIO_WritePin>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40020400 	.word	0x40020400
 8000650:	2000a0ac 	.word	0x2000a0ac

08000654 <ILI9163_writeData16>:

void ILI9163_writeData16(uint16_t word) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	4810      	ldr	r0, [pc, #64]	; (80006a8 <ILI9163_writeData16+0x54>)
 8000666:	f002 fae9 	bl	8002c3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <ILI9163_writeData16+0x54>)
 8000672:	f002 fae3 	bl	8002c3c <HAL_GPIO_WritePin>

	uint8_t data [2] = {(word >> 8) & 0x00FF, word & 0x00FF};
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	b29b      	uxth	r3, r3
 800067c:	b2db      	uxtb	r3, r3
 800067e:	733b      	strb	r3, [r7, #12]
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&DISP_SPI, data, 2, 0);
 8000686:	f107 010c 	add.w	r1, r7, #12
 800068a:	2300      	movs	r3, #0
 800068c:	2202      	movs	r2, #2
 800068e:	4807      	ldr	r0, [pc, #28]	; (80006ac <ILI9163_writeData16+0x58>)
 8000690:	f003 f857 	bl	8003742 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <ILI9163_writeData16+0x54>)
 800069c:	f002 face 	bl	8002c3c <HAL_GPIO_WritePin>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40020400 	.word	0x40020400
 80006ac:	2000a0ac 	.word	0x2000a0ac

080006b0 <ILI9163_setAddress>:

void ILI9163_setAddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4604      	mov	r4, r0
 80006b8:	4608      	mov	r0, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	461a      	mov	r2, r3
 80006be:	4623      	mov	r3, r4
 80006c0:	80fb      	strh	r3, [r7, #6]
 80006c2:	4603      	mov	r3, r0
 80006c4:	80bb      	strh	r3, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	807b      	strh	r3, [r7, #2]
 80006ca:	4613      	mov	r3, r2
 80006cc:	803b      	strh	r3, [r7, #0]
	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 80006ce:	202a      	movs	r0, #42	; 0x2a
 80006d0:	f7ff ff74 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData16(x1);
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffbc 	bl	8000654 <ILI9163_writeData16>
	ILI9163_writeData16(x2);
 80006dc:	887b      	ldrh	r3, [r7, #2]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffb8 	bl	8000654 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80006e4:	202b      	movs	r0, #43	; 0x2b
 80006e6:	f7ff ff69 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData16(y1);
 80006ea:	88bb      	ldrh	r3, [r7, #4]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffb1 	bl	8000654 <ILI9163_writeData16>
	ILI9163_writeData16(y2);
 80006f2:	883b      	ldrh	r3, [r7, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ffad 	bl	8000654 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80006fa:	202c      	movs	r0, #44	; 0x2c
 80006fc:	f7ff ff5e 	bl	80005bc <ILI9163_writeCommand>
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	bd90      	pop	{r4, r7, pc}

08000708 <ILI9163_reset>:

void ILI9163_reset(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000712:	4808      	ldr	r0, [pc, #32]	; (8000734 <ILI9163_reset+0x2c>)
 8000714:	f002 fa92 	bl	8002c3c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000718:	2032      	movs	r0, #50	; 0x32
 800071a:	f001 f981 	bl	8001a20 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000724:	4803      	ldr	r0, [pc, #12]	; (8000734 <ILI9163_reset+0x2c>)
 8000726:	f002 fa89 	bl	8002c3c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800072a:	2064      	movs	r0, #100	; 0x64
 800072c:	f001 f978 	bl	8001a20 <HAL_Delay>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40020c00 	.word	0x40020c00

08000738 <ILI9163_init>:

void ILI9163_init(int rotation) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	486e      	ldr	r0, [pc, #440]	; (8000900 <ILI9163_init+0x1c8>)
 8000748:	f002 fa78 	bl	8002c3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000752:	486c      	ldr	r0, [pc, #432]	; (8000904 <ILI9163_init+0x1cc>)
 8000754:	f002 fa72 	bl	8002c3c <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 8000758:	f7ff ffd6 	bl	8000708 <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 800075c:	2011      	movs	r0, #17
 800075e:	f7ff ff2d 	bl	80005bc <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 8000762:	2005      	movs	r0, #5
 8000764:	f001 f95c 	bl	8001a20 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 8000768:	203a      	movs	r0, #58	; 0x3a
 800076a:	f7ff ff27 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 800076e:	2005      	movs	r0, #5
 8000770:	f7ff ff4a 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 8000774:	2026      	movs	r0, #38	; 0x26
 8000776:	f7ff ff21 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 800077a:	2004      	movs	r0, #4
 800077c:	f7ff ff44 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8000780:	20f2      	movs	r0, #242	; 0xf2
 8000782:	f7ff ff1b 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff ff3e 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 800078c:	20e0      	movs	r0, #224	; 0xe0
 800078e:	f7ff ff15 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 8000792:	203f      	movs	r0, #63	; 0x3f
 8000794:	f7ff ff38 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 8000798:	2025      	movs	r0, #37	; 0x25
 800079a:	f7ff ff35 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 800079e:	201c      	movs	r0, #28
 80007a0:	f7ff ff32 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 80007a4:	201e      	movs	r0, #30
 80007a6:	f7ff ff2f 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007aa:	2020      	movs	r0, #32
 80007ac:	f7ff ff2c 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 80007b0:	2012      	movs	r0, #18
 80007b2:	f7ff ff29 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 80007b6:	202a      	movs	r0, #42	; 0x2a
 80007b8:	f7ff ff26 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 80007bc:	2090      	movs	r0, #144	; 0x90
 80007be:	f7ff ff23 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 80007c2:	2024      	movs	r0, #36	; 0x24
 80007c4:	f7ff ff20 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 80007c8:	2011      	movs	r0, #17
 80007ca:	f7ff ff1d 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ff1a 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff ff17 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff14 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ff11 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff ff0e 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 80007ec:	20e1      	movs	r0, #225	; 0xe1
 80007ee:	f7ff fee5 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 80007f2:	2020      	movs	r0, #32
 80007f4:	f7ff ff08 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007f8:	2020      	movs	r0, #32
 80007fa:	f7ff ff05 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007fe:	2020      	movs	r0, #32
 8000800:	f7ff ff02 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8000804:	2020      	movs	r0, #32
 8000806:	f7ff feff 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 800080a:	2005      	movs	r0, #5
 800080c:	f7ff fefc 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fef9 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 8000816:	2015      	movs	r0, #21
 8000818:	f7ff fef6 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 800081c:	20a7      	movs	r0, #167	; 0xa7
 800081e:	f7ff fef3 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 8000822:	203d      	movs	r0, #61	; 0x3d
 8000824:	f7ff fef0 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 8000828:	2018      	movs	r0, #24
 800082a:	f7ff feed 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800082e:	2025      	movs	r0, #37	; 0x25
 8000830:	f7ff feea 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 8000834:	202a      	movs	r0, #42	; 0x2a
 8000836:	f7ff fee7 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 800083a:	202b      	movs	r0, #43	; 0x2b
 800083c:	f7ff fee4 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 8000840:	202b      	movs	r0, #43	; 0x2b
 8000842:	f7ff fee1 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 8000846:	203a      	movs	r0, #58	; 0x3a
 8000848:	f7ff fede 	bl	8000608 <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 800084c:	20b1      	movs	r0, #177	; 0xb1
 800084e:	f7ff feb5 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000852:	2008      	movs	r0, #8
 8000854:	f7ff fed8 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8000858:	2002      	movs	r0, #2
 800085a:	f7ff fed5 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 800085e:	20b2      	movs	r0, #178	; 0xb2
 8000860:	f7ff feac 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000864:	2008      	movs	r0, #8
 8000866:	f7ff fecf 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800086a:	2002      	movs	r0, #2
 800086c:	f7ff fecc 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8000870:	20b3      	movs	r0, #179	; 0xb3
 8000872:	f7ff fea3 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000876:	2008      	movs	r0, #8
 8000878:	f7ff fec6 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800087c:	2002      	movs	r0, #2
 800087e:	f7ff fec3 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8000882:	20b4      	movs	r0, #180	; 0xb4
 8000884:	f7ff fe9a 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8000888:	2007      	movs	r0, #7
 800088a:	f7ff febd 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 800088e:	202a      	movs	r0, #42	; 0x2a
 8000890:	f7ff fe94 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff feb7 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff feb4 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff feb1 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 80008a6:	207f      	movs	r0, #127	; 0x7f
 80008a8:	f7ff feae 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80008ac:	202b      	movs	r0, #43	; 0x2b
 80008ae:	f7ff fe85 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fea8 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff fea5 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff fea2 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 80008c4:	209f      	movs	r0, #159	; 0x9f
 80008c6:	f7ff fe9f 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 80008ca:	2036      	movs	r0, #54	; 0x36
 80008cc:	f7ff fe76 	bl	80005bc <ILI9163_writeCommand>
	if(rotation)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d003      	beq.n	80008de <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 80008d6:	20a8      	movs	r0, #168	; 0xa8
 80008d8:	f7ff fe96 	bl	8000608 <ILI9163_writeData>
 80008dc:	e002      	b.n	80008e4 <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 80008de:	2068      	movs	r0, #104	; 0x68
 80008e0:	f7ff fe92 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 80008e4:	2013      	movs	r0, #19
 80008e6:	f7ff fe69 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 80008ea:	2029      	movs	r0, #41	; 0x29
 80008ec:	f7ff fe66 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80008f0:	202c      	movs	r0, #44	; 0x2c
 80008f2:	f7ff fe63 	bl	80005bc <ILI9163_writeCommand>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400
 8000904:	40020c00 	.word	0x40020c00

08000908 <ILI9163_newFrame>:

void ILI9163_newFrame()
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	e008      	b.n	8000926 <ILI9163_newFrame+0x1e>
		frameBuffer[i] = 0xFFFF;
 8000914:	4a09      	ldr	r2, [pc, #36]	; (800093c <ILI9163_newFrame+0x34>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800091c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800092c:	d3f2      	bcc.n	8000914 <ILI9163_newFrame+0xc>

}
 800092e:	bf00      	nop
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	200000ac 	.word	0x200000ac

08000940 <ILI9163_render>:

void ILI9163_render()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	ILI9163_setAddress(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT);
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	22a0      	movs	r2, #160	; 0xa0
 8000948:	2100      	movs	r1, #0
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff feb0 	bl	80006b0 <ILI9163_setAddress>
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <ILI9163_render+0x4c>)
 8000958:	f002 f970 	bl	8002c3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000962:	480a      	ldr	r0, [pc, #40]	; (800098c <ILI9163_render+0x4c>)
 8000964:	f002 f96a 	bl	8002c3c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&DISP_SPI, (uint8_t*)frameBuffer, BUFSIZE*2);
 8000968:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800096c:	4908      	ldr	r1, [pc, #32]	; (8000990 <ILI9163_render+0x50>)
 800096e:	4809      	ldr	r0, [pc, #36]	; (8000994 <ILI9163_render+0x54>)
 8000970:	f003 f856 	bl	8003a20 <HAL_SPI_Transmit_DMA>

	SPI_DMA_FL=0;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <ILI9163_render+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
while(!SPI_DMA_FL) {} // This can be commented out if your thread sends new frames slower than SPI transmits them. Otherwise, memory havoc. See README.md
 800097a:	bf00      	nop
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <ILI9163_render+0x58>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0fb      	beq.n	800097c <ILI9163_render+0x3c>
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020400 	.word	0x40020400
 8000990:	200000ac 	.word	0x200000ac
 8000994:	2000a0ac 	.word	0x2000a0ac
 8000998:	2000a1bc 	.word	0x2000a1bc

0800099c <ILI9163_drawPixel>:

void ILI9163_drawPixel(uint8_t x, uint8_t y, uint16_t color) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
 80009a6:	460b      	mov	r3, r1
 80009a8:	71bb      	strb	r3, [r7, #6]
 80009aa:	4613      	mov	r3, r2
 80009ac:	80bb      	strh	r3, [r7, #4]
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b9f      	cmp	r3, #159	; 0x9f
 80009b2:	d80f      	bhi.n	80009d4 <ILI9163_drawPixel+0x38>
 80009b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0b      	blt.n	80009d4 <ILI9163_drawPixel+0x38>
	frameBuffer[((x)+(y*ILI9163_WIDTH))] = color;// >> 8;
 80009bc:	79f9      	ldrb	r1, [r7, #7]
 80009be:	79ba      	ldrb	r2, [r7, #6]
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	015b      	lsls	r3, r3, #5
 80009c8:	440b      	add	r3, r1
 80009ca:	4905      	ldr	r1, [pc, #20]	; (80009e0 <ILI9163_drawPixel+0x44>)
 80009cc:	88ba      	ldrh	r2, [r7, #4]
 80009ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80009d2:	e000      	b.n	80009d6 <ILI9163_drawPixel+0x3a>
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 80009d4:	bf00      	nop
}
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	200000ac 	.word	0x200000ac

080009e4 <ILI9163_fillRect>:

void ILI9163_fillRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4604      	mov	r4, r0
 80009ec:	4608      	mov	r0, r1
 80009ee:	4611      	mov	r1, r2
 80009f0:	461a      	mov	r2, r3
 80009f2:	4623      	mov	r3, r4
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	4603      	mov	r3, r0
 80009f8:	71bb      	strb	r3, [r7, #6]
 80009fa:	460b      	mov	r3, r1
 80009fc:	717b      	strb	r3, [r7, #5]
 80009fe:	4613      	mov	r3, r2
 8000a00:	713b      	strb	r3, [r7, #4]
	for(uint8_t x = x1; x < x2; x++)
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e012      	b.n	8000a2e <ILI9163_fillRect+0x4a>
		for(uint8_t y = y1; y < y2; y++)
 8000a08:	79bb      	ldrb	r3, [r7, #6]
 8000a0a:	73bb      	strb	r3, [r7, #14]
 8000a0c:	e008      	b.n	8000a20 <ILI9163_fillRect+0x3c>
			ILI9163_drawPixel(x, y, color);
 8000a0e:	8c3a      	ldrh	r2, [r7, #32]
 8000a10:	7bb9      	ldrb	r1, [r7, #14]
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ffc1 	bl	800099c <ILI9163_drawPixel>
		for(uint8_t y = y1; y < y2; y++)
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	73bb      	strb	r3, [r7, #14]
 8000a20:	7bba      	ldrb	r2, [r7, #14]
 8000a22:	793b      	ldrb	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d3f2      	bcc.n	8000a0e <ILI9163_fillRect+0x2a>
	for(uint8_t x = x1; x < x2; x++)
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
 8000a2e:	7bfa      	ldrb	r2, [r7, #15]
 8000a30:	797b      	ldrb	r3, [r7, #5]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d3e8      	bcc.n	8000a08 <ILI9163_fillRect+0x24>
}
 8000a36:	bf00      	nop
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}

08000a40 <ILI9163_fillDisplay>:
		ILI9163_drawPixel(centerX + y, centerY - x, color);
		ILI9163_drawPixel(centerX - y, centerY - x, color);
	}
}

void ILI9163_fillDisplay(uint16_t color) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af02      	add	r7, sp, #8
 8000a46:	4603      	mov	r3, r0
 8000a48:	80fb      	strh	r3, [r7, #6]
	ILI9163_fillRect(0,0, ILI9163_WIDTH, ILI9163_HEIGHT, color);
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	22a0      	movs	r2, #160	; 0xa0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff ffc5 	bl	80009e4 <ILI9163_fillRect>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <ILI9163_drawChar>:

void ILI9163_drawChar(uint8_t x, uint8_t y, char ch, FontDef font, uint16_t color) {
 8000a62:	b082      	sub	sp, #8
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	460b      	mov	r3, r1
 8000a72:	71bb      	strb	r3, [r7, #6]
 8000a74:	4613      	mov	r3, r2
 8000a76:	717b      	strb	r3, [r7, #5]
	uint16_t i, b, j;
	for(i = 0; i < font.height; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	81fb      	strh	r3, [r7, #14]
 8000a7c:	e02f      	b.n	8000ade <ILI9163_drawChar+0x7c>
		b = font.data[(ch - 32) * font.height + i];
 8000a7e:	6a3a      	ldr	r2, [r7, #32]
 8000a80:	797b      	ldrb	r3, [r7, #5]
 8000a82:	3b20      	subs	r3, #32
 8000a84:	7f79      	ldrb	r1, [r7, #29]
 8000a86:	fb03 f101 	mul.w	r1, r3, r1
 8000a8a:	89fb      	ldrh	r3, [r7, #14]
 8000a8c:	440b      	add	r3, r1
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	817b      	strh	r3, [r7, #10]
		for(j = 0; j < font.width; j++) {
 8000a96:	2300      	movs	r3, #0
 8000a98:	81bb      	strh	r3, [r7, #12]
 8000a9a:	e018      	b.n	8000ace <ILI9163_drawChar+0x6c>
			if((b << j) & 0x8000)  {
 8000a9c:	897a      	ldrh	r2, [r7, #10]
 8000a9e:	89bb      	ldrh	r3, [r7, #12]
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d00d      	beq.n	8000ac8 <ILI9163_drawChar+0x66>
				ILI9163_drawPixel(x + j, y + i, color);
 8000aac:	89bb      	ldrh	r3, [r7, #12]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	b2d8      	uxtb	r0, r3
 8000ab6:	89fb      	ldrh	r3, [r7, #14]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	79bb      	ldrb	r3, [r7, #6]
 8000abc:	4413      	add	r3, r2
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f7ff ff6a 	bl	800099c <ILI9163_drawPixel>
		for(j = 0; j < font.width; j++) {
 8000ac8:	89bb      	ldrh	r3, [r7, #12]
 8000aca:	3301      	adds	r3, #1
 8000acc:	81bb      	strh	r3, [r7, #12]
 8000ace:	7f3b      	ldrb	r3, [r7, #28]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	89ba      	ldrh	r2, [r7, #12]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d3e1      	bcc.n	8000a9c <ILI9163_drawChar+0x3a>
	for(i = 0; i < font.height; i++) {
 8000ad8:	89fb      	ldrh	r3, [r7, #14]
 8000ada:	3301      	adds	r3, #1
 8000adc:	81fb      	strh	r3, [r7, #14]
 8000ade:	7f7b      	ldrb	r3, [r7, #29]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	89fa      	ldrh	r2, [r7, #14]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d3ca      	bcc.n	8000a7e <ILI9163_drawChar+0x1c>
			}
		}
	}
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000af4:	b002      	add	sp, #8
 8000af6:	4770      	bx	lr

08000af8 <ILI9163_drawString>:

void ILI9163_drawString(uint8_t x, uint8_t y, FontDef font, uint16_t color, const char *string) {
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af02      	add	r7, sp, #8
 8000afe:	4604      	mov	r4, r0
 8000b00:	4608      	mov	r0, r1
 8000b02:	1d39      	adds	r1, r7, #4
 8000b04:	e881 000c 	stmia.w	r1, {r2, r3}
 8000b08:	4623      	mov	r3, r4
 8000b0a:	73fb      	strb	r3, [r7, #15]
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	73bb      	strb	r3, [r7, #14]
	while(*string) {
 8000b10:	e029      	b.n	8000b66 <ILI9163_drawString+0x6e>
		if(x + font.width >= ILI9163_WIDTH) {
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	793a      	ldrb	r2, [r7, #4]
 8000b16:	4413      	add	r3, r2
 8000b18:	2b9f      	cmp	r3, #159	; 0x9f
 8000b1a:	dd12      	ble.n	8000b42 <ILI9163_drawString+0x4a>
			x = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]
			y += font.height;
 8000b20:	797a      	ldrb	r2, [r7, #5]
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	4413      	add	r3, r2
 8000b26:	73bb      	strb	r3, [r7, #14]
			if(y + font.height >= ILI9163_HEIGHT)
 8000b28:	7bbb      	ldrb	r3, [r7, #14]
 8000b2a:	797a      	ldrb	r2, [r7, #5]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b30:	dc1e      	bgt.n	8000b70 <ILI9163_drawString+0x78>
				break;

			if(*string == ' ') {
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b20      	cmp	r3, #32
 8000b38:	d103      	bne.n	8000b42 <ILI9163_drawString+0x4a>
				// skip spaces in the beginning of the new line
				string++;
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8000b40:	e011      	b.n	8000b66 <ILI9163_drawString+0x6e>
			}
		}

		ILI9163_drawChar(x, y, *string, font, color);
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	7bb9      	ldrb	r1, [r7, #14]
 8000b48:	7bf8      	ldrb	r0, [r7, #15]
 8000b4a:	8c3b      	ldrh	r3, [r7, #32]
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f7ff ff85 	bl	8000a62 <ILI9163_drawChar>

		x += font.width;
 8000b58:	793a      	ldrb	r2, [r7, #4]
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	73fb      	strb	r3, [r7, #15]
		string++;
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	3301      	adds	r3, #1
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
	while(*string) {
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1d1      	bne.n	8000b12 <ILI9163_drawString+0x1a>
	}
}
 8000b6e:	e000      	b.n	8000b72 <ILI9163_drawString+0x7a>
				break;
 8000b70:	bf00      	nop
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd90      	pop	{r4, r7, pc}

08000b7a <ILI9163_drawStringF>:

void ILI9163_drawStringF(uint8_t x, uint8_t y, FontDef font, uint16_t color, char *szFormat, ...) {
 8000b7a:	b590      	push	{r4, r7, lr}
 8000b7c:	b099      	sub	sp, #100	; 0x64
 8000b7e:	af02      	add	r7, sp, #8
 8000b80:	4604      	mov	r4, r0
 8000b82:	4608      	mov	r0, r1
 8000b84:	1d39      	adds	r1, r7, #4
 8000b86:	e881 000c 	stmia.w	r1, {r2, r3}
 8000b8a:	4623      	mov	r3, r4
 8000b8c:	73fb      	strb	r3, [r7, #15]
 8000b8e:	4603      	mov	r3, r0
 8000b90:	73bb      	strb	r3, [r7, #14]
	char szBuffer[64];
	va_list pArgs;
	va_start(pArgs, szFormat);
 8000b92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b96:	617b      	str	r3, [r7, #20]
	vsnprintf(szBuffer, 63, szFormat, pArgs);
 8000b98:	f107 0018 	add.w	r0, r7, #24
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000ba0:	213f      	movs	r1, #63	; 0x3f
 8000ba2:	f003 ff41 	bl	8004a28 <vsniprintf>
	va_end(pArgs);

	ILI9163_drawString(x, y, font, color, szBuffer);
 8000ba6:	7bb9      	ldrb	r1, [r7, #14]
 8000ba8:	7bf8      	ldrb	r0, [r7, #15]
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	cb0c      	ldmia	r3, {r2, r3}
 8000bba:	f7ff ff9d 	bl	8000af8 <ILI9163_drawString>
}
 8000bbe:	bf00      	nop
 8000bc0:	375c      	adds	r7, #92	; 0x5c
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd90      	pop	{r4, r7, pc}
	...

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0a8      	sub	sp, #160	; 0xa0
 8000bcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bce:	f000 feca 	bl	8001966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd2:	f000 f9c3 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd6:	f000 faa9 	bl	800112c <MX_GPIO_Init>
  MX_DMA_Init();
 8000bda:	f000 fa89 	bl	80010f0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000bde:	f000 fa25 	bl	800102c <MX_SPI1_Init>
  MX_TIM14_Init();
 8000be2:	f000 fa61 	bl	80010a8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  ILI9163_init(0);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff fda6 	bl	8000738 <ILI9163_init>


//	  uint32_t num = 0;
//	Write_Flash(((uint32_t *) num));
	uint32_t pinInt = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  {
	 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn on LED
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char readData = (char) readFlash1();
 8000bf2:	f000 fbb1 	bl	8001358 <readFlash1>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

	  // ... (other code)

	  if(readData == (char)0){
 8000bfc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f040 809a 	bne.w	8000d3a <main+0x172>

	      char strrr[100];
	      char pin[5] = {0}; // Initialize to empty string, 5 to include null terminator
 8000c06:	2300      	movs	r3, #0
 8000c08:	677b      	str	r3, [r7, #116]	; 0x74
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

	      ILI9163_newFrame();
 8000c10:	f7ff fe7a 	bl	8000908 <ILI9163_newFrame>
	      //DisplayLoadingAnimation(70,60,10,2000);
	      sprintf(strrr, "No pin set");
 8000c14:	463b      	mov	r3, r7
 8000c16:	49c5      	ldr	r1, [pc, #788]	; (8000f2c <main+0x364>)
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f003 feb9 	bl	8004990 <siprintf>
	      ILI9163_drawStringF(15, 5, Font_11x18, BLUE, strrr);
 8000c1e:	4ac4      	ldr	r2, [pc, #784]	; (8000f30 <main+0x368>)
 8000c20:	463b      	mov	r3, r7
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	ca0c      	ldmia	r2, {r2, r3}
 8000c2c:	2105      	movs	r1, #5
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f7ff ffa3 	bl	8000b7a <ILI9163_drawStringF>
	      sprintf(strrr, "Click A to set one.");
 8000c34:	463b      	mov	r3, r7
 8000c36:	49bf      	ldr	r1, [pc, #764]	; (8000f34 <main+0x36c>)
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f003 fea9 	bl	8004990 <siprintf>
	      ILI9163_drawStringF(5, 30, Font_7x10, BLUE, strrr);
 8000c3e:	4abe      	ldr	r2, [pc, #760]	; (8000f38 <main+0x370>)
 8000c40:	463b      	mov	r3, r7
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	ca0c      	ldmia	r2, {r2, r3}
 8000c4c:	211e      	movs	r1, #30
 8000c4e:	2005      	movs	r0, #5
 8000c50:	f7ff ff93 	bl	8000b7a <ILI9163_drawStringF>
	      ILI9163_render();
 8000c54:	f7ff fe74 	bl	8000940 <ILI9163_render>

	      if(keyChar == 'A'){
 8000c58:	4bb8      	ldr	r3, [pc, #736]	; (8000f3c <main+0x374>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b41      	cmp	r3, #65	; 0x41
 8000c5e:	d168      	bne.n	8000d32 <main+0x16a>
	          ILI9163_newFrame();
 8000c60:	f7ff fe52 	bl	8000908 <ILI9163_newFrame>
	          sprintf(strrr, "Click A to set one.");
 8000c64:	463b      	mov	r3, r7
 8000c66:	49b3      	ldr	r1, [pc, #716]	; (8000f34 <main+0x36c>)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f003 fe91 	bl	8004990 <siprintf>
	          ILI9163_drawStringF(5, 30, Font_7x10, BLUE, strrr);
 8000c6e:	4ab2      	ldr	r2, [pc, #712]	; (8000f38 <main+0x370>)
 8000c70:	463b      	mov	r3, r7
 8000c72:	9301      	str	r3, [sp, #4]
 8000c74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	ca0c      	ldmia	r2, {r2, r3}
 8000c7c:	211e      	movs	r1, #30
 8000c7e:	2005      	movs	r0, #5
 8000c80:	f7ff ff7b 	bl	8000b7a <ILI9163_drawStringF>
	          ILI9163_render();
 8000c84:	f7ff fe5c 	bl	8000940 <ILI9163_render>
	          HAL_Delay(100);
 8000c88:	2064      	movs	r0, #100	; 0x64
 8000c8a:	f000 fec9 	bl	8001a20 <HAL_Delay>
	          keyChar = 0;
 8000c8e:	4bab      	ldr	r3, [pc, #684]	; (8000f3c <main+0x374>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]

	          while(strlen(pin) < 4){
 8000c94:	e034      	b.n	8000d00 <main+0x138>
	              // Read keyChar here, possibly from a function or input device

	              if(keyChar != 0){ // Check if keyChar is a digit
 8000c96:	4ba9      	ldr	r3, [pc, #676]	; (8000f3c <main+0x374>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d017      	beq.n	8000cce <main+0x106>
	                  size_t len = strlen(pin);
 8000c9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fab4 	bl	8000210 <strlen>
 8000ca8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	                  pin[len] = keyChar;
 8000cac:	4ba3      	ldr	r3, [pc, #652]	; (8000f3c <main+0x374>)
 8000cae:	7819      	ldrb	r1, [r3, #0]
 8000cb0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000cb8:	4413      	add	r3, r2
 8000cba:	460a      	mov	r2, r1
 8000cbc:	701a      	strb	r2, [r3, #0]
	                  pin[len + 1] = '\0'; // Null terminate the string
 8000cbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	3398      	adds	r3, #152	; 0x98
 8000cc6:	443b      	add	r3, r7
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f803 2c24 	strb.w	r2, [r3, #-36]
	              }
	              keyChar = 0;
 8000cce:	4b9b      	ldr	r3, [pc, #620]	; (8000f3c <main+0x374>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
	              ILI9163_newFrame();
 8000cd4:	f7ff fe18 	bl	8000908 <ILI9163_newFrame>
	              //DisplayLoadingAnimation(70,60,10,2000);
	              sprintf(strrr, "Enter 4 digit pin: %s", pin);
 8000cd8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000cdc:	463b      	mov	r3, r7
 8000cde:	4998      	ldr	r1, [pc, #608]	; (8000f40 <main+0x378>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 fe55 	bl	8004990 <siprintf>
	              ILI9163_drawStringF(15, 5, Font_11x18, BLUE, strrr);
 8000ce6:	4a92      	ldr	r2, [pc, #584]	; (8000f30 <main+0x368>)
 8000ce8:	463b      	mov	r3, r7
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	ca0c      	ldmia	r2, {r2, r3}
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	200f      	movs	r0, #15
 8000cf8:	f7ff ff3f 	bl	8000b7a <ILI9163_drawStringF>
	              ILI9163_render();
 8000cfc:	f7ff fe20 	bl	8000940 <ILI9163_render>
	          while(strlen(pin) < 4){
 8000d00:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fa83 	bl	8000210 <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d9c2      	bls.n	8000c96 <main+0xce>
	          }
	          HAL_Delay(150);
 8000d10:	2096      	movs	r0, #150	; 0x96
 8000d12:	f000 fe85 	bl	8001a20 <HAL_Delay>
	         //DisplayLoadingAnimation(70,60,10,2000);
	           pinInt = strtoul(pin, NULL, 10); // Convert string to unsigned long (32-bit)
 8000d16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d1a:	220a      	movs	r2, #10
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 fe2c 	bl	800497c <strtoul>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	                      Write_Flash( pinInt); // Write the integer to flash
 8000d2a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000d2e:	f000 fae9 	bl	8001304 <Write_Flash>

	      }
	      counter = 1;
 8000d32:	4b84      	ldr	r3, [pc, #528]	; (8000f44 <main+0x37c>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e03b      	b.n	8000db2 <main+0x1ea>
	  }

	  else if(counter == 3){
 8000d3a:	4b82      	ldr	r3, [pc, #520]	; (8000f44 <main+0x37c>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d137      	bne.n	8000db2 <main+0x1ea>
	  		  char strrr[100];
	  		  	      char pin[5] = {0}; // Initialize to empty string, 5 to include null terminator
 8000d42:	2300      	movs	r3, #0
 8000d44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000d46:	2300      	movs	r3, #0
 8000d48:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

	  		  	      ILI9163_newFrame();
 8000d4c:	f7ff fddc 	bl	8000908 <ILI9163_newFrame>
	  		  	      //DisplayLoadingAnimation(70,60,10,2000);
	  		  	      sprintf(strrr, "Change pin?");
 8000d50:	463b      	mov	r3, r7
 8000d52:	497d      	ldr	r1, [pc, #500]	; (8000f48 <main+0x380>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 fe1b 	bl	8004990 <siprintf>
	  		  	      ILI9163_drawStringF(15, 5, Font_11x18, BLUE, strrr);
 8000d5a:	4a75      	ldr	r2, [pc, #468]	; (8000f30 <main+0x368>)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	ca0c      	ldmia	r2, {r2, r3}
 8000d68:	2105      	movs	r1, #5
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f7ff ff05 	bl	8000b7a <ILI9163_drawStringF>
	  		  	      sprintf(strrr, "Click A to set one.");
 8000d70:	463b      	mov	r3, r7
 8000d72:	4970      	ldr	r1, [pc, #448]	; (8000f34 <main+0x36c>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 fe0b 	bl	8004990 <siprintf>
	  		  	      ILI9163_drawStringF(5, 30, Font_7x10, BLUE, strrr);
 8000d7a:	4a6f      	ldr	r2, [pc, #444]	; (8000f38 <main+0x370>)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	ca0c      	ldmia	r2, {r2, r3}
 8000d88:	211e      	movs	r1, #30
 8000d8a:	2005      	movs	r0, #5
 8000d8c:	f7ff fef5 	bl	8000b7a <ILI9163_drawStringF>
	  		  	      ILI9163_render();
 8000d90:	f7ff fdd6 	bl	8000940 <ILI9163_render>
	  		  	      if(keyChar == 'A'){
 8000d94:	4b69      	ldr	r3, [pc, #420]	; (8000f3c <main+0x374>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b41      	cmp	r3, #65	; 0x41
 8000d9a:	d10a      	bne.n	8000db2 <main+0x1ea>
	  		  	    	uint32_t num = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  		  	    	Write_Flash(((uint32_t *) num));
 8000da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 faac 	bl	8001304 <Write_Flash>
	  		  	    	counter = 0;
 8000dac:	4b65      	ldr	r3, [pc, #404]	; (8000f44 <main+0x37c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
	  		  	      }

	  	  }
	  readData = (char) readFlash1();
 8000db2:	f000 fad1 	bl	8001358 <readFlash1>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	  if(counter == 2 || readData != (char)0 && counter != 3){
 8000dbc:	4b61      	ldr	r3, [pc, #388]	; (8000f44 <main+0x37c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d009      	beq.n	8000dd8 <main+0x210>
 8000dc4:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f43f af12 	beq.w	8000bf2 <main+0x2a>
 8000dce:	4b5d      	ldr	r3, [pc, #372]	; (8000f44 <main+0x37c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	f43f af0d 	beq.w	8000bf2 <main+0x2a>
	      char strrr[100];
	      char pin[5] = {0};
 8000dd8:	2300      	movs	r3, #0
 8000dda:	667b      	str	r3, [r7, #100]	; 0x64
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

	      while(strlen(pin) < 4){
 8000de2:	e031      	b.n	8000e48 <main+0x280>
	          // Read keyChar here, possibly from a function or input device
	          if(keyChar != 0){ // Check if keyChar is a digit
 8000de4:	4b55      	ldr	r3, [pc, #340]	; (8000f3c <main+0x374>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d014      	beq.n	8000e16 <main+0x24e>
	              size_t len = strlen(pin);
 8000dec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fa0d 	bl	8000210 <strlen>
 8000df6:	67f8      	str	r0, [r7, #124]	; 0x7c
	              pin[len] = keyChar;
 8000df8:	4b50      	ldr	r3, [pc, #320]	; (8000f3c <main+0x374>)
 8000dfa:	7819      	ldrb	r1, [r3, #0]
 8000dfc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000e00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e02:	4413      	add	r3, r2
 8000e04:	460a      	mov	r2, r1
 8000e06:	701a      	strb	r2, [r3, #0]
	              pin[len + 1] = '\0'; // Null terminate the string
 8000e08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	3398      	adds	r3, #152	; 0x98
 8000e0e:	443b      	add	r3, r7
 8000e10:	2200      	movs	r2, #0
 8000e12:	f803 2c34 	strb.w	r2, [r3, #-52]
	          }
	          keyChar = 0;
 8000e16:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <main+0x374>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
	          ILI9163_newFrame();
 8000e1c:	f7ff fd74 	bl	8000908 <ILI9163_newFrame>
	          //DisplayLoadingAnimation(70,60,10,2000);
	          sprintf(strrr, "Locked-Enter Pin: %s", pin);
 8000e20:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000e24:	463b      	mov	r3, r7
 8000e26:	4949      	ldr	r1, [pc, #292]	; (8000f4c <main+0x384>)
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 fdb1 	bl	8004990 <siprintf>
	          ILI9163_drawStringF(15, 5, Font_11x18, BLUE, strrr);
 8000e2e:	4a40      	ldr	r2, [pc, #256]	; (8000f30 <main+0x368>)
 8000e30:	463b      	mov	r3, r7
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	ca0c      	ldmia	r2, {r2, r3}
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	200f      	movs	r0, #15
 8000e40:	f7ff fe9b 	bl	8000b7a <ILI9163_drawStringF>
	          ILI9163_render();
 8000e44:	f7ff fd7c 	bl	8000940 <ILI9163_render>
	      while(strlen(pin) < 4){
 8000e48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff f9df 	bl	8000210 <strlen>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d9c5      	bls.n	8000de4 <main+0x21c>
	      }

	      // Assuming readFlash1() returns the stored PIN as a string

	      int temp = readFlash1();
 8000e58:	f000 fa7e 	bl	8001358 <readFlash1>
 8000e5c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	      uint32_t enteredPin = strtoul(pin, NULL, 10);
 8000e60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e64:	220a      	movs	r2, #10
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fd87 	bl	800497c <strtoul>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	      if(enteredPin == temp){
 8000e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000e78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d12a      	bne.n	8000ed6 <main+0x30e>
	          // PIN is correct
	          ILI9163_newFrame();
 8000e80:	f7ff fd42 	bl	8000908 <ILI9163_newFrame>
	          //DisplayLoadingAnimation(70,60,10,2000);
	          sprintf(strrr, "Unlocked!", pin);
 8000e84:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4931      	ldr	r1, [pc, #196]	; (8000f50 <main+0x388>)
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fd7f 	bl	8004990 <siprintf>
	          ILI9163_fillDisplay(GREEN);
 8000e92:	200c      	movs	r0, #12
 8000e94:	f7ff fdd4 	bl	8000a40 <ILI9163_fillDisplay>
	          ILI9163_drawStringF(15, 5, Font_11x18, BLUE, strrr);
 8000e98:	4a25      	ldr	r2, [pc, #148]	; (8000f30 <main+0x368>)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	ca0c      	ldmia	r2, {r2, r3}
 8000ea6:	2105      	movs	r1, #5
 8000ea8:	200f      	movs	r0, #15
 8000eaa:	f7ff fe66 	bl	8000b7a <ILI9163_drawStringF>
	          ILI9163_render();
 8000eae:	f7ff fd47 	bl	8000940 <ILI9163_render>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn on LED
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4827      	ldr	r0, [pc, #156]	; (8000f54 <main+0x38c>)
 8000eb8:	f001 fec0 	bl	8002c3c <HAL_GPIO_WritePin>

	          HAL_Delay(3000);
 8000ebc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ec0:	f000 fdae 	bl	8001a20 <HAL_Delay>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn on LED
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4822      	ldr	r0, [pc, #136]	; (8000f54 <main+0x38c>)
 8000eca:	f001 feb7 	bl	8002c3c <HAL_GPIO_WritePin>
	          counter = 3;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <main+0x37c>)
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	701a      	strb	r2, [r3, #0]
 8000ed4:	e68d      	b.n	8000bf2 <main+0x2a>
	      } else {
	          // PIN is incorrect
	          // Handle incorrect PIN case
	    	  ILI9163_newFrame();
 8000ed6:	f7ff fd17 	bl	8000908 <ILI9163_newFrame>
	    	  	          //DisplayLoadingAnimation(70,60,10,2000);
	    	  	          sprintf(strrr, "Wrong Pin.", pin);
 8000eda:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000ede:	463b      	mov	r3, r7
 8000ee0:	491d      	ldr	r1, [pc, #116]	; (8000f58 <main+0x390>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 fd54 	bl	8004990 <siprintf>
	    	  	          ILI9163_fillDisplay(RED);
 8000ee8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000eec:	f7ff fda8 	bl	8000a40 <ILI9163_fillDisplay>
	    	  	          ILI9163_drawStringF(15, 5, Font_11x18, BLUE, strrr);
 8000ef0:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <main+0x368>)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	ca0c      	ldmia	r2, {r2, r3}
 8000efe:	2105      	movs	r1, #5
 8000f00:	200f      	movs	r0, #15
 8000f02:	f7ff fe3a 	bl	8000b7a <ILI9163_drawStringF>
	    	  	          ILI9163_render();
 8000f06:	f7ff fd1b 	bl	8000940 <ILI9163_render>
	    	  	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Turn on LED
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f10:	4810      	ldr	r0, [pc, #64]	; (8000f54 <main+0x38c>)
 8000f12:	f001 fe93 	bl	8002c3c <HAL_GPIO_WritePin>
	    	  	        	          HAL_Delay(3000);
 8000f16:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f1a:	f000 fd81 	bl	8001a20 <HAL_Delay>
	    	  	        	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Turn on LED
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f24:	480b      	ldr	r0, [pc, #44]	; (8000f54 <main+0x38c>)
 8000f26:	f001 fe89 	bl	8002c3c <HAL_GPIO_WritePin>
  {
 8000f2a:	e662      	b.n	8000bf2 <main+0x2a>
 8000f2c:	08005364 	.word	0x08005364
 8000f30:	20000008 	.word	0x20000008
 8000f34:	08005370 	.word	0x08005370
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	2000a1bd 	.word	0x2000a1bd
 8000f40:	08005384 	.word	0x08005384
 8000f44:	2000a1c0 	.word	0x2000a1c0
 8000f48:	0800539c 	.word	0x0800539c
 8000f4c:	080053a8 	.word	0x080053a8
 8000f50:	080053c0 	.word	0x080053c0
 8000f54:	40020400 	.word	0x40020400
 8000f58:	080053cc 	.word	0x080053cc

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2230      	movs	r2, #48	; 0x30
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 fd6a 	bl	8004a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f80:	f001 fe8e 	bl	8002ca0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <SystemClock_Config+0xc8>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a26      	ldr	r2, [pc, #152]	; (8001024 <SystemClock_Config+0xc8>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b24      	ldr	r3, [pc, #144]	; (8001024 <SystemClock_Config+0xc8>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <SystemClock_Config+0xcc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fa4:	4a20      	ldr	r2, [pc, #128]	; (8001028 <SystemClock_Config+0xcc>)
 8000fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <SystemClock_Config+0xcc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fbc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fd0:	2348      	movs	r3, #72	; 0x48
 8000fd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fdc:	f107 0320 	add.w	r3, r7, #32
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fe6d 	bl	8002cc0 <HAL_RCC_OscConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fec:	f000 f9c0 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001000:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	2102      	movs	r1, #2
 800100c:	4618      	mov	r0, r3
 800100e:	f002 f8fb 	bl	8003208 <HAL_RCC_ClockConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001018:	f000 f9aa 	bl	8001370 <Error_Handler>
  }
}
 800101c:	bf00      	nop
 800101e:	3750      	adds	r7, #80	; 0x50
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_SPI1_Init+0x74>)
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <MX_SPI1_Init+0x78>)
 8001034:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_SPI1_Init+0x74>)
 8001038:	f44f 7282 	mov.w	r2, #260	; 0x104
 800103c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_SPI1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_SPI1_Init+0x74>)
 8001046:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800104a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_SPI1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_SPI1_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_SPI1_Init+0x74>)
 800105a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_SPI1_Init+0x74>)
 8001062:	2208      	movs	r2, #8
 8001064:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_SPI1_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_SPI1_Init+0x74>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_SPI1_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_SPI1_Init+0x74>)
 800107a:	2207      	movs	r2, #7
 800107c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_SPI1_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_SPI1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_SPI1_Init+0x74>)
 800108c:	f002 faae 	bl	80035ec <HAL_SPI_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001096:	f000 f96b 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000a0ac 	.word	0x2000a0ac
 80010a4:	40013000 	.word	0x40013000

080010a8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_TIM14_Init+0x40>)
 80010ae:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <MX_TIM14_Init+0x44>)
 80010b0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <MX_TIM14_Init+0x40>)
 80010b4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010b8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_TIM14_Init+0x40>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_TIM14_Init+0x40>)
 80010c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010c6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_TIM14_Init+0x40>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_TIM14_Init+0x40>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_TIM14_Init+0x40>)
 80010d6:	f003 f8ff 	bl	80042d8 <HAL_TIM_Base_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80010e0:	f000 f946 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000a170 	.word	0x2000a170
 80010ec:	40002000 	.word	0x40002000

080010f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_DMA_Init+0x38>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <MX_DMA_Init+0x38>)
 80010fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_DMA_Init+0x38>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	203b      	movs	r0, #59	; 0x3b
 8001114:	f000 fd83 	bl	8001c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001118:	203b      	movs	r0, #59	; 0x3b
 800111a:	f000 fd9c 	bl	8001c56 <HAL_NVIC_EnableIRQ>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001142:	4b52      	ldr	r3, [pc, #328]	; (800128c <MX_GPIO_Init+0x160>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a51      	ldr	r2, [pc, #324]	; (800128c <MX_GPIO_Init+0x160>)
 8001148:	f043 0310 	orr.w	r3, r3, #16
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b4f      	ldr	r3, [pc, #316]	; (800128c <MX_GPIO_Init+0x160>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	4b4c      	ldr	r3, [pc, #304]	; (800128c <MX_GPIO_Init+0x160>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a4b      	ldr	r2, [pc, #300]	; (800128c <MX_GPIO_Init+0x160>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b49      	ldr	r3, [pc, #292]	; (800128c <MX_GPIO_Init+0x160>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001172:	4b46      	ldr	r3, [pc, #280]	; (800128c <MX_GPIO_Init+0x160>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a45      	ldr	r2, [pc, #276]	; (800128c <MX_GPIO_Init+0x160>)
 8001178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b43      	ldr	r3, [pc, #268]	; (800128c <MX_GPIO_Init+0x160>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b40      	ldr	r3, [pc, #256]	; (800128c <MX_GPIO_Init+0x160>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a3f      	ldr	r2, [pc, #252]	; (800128c <MX_GPIO_Init+0x160>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <MX_GPIO_Init+0x160>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b3a      	ldr	r3, [pc, #232]	; (800128c <MX_GPIO_Init+0x160>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a39      	ldr	r2, [pc, #228]	; (800128c <MX_GPIO_Init+0x160>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b37      	ldr	r3, [pc, #220]	; (800128c <MX_GPIO_Init+0x160>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13
 80011ba:	2200      	movs	r2, #0
 80011bc:	f64e 3103 	movw	r1, #60163	; 0xeb03
 80011c0:	4833      	ldr	r0, [pc, #204]	; (8001290 <MX_GPIO_Init+0x164>)
 80011c2:	f001 fd3b 	bl	8002c3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011c6:	2320      	movs	r3, #32
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	482e      	ldr	r0, [pc, #184]	; (8001294 <MX_GPIO_Init+0x168>)
 80011dc:	f001 fb6a 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_8|GPIO_PIN_9;
 80011e0:	f244 3301 	movw	r3, #17153	; 0x4301
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4825      	ldr	r0, [pc, #148]	; (8001290 <MX_GPIO_Init+0x164>)
 80011fa:	f001 fb5b 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB11 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 80011fe:	f64a 0302 	movw	r3, #43010	; 0xa802
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001208:	2302      	movs	r3, #2
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	481e      	ldr	r0, [pc, #120]	; (8001290 <MX_GPIO_Init+0x164>)
 8001218:	f001 fb4c 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800121c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001222:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001228:	2301      	movs	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4819      	ldr	r0, [pc, #100]	; (8001298 <MX_GPIO_Init+0x16c>)
 8001234:	f001 fb3e 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001238:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800124a:	230a      	movs	r3, #10
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4811      	ldr	r0, [pc, #68]	; (800129c <MX_GPIO_Init+0x170>)
 8001256:	f001 fb2d 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800125a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	480b      	ldr	r0, [pc, #44]	; (800129c <MX_GPIO_Init+0x170>)
 8001270:	f001 fb20 	bl	80028b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2017      	movs	r0, #23
 800127a:	f000 fcd0 	bl	8001c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800127e:	2017      	movs	r0, #23
 8001280:	f000 fce9 	bl	8001c56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40020400 	.word	0x40020400
 8001294:	40021000 	.word	0x40021000
 8001298:	40020800 	.word	0x40020800
 800129c:	40020000 	.word	0x40020000

080012a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13){
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012b0:	d102      	bne.n	80012b8 <HAL_GPIO_EXTI_Callback+0x18>
	  HAL_TIM_Base_Start_IT(&htim14);
 80012b2:	4803      	ldr	r0, [pc, #12]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x20>)
 80012b4:	f003 f868 	bl	8004388 <HAL_TIM_Base_Start_IT>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2000a170 	.word	0x2000a170

080012c4 <HAL_SPI_TxCpltCallback>:



void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) // Your TxCpltCallback
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	SPI_DMA_CNT--;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_SPI_TxCpltCallback+0x34>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <HAL_SPI_TxCpltCallback+0x34>)
 80012d4:	6013      	str	r3, [r2, #0]
	if(SPI_DMA_CNT==0)
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_SPI_TxCpltCallback+0x34>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d108      	bne.n	80012f0 <HAL_SPI_TxCpltCallback+0x2c>
	{
		HAL_SPI_DMAStop(&hspi1);
 80012de:	4807      	ldr	r0, [pc, #28]	; (80012fc <HAL_SPI_TxCpltCallback+0x38>)
 80012e0:	f002 fc92 	bl	8003c08 <HAL_SPI_DMAStop>
		SPI_DMA_CNT=1;
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <HAL_SPI_TxCpltCallback+0x34>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
		SPI_DMA_FL=1;
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_SPI_TxCpltCallback+0x3c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
	}
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000010 	.word	0x20000010
 80012fc:	2000a0ac 	.word	0x2000a0ac
 8001300:	2000a1bc 	.word	0x2000a1bc

08001304 <Write_Flash>:


void Write_Flash(uint32_t data)
{
 8001304:	b5b0      	push	{r4, r5, r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

    HAL_FLASH_Unlock();
 800130c:	f001 f924 	bl	8002558 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <Write_Flash+0x4c>)
 8001312:	2273      	movs	r2, #115	; 0x73
 8001314:	60da      	str	r2, [r3, #12]
    FLASH_Erase_Sector(FLASH_SECTOR_1, VOLTAGE_RANGE_1);
 8001316:	2100      	movs	r1, #0
 8001318:	2001      	movs	r0, #1
 800131a:	f001 fa7f 	bl	800281c <FLASH_Erase_Sector>
    HAL_Delay(1000);
 800131e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001322:	f000 fb7d 	bl	8001a20 <HAL_Delay>
    HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, (uint32_t) data);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	461c      	mov	r4, r3
 800132c:	4615      	mov	r5, r2
 800132e:	4622      	mov	r2, r4
 8001330:	462b      	mov	r3, r5
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <Write_Flash+0x50>)
 8001334:	2002      	movs	r0, #2
 8001336:	f001 f8b3 	bl	80024a0 <HAL_FLASH_Program>
    HAL_Delay(1000);
 800133a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800133e:	f000 fb6f 	bl	8001a20 <HAL_Delay>
    HAL_FLASH_Lock();
 8001342:	f001 f92b 	bl	800259c <HAL_FLASH_Lock>
   // GetSector(FlashAddress);
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bdb0      	pop	{r4, r5, r7, pc}
 800134e:	bf00      	nop
 8001350:	40023c00 	.word	0x40023c00
 8001354:	08008000 	.word	0x08008000

08001358 <readFlash1>:

int readFlash1()
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
    return (int) *(uint32_t *)FlashAddress;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <readFlash1+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	08008000 	.word	0x08008000

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_MspInit+0x44>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_MspInit+0x44>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_MspInit+0x44>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_MspInit+0x44>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_MspInit+0x44>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_MspInit+0x44>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800

080013c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a37      	ldr	r2, [pc, #220]	; (80014c0 <HAL_SPI_MspInit+0xfc>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d168      	bne.n	80014b8 <HAL_SPI_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013e6:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <HAL_SPI_MspInit+0x100>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a36      	ldr	r2, [pc, #216]	; (80014c4 <HAL_SPI_MspInit+0x100>)
 80013ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <HAL_SPI_MspInit+0x100>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <HAL_SPI_MspInit+0x100>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a30      	ldr	r2, [pc, #192]	; (80014c4 <HAL_SPI_MspInit+0x100>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <HAL_SPI_MspInit+0x100>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001416:	23e0      	movs	r3, #224	; 0xe0
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001426:	2305      	movs	r3, #5
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	4825      	ldr	r0, [pc, #148]	; (80014c8 <HAL_SPI_MspInit+0x104>)
 8001432:	f001 fa3f 	bl	80028b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <HAL_SPI_MspInit+0x108>)
 8001438:	4a25      	ldr	r2, [pc, #148]	; (80014d0 <HAL_SPI_MspInit+0x10c>)
 800143a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <HAL_SPI_MspInit+0x108>)
 800143e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001442:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <HAL_SPI_MspInit+0x108>)
 8001446:	2240      	movs	r2, #64	; 0x40
 8001448:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_SPI_MspInit+0x108>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <HAL_SPI_MspInit+0x108>)
 8001452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001456:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_SPI_MspInit+0x108>)
 800145a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_SPI_MspInit+0x108>)
 8001462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001466:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_SPI_MspInit+0x108>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <HAL_SPI_MspInit+0x108>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_SPI_MspInit+0x108>)
 8001476:	2204      	movs	r2, #4
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_SPI_MspInit+0x108>)
 800147c:	2201      	movs	r2, #1
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_SPI_MspInit+0x108>)
 8001482:	2200      	movs	r2, #0
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_SPI_MspInit+0x108>)
 8001488:	2200      	movs	r2, #0
 800148a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800148c:	480f      	ldr	r0, [pc, #60]	; (80014cc <HAL_SPI_MspInit+0x108>)
 800148e:	f000 fbfd 	bl	8001c8c <HAL_DMA_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_SPI_MspInit+0xd8>
    {
      Error_Handler();
 8001498:	f7ff ff6a 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <HAL_SPI_MspInit+0x108>)
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <HAL_SPI_MspInit+0x108>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2023      	movs	r0, #35	; 0x23
 80014ae:	f000 fbb6 	bl	8001c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014b2:	2023      	movs	r0, #35	; 0x23
 80014b4:	f000 fbcf 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	; 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40013000 	.word	0x40013000
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	2000a110 	.word	0x2000a110
 80014d0:	40026458 	.word	0x40026458

080014d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <HAL_TIM_Base_MspInit+0x44>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d113      	bne.n	800150e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <HAL_TIM_Base_MspInit+0x48>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a0c      	ldr	r2, [pc, #48]	; (800151c <HAL_TIM_Base_MspInit+0x48>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_TIM_Base_MspInit+0x48>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	202d      	movs	r0, #45	; 0x2d
 8001504:	f000 fb8b 	bl	8001c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001508:	202d      	movs	r0, #45	; 0x2d
 800150a:	f000 fba4 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40002000 	.word	0x40002000
 800151c:	40023800 	.word	0x40023800

08001520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <MemManage_Handler+0x4>

0800153a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <UsageFault_Handler+0x4>

08001546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001574:	f000 fa34 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	key = 0;
 8001582:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <EXTI9_5_IRQHandler+0x14c>)
 8001584:	2200      	movs	r2, #0
 8001586:	801a      	strh	r2, [r3, #0]
		for(uint8_t c=0 ; c<4 ; c++){
 8001588:	2300      	movs	r3, #0
 800158a:	71fb      	strb	r3, [r7, #7]
 800158c:	e075      	b.n	800167a <EXTI9_5_IRQHandler+0xfe>
			for(uint8_t i=0 ; i<4 ; i++){
 800158e:	2300      	movs	r3, #0
 8001590:	71bb      	strb	r3, [r7, #6]
 8001592:	e00e      	b.n	80015b2 <EXTI9_5_IRQHandler+0x36>
				HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8001594:	79bb      	ldrb	r3, [r7, #6]
 8001596:	4a4d      	ldr	r2, [pc, #308]	; (80016cc <EXTI9_5_IRQHandler+0x150>)
 8001598:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	4a4c      	ldr	r2, [pc, #304]	; (80016d0 <EXTI9_5_IRQHandler+0x154>)
 80015a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015a4:	2201      	movs	r2, #1
 80015a6:	4619      	mov	r1, r3
 80015a8:	f001 fb48 	bl	8002c3c <HAL_GPIO_WritePin>
			for(uint8_t i=0 ; i<4 ; i++){
 80015ac:	79bb      	ldrb	r3, [r7, #6]
 80015ae:	3301      	adds	r3, #1
 80015b0:	71bb      	strb	r3, [r7, #6]
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d9ed      	bls.n	8001594 <EXTI9_5_IRQHandler+0x18>
			}
			HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4a44      	ldr	r2, [pc, #272]	; (80016cc <EXTI9_5_IRQHandler+0x150>)
 80015bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	4a43      	ldr	r2, [pc, #268]	; (80016d0 <EXTI9_5_IRQHandler+0x154>)
 80015c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	f001 fb36 	bl	8002c3c <HAL_GPIO_WritePin>
			for(uint8_t r=0 ; r<4 ; r++){
 80015d0:	2300      	movs	r3, #0
 80015d2:	717b      	strb	r3, [r7, #5]
 80015d4:	e04b      	b.n	800166e <EXTI9_5_IRQHandler+0xf2>
				if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 80015d6:	797b      	ldrb	r3, [r7, #5]
 80015d8:	4a3e      	ldr	r2, [pc, #248]	; (80016d4 <EXTI9_5_IRQHandler+0x158>)
 80015da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015de:	797b      	ldrb	r3, [r7, #5]
 80015e0:	493d      	ldr	r1, [pc, #244]	; (80016d8 <EXTI9_5_IRQHandler+0x15c>)
 80015e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015e6:	4619      	mov	r1, r3
 80015e8:	4610      	mov	r0, r2
 80015ea:	f001 fb0f 	bl	8002c0c <HAL_GPIO_ReadPin>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d139      	bne.n	8001668 <EXTI9_5_IRQHandler+0xec>
					if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 80015f4:	797b      	ldrb	r3, [r7, #5]
 80015f6:	4a37      	ldr	r2, [pc, #220]	; (80016d4 <EXTI9_5_IRQHandler+0x158>)
 80015f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015fc:	797b      	ldrb	r3, [r7, #5]
 80015fe:	4936      	ldr	r1, [pc, #216]	; (80016d8 <EXTI9_5_IRQHandler+0x15c>)
 8001600:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001604:	4619      	mov	r1, r3
 8001606:	4610      	mov	r0, r2
 8001608:	f001 fb00 	bl	8002c0c <HAL_GPIO_ReadPin>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d12a      	bne.n	8001668 <EXTI9_5_IRQHandler+0xec>
						key |= 1<<c;
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2201      	movs	r2, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	b21a      	sxth	r2, r3
 800161c:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <EXTI9_5_IRQHandler+0x14c>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	b21b      	sxth	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	b21b      	sxth	r3, r3
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <EXTI9_5_IRQHandler+0x14c>)
 800162a:	801a      	strh	r2, [r3, #0]
						key |= 1<<(r+8);
 800162c:	797b      	ldrb	r3, [r7, #5]
 800162e:	3308      	adds	r3, #8
 8001630:	2201      	movs	r2, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	b21a      	sxth	r2, r3
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <EXTI9_5_IRQHandler+0x14c>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21b      	sxth	r3, r3
 8001642:	b29a      	uxth	r2, r3
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <EXTI9_5_IRQHandler+0x14c>)
 8001646:	801a      	strh	r2, [r3, #0]
						while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8001648:	bf00      	nop
 800164a:	797b      	ldrb	r3, [r7, #5]
 800164c:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <EXTI9_5_IRQHandler+0x158>)
 800164e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001652:	797b      	ldrb	r3, [r7, #5]
 8001654:	4920      	ldr	r1, [pc, #128]	; (80016d8 <EXTI9_5_IRQHandler+0x15c>)
 8001656:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800165a:	4619      	mov	r1, r3
 800165c:	4610      	mov	r0, r2
 800165e:	f001 fad5 	bl	8002c0c <HAL_GPIO_ReadPin>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <EXTI9_5_IRQHandler+0xce>
			for(uint8_t r=0 ; r<4 ; r++){
 8001668:	797b      	ldrb	r3, [r7, #5]
 800166a:	3301      	adds	r3, #1
 800166c:	717b      	strb	r3, [r7, #5]
 800166e:	797b      	ldrb	r3, [r7, #5]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d9b0      	bls.n	80015d6 <EXTI9_5_IRQHandler+0x5a>
		for(uint8_t c=0 ; c<4 ; c++){
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	3301      	adds	r3, #1
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	2b03      	cmp	r3, #3
 800167e:	d986      	bls.n	800158e <EXTI9_5_IRQHandler+0x12>
					}
				}
			}
		}

		keyChar = KeyPadGetChar(key);
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <EXTI9_5_IRQHandler+0x14c>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f84b 	bl	8001720 <KeyPadGetChar>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <EXTI9_5_IRQHandler+0x160>)
 8001690:	701a      	strb	r2, [r3, #0]
		key = 0;
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <EXTI9_5_IRQHandler+0x14c>)
 8001694:	2200      	movs	r2, #0
 8001696:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f64a 0102 	movw	r1, #43010	; 0xa802
 800169e:	4810      	ldr	r0, [pc, #64]	; (80016e0 <EXTI9_5_IRQHandler+0x164>)
 80016a0:	f001 facc 	bl	8002c3c <HAL_GPIO_WritePin>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80016a4:	2020      	movs	r0, #32
 80016a6:	f001 fae3 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80016aa:	2040      	movs	r0, #64	; 0x40
 80016ac:	f001 fae0 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80016b0:	2080      	movs	r0, #128	; 0x80
 80016b2:	f001 fadd 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80016b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016ba:	f001 fad9 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000a1be 	.word	0x2000a1be
 80016cc:	20000014 	.word	0x20000014
 80016d0:	080068a0 	.word	0x080068a0
 80016d4:	20000024 	.word	0x20000024
 80016d8:	080068a8 	.word	0x080068a8
 80016dc:	2000a1bd 	.word	0x2000a1bd
 80016e0:	40020400 	.word	0x40020400

080016e4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <SPI1_IRQHandler+0x10>)
 80016ea:	f002 facd 	bl	8003c88 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000a0ac 	.word	0x2000a0ac

080016f8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80016fe:	f002 febb 	bl	8004478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000a170 	.word	0x2000a170

0800170c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <DMA2_Stream3_IRQHandler+0x10>)
 8001712:	f000 fc5b 	bl	8001fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000a110 	.word	0x2000a110

08001720 <KeyPadGetChar>:

/* USER CODE BEGIN 1 */
char KeyPadGetChar(uint16_t	key)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]
  switch(key)
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	f640 0208 	movw	r2, #2056	; 0x808
 8001730:	4293      	cmp	r3, r2
 8001732:	f300 809f 	bgt.w	8001874 <KeyPadGetChar+0x154>
 8001736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800173a:	dc1a      	bgt.n	8001772 <KeyPadGetChar+0x52>
 800173c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8001740:	f300 8098 	bgt.w	8001874 <KeyPadGetChar+0x154>
 8001744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001748:	dc2a      	bgt.n	80017a0 <KeyPadGetChar+0x80>
 800174a:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800174e:	f300 8091 	bgt.w	8001874 <KeyPadGetChar+0x154>
 8001752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001756:	dc3b      	bgt.n	80017d0 <KeyPadGetChar+0xb0>
 8001758:	2b00      	cmp	r3, #0
 800175a:	d069      	beq.n	8001830 <KeyPadGetChar+0x110>
 800175c:	2b00      	cmp	r3, #0
 800175e:	f2c0 8089 	blt.w	8001874 <KeyPadGetChar+0x154>
 8001762:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8001766:	f300 8085 	bgt.w	8001874 <KeyPadGetChar+0x154>
 800176a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800176e:	dc47      	bgt.n	8001800 <KeyPadGetChar+0xe0>
 8001770:	e080      	b.n	8001874 <KeyPadGetChar+0x154>
 8001772:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 8001776:	2b07      	cmp	r3, #7
 8001778:	d87c      	bhi.n	8001874 <KeyPadGetChar+0x154>
 800177a:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <KeyPadGetChar+0x60>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	08001841 	.word	0x08001841
 8001784:	08001851 	.word	0x08001851
 8001788:	08001875 	.word	0x08001875
 800178c:	08001861 	.word	0x08001861
 8001790:	08001875 	.word	0x08001875
 8001794:	08001875 	.word	0x08001875
 8001798:	08001875 	.word	0x08001875
 800179c:	08001871 	.word	0x08001871
 80017a0:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80017a4:	2b07      	cmp	r3, #7
 80017a6:	d865      	bhi.n	8001874 <KeyPadGetChar+0x154>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <KeyPadGetChar+0x90>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	0800183d 	.word	0x0800183d
 80017b4:	0800184d 	.word	0x0800184d
 80017b8:	08001875 	.word	0x08001875
 80017bc:	0800185d 	.word	0x0800185d
 80017c0:	08001875 	.word	0x08001875
 80017c4:	08001875 	.word	0x08001875
 80017c8:	08001875 	.word	0x08001875
 80017cc:	0800186d 	.word	0x0800186d
 80017d0:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80017d4:	2b07      	cmp	r3, #7
 80017d6:	d84d      	bhi.n	8001874 <KeyPadGetChar+0x154>
 80017d8:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <KeyPadGetChar+0xc0>)
 80017da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017de:	bf00      	nop
 80017e0:	08001839 	.word	0x08001839
 80017e4:	08001849 	.word	0x08001849
 80017e8:	08001875 	.word	0x08001875
 80017ec:	08001859 	.word	0x08001859
 80017f0:	08001875 	.word	0x08001875
 80017f4:	08001875 	.word	0x08001875
 80017f8:	08001875 	.word	0x08001875
 80017fc:	08001869 	.word	0x08001869
 8001800:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8001804:	2b07      	cmp	r3, #7
 8001806:	d835      	bhi.n	8001874 <KeyPadGetChar+0x154>
 8001808:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <KeyPadGetChar+0xf0>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	08001835 	.word	0x08001835
 8001814:	08001845 	.word	0x08001845
 8001818:	08001875 	.word	0x08001875
 800181c:	08001855 	.word	0x08001855
 8001820:	08001875 	.word	0x08001875
 8001824:	08001875 	.word	0x08001875
 8001828:	08001875 	.word	0x08001875
 800182c:	08001865 	.word	0x08001865
  {
    case 0x0000:
      return 0;
 8001830:	2300      	movs	r3, #0
 8001832:	e020      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0101:
			return '1';
 8001834:	2331      	movs	r3, #49	; 0x31
 8001836:	e01e      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0201:
			return '2';
 8001838:	2332      	movs	r3, #50	; 0x32
 800183a:	e01c      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0401:
			return '3';
 800183c:	2333      	movs	r3, #51	; 0x33
 800183e:	e01a      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0801:
			return 'A';
 8001840:	2341      	movs	r3, #65	; 0x41
 8001842:	e018      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0102:
			return '4';
 8001844:	2334      	movs	r3, #52	; 0x34
 8001846:	e016      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0202:
			return '5';
 8001848:	2335      	movs	r3, #53	; 0x35
 800184a:	e014      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0402:
			return '6';
 800184c:	2336      	movs	r3, #54	; 0x36
 800184e:	e012      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0802:
			return 'B';
 8001850:	2342      	movs	r3, #66	; 0x42
 8001852:	e010      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0104:
			return '7';
 8001854:	2337      	movs	r3, #55	; 0x37
 8001856:	e00e      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0204:
			return '8';
 8001858:	2338      	movs	r3, #56	; 0x38
 800185a:	e00c      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0404:
			return '9';
 800185c:	2339      	movs	r3, #57	; 0x39
 800185e:	e00a      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0804:
			return 'C';
 8001860:	2343      	movs	r3, #67	; 0x43
 8001862:	e008      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0108:
			return '*';
 8001864:	232a      	movs	r3, #42	; 0x2a
 8001866:	e006      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0208:
			return '0';
 8001868:	2330      	movs	r3, #48	; 0x30
 800186a:	e004      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0408:
			return '#';
 800186c:	2323      	movs	r3, #35	; 0x23
 800186e:	e002      	b.n	8001876 <KeyPadGetChar+0x156>
		case 0x0808:
			return 'D';
 8001870:	2344      	movs	r3, #68	; 0x44
 8001872:	e000      	b.n	8001876 <KeyPadGetChar+0x156>
		default:
			return 0;
 8001874:	2300      	movs	r3, #0
	}
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop

08001884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <_sbrk+0x5c>)
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <_sbrk+0x60>)
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <_sbrk+0x64>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <_sbrk+0x68>)
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d207      	bcs.n	80018c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b4:	f003 f8ce 	bl	8004a54 <__errno>
 80018b8:	4603      	mov	r3, r0
 80018ba:	220c      	movs	r2, #12
 80018bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
 80018c2:	e009      	b.n	80018d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <_sbrk+0x64>)
 80018d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20050000 	.word	0x20050000
 80018e4:	00000400 	.word	0x00000400
 80018e8:	2000a1c4 	.word	0x2000a1c4
 80018ec:	2000a330 	.word	0x2000a330

080018f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <SystemInit+0x20>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <SystemInit+0x20>)
 80018fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800194c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800191a:	490e      	ldr	r1, [pc, #56]	; (8001954 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001930:	4c0b      	ldr	r4, [pc, #44]	; (8001960 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800193e:	f7ff ffd7 	bl	80018f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001942:	f003 f88d 	bl	8004a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001946:	f7ff f93f 	bl	8000bc8 <main>
  bx  lr    
 800194a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800194c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001958:	08006a0c 	.word	0x08006a0c
  ldr r2, =_sbss
 800195c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001960:	2000a330 	.word	0x2000a330

08001964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC_IRQHandler>

08001966 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196a:	2003      	movs	r0, #3
 800196c:	f000 f94c 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001970:	2000      	movs	r0, #0
 8001972:	f000 f805 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001976:	f7ff fd01 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f967 	bl	8001c72 <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f000 f92f 	bl	8001c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000034 	.word	0x20000034
 80019d8:	2000003c 	.word	0x2000003c
 80019dc:	20000038 	.word	0x20000038

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	2000003c 	.word	0x2000003c
 8001a04:	2000a1c8 	.word	0x2000a1c8

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	2000a1c8 	.word	0x2000a1c8

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_Delay+0x44>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a46:	bf00      	nop
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
  {
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000003c 	.word	0x2000003c

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00
 8001aac:	05fa0000 	.word	0x05fa0000

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f7ff ff8e 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff29 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff3e 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff8e 	bl	8001b5c <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5d 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff31 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffa2 	bl	8001bc4 <SysTick_Config>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff feb6 	bl	8001a08 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e099      	b.n	8001ddc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc8:	e00f      	b.n	8001cea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cca:	f7ff fe9d 	bl	8001a08 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d908      	bls.n	8001cea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e078      	b.n	8001ddc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1e8      	bne.n	8001cca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <HAL_DMA_Init+0x158>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d107      	bne.n	8001d54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f023 0307 	bic.w	r3, r3, #7
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d117      	bne.n	8001dae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00e      	beq.n	8001dae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fb09 	bl	80023a8 <DMA_CheckFifoParam>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2240      	movs	r2, #64	; 0x40
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001daa:	2301      	movs	r3, #1
 8001dac:	e016      	b.n	8001ddc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fac0 	bl	800233c <DMA_CalcBaseAndBitshift>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	223f      	movs	r2, #63	; 0x3f
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	f010803f 	.word	0xf010803f

08001de8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_DMA_Start_IT+0x26>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e048      	b.n	8001ea0 <HAL_DMA_Start_IT+0xb8>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d137      	bne.n	8001e92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2202      	movs	r2, #2
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fa52 	bl	80022e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	223f      	movs	r2, #63	; 0x3f
 8001e42:	409a      	lsls	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0216 	orr.w	r2, r2, #22
 8001e56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e66:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0208 	orr.w	r2, r2, #8
 8001e7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e005      	b.n	8001e9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eb6:	f7ff fda7 	bl	8001a08 <HAL_GetTick>
 8001eba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d008      	beq.n	8001eda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e052      	b.n	8001f80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0216 	bic.w	r2, r2, #22
 8001ee8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <HAL_DMA_Abort+0x62>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0208 	bic.w	r2, r2, #8
 8001f18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f2a:	e013      	b.n	8001f54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f2c:	f7ff fd6c 	bl	8001a08 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d90c      	bls.n	8001f54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2203      	movs	r2, #3
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e015      	b.n	8001f80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1e4      	bne.n	8001f2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	223f      	movs	r2, #63	; 0x3f
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d004      	beq.n	8001fa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00c      	b.n	8001fc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2205      	movs	r2, #5
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0201 	bic.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001fd8:	4b8e      	ldr	r3, [pc, #568]	; (8002214 <HAL_DMA_IRQHandler+0x248>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a8e      	ldr	r2, [pc, #568]	; (8002218 <HAL_DMA_IRQHandler+0x24c>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0a9b      	lsrs	r3, r3, #10
 8001fe4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01a      	beq.n	8002038 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0204 	bic.w	r2, r2, #4
 800201e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	2208      	movs	r2, #8
 8002026:	409a      	lsls	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	2201      	movs	r2, #1
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d012      	beq.n	800206e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	2201      	movs	r2, #1
 800205c:	409a      	lsls	r2, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	f043 0202 	orr.w	r2, r3, #2
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002072:	2204      	movs	r2, #4
 8002074:	409a      	lsls	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d012      	beq.n	80020a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00b      	beq.n	80020a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	2204      	movs	r2, #4
 8002092:	409a      	lsls	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209c:	f043 0204 	orr.w	r2, r3, #4
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a8:	2210      	movs	r2, #16
 80020aa:	409a      	lsls	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d043      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d03c      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	2210      	movs	r2, #16
 80020c8:	409a      	lsls	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d018      	beq.n	800210e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d024      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	4798      	blx	r3
 80020fa:	e01f      	b.n	800213c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01b      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
 800210c:	e016      	b.n	800213c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0208 	bic.w	r2, r2, #8
 800212a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	2220      	movs	r2, #32
 8002142:	409a      	lsls	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 808f 	beq.w	800226c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8087 	beq.w	800226c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	2220      	movs	r2, #32
 8002164:	409a      	lsls	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b05      	cmp	r3, #5
 8002174:	d136      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0216 	bic.w	r2, r2, #22
 8002184:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002194:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <HAL_DMA_IRQHandler+0x1da>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0208 	bic.w	r2, r2, #8
 80021b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	223f      	movs	r2, #63	; 0x3f
 80021bc:	409a      	lsls	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d07e      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
        }
        return;
 80021e2:	e079      	b.n	80022d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01d      	beq.n	800222e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10d      	bne.n	800221c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	2b00      	cmp	r3, #0
 8002206:	d031      	beq.n	800226c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
 8002210:	e02c      	b.n	800226c <HAL_DMA_IRQHandler+0x2a0>
 8002212:	bf00      	nop
 8002214:	20000034 	.word	0x20000034
 8002218:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d023      	beq.n	800226c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
 800222c:	e01e      	b.n	800226c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10f      	bne.n	800225c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0210 	bic.w	r2, r2, #16
 800224a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002270:	2b00      	cmp	r3, #0
 8002272:	d032      	beq.n	80022da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d022      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2205      	movs	r2, #5
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0201 	bic.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	3301      	adds	r3, #1
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d307      	bcc.n	80022b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f2      	bne.n	8002298 <HAL_DMA_IRQHandler+0x2cc>
 80022b2:	e000      	b.n	80022b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
 80022d6:	e000      	b.n	80022da <HAL_DMA_IRQHandler+0x30e>
        return;
 80022d8:	bf00      	nop
    }
  }
}
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b40      	cmp	r3, #64	; 0x40
 800230c:	d108      	bne.n	8002320 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800231e:	e007      	b.n	8002330 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	60da      	str	r2, [r3, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	3b10      	subs	r3, #16
 800234c:	4a13      	ldr	r2, [pc, #76]	; (800239c <DMA_CalcBaseAndBitshift+0x60>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <DMA_CalcBaseAndBitshift+0x64>)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d908      	bls.n	800237c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002372:	4013      	ands	r3, r2
 8002374:	1d1a      	adds	r2, r3, #4
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	659a      	str	r2, [r3, #88]	; 0x58
 800237a:	e006      	b.n	800238a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002384:	4013      	ands	r3, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	aaaaaaab 	.word	0xaaaaaaab
 80023a0:	080068c0 	.word	0x080068c0
 80023a4:	fffffc00 	.word	0xfffffc00

080023a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d11f      	bne.n	8002402 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d856      	bhi.n	8002476 <DMA_CheckFifoParam+0xce>
 80023c8:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <DMA_CheckFifoParam+0x28>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	080023e1 	.word	0x080023e1
 80023d4:	080023f3 	.word	0x080023f3
 80023d8:	080023e1 	.word	0x080023e1
 80023dc:	08002477 	.word	0x08002477
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d046      	beq.n	800247a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e043      	b.n	800247a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023fa:	d140      	bne.n	800247e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002400:	e03d      	b.n	800247e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800240a:	d121      	bne.n	8002450 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d837      	bhi.n	8002482 <DMA_CheckFifoParam+0xda>
 8002412:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <DMA_CheckFifoParam+0x70>)
 8002414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002418:	08002429 	.word	0x08002429
 800241c:	0800242f 	.word	0x0800242f
 8002420:	08002429 	.word	0x08002429
 8002424:	08002441 	.word	0x08002441
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      break;
 800242c:	e030      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d025      	beq.n	8002486 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243e:	e022      	b.n	8002486 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002448:	d11f      	bne.n	800248a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800244e:	e01c      	b.n	800248a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d903      	bls.n	800245e <DMA_CheckFifoParam+0xb6>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d003      	beq.n	8002464 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800245c:	e018      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      break;
 8002462:	e015      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00e      	beq.n	800248e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      break;
 8002474:	e00b      	b.n	800248e <DMA_CheckFifoParam+0xe6>
      break;
 8002476:	bf00      	nop
 8002478:	e00a      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800247a:	bf00      	nop
 800247c:	e008      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800247e:	bf00      	nop
 8002480:	e006      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 8002482:	bf00      	nop
 8002484:	e004      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 8002486:	bf00      	nop
 8002488:	e002      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;   
 800248a:	bf00      	nop
 800248c:	e000      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800248e:	bf00      	nop
    }
  } 
  
  return status; 
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop

080024a0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_FLASH_Program+0xb0>)
 80024b4:	7d1b      	ldrb	r3, [r3, #20]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_FLASH_Program+0x1e>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e043      	b.n	8002546 <HAL_FLASH_Program+0xa6>
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_FLASH_Program+0xb0>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024c8:	f000 f878 	bl	80025bc <FLASH_WaitForLastOperation>
 80024cc:	4603      	mov	r3, r0
 80024ce:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d133      	bne.n	800253e <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d823      	bhi.n	8002524 <HAL_FLASH_Program+0x84>
 80024dc:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <HAL_FLASH_Program+0x44>)
 80024de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e2:	bf00      	nop
 80024e4:	080024f5 	.word	0x080024f5
 80024e8:	08002501 	.word	0x08002501
 80024ec:	0800250d 	.word	0x0800250d
 80024f0:	08002519 	.word	0x08002519
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80024f4:	783b      	ldrb	r3, [r7, #0]
 80024f6:	4619      	mov	r1, r3
 80024f8:	68b8      	ldr	r0, [r7, #8]
 80024fa:	f000 f921 	bl	8002740 <FLASH_Program_Byte>
        break;
 80024fe:	e012      	b.n	8002526 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002500:	883b      	ldrh	r3, [r7, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	68b8      	ldr	r0, [r7, #8]
 8002506:	f000 f8f5 	bl	80026f4 <FLASH_Program_HalfWord>
        break;
 800250a:	e00c      	b.n	8002526 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4619      	mov	r1, r3
 8002510:	68b8      	ldr	r0, [r7, #8]
 8002512:	f000 f8c9 	bl	80026a8 <FLASH_Program_Word>
        break;
 8002516:	e006      	b.n	8002526 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8002518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800251c:	68b8      	ldr	r0, [r7, #8]
 800251e:	f000 f88d 	bl	800263c <FLASH_Program_DoubleWord>
        break;
 8002522:	e000      	b.n	8002526 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8002524:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002526:	f24c 3050 	movw	r0, #50000	; 0xc350
 800252a:	f000 f847 	bl	80025bc <FLASH_WaitForLastOperation>
 800252e:	4603      	mov	r3, r0
 8002530:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_FLASH_Program+0xb4>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	4a07      	ldr	r2, [pc, #28]	; (8002554 <HAL_FLASH_Program+0xb4>)
 8002538:	f023 0301 	bic.w	r3, r3, #1
 800253c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <HAL_FLASH_Program+0xb0>)
 8002540:	2200      	movs	r2, #0
 8002542:	751a      	strb	r2, [r3, #20]

  return status;
 8002544:	7dfb      	ldrb	r3, [r7, #23]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000a1cc 	.word	0x2000a1cc
 8002554:	40023c00 	.word	0x40023c00

08002558 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_FLASH_Unlock+0x38>)
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	da0b      	bge.n	8002582 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_FLASH_Unlock+0x38>)
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <HAL_FLASH_Unlock+0x3c>)
 800256e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <HAL_FLASH_Unlock+0x38>)
 8002572:	4a09      	ldr	r2, [pc, #36]	; (8002598 <HAL_FLASH_Unlock+0x40>)
 8002574:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_FLASH_Unlock+0x38>)
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	da01      	bge.n	8002582 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002582:	79fb      	ldrb	r3, [r7, #7]
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	40023c00 	.word	0x40023c00
 8002594:	45670123 	.word	0x45670123
 8002598:	cdef89ab 	.word	0xcdef89ab

0800259c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_FLASH_Lock+0x1c>)
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_FLASH_Lock+0x1c>)
 80025a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025aa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	40023c00 	.word	0x40023c00

080025bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80025c8:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <FLASH_WaitForLastOperation+0x78>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80025ce:	f7ff fa1b 	bl	8001a08 <HAL_GetTick>
 80025d2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80025d4:	e010      	b.n	80025f8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d00c      	beq.n	80025f8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d007      	beq.n	80025f4 <FLASH_WaitForLastOperation+0x38>
 80025e4:	f7ff fa10 	bl	8001a08 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d201      	bcs.n	80025f8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e019      	b.n	800262c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <FLASH_WaitForLastOperation+0x7c>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e8      	bne.n	80025d6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <FLASH_WaitForLastOperation+0x7c>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002610:	f000 f8ba 	bl	8002788 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e009      	b.n	800262c <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <FLASH_WaitForLastOperation+0x7c>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <FLASH_WaitForLastOperation+0x7c>)
 8002626:	2201      	movs	r2, #1
 8002628:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
  
}  
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	2000a1cc 	.word	0x2000a1cc
 8002638:	40023c00 	.word	0x40023c00

0800263c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002648:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <FLASH_Program_DoubleWord+0x68>)
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <FLASH_Program_DoubleWord+0x68>)
 800264e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002652:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <FLASH_Program_DoubleWord+0x68>)
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <FLASH_Program_DoubleWord+0x68>)
 800265a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800265e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002660:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <FLASH_Program_DoubleWord+0x68>)
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	4a0f      	ldr	r2, [pc, #60]	; (80026a4 <FLASH_Program_DoubleWord+0x68>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002672:	f3bf 8f6f 	isb	sy
}
 8002676:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	000a      	movs	r2, r1
 8002686:	2300      	movs	r3, #0
 8002688:	68f9      	ldr	r1, [r7, #12]
 800268a:	3104      	adds	r1, #4
 800268c:	4613      	mov	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002690:	f3bf 8f4f 	dsb	sy
}
 8002694:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40023c00 	.word	0x40023c00

080026a8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80026b2:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <FLASH_Program_Word+0x48>)
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <FLASH_Program_Word+0x48>)
 80026b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <FLASH_Program_Word+0x48>)
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <FLASH_Program_Word+0x48>)
 80026c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <FLASH_Program_Word+0x48>)
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	4a08      	ldr	r2, [pc, #32]	; (80026f0 <FLASH_Program_Word+0x48>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80026dc:	f3bf 8f4f 	dsb	sy
}
 80026e0:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40023c00 	.word	0x40023c00

080026f4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <FLASH_Program_HalfWord+0x48>)
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	4a0d      	ldr	r2, [pc, #52]	; (800273c <FLASH_Program_HalfWord+0x48>)
 8002706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <FLASH_Program_HalfWord+0x48>)
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <FLASH_Program_HalfWord+0x48>)
 8002712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002716:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <FLASH_Program_HalfWord+0x48>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	4a07      	ldr	r2, [pc, #28]	; (800273c <FLASH_Program_HalfWord+0x48>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800272a:	f3bf 8f4f 	dsb	sy
}
 800272e:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40023c00 	.word	0x40023c00

08002740 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800274c:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <FLASH_Program_Byte+0x44>)
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	4a0c      	ldr	r2, [pc, #48]	; (8002784 <FLASH_Program_Byte+0x44>)
 8002752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002756:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <FLASH_Program_Byte+0x44>)
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <FLASH_Program_Byte+0x44>)
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <FLASH_Program_Byte+0x44>)
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	4a07      	ldr	r2, [pc, #28]	; (8002784 <FLASH_Program_Byte+0x44>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002772:	f3bf 8f4f 	dsb	sy
}
 8002776:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40023c00 	.word	0x40023c00

08002788 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800278c:	4b21      	ldr	r3, [pc, #132]	; (8002814 <FLASH_SetErrorCode+0x8c>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002798:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <FLASH_SetErrorCode+0x90>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f043 0320 	orr.w	r3, r3, #32
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <FLASH_SetErrorCode+0x90>)
 80027a2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <FLASH_SetErrorCode+0x8c>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <FLASH_SetErrorCode+0x90>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f043 0310 	orr.w	r3, r3, #16
 80027b8:	4a17      	ldr	r2, [pc, #92]	; (8002818 <FLASH_SetErrorCode+0x90>)
 80027ba:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80027bc:	4b15      	ldr	r3, [pc, #84]	; (8002814 <FLASH_SetErrorCode+0x8c>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <FLASH_SetErrorCode+0x90>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	4a11      	ldr	r2, [pc, #68]	; (8002818 <FLASH_SetErrorCode+0x90>)
 80027d2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <FLASH_SetErrorCode+0x8c>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80027e0:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <FLASH_SetErrorCode+0x90>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f043 0304 	orr.w	r3, r3, #4
 80027e8:	4a0b      	ldr	r2, [pc, #44]	; (8002818 <FLASH_SetErrorCode+0x90>)
 80027ea:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <FLASH_SetErrorCode+0x8c>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <FLASH_SetErrorCode+0x90>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	f043 0302 	orr.w	r3, r3, #2
 8002800:	4a05      	ldr	r2, [pc, #20]	; (8002818 <FLASH_SetErrorCode+0x90>)
 8002802:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <FLASH_SetErrorCode+0x8c>)
 8002806:	22f2      	movs	r2, #242	; 0xf2
 8002808:	60da      	str	r2, [r3, #12]
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40023c00 	.word	0x40023c00
 8002818:	2000a1cc 	.word	0x2000a1cc

0800281c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	e010      	b.n	800285a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d103      	bne.n	8002846 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800283e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	e009      	b.n	800285a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d103      	bne.n	8002854 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800284c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	e002      	b.n	800285a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002854:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002858:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <FLASH_Erase_Sector+0x94>)
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <FLASH_Erase_Sector+0x94>)
 8002860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002864:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002866:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <FLASH_Erase_Sector+0x94>)
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	4911      	ldr	r1, [pc, #68]	; (80028b0 <FLASH_Erase_Sector+0x94>)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <FLASH_Erase_Sector+0x94>)
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	4a0e      	ldr	r2, [pc, #56]	; (80028b0 <FLASH_Erase_Sector+0x94>)
 8002878:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800287c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <FLASH_Erase_Sector+0x94>)
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4313      	orrs	r3, r2
 8002888:	4a09      	ldr	r2, [pc, #36]	; (80028b0 <FLASH_Erase_Sector+0x94>)
 800288a:	f043 0302 	orr.w	r3, r3, #2
 800288e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <FLASH_Erase_Sector+0x94>)
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <FLASH_Erase_Sector+0x94>)
 8002896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800289c:	f3bf 8f4f 	dsb	sy
}
 80028a0:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023c00 	.word	0x40023c00

080028b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	; 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	e175      	b.n	8002bc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028d4:	2201      	movs	r2, #1
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	f040 8164 	bne.w	8002bba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d005      	beq.n	800290a <HAL_GPIO_Init+0x56>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d130      	bne.n	800296c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	2203      	movs	r2, #3
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002940:	2201      	movs	r2, #1
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 0201 	and.w	r2, r3, #1
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	2b03      	cmp	r3, #3
 8002976:	d017      	beq.n	80029a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	2203      	movs	r2, #3
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d123      	bne.n	80029fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	08da      	lsrs	r2, r3, #3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3208      	adds	r2, #8
 80029bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	220f      	movs	r2, #15
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	08da      	lsrs	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3208      	adds	r2, #8
 80029f6:	69b9      	ldr	r1, [r7, #24]
 80029f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0203 	and.w	r2, r3, #3
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80be 	beq.w	8002bba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3e:	4b66      	ldr	r3, [pc, #408]	; (8002bd8 <HAL_GPIO_Init+0x324>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	4a65      	ldr	r2, [pc, #404]	; (8002bd8 <HAL_GPIO_Init+0x324>)
 8002a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a48:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4a:	4b63      	ldr	r3, [pc, #396]	; (8002bd8 <HAL_GPIO_Init+0x324>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a56:	4a61      	ldr	r2, [pc, #388]	; (8002bdc <HAL_GPIO_Init+0x328>)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a58      	ldr	r2, [pc, #352]	; (8002be0 <HAL_GPIO_Init+0x32c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d037      	beq.n	8002af2 <HAL_GPIO_Init+0x23e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a57      	ldr	r2, [pc, #348]	; (8002be4 <HAL_GPIO_Init+0x330>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d031      	beq.n	8002aee <HAL_GPIO_Init+0x23a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a56      	ldr	r2, [pc, #344]	; (8002be8 <HAL_GPIO_Init+0x334>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d02b      	beq.n	8002aea <HAL_GPIO_Init+0x236>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a55      	ldr	r2, [pc, #340]	; (8002bec <HAL_GPIO_Init+0x338>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d025      	beq.n	8002ae6 <HAL_GPIO_Init+0x232>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a54      	ldr	r2, [pc, #336]	; (8002bf0 <HAL_GPIO_Init+0x33c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01f      	beq.n	8002ae2 <HAL_GPIO_Init+0x22e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a53      	ldr	r2, [pc, #332]	; (8002bf4 <HAL_GPIO_Init+0x340>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d019      	beq.n	8002ade <HAL_GPIO_Init+0x22a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a52      	ldr	r2, [pc, #328]	; (8002bf8 <HAL_GPIO_Init+0x344>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_GPIO_Init+0x226>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a51      	ldr	r2, [pc, #324]	; (8002bfc <HAL_GPIO_Init+0x348>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_GPIO_Init+0x222>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a50      	ldr	r2, [pc, #320]	; (8002c00 <HAL_GPIO_Init+0x34c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d007      	beq.n	8002ad2 <HAL_GPIO_Init+0x21e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a4f      	ldr	r2, [pc, #316]	; (8002c04 <HAL_GPIO_Init+0x350>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_GPIO_Init+0x21a>
 8002aca:	2309      	movs	r3, #9
 8002acc:	e012      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002ace:	230a      	movs	r3, #10
 8002ad0:	e010      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	e00e      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002ad6:	2307      	movs	r3, #7
 8002ad8:	e00c      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002ada:	2306      	movs	r3, #6
 8002adc:	e00a      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002ade:	2305      	movs	r3, #5
 8002ae0:	e008      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	e006      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e004      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e002      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_GPIO_Init+0x240>
 8002af2:	2300      	movs	r3, #0
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	f002 0203 	and.w	r2, r2, #3
 8002afa:	0092      	lsls	r2, r2, #2
 8002afc:	4093      	lsls	r3, r2
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b04:	4935      	ldr	r1, [pc, #212]	; (8002bdc <HAL_GPIO_Init+0x328>)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	089b      	lsrs	r3, r3, #2
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b12:	4b3d      	ldr	r3, [pc, #244]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b36:	4a34      	ldr	r2, [pc, #208]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b3c:	4b32      	ldr	r3, [pc, #200]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b60:	4a29      	ldr	r2, [pc, #164]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b66:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b8a:	4a1f      	ldr	r2, [pc, #124]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb4:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <HAL_GPIO_Init+0x354>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b0f      	cmp	r3, #15
 8002bc4:	f67f ae86 	bls.w	80028d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	40020000 	.word	0x40020000
 8002be4:	40020400 	.word	0x40020400
 8002be8:	40020800 	.word	0x40020800
 8002bec:	40020c00 	.word	0x40020c00
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40021400 	.word	0x40021400
 8002bf8:	40021800 	.word	0x40021800
 8002bfc:	40021c00 	.word	0x40021c00
 8002c00:	40022000 	.word	0x40022000
 8002c04:	40022400 	.word	0x40022400
 8002c08:	40013c00 	.word	0x40013c00

08002c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	887b      	ldrh	r3, [r7, #2]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	e001      	b.n	8002c2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c4c:	787b      	ldrb	r3, [r7, #1]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c58:	e003      	b.n	8002c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	041a      	lsls	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	619a      	str	r2, [r3, #24]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c86:	4a05      	ldr	r2, [pc, #20]	; (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fb06 	bl	80012a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40013c00 	.word	0x40013c00

08002ca0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cae:	6013      	str	r3, [r2, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40007000 	.word	0x40007000

08002cc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e291      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8087 	beq.w	8002df2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce4:	4b96      	ldr	r3, [pc, #600]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d00c      	beq.n	8002d0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf0:	4b93      	ldr	r3, [pc, #588]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d112      	bne.n	8002d22 <HAL_RCC_OscConfig+0x62>
 8002cfc:	4b90      	ldr	r3, [pc, #576]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d08:	d10b      	bne.n	8002d22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0a:	4b8d      	ldr	r3, [pc, #564]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d06c      	beq.n	8002df0 <HAL_RCC_OscConfig+0x130>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d168      	bne.n	8002df0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e26b      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x7a>
 8002d2c:	4b84      	ldr	r3, [pc, #528]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a83      	ldr	r2, [pc, #524]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	e02e      	b.n	8002d98 <HAL_RCC_OscConfig+0xd8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x9c>
 8002d42:	4b7f      	ldr	r3, [pc, #508]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a7e      	ldr	r2, [pc, #504]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b7c      	ldr	r3, [pc, #496]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a7b      	ldr	r2, [pc, #492]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e01d      	b.n	8002d98 <HAL_RCC_OscConfig+0xd8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0xc0>
 8002d66:	4b76      	ldr	r3, [pc, #472]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a75      	ldr	r2, [pc, #468]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b73      	ldr	r3, [pc, #460]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a72      	ldr	r2, [pc, #456]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCC_OscConfig+0xd8>
 8002d80:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a6e      	ldr	r2, [pc, #440]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b6c      	ldr	r3, [pc, #432]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a6b      	ldr	r2, [pc, #428]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe fe32 	bl	8001a08 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da8:	f7fe fe2e 	bl	8001a08 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e21f      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	4b61      	ldr	r3, [pc, #388]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0xe8>
 8002dc6:	e014      	b.n	8002df2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fe1e 	bl	8001a08 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fe1a 	bl	8001a08 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e20b      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	4b57      	ldr	r3, [pc, #348]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x110>
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d069      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dfe:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0a:	4b4d      	ldr	r3, [pc, #308]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d11c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x190>
 8002e16:	4b4a      	ldr	r3, [pc, #296]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d116      	bne.n	8002e50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	4b47      	ldr	r3, [pc, #284]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_RCC_OscConfig+0x17a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d001      	beq.n	8002e3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e1df      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	4b41      	ldr	r3, [pc, #260]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	493d      	ldr	r1, [pc, #244]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	e040      	b.n	8002ed2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d023      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e58:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a38      	ldr	r2, [pc, #224]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fdd0 	bl	8001a08 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fdcc 	bl	8001a08 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e1bd      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7e:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b2d      	ldr	r3, [pc, #180]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4929      	ldr	r1, [pc, #164]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
 8002e9e:	e018      	b.n	8002ed2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea0:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe fdac 	bl	8001a08 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb4:	f7fe fda8 	bl	8001a08 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e199      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d038      	beq.n	8002f50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d019      	beq.n	8002f1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee6:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eea:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fd89 	bl	8001a08 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efa:	f7fe fd85 	bl	8001a08 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e176      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x23a>
 8002f18:	e01a      	b.n	8002f50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1a:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1e:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f26:	f7fe fd6f 	bl	8001a08 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2e:	f7fe fd6b 	bl	8001a08 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d903      	bls.n	8002f44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e15c      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
 8002f40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f44:	4b91      	ldr	r3, [pc, #580]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1ee      	bne.n	8002f2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80a4 	beq.w	80030a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10d      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	4b88      	ldr	r3, [pc, #544]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a87      	ldr	r2, [pc, #540]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
 8002f76:	4b85      	ldr	r3, [pc, #532]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f86:	4b82      	ldr	r3, [pc, #520]	; (8003190 <HAL_RCC_OscConfig+0x4d0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f92:	4b7f      	ldr	r3, [pc, #508]	; (8003190 <HAL_RCC_OscConfig+0x4d0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7e      	ldr	r2, [pc, #504]	; (8003190 <HAL_RCC_OscConfig+0x4d0>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe fd33 	bl	8001a08 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7fe fd2f 	bl	8001a08 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	; 0x64
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e120      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb8:	4b75      	ldr	r3, [pc, #468]	; (8003190 <HAL_RCC_OscConfig+0x4d0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x31a>
 8002fcc:	4b6f      	ldr	r3, [pc, #444]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a6e      	ldr	r2, [pc, #440]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	e02d      	b.n	8003036 <HAL_RCC_OscConfig+0x376>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x33c>
 8002fe2:	4b6a      	ldr	r3, [pc, #424]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a69      	ldr	r2, [pc, #420]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70
 8002fee:	4b67      	ldr	r3, [pc, #412]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	4a66      	ldr	r2, [pc, #408]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002ff4:	f023 0304 	bic.w	r3, r3, #4
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffa:	e01c      	b.n	8003036 <HAL_RCC_OscConfig+0x376>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b05      	cmp	r3, #5
 8003002:	d10c      	bne.n	800301e <HAL_RCC_OscConfig+0x35e>
 8003004:	4b61      	ldr	r3, [pc, #388]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	4a60      	ldr	r2, [pc, #384]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800300a:	f043 0304 	orr.w	r3, r3, #4
 800300e:	6713      	str	r3, [r2, #112]	; 0x70
 8003010:	4b5e      	ldr	r3, [pc, #376]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	4a5d      	ldr	r2, [pc, #372]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6713      	str	r3, [r2, #112]	; 0x70
 800301c:	e00b      	b.n	8003036 <HAL_RCC_OscConfig+0x376>
 800301e:	4b5b      	ldr	r3, [pc, #364]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a5a      	ldr	r2, [pc, #360]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	6713      	str	r3, [r2, #112]	; 0x70
 800302a:	4b58      	ldr	r3, [pc, #352]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	4a57      	ldr	r2, [pc, #348]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d015      	beq.n	800306a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303e:	f7fe fce3 	bl	8001a08 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	e00a      	b.n	800305c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7fe fcdf 	bl	8001a08 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0ce      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	4b4b      	ldr	r3, [pc, #300]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ee      	beq.n	8003046 <HAL_RCC_OscConfig+0x386>
 8003068:	e014      	b.n	8003094 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306a:	f7fe fccd 	bl	8001a08 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7fe fcc9 	bl	8001a08 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0b8      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003088:	4b40      	ldr	r3, [pc, #256]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ee      	bne.n	8003072 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d105      	bne.n	80030a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309a:	4b3c      	ldr	r3, [pc, #240]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a3b      	ldr	r2, [pc, #236]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 80030a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80a4 	beq.w	80031f8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b0:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d06b      	beq.n	8003194 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d149      	bne.n	8003158 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c4:	4b31      	ldr	r3, [pc, #196]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a30      	ldr	r2, [pc, #192]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 80030ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe fc9a 	bl	8001a08 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe fc96 	bl	8001a08 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e087      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	4b28      	ldr	r3, [pc, #160]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	019b      	lsls	r3, r3, #6
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	3b01      	subs	r3, #1
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	4313      	orrs	r3, r2
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800311e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003122:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800312a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe fc6a 	bl	8001a08 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe fc66 	bl	8001a08 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e057      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x478>
 8003156:	e04f      	b.n	80031f8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a0b      	ldr	r2, [pc, #44]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800315e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fc50 	bl	8001a08 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe fc4c 	bl	8001a08 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e03d      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317e:	4b03      	ldr	r3, [pc, #12]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x4ac>
 800318a:	e035      	b.n	80031f8 <HAL_RCC_OscConfig+0x538>
 800318c:	40023800 	.word	0x40023800
 8003190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <HAL_RCC_OscConfig+0x544>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d028      	beq.n	80031f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d121      	bne.n	80031f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d11a      	bne.n	80031f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031c4:	4013      	ands	r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d111      	bne.n	80031f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	085b      	lsrs	r3, r3, #1
 80031dc:	3b01      	subs	r3, #1
 80031de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d107      	bne.n	80031f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800

08003208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0d0      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003220:	4b6a      	ldr	r3, [pc, #424]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d910      	bls.n	8003250 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b67      	ldr	r3, [pc, #412]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 020f 	bic.w	r2, r3, #15
 8003236:	4965      	ldr	r1, [pc, #404]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b63      	ldr	r3, [pc, #396]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0b8      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003268:	4b59      	ldr	r3, [pc, #356]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4a58      	ldr	r2, [pc, #352]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 800326e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003272:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003280:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4a52      	ldr	r2, [pc, #328]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003286:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800328a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800328c:	4b50      	ldr	r3, [pc, #320]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	494d      	ldr	r1, [pc, #308]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d040      	beq.n	800332c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d115      	bne.n	80032ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e07f      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e073      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032da:	4b3d      	ldr	r3, [pc, #244]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e06b      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ea:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f023 0203 	bic.w	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4936      	ldr	r1, [pc, #216]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fc:	f7fe fb84 	bl	8001a08 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	e00a      	b.n	800331a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003304:	f7fe fb80 	bl	8001a08 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e053      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 020c 	and.w	r2, r3, #12
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	429a      	cmp	r2, r3
 800332a:	d1eb      	bne.n	8003304 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800332c:	4b27      	ldr	r3, [pc, #156]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d210      	bcs.n	800335c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 020f 	bic.w	r2, r3, #15
 8003342:	4922      	ldr	r1, [pc, #136]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	4313      	orrs	r3, r2
 8003348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e032      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4916      	ldr	r1, [pc, #88]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	490e      	ldr	r1, [pc, #56]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800339a:	f000 f821 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 800339e:	4602      	mov	r2, r0
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	490a      	ldr	r1, [pc, #40]	; (80033d4 <HAL_RCC_ClockConfig+0x1cc>)
 80033ac:	5ccb      	ldrb	r3, [r1, r3]
 80033ae:	fa22 f303 	lsr.w	r3, r2, r3
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <HAL_RCC_ClockConfig+0x1d0>)
 80033b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_RCC_ClockConfig+0x1d4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe fae0 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023c00 	.word	0x40023c00
 80033d0:	40023800 	.word	0x40023800
 80033d4:	080068b0 	.word	0x080068b0
 80033d8:	20000034 	.word	0x20000034
 80033dc:	20000038 	.word	0x20000038

080033e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e4:	b094      	sub	sp, #80	; 0x50
 80033e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	647b      	str	r3, [r7, #68]	; 0x44
 80033ec:	2300      	movs	r3, #0
 80033ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f0:	2300      	movs	r3, #0
 80033f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f8:	4b79      	ldr	r3, [pc, #484]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b08      	cmp	r3, #8
 8003402:	d00d      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x40>
 8003404:	2b08      	cmp	r3, #8
 8003406:	f200 80e1 	bhi.w	80035cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x34>
 800340e:	2b04      	cmp	r3, #4
 8003410:	d003      	beq.n	800341a <HAL_RCC_GetSysClockFreq+0x3a>
 8003412:	e0db      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003414:	4b73      	ldr	r3, [pc, #460]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003416:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003418:	e0db      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800341a:	4b73      	ldr	r3, [pc, #460]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800341c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800341e:	e0d8      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003420:	4b6f      	ldr	r3, [pc, #444]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003428:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800342a:	4b6d      	ldr	r3, [pc, #436]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d063      	beq.n	80034fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003436:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	099b      	lsrs	r3, r3, #6
 800343c:	2200      	movs	r2, #0
 800343e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003440:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003448:	633b      	str	r3, [r7, #48]	; 0x30
 800344a:	2300      	movs	r3, #0
 800344c:	637b      	str	r3, [r7, #52]	; 0x34
 800344e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003452:	4622      	mov	r2, r4
 8003454:	462b      	mov	r3, r5
 8003456:	f04f 0000 	mov.w	r0, #0
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	0159      	lsls	r1, r3, #5
 8003460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003464:	0150      	lsls	r0, r2, #5
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4621      	mov	r1, r4
 800346c:	1a51      	subs	r1, r2, r1
 800346e:	6139      	str	r1, [r7, #16]
 8003470:	4629      	mov	r1, r5
 8003472:	eb63 0301 	sbc.w	r3, r3, r1
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003484:	4659      	mov	r1, fp
 8003486:	018b      	lsls	r3, r1, #6
 8003488:	4651      	mov	r1, sl
 800348a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800348e:	4651      	mov	r1, sl
 8003490:	018a      	lsls	r2, r1, #6
 8003492:	4651      	mov	r1, sl
 8003494:	ebb2 0801 	subs.w	r8, r2, r1
 8003498:	4659      	mov	r1, fp
 800349a:	eb63 0901 	sbc.w	r9, r3, r1
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034b2:	4690      	mov	r8, r2
 80034b4:	4699      	mov	r9, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	eb18 0303 	adds.w	r3, r8, r3
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	462b      	mov	r3, r5
 80034c0:	eb49 0303 	adc.w	r3, r9, r3
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034d2:	4629      	mov	r1, r5
 80034d4:	024b      	lsls	r3, r1, #9
 80034d6:	4621      	mov	r1, r4
 80034d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034dc:	4621      	mov	r1, r4
 80034de:	024a      	lsls	r2, r1, #9
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e6:	2200      	movs	r2, #0
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034f0:	f7fc fee6 	bl	80002c0 <__aeabi_uldivmod>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4613      	mov	r3, r2
 80034fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034fc:	e058      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fe:	4b38      	ldr	r3, [pc, #224]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	099b      	lsrs	r3, r3, #6
 8003504:	2200      	movs	r2, #0
 8003506:	4618      	mov	r0, r3
 8003508:	4611      	mov	r1, r2
 800350a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800350e:	623b      	str	r3, [r7, #32]
 8003510:	2300      	movs	r3, #0
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
 8003514:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003518:	4642      	mov	r2, r8
 800351a:	464b      	mov	r3, r9
 800351c:	f04f 0000 	mov.w	r0, #0
 8003520:	f04f 0100 	mov.w	r1, #0
 8003524:	0159      	lsls	r1, r3, #5
 8003526:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800352a:	0150      	lsls	r0, r2, #5
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4641      	mov	r1, r8
 8003532:	ebb2 0a01 	subs.w	sl, r2, r1
 8003536:	4649      	mov	r1, r9
 8003538:	eb63 0b01 	sbc.w	fp, r3, r1
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003548:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800354c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003550:	ebb2 040a 	subs.w	r4, r2, sl
 8003554:	eb63 050b 	sbc.w	r5, r3, fp
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	00eb      	lsls	r3, r5, #3
 8003562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003566:	00e2      	lsls	r2, r4, #3
 8003568:	4614      	mov	r4, r2
 800356a:	461d      	mov	r5, r3
 800356c:	4643      	mov	r3, r8
 800356e:	18e3      	adds	r3, r4, r3
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	464b      	mov	r3, r9
 8003574:	eb45 0303 	adc.w	r3, r5, r3
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003586:	4629      	mov	r1, r5
 8003588:	028b      	lsls	r3, r1, #10
 800358a:	4621      	mov	r1, r4
 800358c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003590:	4621      	mov	r1, r4
 8003592:	028a      	lsls	r2, r1, #10
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800359a:	2200      	movs	r2, #0
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	61fa      	str	r2, [r7, #28]
 80035a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035a4:	f7fc fe8c 	bl	80002c0 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4613      	mov	r3, r2
 80035ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	3301      	adds	r3, #1
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80035c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ca:	e002      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3750      	adds	r7, #80	; 0x50
 80035d8:	46bd      	mov	sp, r7
 80035da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	00f42400 	.word	0x00f42400
 80035e8:	007a1200 	.word	0x007a1200

080035ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e09d      	b.n	800373a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	2b00      	cmp	r3, #0
 8003604:	d108      	bne.n	8003618 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800360e:	d009      	beq.n	8003624 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	61da      	str	r2, [r3, #28]
 8003616:	e005      	b.n	8003624 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd fec0 	bl	80013c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800365a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003664:	d902      	bls.n	800366c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	e002      	b.n	8003672 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800366c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003670:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800367a:	d007      	beq.n	800368c <HAL_SPI_Init+0xa0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003684:	d002      	beq.n	800368c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ce:	ea42 0103 	orr.w	r1, r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	0c1b      	lsrs	r3, r3, #16
 80036e8:	f003 0204 	and.w	r2, r3, #4
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003708:	ea42 0103 	orr.w	r1, r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003728:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b088      	sub	sp, #32
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_SPI_Transmit+0x22>
 8003760:	2302      	movs	r3, #2
 8003762:	e158      	b.n	8003a16 <HAL_SPI_Transmit+0x2d4>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800376c:	f7fe f94c 	bl	8001a08 <HAL_GetTick>
 8003770:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d002      	beq.n	8003788 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003782:	2302      	movs	r3, #2
 8003784:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003786:	e13d      	b.n	8003a04 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_SPI_Transmit+0x52>
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003798:	e134      	b.n	8003a04 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2203      	movs	r2, #3
 800379e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	88fa      	ldrh	r2, [r7, #6]
 80037b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	88fa      	ldrh	r2, [r7, #6]
 80037b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e4:	d10f      	bne.n	8003806 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003804:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d007      	beq.n	8003824 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003822:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800382c:	d94b      	bls.n	80038c6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_SPI_Transmit+0xfa>
 8003836:	8afb      	ldrh	r3, [r7, #22]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d13e      	bne.n	80038ba <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	881a      	ldrh	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	1c9a      	adds	r2, r3, #2
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003860:	e02b      	b.n	80038ba <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b02      	cmp	r3, #2
 800386e:	d112      	bne.n	8003896 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	881a      	ldrh	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	1c9a      	adds	r2, r3, #2
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003894:	e011      	b.n	80038ba <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003896:	f7fe f8b7 	bl	8001a08 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d803      	bhi.n	80038ae <HAL_SPI_Transmit+0x16c>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d102      	bne.n	80038b4 <HAL_SPI_Transmit+0x172>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d102      	bne.n	80038ba <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038b8:	e0a4      	b.n	8003a04 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1ce      	bne.n	8003862 <HAL_SPI_Transmit+0x120>
 80038c4:	e07c      	b.n	80039c0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_SPI_Transmit+0x192>
 80038ce:	8afb      	ldrh	r3, [r7, #22]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d170      	bne.n	80039b6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d912      	bls.n	8003904 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	881a      	ldrh	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	1c9a      	adds	r2, r3, #2
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b02      	subs	r3, #2
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003902:	e058      	b.n	80039b6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	7812      	ldrb	r2, [r2, #0]
 8003910:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800392a:	e044      	b.n	80039b6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	d12b      	bne.n	8003992 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d912      	bls.n	800396a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	881a      	ldrh	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003954:	1c9a      	adds	r2, r3, #2
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b02      	subs	r3, #2
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003968:	e025      	b.n	80039b6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	7812      	ldrb	r2, [r2, #0]
 8003976:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003990:	e011      	b.n	80039b6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003992:	f7fe f839 	bl	8001a08 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d803      	bhi.n	80039aa <HAL_SPI_Transmit+0x268>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d102      	bne.n	80039b0 <HAL_SPI_Transmit+0x26e>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039b4:	e026      	b.n	8003a04 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1b5      	bne.n	800392c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	6839      	ldr	r1, [r7, #0]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fc1d 	bl	8004204 <SPI_EndRxTxTransaction>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e000      	b.n	8003a04 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003a02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a14:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_SPI_Transmit_DMA+0x20>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e0d8      	b.n	8003bf2 <HAL_SPI_Transmit_DMA+0x1d2>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d002      	beq.n	8003a5a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
 8003a56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a58:	e0c6      	b.n	8003be8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_SPI_Transmit_DMA+0x46>
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a6a:	e0bd      	b.n	8003be8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2203      	movs	r2, #3
 8003a70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	88fa      	ldrh	r2, [r7, #6]
 8003a84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	88fa      	ldrh	r2, [r7, #6]
 8003a8a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab6:	d10f      	bne.n	8003ad8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003adc:	4a47      	ldr	r2, [pc, #284]	; (8003bfc <HAL_SPI_Transmit_DMA+0x1dc>)
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae4:	4a46      	ldr	r2, [pc, #280]	; (8003c00 <HAL_SPI_Transmit_DMA+0x1e0>)
 8003ae6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	4a45      	ldr	r2, [pc, #276]	; (8003c04 <HAL_SPI_Transmit_DMA+0x1e4>)
 8003aee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	2200      	movs	r2, #0
 8003af6:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b06:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b10:	d82d      	bhi.n	8003b6e <HAL_SPI_Transmit_DMA+0x14e>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1c:	d127      	bne.n	8003b6e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10f      	bne.n	8003b4c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b3a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b4a:	e010      	b.n	8003b6e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b5a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b76:	4619      	mov	r1, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	330c      	adds	r3, #12
 8003b7e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b84:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b86:	f7fe f92f 	bl	8001de8 <HAL_DMA_Start_IT>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00c      	beq.n	8003baa <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b94:	f043 0210 	orr.w	r2, r3, #16
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003ba8:	e01e      	b.n	8003be8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb4:	2b40      	cmp	r3, #64	; 0x40
 8003bb6:	d007      	beq.n	8003bc8 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0220 	orr.w	r2, r2, #32
 8003bd6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0202 	orr.w	r2, r2, #2
 8003be6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	08003f41 	.word	0x08003f41
 8003c00:	08003e99 	.word	0x08003e99
 8003c04:	08003f5d 	.word	0x08003f5d

08003c08 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00f      	beq.n	8003c3c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe f941 	bl	8001ea8 <HAL_DMA_Abort>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c30:	f043 0210 	orr.w	r2, r3, #16
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00f      	beq.n	8003c64 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fe f92d 	bl	8001ea8 <HAL_DMA_Abort>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0203 	bic.w	r2, r2, #3
 8003c72:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10e      	bne.n	8003cc8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d004      	beq.n	8003cc8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	4798      	blx	r3
    return;
 8003cc6:	e0ce      	b.n	8003e66 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <HAL_SPI_IRQHandler+0x5e>
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
    return;
 8003ce4:	e0bf      	b.n	8003e66 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <HAL_SPI_IRQHandler+0x7e>
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80b0 	beq.w	8003e66 <HAL_SPI_IRQHandler+0x1de>
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80aa 	beq.w	8003e66 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d023      	beq.n	8003d64 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d011      	beq.n	8003d4c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2c:	f043 0204 	orr.w	r2, r3, #4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	e00b      	b.n	8003d64 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	693b      	ldr	r3, [r7, #16]
        return;
 8003d62:	e080      	b.n	8003e66 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d014      	beq.n	8003d98 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d72:	f043 0201 	orr.w	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00c      	beq.n	8003dbc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da6:	f043 0208 	orr.w	r2, r3, #8
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d04f      	beq.n	8003e64 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dd2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d104      	bne.n	8003df0 <HAL_SPI_IRQHandler+0x168>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d034      	beq.n	8003e5a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0203 	bic.w	r2, r2, #3
 8003dfe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d011      	beq.n	8003e2c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <HAL_SPI_IRQHandler+0x1e4>)
 8003e0e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe f8b7 	bl	8001f88 <HAL_DMA_Abort_IT>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d016      	beq.n	8003e62 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	4a0c      	ldr	r2, [pc, #48]	; (8003e6c <HAL_SPI_IRQHandler+0x1e4>)
 8003e3a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe f8a1 	bl	8001f88 <HAL_DMA_Abort_IT>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003e58:	e003      	b.n	8003e62 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f812 	bl	8003e84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e60:	e000      	b.n	8003e64 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003e62:	bf00      	nop
    return;
 8003e64:	bf00      	nop
  }
}
 8003e66:	3720      	adds	r7, #32
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	08003f9d 	.word	0x08003f9d

08003e70 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ea6:	f7fd fdaf 	bl	8001a08 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eba:	d03b      	beq.n	8003f34 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0220 	bic.w	r2, r2, #32
 8003eca:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0202 	bic.w	r2, r2, #2
 8003eda:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	2164      	movs	r1, #100	; 0x64
 8003ee0:	6978      	ldr	r0, [r7, #20]
 8003ee2:	f000 f98f 	bl	8004204 <SPI_EndRxTxTransaction>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003f2c:	6978      	ldr	r0, [r7, #20]
 8003f2e:	f7ff ffa9 	bl	8003e84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003f32:	e002      	b.n	8003f3a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003f34:	6978      	ldr	r0, [r7, #20]
 8003f36:	f7fd f9c5 	bl	80012c4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f7ff ff8e 	bl	8003e70 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0203 	bic.w	r2, r2, #3
 8003f78:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7e:	f043 0210 	orr.w	r2, r3, #16
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7ff ff78 	bl	8003e84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f94:	bf00      	nop
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f7ff ff63 	bl	8003e84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fd8:	f7fd fd16 	bl	8001a08 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fe8:	f7fd fd0e 	bl	8001a08 <HAL_GetTick>
 8003fec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fee:	4b39      	ldr	r3, [pc, #228]	; (80040d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	015b      	lsls	r3, r3, #5
 8003ff4:	0d1b      	lsrs	r3, r3, #20
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	fb02 f303 	mul.w	r3, r2, r3
 8003ffc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ffe:	e054      	b.n	80040aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d050      	beq.n	80040aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004008:	f7fd fcfe 	bl	8001a08 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	429a      	cmp	r2, r3
 8004016:	d902      	bls.n	800401e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d13d      	bne.n	800409a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800402c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004036:	d111      	bne.n	800405c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004040:	d004      	beq.n	800404c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404a:	d107      	bne.n	800405c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800405a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004064:	d10f      	bne.n	8004086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e017      	b.n	80040ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4013      	ands	r3, r2
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	bf0c      	ite	eq
 80040ba:	2301      	moveq	r3, #1
 80040bc:	2300      	movne	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d19b      	bne.n	8004000 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000034 	.word	0x20000034

080040d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08a      	sub	sp, #40	; 0x28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80040ea:	f7fd fc8d 	bl	8001a08 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	4413      	add	r3, r2
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80040fa:	f7fd fc85 	bl	8001a08 <HAL_GetTick>
 80040fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004108:	4b3d      	ldr	r3, [pc, #244]	; (8004200 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	00da      	lsls	r2, r3, #3
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	0d1b      	lsrs	r3, r3, #20
 8004118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004120:	e060      	b.n	80041e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004128:	d107      	bne.n	800413a <SPI_WaitFifoStateUntilTimeout+0x62>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d104      	bne.n	800413a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004138:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004140:	d050      	beq.n	80041e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004142:	f7fd fc61 	bl	8001a08 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414e:	429a      	cmp	r2, r3
 8004150:	d902      	bls.n	8004158 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	2b00      	cmp	r3, #0
 8004156:	d13d      	bne.n	80041d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004166:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004170:	d111      	bne.n	8004196 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800417a:	d004      	beq.n	8004186 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004184:	d107      	bne.n	8004196 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004194:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419e:	d10f      	bne.n	80041c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e010      	b.n	80041f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4013      	ands	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d196      	bne.n	8004122 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3728      	adds	r7, #40	; 0x28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20000034 	.word	0x20000034

08004204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2200      	movs	r2, #0
 8004218:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff ff5b 	bl	80040d8 <SPI_WaitFifoStateUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422c:	f043 0220 	orr.w	r2, r3, #32
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e046      	b.n	80042c6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004238:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <SPI_EndRxTxTransaction+0xcc>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a25      	ldr	r2, [pc, #148]	; (80042d4 <SPI_EndRxTxTransaction+0xd0>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	0d5b      	lsrs	r3, r3, #21
 8004244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004248:	fb02 f303 	mul.w	r3, r2, r3
 800424c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004256:	d112      	bne.n	800427e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2200      	movs	r2, #0
 8004260:	2180      	movs	r1, #128	; 0x80
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f7ff feb0 	bl	8003fc8 <SPI_WaitFlagStateUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004272:	f043 0220 	orr.w	r2, r3, #32
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e023      	b.n	80042c6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	3b01      	subs	r3, #1
 8004288:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004294:	2b80      	cmp	r3, #128	; 0x80
 8004296:	d0f2      	beq.n	800427e <SPI_EndRxTxTransaction+0x7a>
 8004298:	e000      	b.n	800429c <SPI_EndRxTxTransaction+0x98>
        break;
 800429a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff ff15 	bl	80040d8 <SPI_WaitFifoStateUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d007      	beq.n	80042c4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b8:	f043 0220 	orr.w	r2, r3, #32
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e000      	b.n	80042c6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000034 	.word	0x20000034
 80042d4:	165e9f81 	.word	0x165e9f81

080042d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e049      	b.n	800437e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fd f8e8 	bl	80014d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f000 fa00 	bl	800471c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	d001      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e054      	b.n	800444a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a26      	ldr	r2, [pc, #152]	; (8004458 <HAL_TIM_Base_Start_IT+0xd0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d022      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ca:	d01d      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a22      	ldr	r2, [pc, #136]	; (800445c <HAL_TIM_Base_Start_IT+0xd4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d018      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a21      	ldr	r2, [pc, #132]	; (8004460 <HAL_TIM_Base_Start_IT+0xd8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d013      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1f      	ldr	r2, [pc, #124]	; (8004464 <HAL_TIM_Base_Start_IT+0xdc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00e      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1e      	ldr	r2, [pc, #120]	; (8004468 <HAL_TIM_Base_Start_IT+0xe0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d009      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1c      	ldr	r2, [pc, #112]	; (800446c <HAL_TIM_Base_Start_IT+0xe4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x80>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <HAL_TIM_Base_Start_IT+0xe8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d115      	bne.n	8004434 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	4b19      	ldr	r3, [pc, #100]	; (8004474 <HAL_TIM_Base_Start_IT+0xec>)
 8004410:	4013      	ands	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b06      	cmp	r3, #6
 8004418:	d015      	beq.n	8004446 <HAL_TIM_Base_Start_IT+0xbe>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004420:	d011      	beq.n	8004446 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0201 	orr.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004432:	e008      	b.n	8004446 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	e000      	b.n	8004448 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004446:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40010400 	.word	0x40010400
 800446c:	40014000 	.word	0x40014000
 8004470:	40001800 	.word	0x40001800
 8004474:	00010007 	.word	0x00010007

08004478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b02      	cmp	r3, #2
 800448c:	d122      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b02      	cmp	r3, #2
 800449a:	d11b      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0202 	mvn.w	r2, #2
 80044a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f90f 	bl	80046de <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f901 	bl	80046ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f912 	bl	80046f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d122      	bne.n	8004528 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d11b      	bne.n	8004528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0204 	mvn.w	r2, #4
 80044f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8e5 	bl	80046de <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f8d7 	bl	80046ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f8e8 	bl	80046f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b08      	cmp	r3, #8
 8004534:	d122      	bne.n	800457c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b08      	cmp	r3, #8
 8004542:	d11b      	bne.n	800457c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0208 	mvn.w	r2, #8
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2204      	movs	r2, #4
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8bb 	bl	80046de <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f8ad 	bl	80046ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f8be 	bl	80046f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b10      	cmp	r3, #16
 8004588:	d122      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b10      	cmp	r3, #16
 8004596:	d11b      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0210 	mvn.w	r2, #16
 80045a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2208      	movs	r2, #8
 80045a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f891 	bl	80046de <HAL_TIM_IC_CaptureCallback>
 80045bc:	e005      	b.n	80045ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f883 	bl	80046ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f894 	bl	80046f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d10e      	bne.n	80045fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d107      	bne.n	80045fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0201 	mvn.w	r2, #1
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f85d 	bl	80046b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b80      	cmp	r3, #128	; 0x80
 8004608:	d10e      	bne.n	8004628 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b80      	cmp	r3, #128	; 0x80
 8004616:	d107      	bne.n	8004628 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f924 	bl	8004870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004636:	d10e      	bne.n	8004656 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b80      	cmp	r3, #128	; 0x80
 8004644:	d107      	bne.n	8004656 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800464e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f917 	bl	8004884 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d10e      	bne.n	8004682 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d107      	bne.n	8004682 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800467a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f842 	bl	8004706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b20      	cmp	r3, #32
 800468e:	d10e      	bne.n	80046ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d107      	bne.n	80046ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f06f 0220 	mvn.w	r2, #32
 80046a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f8d7 	bl	800485c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a40      	ldr	r2, [pc, #256]	; (8004830 <TIM_Base_SetConfig+0x114>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473a:	d00f      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a3d      	ldr	r2, [pc, #244]	; (8004834 <TIM_Base_SetConfig+0x118>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a3c      	ldr	r2, [pc, #240]	; (8004838 <TIM_Base_SetConfig+0x11c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a3b      	ldr	r2, [pc, #236]	; (800483c <TIM_Base_SetConfig+0x120>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a3a      	ldr	r2, [pc, #232]	; (8004840 <TIM_Base_SetConfig+0x124>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d108      	bne.n	800476e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a2f      	ldr	r2, [pc, #188]	; (8004830 <TIM_Base_SetConfig+0x114>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d02b      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477c:	d027      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a2c      	ldr	r2, [pc, #176]	; (8004834 <TIM_Base_SetConfig+0x118>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d023      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a2b      	ldr	r2, [pc, #172]	; (8004838 <TIM_Base_SetConfig+0x11c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d01f      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2a      	ldr	r2, [pc, #168]	; (800483c <TIM_Base_SetConfig+0x120>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d01b      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a29      	ldr	r2, [pc, #164]	; (8004840 <TIM_Base_SetConfig+0x124>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d017      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a28      	ldr	r2, [pc, #160]	; (8004844 <TIM_Base_SetConfig+0x128>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d013      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a27      	ldr	r2, [pc, #156]	; (8004848 <TIM_Base_SetConfig+0x12c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00f      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a26      	ldr	r2, [pc, #152]	; (800484c <TIM_Base_SetConfig+0x130>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00b      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a25      	ldr	r2, [pc, #148]	; (8004850 <TIM_Base_SetConfig+0x134>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d007      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a24      	ldr	r2, [pc, #144]	; (8004854 <TIM_Base_SetConfig+0x138>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d003      	beq.n	80047ce <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a23      	ldr	r2, [pc, #140]	; (8004858 <TIM_Base_SetConfig+0x13c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d108      	bne.n	80047e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <TIM_Base_SetConfig+0x114>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d003      	beq.n	8004814 <TIM_Base_SetConfig+0xf8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a0c      	ldr	r2, [pc, #48]	; (8004840 <TIM_Base_SetConfig+0x124>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d103      	bne.n	800481c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	615a      	str	r2, [r3, #20]
}
 8004822:	bf00      	nop
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40010000 	.word	0x40010000
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800
 800483c:	40000c00 	.word	0x40000c00
 8004840:	40010400 	.word	0x40010400
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800
 8004850:	40001800 	.word	0x40001800
 8004854:	40001c00 	.word	0x40001c00
 8004858:	40002000 	.word	0x40002000

0800485c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <_strtoul_l.constprop.0>:
 8004898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800489c:	4f36      	ldr	r7, [pc, #216]	; (8004978 <_strtoul_l.constprop.0+0xe0>)
 800489e:	4686      	mov	lr, r0
 80048a0:	460d      	mov	r5, r1
 80048a2:	4628      	mov	r0, r5
 80048a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048a8:	5d3e      	ldrb	r6, [r7, r4]
 80048aa:	f016 0608 	ands.w	r6, r6, #8
 80048ae:	d1f8      	bne.n	80048a2 <_strtoul_l.constprop.0+0xa>
 80048b0:	2c2d      	cmp	r4, #45	; 0x2d
 80048b2:	d130      	bne.n	8004916 <_strtoul_l.constprop.0+0x7e>
 80048b4:	782c      	ldrb	r4, [r5, #0]
 80048b6:	2601      	movs	r6, #1
 80048b8:	1c85      	adds	r5, r0, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d057      	beq.n	800496e <_strtoul_l.constprop.0+0xd6>
 80048be:	2b10      	cmp	r3, #16
 80048c0:	d109      	bne.n	80048d6 <_strtoul_l.constprop.0+0x3e>
 80048c2:	2c30      	cmp	r4, #48	; 0x30
 80048c4:	d107      	bne.n	80048d6 <_strtoul_l.constprop.0+0x3e>
 80048c6:	7828      	ldrb	r0, [r5, #0]
 80048c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80048cc:	2858      	cmp	r0, #88	; 0x58
 80048ce:	d149      	bne.n	8004964 <_strtoul_l.constprop.0+0xcc>
 80048d0:	786c      	ldrb	r4, [r5, #1]
 80048d2:	2310      	movs	r3, #16
 80048d4:	3502      	adds	r5, #2
 80048d6:	f04f 38ff 	mov.w	r8, #4294967295
 80048da:	2700      	movs	r7, #0
 80048dc:	fbb8 f8f3 	udiv	r8, r8, r3
 80048e0:	fb03 f908 	mul.w	r9, r3, r8
 80048e4:	ea6f 0909 	mvn.w	r9, r9
 80048e8:	4638      	mov	r0, r7
 80048ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80048ee:	f1bc 0f09 	cmp.w	ip, #9
 80048f2:	d815      	bhi.n	8004920 <_strtoul_l.constprop.0+0x88>
 80048f4:	4664      	mov	r4, ip
 80048f6:	42a3      	cmp	r3, r4
 80048f8:	dd23      	ble.n	8004942 <_strtoul_l.constprop.0+0xaa>
 80048fa:	f1b7 3fff 	cmp.w	r7, #4294967295
 80048fe:	d007      	beq.n	8004910 <_strtoul_l.constprop.0+0x78>
 8004900:	4580      	cmp	r8, r0
 8004902:	d31b      	bcc.n	800493c <_strtoul_l.constprop.0+0xa4>
 8004904:	d101      	bne.n	800490a <_strtoul_l.constprop.0+0x72>
 8004906:	45a1      	cmp	r9, r4
 8004908:	db18      	blt.n	800493c <_strtoul_l.constprop.0+0xa4>
 800490a:	fb00 4003 	mla	r0, r0, r3, r4
 800490e:	2701      	movs	r7, #1
 8004910:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004914:	e7e9      	b.n	80048ea <_strtoul_l.constprop.0+0x52>
 8004916:	2c2b      	cmp	r4, #43	; 0x2b
 8004918:	bf04      	itt	eq
 800491a:	782c      	ldrbeq	r4, [r5, #0]
 800491c:	1c85      	addeq	r5, r0, #2
 800491e:	e7cc      	b.n	80048ba <_strtoul_l.constprop.0+0x22>
 8004920:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004924:	f1bc 0f19 	cmp.w	ip, #25
 8004928:	d801      	bhi.n	800492e <_strtoul_l.constprop.0+0x96>
 800492a:	3c37      	subs	r4, #55	; 0x37
 800492c:	e7e3      	b.n	80048f6 <_strtoul_l.constprop.0+0x5e>
 800492e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004932:	f1bc 0f19 	cmp.w	ip, #25
 8004936:	d804      	bhi.n	8004942 <_strtoul_l.constprop.0+0xaa>
 8004938:	3c57      	subs	r4, #87	; 0x57
 800493a:	e7dc      	b.n	80048f6 <_strtoul_l.constprop.0+0x5e>
 800493c:	f04f 37ff 	mov.w	r7, #4294967295
 8004940:	e7e6      	b.n	8004910 <_strtoul_l.constprop.0+0x78>
 8004942:	1c7b      	adds	r3, r7, #1
 8004944:	d106      	bne.n	8004954 <_strtoul_l.constprop.0+0xbc>
 8004946:	2322      	movs	r3, #34	; 0x22
 8004948:	f8ce 3000 	str.w	r3, [lr]
 800494c:	4638      	mov	r0, r7
 800494e:	b932      	cbnz	r2, 800495e <_strtoul_l.constprop.0+0xc6>
 8004950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004954:	b106      	cbz	r6, 8004958 <_strtoul_l.constprop.0+0xc0>
 8004956:	4240      	negs	r0, r0
 8004958:	2a00      	cmp	r2, #0
 800495a:	d0f9      	beq.n	8004950 <_strtoul_l.constprop.0+0xb8>
 800495c:	b107      	cbz	r7, 8004960 <_strtoul_l.constprop.0+0xc8>
 800495e:	1e69      	subs	r1, r5, #1
 8004960:	6011      	str	r1, [r2, #0]
 8004962:	e7f5      	b.n	8004950 <_strtoul_l.constprop.0+0xb8>
 8004964:	2430      	movs	r4, #48	; 0x30
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1b5      	bne.n	80048d6 <_strtoul_l.constprop.0+0x3e>
 800496a:	2308      	movs	r3, #8
 800496c:	e7b3      	b.n	80048d6 <_strtoul_l.constprop.0+0x3e>
 800496e:	2c30      	cmp	r4, #48	; 0x30
 8004970:	d0a9      	beq.n	80048c6 <_strtoul_l.constprop.0+0x2e>
 8004972:	230a      	movs	r3, #10
 8004974:	e7af      	b.n	80048d6 <_strtoul_l.constprop.0+0x3e>
 8004976:	bf00      	nop
 8004978:	080068c9 	.word	0x080068c9

0800497c <strtoul>:
 800497c:	4613      	mov	r3, r2
 800497e:	460a      	mov	r2, r1
 8004980:	4601      	mov	r1, r0
 8004982:	4802      	ldr	r0, [pc, #8]	; (800498c <strtoul+0x10>)
 8004984:	6800      	ldr	r0, [r0, #0]
 8004986:	f7ff bf87 	b.w	8004898 <_strtoul_l.constprop.0>
 800498a:	bf00      	nop
 800498c:	2000008c 	.word	0x2000008c

08004990 <siprintf>:
 8004990:	b40e      	push	{r1, r2, r3}
 8004992:	b500      	push	{lr}
 8004994:	b09c      	sub	sp, #112	; 0x70
 8004996:	ab1d      	add	r3, sp, #116	; 0x74
 8004998:	9002      	str	r0, [sp, #8]
 800499a:	9006      	str	r0, [sp, #24]
 800499c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049a0:	4809      	ldr	r0, [pc, #36]	; (80049c8 <siprintf+0x38>)
 80049a2:	9107      	str	r1, [sp, #28]
 80049a4:	9104      	str	r1, [sp, #16]
 80049a6:	4909      	ldr	r1, [pc, #36]	; (80049cc <siprintf+0x3c>)
 80049a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ac:	9105      	str	r1, [sp, #20]
 80049ae:	6800      	ldr	r0, [r0, #0]
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	a902      	add	r1, sp, #8
 80049b4:	f000 f9cc 	bl	8004d50 <_svfiprintf_r>
 80049b8:	9b02      	ldr	r3, [sp, #8]
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	b01c      	add	sp, #112	; 0x70
 80049c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049c4:	b003      	add	sp, #12
 80049c6:	4770      	bx	lr
 80049c8:	2000008c 	.word	0x2000008c
 80049cc:	ffff0208 	.word	0xffff0208

080049d0 <_vsniprintf_r>:
 80049d0:	b530      	push	{r4, r5, lr}
 80049d2:	4614      	mov	r4, r2
 80049d4:	2c00      	cmp	r4, #0
 80049d6:	b09b      	sub	sp, #108	; 0x6c
 80049d8:	4605      	mov	r5, r0
 80049da:	461a      	mov	r2, r3
 80049dc:	da05      	bge.n	80049ea <_vsniprintf_r+0x1a>
 80049de:	238b      	movs	r3, #139	; 0x8b
 80049e0:	6003      	str	r3, [r0, #0]
 80049e2:	f04f 30ff 	mov.w	r0, #4294967295
 80049e6:	b01b      	add	sp, #108	; 0x6c
 80049e8:	bd30      	pop	{r4, r5, pc}
 80049ea:	f44f 7302 	mov.w	r3, #520	; 0x208
 80049ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 80049f2:	bf14      	ite	ne
 80049f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80049f8:	4623      	moveq	r3, r4
 80049fa:	9302      	str	r3, [sp, #8]
 80049fc:	9305      	str	r3, [sp, #20]
 80049fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a02:	9100      	str	r1, [sp, #0]
 8004a04:	9104      	str	r1, [sp, #16]
 8004a06:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004a0a:	4669      	mov	r1, sp
 8004a0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004a0e:	f000 f99f 	bl	8004d50 <_svfiprintf_r>
 8004a12:	1c43      	adds	r3, r0, #1
 8004a14:	bfbc      	itt	lt
 8004a16:	238b      	movlt	r3, #139	; 0x8b
 8004a18:	602b      	strlt	r3, [r5, #0]
 8004a1a:	2c00      	cmp	r4, #0
 8004a1c:	d0e3      	beq.n	80049e6 <_vsniprintf_r+0x16>
 8004a1e:	9b00      	ldr	r3, [sp, #0]
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e7df      	b.n	80049e6 <_vsniprintf_r+0x16>
	...

08004a28 <vsniprintf>:
 8004a28:	b507      	push	{r0, r1, r2, lr}
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	460a      	mov	r2, r1
 8004a30:	4601      	mov	r1, r0
 8004a32:	4803      	ldr	r0, [pc, #12]	; (8004a40 <vsniprintf+0x18>)
 8004a34:	6800      	ldr	r0, [r0, #0]
 8004a36:	f7ff ffcb 	bl	80049d0 <_vsniprintf_r>
 8004a3a:	b003      	add	sp, #12
 8004a3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a40:	2000008c 	.word	0x2000008c

08004a44 <memset>:
 8004a44:	4402      	add	r2, r0
 8004a46:	4603      	mov	r3, r0
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d100      	bne.n	8004a4e <memset+0xa>
 8004a4c:	4770      	bx	lr
 8004a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a52:	e7f9      	b.n	8004a48 <memset+0x4>

08004a54 <__errno>:
 8004a54:	4b01      	ldr	r3, [pc, #4]	; (8004a5c <__errno+0x8>)
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	2000008c 	.word	0x2000008c

08004a60 <__libc_init_array>:
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	4d0d      	ldr	r5, [pc, #52]	; (8004a98 <__libc_init_array+0x38>)
 8004a64:	4c0d      	ldr	r4, [pc, #52]	; (8004a9c <__libc_init_array+0x3c>)
 8004a66:	1b64      	subs	r4, r4, r5
 8004a68:	10a4      	asrs	r4, r4, #2
 8004a6a:	2600      	movs	r6, #0
 8004a6c:	42a6      	cmp	r6, r4
 8004a6e:	d109      	bne.n	8004a84 <__libc_init_array+0x24>
 8004a70:	4d0b      	ldr	r5, [pc, #44]	; (8004aa0 <__libc_init_array+0x40>)
 8004a72:	4c0c      	ldr	r4, [pc, #48]	; (8004aa4 <__libc_init_array+0x44>)
 8004a74:	f000 fc6a 	bl	800534c <_init>
 8004a78:	1b64      	subs	r4, r4, r5
 8004a7a:	10a4      	asrs	r4, r4, #2
 8004a7c:	2600      	movs	r6, #0
 8004a7e:	42a6      	cmp	r6, r4
 8004a80:	d105      	bne.n	8004a8e <__libc_init_array+0x2e>
 8004a82:	bd70      	pop	{r4, r5, r6, pc}
 8004a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a88:	4798      	blx	r3
 8004a8a:	3601      	adds	r6, #1
 8004a8c:	e7ee      	b.n	8004a6c <__libc_init_array+0xc>
 8004a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a92:	4798      	blx	r3
 8004a94:	3601      	adds	r6, #1
 8004a96:	e7f2      	b.n	8004a7e <__libc_init_array+0x1e>
 8004a98:	08006a04 	.word	0x08006a04
 8004a9c:	08006a04 	.word	0x08006a04
 8004aa0:	08006a04 	.word	0x08006a04
 8004aa4:	08006a08 	.word	0x08006a08

08004aa8 <__retarget_lock_acquire_recursive>:
 8004aa8:	4770      	bx	lr

08004aaa <__retarget_lock_release_recursive>:
 8004aaa:	4770      	bx	lr

08004aac <_free_r>:
 8004aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004aae:	2900      	cmp	r1, #0
 8004ab0:	d044      	beq.n	8004b3c <_free_r+0x90>
 8004ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ab6:	9001      	str	r0, [sp, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f1a1 0404 	sub.w	r4, r1, #4
 8004abe:	bfb8      	it	lt
 8004ac0:	18e4      	addlt	r4, r4, r3
 8004ac2:	f000 f8df 	bl	8004c84 <__malloc_lock>
 8004ac6:	4a1e      	ldr	r2, [pc, #120]	; (8004b40 <_free_r+0x94>)
 8004ac8:	9801      	ldr	r0, [sp, #4]
 8004aca:	6813      	ldr	r3, [r2, #0]
 8004acc:	b933      	cbnz	r3, 8004adc <_free_r+0x30>
 8004ace:	6063      	str	r3, [r4, #4]
 8004ad0:	6014      	str	r4, [r2, #0]
 8004ad2:	b003      	add	sp, #12
 8004ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ad8:	f000 b8da 	b.w	8004c90 <__malloc_unlock>
 8004adc:	42a3      	cmp	r3, r4
 8004ade:	d908      	bls.n	8004af2 <_free_r+0x46>
 8004ae0:	6825      	ldr	r5, [r4, #0]
 8004ae2:	1961      	adds	r1, r4, r5
 8004ae4:	428b      	cmp	r3, r1
 8004ae6:	bf01      	itttt	eq
 8004ae8:	6819      	ldreq	r1, [r3, #0]
 8004aea:	685b      	ldreq	r3, [r3, #4]
 8004aec:	1949      	addeq	r1, r1, r5
 8004aee:	6021      	streq	r1, [r4, #0]
 8004af0:	e7ed      	b.n	8004ace <_free_r+0x22>
 8004af2:	461a      	mov	r2, r3
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	b10b      	cbz	r3, 8004afc <_free_r+0x50>
 8004af8:	42a3      	cmp	r3, r4
 8004afa:	d9fa      	bls.n	8004af2 <_free_r+0x46>
 8004afc:	6811      	ldr	r1, [r2, #0]
 8004afe:	1855      	adds	r5, r2, r1
 8004b00:	42a5      	cmp	r5, r4
 8004b02:	d10b      	bne.n	8004b1c <_free_r+0x70>
 8004b04:	6824      	ldr	r4, [r4, #0]
 8004b06:	4421      	add	r1, r4
 8004b08:	1854      	adds	r4, r2, r1
 8004b0a:	42a3      	cmp	r3, r4
 8004b0c:	6011      	str	r1, [r2, #0]
 8004b0e:	d1e0      	bne.n	8004ad2 <_free_r+0x26>
 8004b10:	681c      	ldr	r4, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	6053      	str	r3, [r2, #4]
 8004b16:	440c      	add	r4, r1
 8004b18:	6014      	str	r4, [r2, #0]
 8004b1a:	e7da      	b.n	8004ad2 <_free_r+0x26>
 8004b1c:	d902      	bls.n	8004b24 <_free_r+0x78>
 8004b1e:	230c      	movs	r3, #12
 8004b20:	6003      	str	r3, [r0, #0]
 8004b22:	e7d6      	b.n	8004ad2 <_free_r+0x26>
 8004b24:	6825      	ldr	r5, [r4, #0]
 8004b26:	1961      	adds	r1, r4, r5
 8004b28:	428b      	cmp	r3, r1
 8004b2a:	bf04      	itt	eq
 8004b2c:	6819      	ldreq	r1, [r3, #0]
 8004b2e:	685b      	ldreq	r3, [r3, #4]
 8004b30:	6063      	str	r3, [r4, #4]
 8004b32:	bf04      	itt	eq
 8004b34:	1949      	addeq	r1, r1, r5
 8004b36:	6021      	streq	r1, [r4, #0]
 8004b38:	6054      	str	r4, [r2, #4]
 8004b3a:	e7ca      	b.n	8004ad2 <_free_r+0x26>
 8004b3c:	b003      	add	sp, #12
 8004b3e:	bd30      	pop	{r4, r5, pc}
 8004b40:	2000a328 	.word	0x2000a328

08004b44 <sbrk_aligned>:
 8004b44:	b570      	push	{r4, r5, r6, lr}
 8004b46:	4e0e      	ldr	r6, [pc, #56]	; (8004b80 <sbrk_aligned+0x3c>)
 8004b48:	460c      	mov	r4, r1
 8004b4a:	6831      	ldr	r1, [r6, #0]
 8004b4c:	4605      	mov	r5, r0
 8004b4e:	b911      	cbnz	r1, 8004b56 <sbrk_aligned+0x12>
 8004b50:	f000 fba6 	bl	80052a0 <_sbrk_r>
 8004b54:	6030      	str	r0, [r6, #0]
 8004b56:	4621      	mov	r1, r4
 8004b58:	4628      	mov	r0, r5
 8004b5a:	f000 fba1 	bl	80052a0 <_sbrk_r>
 8004b5e:	1c43      	adds	r3, r0, #1
 8004b60:	d00a      	beq.n	8004b78 <sbrk_aligned+0x34>
 8004b62:	1cc4      	adds	r4, r0, #3
 8004b64:	f024 0403 	bic.w	r4, r4, #3
 8004b68:	42a0      	cmp	r0, r4
 8004b6a:	d007      	beq.n	8004b7c <sbrk_aligned+0x38>
 8004b6c:	1a21      	subs	r1, r4, r0
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f000 fb96 	bl	80052a0 <_sbrk_r>
 8004b74:	3001      	adds	r0, #1
 8004b76:	d101      	bne.n	8004b7c <sbrk_aligned+0x38>
 8004b78:	f04f 34ff 	mov.w	r4, #4294967295
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}
 8004b80:	2000a32c 	.word	0x2000a32c

08004b84 <_malloc_r>:
 8004b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b88:	1ccd      	adds	r5, r1, #3
 8004b8a:	f025 0503 	bic.w	r5, r5, #3
 8004b8e:	3508      	adds	r5, #8
 8004b90:	2d0c      	cmp	r5, #12
 8004b92:	bf38      	it	cc
 8004b94:	250c      	movcc	r5, #12
 8004b96:	2d00      	cmp	r5, #0
 8004b98:	4607      	mov	r7, r0
 8004b9a:	db01      	blt.n	8004ba0 <_malloc_r+0x1c>
 8004b9c:	42a9      	cmp	r1, r5
 8004b9e:	d905      	bls.n	8004bac <_malloc_r+0x28>
 8004ba0:	230c      	movs	r3, #12
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	2600      	movs	r6, #0
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c80 <_malloc_r+0xfc>
 8004bb0:	f000 f868 	bl	8004c84 <__malloc_lock>
 8004bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8004bb8:	461c      	mov	r4, r3
 8004bba:	bb5c      	cbnz	r4, 8004c14 <_malloc_r+0x90>
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	f7ff ffc0 	bl	8004b44 <sbrk_aligned>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	d155      	bne.n	8004c76 <_malloc_r+0xf2>
 8004bca:	f8d8 4000 	ldr.w	r4, [r8]
 8004bce:	4626      	mov	r6, r4
 8004bd0:	2e00      	cmp	r6, #0
 8004bd2:	d145      	bne.n	8004c60 <_malloc_r+0xdc>
 8004bd4:	2c00      	cmp	r4, #0
 8004bd6:	d048      	beq.n	8004c6a <_malloc_r+0xe6>
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	4631      	mov	r1, r6
 8004bdc:	4638      	mov	r0, r7
 8004bde:	eb04 0903 	add.w	r9, r4, r3
 8004be2:	f000 fb5d 	bl	80052a0 <_sbrk_r>
 8004be6:	4581      	cmp	r9, r0
 8004be8:	d13f      	bne.n	8004c6a <_malloc_r+0xe6>
 8004bea:	6821      	ldr	r1, [r4, #0]
 8004bec:	1a6d      	subs	r5, r5, r1
 8004bee:	4629      	mov	r1, r5
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	f7ff ffa7 	bl	8004b44 <sbrk_aligned>
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	d037      	beq.n	8004c6a <_malloc_r+0xe6>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	442b      	add	r3, r5
 8004bfe:	6023      	str	r3, [r4, #0]
 8004c00:	f8d8 3000 	ldr.w	r3, [r8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d038      	beq.n	8004c7a <_malloc_r+0xf6>
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	42a2      	cmp	r2, r4
 8004c0c:	d12b      	bne.n	8004c66 <_malloc_r+0xe2>
 8004c0e:	2200      	movs	r2, #0
 8004c10:	605a      	str	r2, [r3, #4]
 8004c12:	e00f      	b.n	8004c34 <_malloc_r+0xb0>
 8004c14:	6822      	ldr	r2, [r4, #0]
 8004c16:	1b52      	subs	r2, r2, r5
 8004c18:	d41f      	bmi.n	8004c5a <_malloc_r+0xd6>
 8004c1a:	2a0b      	cmp	r2, #11
 8004c1c:	d917      	bls.n	8004c4e <_malloc_r+0xca>
 8004c1e:	1961      	adds	r1, r4, r5
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	6025      	str	r5, [r4, #0]
 8004c24:	bf18      	it	ne
 8004c26:	6059      	strne	r1, [r3, #4]
 8004c28:	6863      	ldr	r3, [r4, #4]
 8004c2a:	bf08      	it	eq
 8004c2c:	f8c8 1000 	streq.w	r1, [r8]
 8004c30:	5162      	str	r2, [r4, r5]
 8004c32:	604b      	str	r3, [r1, #4]
 8004c34:	4638      	mov	r0, r7
 8004c36:	f104 060b 	add.w	r6, r4, #11
 8004c3a:	f000 f829 	bl	8004c90 <__malloc_unlock>
 8004c3e:	f026 0607 	bic.w	r6, r6, #7
 8004c42:	1d23      	adds	r3, r4, #4
 8004c44:	1af2      	subs	r2, r6, r3
 8004c46:	d0ae      	beq.n	8004ba6 <_malloc_r+0x22>
 8004c48:	1b9b      	subs	r3, r3, r6
 8004c4a:	50a3      	str	r3, [r4, r2]
 8004c4c:	e7ab      	b.n	8004ba6 <_malloc_r+0x22>
 8004c4e:	42a3      	cmp	r3, r4
 8004c50:	6862      	ldr	r2, [r4, #4]
 8004c52:	d1dd      	bne.n	8004c10 <_malloc_r+0x8c>
 8004c54:	f8c8 2000 	str.w	r2, [r8]
 8004c58:	e7ec      	b.n	8004c34 <_malloc_r+0xb0>
 8004c5a:	4623      	mov	r3, r4
 8004c5c:	6864      	ldr	r4, [r4, #4]
 8004c5e:	e7ac      	b.n	8004bba <_malloc_r+0x36>
 8004c60:	4634      	mov	r4, r6
 8004c62:	6876      	ldr	r6, [r6, #4]
 8004c64:	e7b4      	b.n	8004bd0 <_malloc_r+0x4c>
 8004c66:	4613      	mov	r3, r2
 8004c68:	e7cc      	b.n	8004c04 <_malloc_r+0x80>
 8004c6a:	230c      	movs	r3, #12
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	4638      	mov	r0, r7
 8004c70:	f000 f80e 	bl	8004c90 <__malloc_unlock>
 8004c74:	e797      	b.n	8004ba6 <_malloc_r+0x22>
 8004c76:	6025      	str	r5, [r4, #0]
 8004c78:	e7dc      	b.n	8004c34 <_malloc_r+0xb0>
 8004c7a:	605b      	str	r3, [r3, #4]
 8004c7c:	deff      	udf	#255	; 0xff
 8004c7e:	bf00      	nop
 8004c80:	2000a328 	.word	0x2000a328

08004c84 <__malloc_lock>:
 8004c84:	4801      	ldr	r0, [pc, #4]	; (8004c8c <__malloc_lock+0x8>)
 8004c86:	f7ff bf0f 	b.w	8004aa8 <__retarget_lock_acquire_recursive>
 8004c8a:	bf00      	nop
 8004c8c:	2000a324 	.word	0x2000a324

08004c90 <__malloc_unlock>:
 8004c90:	4801      	ldr	r0, [pc, #4]	; (8004c98 <__malloc_unlock+0x8>)
 8004c92:	f7ff bf0a 	b.w	8004aaa <__retarget_lock_release_recursive>
 8004c96:	bf00      	nop
 8004c98:	2000a324 	.word	0x2000a324

08004c9c <__ssputs_r>:
 8004c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca0:	688e      	ldr	r6, [r1, #8]
 8004ca2:	461f      	mov	r7, r3
 8004ca4:	42be      	cmp	r6, r7
 8004ca6:	680b      	ldr	r3, [r1, #0]
 8004ca8:	4682      	mov	sl, r0
 8004caa:	460c      	mov	r4, r1
 8004cac:	4690      	mov	r8, r2
 8004cae:	d82c      	bhi.n	8004d0a <__ssputs_r+0x6e>
 8004cb0:	898a      	ldrh	r2, [r1, #12]
 8004cb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cb6:	d026      	beq.n	8004d06 <__ssputs_r+0x6a>
 8004cb8:	6965      	ldr	r5, [r4, #20]
 8004cba:	6909      	ldr	r1, [r1, #16]
 8004cbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cc0:	eba3 0901 	sub.w	r9, r3, r1
 8004cc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cc8:	1c7b      	adds	r3, r7, #1
 8004cca:	444b      	add	r3, r9
 8004ccc:	106d      	asrs	r5, r5, #1
 8004cce:	429d      	cmp	r5, r3
 8004cd0:	bf38      	it	cc
 8004cd2:	461d      	movcc	r5, r3
 8004cd4:	0553      	lsls	r3, r2, #21
 8004cd6:	d527      	bpl.n	8004d28 <__ssputs_r+0x8c>
 8004cd8:	4629      	mov	r1, r5
 8004cda:	f7ff ff53 	bl	8004b84 <_malloc_r>
 8004cde:	4606      	mov	r6, r0
 8004ce0:	b360      	cbz	r0, 8004d3c <__ssputs_r+0xa0>
 8004ce2:	6921      	ldr	r1, [r4, #16]
 8004ce4:	464a      	mov	r2, r9
 8004ce6:	f000 faeb 	bl	80052c0 <memcpy>
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf4:	81a3      	strh	r3, [r4, #12]
 8004cf6:	6126      	str	r6, [r4, #16]
 8004cf8:	6165      	str	r5, [r4, #20]
 8004cfa:	444e      	add	r6, r9
 8004cfc:	eba5 0509 	sub.w	r5, r5, r9
 8004d00:	6026      	str	r6, [r4, #0]
 8004d02:	60a5      	str	r5, [r4, #8]
 8004d04:	463e      	mov	r6, r7
 8004d06:	42be      	cmp	r6, r7
 8004d08:	d900      	bls.n	8004d0c <__ssputs_r+0x70>
 8004d0a:	463e      	mov	r6, r7
 8004d0c:	6820      	ldr	r0, [r4, #0]
 8004d0e:	4632      	mov	r2, r6
 8004d10:	4641      	mov	r1, r8
 8004d12:	f000 faab 	bl	800526c <memmove>
 8004d16:	68a3      	ldr	r3, [r4, #8]
 8004d18:	1b9b      	subs	r3, r3, r6
 8004d1a:	60a3      	str	r3, [r4, #8]
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	4433      	add	r3, r6
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	2000      	movs	r0, #0
 8004d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d28:	462a      	mov	r2, r5
 8004d2a:	f000 fad7 	bl	80052dc <_realloc_r>
 8004d2e:	4606      	mov	r6, r0
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d1e0      	bne.n	8004cf6 <__ssputs_r+0x5a>
 8004d34:	6921      	ldr	r1, [r4, #16]
 8004d36:	4650      	mov	r0, sl
 8004d38:	f7ff feb8 	bl	8004aac <_free_r>
 8004d3c:	230c      	movs	r3, #12
 8004d3e:	f8ca 3000 	str.w	r3, [sl]
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d48:	81a3      	strh	r3, [r4, #12]
 8004d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4e:	e7e9      	b.n	8004d24 <__ssputs_r+0x88>

08004d50 <_svfiprintf_r>:
 8004d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d54:	4698      	mov	r8, r3
 8004d56:	898b      	ldrh	r3, [r1, #12]
 8004d58:	061b      	lsls	r3, r3, #24
 8004d5a:	b09d      	sub	sp, #116	; 0x74
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	460d      	mov	r5, r1
 8004d60:	4614      	mov	r4, r2
 8004d62:	d50e      	bpl.n	8004d82 <_svfiprintf_r+0x32>
 8004d64:	690b      	ldr	r3, [r1, #16]
 8004d66:	b963      	cbnz	r3, 8004d82 <_svfiprintf_r+0x32>
 8004d68:	2140      	movs	r1, #64	; 0x40
 8004d6a:	f7ff ff0b 	bl	8004b84 <_malloc_r>
 8004d6e:	6028      	str	r0, [r5, #0]
 8004d70:	6128      	str	r0, [r5, #16]
 8004d72:	b920      	cbnz	r0, 8004d7e <_svfiprintf_r+0x2e>
 8004d74:	230c      	movs	r3, #12
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7c:	e0d0      	b.n	8004f20 <_svfiprintf_r+0x1d0>
 8004d7e:	2340      	movs	r3, #64	; 0x40
 8004d80:	616b      	str	r3, [r5, #20]
 8004d82:	2300      	movs	r3, #0
 8004d84:	9309      	str	r3, [sp, #36]	; 0x24
 8004d86:	2320      	movs	r3, #32
 8004d88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d90:	2330      	movs	r3, #48	; 0x30
 8004d92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004f38 <_svfiprintf_r+0x1e8>
 8004d96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d9a:	f04f 0901 	mov.w	r9, #1
 8004d9e:	4623      	mov	r3, r4
 8004da0:	469a      	mov	sl, r3
 8004da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004da6:	b10a      	cbz	r2, 8004dac <_svfiprintf_r+0x5c>
 8004da8:	2a25      	cmp	r2, #37	; 0x25
 8004daa:	d1f9      	bne.n	8004da0 <_svfiprintf_r+0x50>
 8004dac:	ebba 0b04 	subs.w	fp, sl, r4
 8004db0:	d00b      	beq.n	8004dca <_svfiprintf_r+0x7a>
 8004db2:	465b      	mov	r3, fp
 8004db4:	4622      	mov	r2, r4
 8004db6:	4629      	mov	r1, r5
 8004db8:	4638      	mov	r0, r7
 8004dba:	f7ff ff6f 	bl	8004c9c <__ssputs_r>
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	f000 80a9 	beq.w	8004f16 <_svfiprintf_r+0x1c6>
 8004dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dc6:	445a      	add	r2, fp
 8004dc8:	9209      	str	r2, [sp, #36]	; 0x24
 8004dca:	f89a 3000 	ldrb.w	r3, [sl]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80a1 	beq.w	8004f16 <_svfiprintf_r+0x1c6>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dde:	f10a 0a01 	add.w	sl, sl, #1
 8004de2:	9304      	str	r3, [sp, #16]
 8004de4:	9307      	str	r3, [sp, #28]
 8004de6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dea:	931a      	str	r3, [sp, #104]	; 0x68
 8004dec:	4654      	mov	r4, sl
 8004dee:	2205      	movs	r2, #5
 8004df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004df4:	4850      	ldr	r0, [pc, #320]	; (8004f38 <_svfiprintf_r+0x1e8>)
 8004df6:	f7fb fa13 	bl	8000220 <memchr>
 8004dfa:	9a04      	ldr	r2, [sp, #16]
 8004dfc:	b9d8      	cbnz	r0, 8004e36 <_svfiprintf_r+0xe6>
 8004dfe:	06d0      	lsls	r0, r2, #27
 8004e00:	bf44      	itt	mi
 8004e02:	2320      	movmi	r3, #32
 8004e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e08:	0711      	lsls	r1, r2, #28
 8004e0a:	bf44      	itt	mi
 8004e0c:	232b      	movmi	r3, #43	; 0x2b
 8004e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e12:	f89a 3000 	ldrb.w	r3, [sl]
 8004e16:	2b2a      	cmp	r3, #42	; 0x2a
 8004e18:	d015      	beq.n	8004e46 <_svfiprintf_r+0xf6>
 8004e1a:	9a07      	ldr	r2, [sp, #28]
 8004e1c:	4654      	mov	r4, sl
 8004e1e:	2000      	movs	r0, #0
 8004e20:	f04f 0c0a 	mov.w	ip, #10
 8004e24:	4621      	mov	r1, r4
 8004e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e2a:	3b30      	subs	r3, #48	; 0x30
 8004e2c:	2b09      	cmp	r3, #9
 8004e2e:	d94d      	bls.n	8004ecc <_svfiprintf_r+0x17c>
 8004e30:	b1b0      	cbz	r0, 8004e60 <_svfiprintf_r+0x110>
 8004e32:	9207      	str	r2, [sp, #28]
 8004e34:	e014      	b.n	8004e60 <_svfiprintf_r+0x110>
 8004e36:	eba0 0308 	sub.w	r3, r0, r8
 8004e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	9304      	str	r3, [sp, #16]
 8004e42:	46a2      	mov	sl, r4
 8004e44:	e7d2      	b.n	8004dec <_svfiprintf_r+0x9c>
 8004e46:	9b03      	ldr	r3, [sp, #12]
 8004e48:	1d19      	adds	r1, r3, #4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	9103      	str	r1, [sp, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bfbb      	ittet	lt
 8004e52:	425b      	neglt	r3, r3
 8004e54:	f042 0202 	orrlt.w	r2, r2, #2
 8004e58:	9307      	strge	r3, [sp, #28]
 8004e5a:	9307      	strlt	r3, [sp, #28]
 8004e5c:	bfb8      	it	lt
 8004e5e:	9204      	strlt	r2, [sp, #16]
 8004e60:	7823      	ldrb	r3, [r4, #0]
 8004e62:	2b2e      	cmp	r3, #46	; 0x2e
 8004e64:	d10c      	bne.n	8004e80 <_svfiprintf_r+0x130>
 8004e66:	7863      	ldrb	r3, [r4, #1]
 8004e68:	2b2a      	cmp	r3, #42	; 0x2a
 8004e6a:	d134      	bne.n	8004ed6 <_svfiprintf_r+0x186>
 8004e6c:	9b03      	ldr	r3, [sp, #12]
 8004e6e:	1d1a      	adds	r2, r3, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	9203      	str	r2, [sp, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bfb8      	it	lt
 8004e78:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e7c:	3402      	adds	r4, #2
 8004e7e:	9305      	str	r3, [sp, #20]
 8004e80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004f48 <_svfiprintf_r+0x1f8>
 8004e84:	7821      	ldrb	r1, [r4, #0]
 8004e86:	2203      	movs	r2, #3
 8004e88:	4650      	mov	r0, sl
 8004e8a:	f7fb f9c9 	bl	8000220 <memchr>
 8004e8e:	b138      	cbz	r0, 8004ea0 <_svfiprintf_r+0x150>
 8004e90:	9b04      	ldr	r3, [sp, #16]
 8004e92:	eba0 000a 	sub.w	r0, r0, sl
 8004e96:	2240      	movs	r2, #64	; 0x40
 8004e98:	4082      	lsls	r2, r0
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	3401      	adds	r4, #1
 8004e9e:	9304      	str	r3, [sp, #16]
 8004ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea4:	4825      	ldr	r0, [pc, #148]	; (8004f3c <_svfiprintf_r+0x1ec>)
 8004ea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004eaa:	2206      	movs	r2, #6
 8004eac:	f7fb f9b8 	bl	8000220 <memchr>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	d038      	beq.n	8004f26 <_svfiprintf_r+0x1d6>
 8004eb4:	4b22      	ldr	r3, [pc, #136]	; (8004f40 <_svfiprintf_r+0x1f0>)
 8004eb6:	bb1b      	cbnz	r3, 8004f00 <_svfiprintf_r+0x1b0>
 8004eb8:	9b03      	ldr	r3, [sp, #12]
 8004eba:	3307      	adds	r3, #7
 8004ebc:	f023 0307 	bic.w	r3, r3, #7
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	9303      	str	r3, [sp, #12]
 8004ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec6:	4433      	add	r3, r6
 8004ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eca:	e768      	b.n	8004d9e <_svfiprintf_r+0x4e>
 8004ecc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	2001      	movs	r0, #1
 8004ed4:	e7a6      	b.n	8004e24 <_svfiprintf_r+0xd4>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	3401      	adds	r4, #1
 8004eda:	9305      	str	r3, [sp, #20]
 8004edc:	4619      	mov	r1, r3
 8004ede:	f04f 0c0a 	mov.w	ip, #10
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ee8:	3a30      	subs	r2, #48	; 0x30
 8004eea:	2a09      	cmp	r2, #9
 8004eec:	d903      	bls.n	8004ef6 <_svfiprintf_r+0x1a6>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0c6      	beq.n	8004e80 <_svfiprintf_r+0x130>
 8004ef2:	9105      	str	r1, [sp, #20]
 8004ef4:	e7c4      	b.n	8004e80 <_svfiprintf_r+0x130>
 8004ef6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004efa:	4604      	mov	r4, r0
 8004efc:	2301      	movs	r3, #1
 8004efe:	e7f0      	b.n	8004ee2 <_svfiprintf_r+0x192>
 8004f00:	ab03      	add	r3, sp, #12
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	462a      	mov	r2, r5
 8004f06:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <_svfiprintf_r+0x1f4>)
 8004f08:	a904      	add	r1, sp, #16
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	f3af 8000 	nop.w
 8004f10:	1c42      	adds	r2, r0, #1
 8004f12:	4606      	mov	r6, r0
 8004f14:	d1d6      	bne.n	8004ec4 <_svfiprintf_r+0x174>
 8004f16:	89ab      	ldrh	r3, [r5, #12]
 8004f18:	065b      	lsls	r3, r3, #25
 8004f1a:	f53f af2d 	bmi.w	8004d78 <_svfiprintf_r+0x28>
 8004f1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f20:	b01d      	add	sp, #116	; 0x74
 8004f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f26:	ab03      	add	r3, sp, #12
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	462a      	mov	r2, r5
 8004f2c:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <_svfiprintf_r+0x1f4>)
 8004f2e:	a904      	add	r1, sp, #16
 8004f30:	4638      	mov	r0, r7
 8004f32:	f000 f879 	bl	8005028 <_printf_i>
 8004f36:	e7eb      	b.n	8004f10 <_svfiprintf_r+0x1c0>
 8004f38:	080069c9 	.word	0x080069c9
 8004f3c:	080069d3 	.word	0x080069d3
 8004f40:	00000000 	.word	0x00000000
 8004f44:	08004c9d 	.word	0x08004c9d
 8004f48:	080069cf 	.word	0x080069cf

08004f4c <_printf_common>:
 8004f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f50:	4616      	mov	r6, r2
 8004f52:	4699      	mov	r9, r3
 8004f54:	688a      	ldr	r2, [r1, #8]
 8004f56:	690b      	ldr	r3, [r1, #16]
 8004f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	bfb8      	it	lt
 8004f60:	4613      	movlt	r3, r2
 8004f62:	6033      	str	r3, [r6, #0]
 8004f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f68:	4607      	mov	r7, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	b10a      	cbz	r2, 8004f72 <_printf_common+0x26>
 8004f6e:	3301      	adds	r3, #1
 8004f70:	6033      	str	r3, [r6, #0]
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	0699      	lsls	r1, r3, #26
 8004f76:	bf42      	ittt	mi
 8004f78:	6833      	ldrmi	r3, [r6, #0]
 8004f7a:	3302      	addmi	r3, #2
 8004f7c:	6033      	strmi	r3, [r6, #0]
 8004f7e:	6825      	ldr	r5, [r4, #0]
 8004f80:	f015 0506 	ands.w	r5, r5, #6
 8004f84:	d106      	bne.n	8004f94 <_printf_common+0x48>
 8004f86:	f104 0a19 	add.w	sl, r4, #25
 8004f8a:	68e3      	ldr	r3, [r4, #12]
 8004f8c:	6832      	ldr	r2, [r6, #0]
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	42ab      	cmp	r3, r5
 8004f92:	dc26      	bgt.n	8004fe2 <_printf_common+0x96>
 8004f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f98:	1e13      	subs	r3, r2, #0
 8004f9a:	6822      	ldr	r2, [r4, #0]
 8004f9c:	bf18      	it	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	0692      	lsls	r2, r2, #26
 8004fa2:	d42b      	bmi.n	8004ffc <_printf_common+0xb0>
 8004fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fa8:	4649      	mov	r1, r9
 8004faa:	4638      	mov	r0, r7
 8004fac:	47c0      	blx	r8
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d01e      	beq.n	8004ff0 <_printf_common+0xa4>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	6922      	ldr	r2, [r4, #16]
 8004fb6:	f003 0306 	and.w	r3, r3, #6
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	bf02      	ittt	eq
 8004fbe:	68e5      	ldreq	r5, [r4, #12]
 8004fc0:	6833      	ldreq	r3, [r6, #0]
 8004fc2:	1aed      	subeq	r5, r5, r3
 8004fc4:	68a3      	ldr	r3, [r4, #8]
 8004fc6:	bf0c      	ite	eq
 8004fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fcc:	2500      	movne	r5, #0
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	bfc4      	itt	gt
 8004fd2:	1a9b      	subgt	r3, r3, r2
 8004fd4:	18ed      	addgt	r5, r5, r3
 8004fd6:	2600      	movs	r6, #0
 8004fd8:	341a      	adds	r4, #26
 8004fda:	42b5      	cmp	r5, r6
 8004fdc:	d11a      	bne.n	8005014 <_printf_common+0xc8>
 8004fde:	2000      	movs	r0, #0
 8004fe0:	e008      	b.n	8004ff4 <_printf_common+0xa8>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	4652      	mov	r2, sl
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	4638      	mov	r0, r7
 8004fea:	47c0      	blx	r8
 8004fec:	3001      	adds	r0, #1
 8004fee:	d103      	bne.n	8004ff8 <_printf_common+0xac>
 8004ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff8:	3501      	adds	r5, #1
 8004ffa:	e7c6      	b.n	8004f8a <_printf_common+0x3e>
 8004ffc:	18e1      	adds	r1, r4, r3
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	2030      	movs	r0, #48	; 0x30
 8005002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005006:	4422      	add	r2, r4
 8005008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800500c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005010:	3302      	adds	r3, #2
 8005012:	e7c7      	b.n	8004fa4 <_printf_common+0x58>
 8005014:	2301      	movs	r3, #1
 8005016:	4622      	mov	r2, r4
 8005018:	4649      	mov	r1, r9
 800501a:	4638      	mov	r0, r7
 800501c:	47c0      	blx	r8
 800501e:	3001      	adds	r0, #1
 8005020:	d0e6      	beq.n	8004ff0 <_printf_common+0xa4>
 8005022:	3601      	adds	r6, #1
 8005024:	e7d9      	b.n	8004fda <_printf_common+0x8e>
	...

08005028 <_printf_i>:
 8005028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800502c:	7e0f      	ldrb	r7, [r1, #24]
 800502e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005030:	2f78      	cmp	r7, #120	; 0x78
 8005032:	4691      	mov	r9, r2
 8005034:	4680      	mov	r8, r0
 8005036:	460c      	mov	r4, r1
 8005038:	469a      	mov	sl, r3
 800503a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800503e:	d807      	bhi.n	8005050 <_printf_i+0x28>
 8005040:	2f62      	cmp	r7, #98	; 0x62
 8005042:	d80a      	bhi.n	800505a <_printf_i+0x32>
 8005044:	2f00      	cmp	r7, #0
 8005046:	f000 80d4 	beq.w	80051f2 <_printf_i+0x1ca>
 800504a:	2f58      	cmp	r7, #88	; 0x58
 800504c:	f000 80c0 	beq.w	80051d0 <_printf_i+0x1a8>
 8005050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005058:	e03a      	b.n	80050d0 <_printf_i+0xa8>
 800505a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800505e:	2b15      	cmp	r3, #21
 8005060:	d8f6      	bhi.n	8005050 <_printf_i+0x28>
 8005062:	a101      	add	r1, pc, #4	; (adr r1, 8005068 <_printf_i+0x40>)
 8005064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005068:	080050c1 	.word	0x080050c1
 800506c:	080050d5 	.word	0x080050d5
 8005070:	08005051 	.word	0x08005051
 8005074:	08005051 	.word	0x08005051
 8005078:	08005051 	.word	0x08005051
 800507c:	08005051 	.word	0x08005051
 8005080:	080050d5 	.word	0x080050d5
 8005084:	08005051 	.word	0x08005051
 8005088:	08005051 	.word	0x08005051
 800508c:	08005051 	.word	0x08005051
 8005090:	08005051 	.word	0x08005051
 8005094:	080051d9 	.word	0x080051d9
 8005098:	08005101 	.word	0x08005101
 800509c:	08005193 	.word	0x08005193
 80050a0:	08005051 	.word	0x08005051
 80050a4:	08005051 	.word	0x08005051
 80050a8:	080051fb 	.word	0x080051fb
 80050ac:	08005051 	.word	0x08005051
 80050b0:	08005101 	.word	0x08005101
 80050b4:	08005051 	.word	0x08005051
 80050b8:	08005051 	.word	0x08005051
 80050bc:	0800519b 	.word	0x0800519b
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	1d1a      	adds	r2, r3, #4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	602a      	str	r2, [r5, #0]
 80050c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050d0:	2301      	movs	r3, #1
 80050d2:	e09f      	b.n	8005214 <_printf_i+0x1ec>
 80050d4:	6820      	ldr	r0, [r4, #0]
 80050d6:	682b      	ldr	r3, [r5, #0]
 80050d8:	0607      	lsls	r7, r0, #24
 80050da:	f103 0104 	add.w	r1, r3, #4
 80050de:	6029      	str	r1, [r5, #0]
 80050e0:	d501      	bpl.n	80050e6 <_printf_i+0xbe>
 80050e2:	681e      	ldr	r6, [r3, #0]
 80050e4:	e003      	b.n	80050ee <_printf_i+0xc6>
 80050e6:	0646      	lsls	r6, r0, #25
 80050e8:	d5fb      	bpl.n	80050e2 <_printf_i+0xba>
 80050ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80050ee:	2e00      	cmp	r6, #0
 80050f0:	da03      	bge.n	80050fa <_printf_i+0xd2>
 80050f2:	232d      	movs	r3, #45	; 0x2d
 80050f4:	4276      	negs	r6, r6
 80050f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050fa:	485a      	ldr	r0, [pc, #360]	; (8005264 <_printf_i+0x23c>)
 80050fc:	230a      	movs	r3, #10
 80050fe:	e012      	b.n	8005126 <_printf_i+0xfe>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	6820      	ldr	r0, [r4, #0]
 8005104:	1d19      	adds	r1, r3, #4
 8005106:	6029      	str	r1, [r5, #0]
 8005108:	0605      	lsls	r5, r0, #24
 800510a:	d501      	bpl.n	8005110 <_printf_i+0xe8>
 800510c:	681e      	ldr	r6, [r3, #0]
 800510e:	e002      	b.n	8005116 <_printf_i+0xee>
 8005110:	0641      	lsls	r1, r0, #25
 8005112:	d5fb      	bpl.n	800510c <_printf_i+0xe4>
 8005114:	881e      	ldrh	r6, [r3, #0]
 8005116:	4853      	ldr	r0, [pc, #332]	; (8005264 <_printf_i+0x23c>)
 8005118:	2f6f      	cmp	r7, #111	; 0x6f
 800511a:	bf0c      	ite	eq
 800511c:	2308      	moveq	r3, #8
 800511e:	230a      	movne	r3, #10
 8005120:	2100      	movs	r1, #0
 8005122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005126:	6865      	ldr	r5, [r4, #4]
 8005128:	60a5      	str	r5, [r4, #8]
 800512a:	2d00      	cmp	r5, #0
 800512c:	bfa2      	ittt	ge
 800512e:	6821      	ldrge	r1, [r4, #0]
 8005130:	f021 0104 	bicge.w	r1, r1, #4
 8005134:	6021      	strge	r1, [r4, #0]
 8005136:	b90e      	cbnz	r6, 800513c <_printf_i+0x114>
 8005138:	2d00      	cmp	r5, #0
 800513a:	d04b      	beq.n	80051d4 <_printf_i+0x1ac>
 800513c:	4615      	mov	r5, r2
 800513e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005142:	fb03 6711 	mls	r7, r3, r1, r6
 8005146:	5dc7      	ldrb	r7, [r0, r7]
 8005148:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800514c:	4637      	mov	r7, r6
 800514e:	42bb      	cmp	r3, r7
 8005150:	460e      	mov	r6, r1
 8005152:	d9f4      	bls.n	800513e <_printf_i+0x116>
 8005154:	2b08      	cmp	r3, #8
 8005156:	d10b      	bne.n	8005170 <_printf_i+0x148>
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	07de      	lsls	r6, r3, #31
 800515c:	d508      	bpl.n	8005170 <_printf_i+0x148>
 800515e:	6923      	ldr	r3, [r4, #16]
 8005160:	6861      	ldr	r1, [r4, #4]
 8005162:	4299      	cmp	r1, r3
 8005164:	bfde      	ittt	le
 8005166:	2330      	movle	r3, #48	; 0x30
 8005168:	f805 3c01 	strble.w	r3, [r5, #-1]
 800516c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005170:	1b52      	subs	r2, r2, r5
 8005172:	6122      	str	r2, [r4, #16]
 8005174:	f8cd a000 	str.w	sl, [sp]
 8005178:	464b      	mov	r3, r9
 800517a:	aa03      	add	r2, sp, #12
 800517c:	4621      	mov	r1, r4
 800517e:	4640      	mov	r0, r8
 8005180:	f7ff fee4 	bl	8004f4c <_printf_common>
 8005184:	3001      	adds	r0, #1
 8005186:	d14a      	bne.n	800521e <_printf_i+0x1f6>
 8005188:	f04f 30ff 	mov.w	r0, #4294967295
 800518c:	b004      	add	sp, #16
 800518e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	f043 0320 	orr.w	r3, r3, #32
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	4833      	ldr	r0, [pc, #204]	; (8005268 <_printf_i+0x240>)
 800519c:	2778      	movs	r7, #120	; 0x78
 800519e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	6829      	ldr	r1, [r5, #0]
 80051a6:	061f      	lsls	r7, r3, #24
 80051a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80051ac:	d402      	bmi.n	80051b4 <_printf_i+0x18c>
 80051ae:	065f      	lsls	r7, r3, #25
 80051b0:	bf48      	it	mi
 80051b2:	b2b6      	uxthmi	r6, r6
 80051b4:	07df      	lsls	r7, r3, #31
 80051b6:	bf48      	it	mi
 80051b8:	f043 0320 	orrmi.w	r3, r3, #32
 80051bc:	6029      	str	r1, [r5, #0]
 80051be:	bf48      	it	mi
 80051c0:	6023      	strmi	r3, [r4, #0]
 80051c2:	b91e      	cbnz	r6, 80051cc <_printf_i+0x1a4>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	f023 0320 	bic.w	r3, r3, #32
 80051ca:	6023      	str	r3, [r4, #0]
 80051cc:	2310      	movs	r3, #16
 80051ce:	e7a7      	b.n	8005120 <_printf_i+0xf8>
 80051d0:	4824      	ldr	r0, [pc, #144]	; (8005264 <_printf_i+0x23c>)
 80051d2:	e7e4      	b.n	800519e <_printf_i+0x176>
 80051d4:	4615      	mov	r5, r2
 80051d6:	e7bd      	b.n	8005154 <_printf_i+0x12c>
 80051d8:	682b      	ldr	r3, [r5, #0]
 80051da:	6826      	ldr	r6, [r4, #0]
 80051dc:	6961      	ldr	r1, [r4, #20]
 80051de:	1d18      	adds	r0, r3, #4
 80051e0:	6028      	str	r0, [r5, #0]
 80051e2:	0635      	lsls	r5, r6, #24
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	d501      	bpl.n	80051ec <_printf_i+0x1c4>
 80051e8:	6019      	str	r1, [r3, #0]
 80051ea:	e002      	b.n	80051f2 <_printf_i+0x1ca>
 80051ec:	0670      	lsls	r0, r6, #25
 80051ee:	d5fb      	bpl.n	80051e8 <_printf_i+0x1c0>
 80051f0:	8019      	strh	r1, [r3, #0]
 80051f2:	2300      	movs	r3, #0
 80051f4:	6123      	str	r3, [r4, #16]
 80051f6:	4615      	mov	r5, r2
 80051f8:	e7bc      	b.n	8005174 <_printf_i+0x14c>
 80051fa:	682b      	ldr	r3, [r5, #0]
 80051fc:	1d1a      	adds	r2, r3, #4
 80051fe:	602a      	str	r2, [r5, #0]
 8005200:	681d      	ldr	r5, [r3, #0]
 8005202:	6862      	ldr	r2, [r4, #4]
 8005204:	2100      	movs	r1, #0
 8005206:	4628      	mov	r0, r5
 8005208:	f7fb f80a 	bl	8000220 <memchr>
 800520c:	b108      	cbz	r0, 8005212 <_printf_i+0x1ea>
 800520e:	1b40      	subs	r0, r0, r5
 8005210:	6060      	str	r0, [r4, #4]
 8005212:	6863      	ldr	r3, [r4, #4]
 8005214:	6123      	str	r3, [r4, #16]
 8005216:	2300      	movs	r3, #0
 8005218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800521c:	e7aa      	b.n	8005174 <_printf_i+0x14c>
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	462a      	mov	r2, r5
 8005222:	4649      	mov	r1, r9
 8005224:	4640      	mov	r0, r8
 8005226:	47d0      	blx	sl
 8005228:	3001      	adds	r0, #1
 800522a:	d0ad      	beq.n	8005188 <_printf_i+0x160>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	079b      	lsls	r3, r3, #30
 8005230:	d413      	bmi.n	800525a <_printf_i+0x232>
 8005232:	68e0      	ldr	r0, [r4, #12]
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	4298      	cmp	r0, r3
 8005238:	bfb8      	it	lt
 800523a:	4618      	movlt	r0, r3
 800523c:	e7a6      	b.n	800518c <_printf_i+0x164>
 800523e:	2301      	movs	r3, #1
 8005240:	4632      	mov	r2, r6
 8005242:	4649      	mov	r1, r9
 8005244:	4640      	mov	r0, r8
 8005246:	47d0      	blx	sl
 8005248:	3001      	adds	r0, #1
 800524a:	d09d      	beq.n	8005188 <_printf_i+0x160>
 800524c:	3501      	adds	r5, #1
 800524e:	68e3      	ldr	r3, [r4, #12]
 8005250:	9903      	ldr	r1, [sp, #12]
 8005252:	1a5b      	subs	r3, r3, r1
 8005254:	42ab      	cmp	r3, r5
 8005256:	dcf2      	bgt.n	800523e <_printf_i+0x216>
 8005258:	e7eb      	b.n	8005232 <_printf_i+0x20a>
 800525a:	2500      	movs	r5, #0
 800525c:	f104 0619 	add.w	r6, r4, #25
 8005260:	e7f5      	b.n	800524e <_printf_i+0x226>
 8005262:	bf00      	nop
 8005264:	080069da 	.word	0x080069da
 8005268:	080069eb 	.word	0x080069eb

0800526c <memmove>:
 800526c:	4288      	cmp	r0, r1
 800526e:	b510      	push	{r4, lr}
 8005270:	eb01 0402 	add.w	r4, r1, r2
 8005274:	d902      	bls.n	800527c <memmove+0x10>
 8005276:	4284      	cmp	r4, r0
 8005278:	4623      	mov	r3, r4
 800527a:	d807      	bhi.n	800528c <memmove+0x20>
 800527c:	1e43      	subs	r3, r0, #1
 800527e:	42a1      	cmp	r1, r4
 8005280:	d008      	beq.n	8005294 <memmove+0x28>
 8005282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800528a:	e7f8      	b.n	800527e <memmove+0x12>
 800528c:	4402      	add	r2, r0
 800528e:	4601      	mov	r1, r0
 8005290:	428a      	cmp	r2, r1
 8005292:	d100      	bne.n	8005296 <memmove+0x2a>
 8005294:	bd10      	pop	{r4, pc}
 8005296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800529a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800529e:	e7f7      	b.n	8005290 <memmove+0x24>

080052a0 <_sbrk_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4d06      	ldr	r5, [pc, #24]	; (80052bc <_sbrk_r+0x1c>)
 80052a4:	2300      	movs	r3, #0
 80052a6:	4604      	mov	r4, r0
 80052a8:	4608      	mov	r0, r1
 80052aa:	602b      	str	r3, [r5, #0]
 80052ac:	f7fc faea 	bl	8001884 <_sbrk>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_sbrk_r+0x1a>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_sbrk_r+0x1a>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	2000a320 	.word	0x2000a320

080052c0 <memcpy>:
 80052c0:	440a      	add	r2, r1
 80052c2:	4291      	cmp	r1, r2
 80052c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80052c8:	d100      	bne.n	80052cc <memcpy+0xc>
 80052ca:	4770      	bx	lr
 80052cc:	b510      	push	{r4, lr}
 80052ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052d6:	4291      	cmp	r1, r2
 80052d8:	d1f9      	bne.n	80052ce <memcpy+0xe>
 80052da:	bd10      	pop	{r4, pc}

080052dc <_realloc_r>:
 80052dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052e0:	4680      	mov	r8, r0
 80052e2:	4614      	mov	r4, r2
 80052e4:	460e      	mov	r6, r1
 80052e6:	b921      	cbnz	r1, 80052f2 <_realloc_r+0x16>
 80052e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ec:	4611      	mov	r1, r2
 80052ee:	f7ff bc49 	b.w	8004b84 <_malloc_r>
 80052f2:	b92a      	cbnz	r2, 8005300 <_realloc_r+0x24>
 80052f4:	f7ff fbda 	bl	8004aac <_free_r>
 80052f8:	4625      	mov	r5, r4
 80052fa:	4628      	mov	r0, r5
 80052fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005300:	f000 f81b 	bl	800533a <_malloc_usable_size_r>
 8005304:	4284      	cmp	r4, r0
 8005306:	4607      	mov	r7, r0
 8005308:	d802      	bhi.n	8005310 <_realloc_r+0x34>
 800530a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800530e:	d812      	bhi.n	8005336 <_realloc_r+0x5a>
 8005310:	4621      	mov	r1, r4
 8005312:	4640      	mov	r0, r8
 8005314:	f7ff fc36 	bl	8004b84 <_malloc_r>
 8005318:	4605      	mov	r5, r0
 800531a:	2800      	cmp	r0, #0
 800531c:	d0ed      	beq.n	80052fa <_realloc_r+0x1e>
 800531e:	42bc      	cmp	r4, r7
 8005320:	4622      	mov	r2, r4
 8005322:	4631      	mov	r1, r6
 8005324:	bf28      	it	cs
 8005326:	463a      	movcs	r2, r7
 8005328:	f7ff ffca 	bl	80052c0 <memcpy>
 800532c:	4631      	mov	r1, r6
 800532e:	4640      	mov	r0, r8
 8005330:	f7ff fbbc 	bl	8004aac <_free_r>
 8005334:	e7e1      	b.n	80052fa <_realloc_r+0x1e>
 8005336:	4635      	mov	r5, r6
 8005338:	e7df      	b.n	80052fa <_realloc_r+0x1e>

0800533a <_malloc_usable_size_r>:
 800533a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800533e:	1f18      	subs	r0, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	bfbc      	itt	lt
 8005344:	580b      	ldrlt	r3, [r1, r0]
 8005346:	18c0      	addlt	r0, r0, r3
 8005348:	4770      	bx	lr
	...

0800534c <_init>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr

08005358 <_fini>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr
