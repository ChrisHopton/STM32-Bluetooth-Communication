
MPDD_Final_Project_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aff8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800b1c0  0800b1c0  0001b1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b238  0800b238  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b238  0800b238  0001b238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b240  0800b240  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b240  0800b240  0001b240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b244  0800b244  0001b244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800b248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e0  2000017c  0800b3c4  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000225c  0800b3c4  0002225c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce49  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004127  00000000  00000000  0003d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  00041160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001239  00000000  00000000  000428f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029191  00000000  00000000  00043b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ecba  00000000  00000000  0006ccc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7542  00000000  00000000  0008b97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000668c  00000000  00000000  00182ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0018954c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000017c 	.word	0x2000017c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b1a8 	.word	0x0800b1a8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000180 	.word	0x20000180
 8000204:	0800b1a8 	.word	0x0800b1a8

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <ILI9163_writeCommand+0x44>)
 8000526:	f001 fdd3 	bl	80020d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000530:	4809      	ldr	r0, [pc, #36]	; (8000558 <ILI9163_writeCommand+0x44>)
 8000532:	f001 fdcd 	bl	80020d0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 8000536:	1df9      	adds	r1, r7, #7
 8000538:	2300      	movs	r3, #0
 800053a:	2201      	movs	r2, #1
 800053c:	4807      	ldr	r0, [pc, #28]	; (800055c <ILI9163_writeCommand+0x48>)
 800053e:	f004 fa32 	bl	80049a6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <ILI9163_writeCommand+0x44>)
 800054a:	f001 fdc1 	bl	80020d0 <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40020400 	.word	0x40020400
 800055c:	20000198 	.word	0x20000198

08000560 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <ILI9163_writeData+0x44>)
 8000572:	f001 fdad 	bl	80020d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057c:	4809      	ldr	r0, [pc, #36]	; (80005a4 <ILI9163_writeData+0x44>)
 800057e:	f001 fda7 	bl	80020d0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 8000582:	1df9      	adds	r1, r7, #7
 8000584:	2300      	movs	r3, #0
 8000586:	2201      	movs	r2, #1
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <ILI9163_writeData+0x48>)
 800058a:	f004 fa0c 	bl	80049a6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <ILI9163_writeData+0x44>)
 8000596:	f001 fd9b 	bl	80020d0 <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40020400 	.word	0x40020400
 80005a8:	20000198 	.word	0x20000198

080005ac <ILI9163_reset>:

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
}

void ILI9163_reset(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <ILI9163_reset+0x2c>)
 80005b8:	f001 fd8a 	bl	80020d0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80005bc:	2032      	movs	r0, #50	; 0x32
 80005be:	f000 ff11 	bl	80013e4 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <ILI9163_reset+0x2c>)
 80005ca:	f001 fd81 	bl	80020d0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f000 ff08 	bl	80013e4 <HAL_Delay>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40020c00 	.word	0x40020c00

080005dc <ILI9163_init>:

void ILI9163_init(int rotation) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ea:	486e      	ldr	r0, [pc, #440]	; (80007a4 <ILI9163_init+0x1c8>)
 80005ec:	f001 fd70 	bl	80020d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f6:	486c      	ldr	r0, [pc, #432]	; (80007a8 <ILI9163_init+0x1cc>)
 80005f8:	f001 fd6a 	bl	80020d0 <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 80005fc:	f7ff ffd6 	bl	80005ac <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 8000600:	2011      	movs	r0, #17
 8000602:	f7ff ff87 	bl	8000514 <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 8000606:	2005      	movs	r0, #5
 8000608:	f000 feec 	bl	80013e4 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 800060c:	203a      	movs	r0, #58	; 0x3a
 800060e:	f7ff ff81 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 8000612:	2005      	movs	r0, #5
 8000614:	f7ff ffa4 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 8000618:	2026      	movs	r0, #38	; 0x26
 800061a:	f7ff ff7b 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 800061e:	2004      	movs	r0, #4
 8000620:	f7ff ff9e 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8000624:	20f2      	movs	r0, #242	; 0xf2
 8000626:	f7ff ff75 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff ff98 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 8000630:	20e0      	movs	r0, #224	; 0xe0
 8000632:	f7ff ff6f 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 8000636:	203f      	movs	r0, #63	; 0x3f
 8000638:	f7ff ff92 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800063c:	2025      	movs	r0, #37	; 0x25
 800063e:	f7ff ff8f 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 8000642:	201c      	movs	r0, #28
 8000644:	f7ff ff8c 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 8000648:	201e      	movs	r0, #30
 800064a:	f7ff ff89 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800064e:	2020      	movs	r0, #32
 8000650:	f7ff ff86 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 8000654:	2012      	movs	r0, #18
 8000656:	f7ff ff83 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 800065a:	202a      	movs	r0, #42	; 0x2a
 800065c:	f7ff ff80 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 8000660:	2090      	movs	r0, #144	; 0x90
 8000662:	f7ff ff7d 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 8000666:	2024      	movs	r0, #36	; 0x24
 8000668:	f7ff ff7a 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 800066c:	2011      	movs	r0, #17
 800066e:	f7ff ff77 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff ff74 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ff71 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff ff6e 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff ff6b 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ff68 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 8000690:	20e1      	movs	r0, #225	; 0xe1
 8000692:	f7ff ff3f 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 8000696:	2020      	movs	r0, #32
 8000698:	f7ff ff62 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800069c:	2020      	movs	r0, #32
 800069e:	f7ff ff5f 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80006a2:	2020      	movs	r0, #32
 80006a4:	f7ff ff5c 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80006a8:	2020      	movs	r0, #32
 80006aa:	f7ff ff59 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 80006ae:	2005      	movs	r0, #5
 80006b0:	f7ff ff56 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ff53 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 80006ba:	2015      	movs	r0, #21
 80006bc:	f7ff ff50 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 80006c0:	20a7      	movs	r0, #167	; 0xa7
 80006c2:	f7ff ff4d 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 80006c6:	203d      	movs	r0, #61	; 0x3d
 80006c8:	f7ff ff4a 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 80006cc:	2018      	movs	r0, #24
 80006ce:	f7ff ff47 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 80006d2:	2025      	movs	r0, #37	; 0x25
 80006d4:	f7ff ff44 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 80006d8:	202a      	movs	r0, #42	; 0x2a
 80006da:	f7ff ff41 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 80006de:	202b      	movs	r0, #43	; 0x2b
 80006e0:	f7ff ff3e 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 80006e4:	202b      	movs	r0, #43	; 0x2b
 80006e6:	f7ff ff3b 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 80006ea:	203a      	movs	r0, #58	; 0x3a
 80006ec:	f7ff ff38 	bl	8000560 <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 80006f0:	20b1      	movs	r0, #177	; 0xb1
 80006f2:	f7ff ff0f 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 80006f6:	2008      	movs	r0, #8
 80006f8:	f7ff ff32 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff2f 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 8000702:	20b2      	movs	r0, #178	; 0xb2
 8000704:	f7ff ff06 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000708:	2008      	movs	r0, #8
 800070a:	f7ff ff29 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800070e:	2002      	movs	r0, #2
 8000710:	f7ff ff26 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8000714:	20b3      	movs	r0, #179	; 0xb3
 8000716:	f7ff fefd 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800071a:	2008      	movs	r0, #8
 800071c:	f7ff ff20 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff ff1d 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8000726:	20b4      	movs	r0, #180	; 0xb4
 8000728:	f7ff fef4 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 800072c:	2007      	movs	r0, #7
 800072e:	f7ff ff17 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8000732:	202a      	movs	r0, #42	; 0x2a
 8000734:	f7ff feee 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff ff11 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 800073e:	2000      	movs	r0, #0
 8000740:	f7ff ff0e 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff ff0b 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 800074a:	207f      	movs	r0, #127	; 0x7f
 800074c:	f7ff ff08 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8000750:	202b      	movs	r0, #43	; 0x2b
 8000752:	f7ff fedf 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff ff02 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff feff 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff fefc 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 8000768:	209f      	movs	r0, #159	; 0x9f
 800076a:	f7ff fef9 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 800076e:	2036      	movs	r0, #54	; 0x36
 8000770:	f7ff fed0 	bl	8000514 <ILI9163_writeCommand>
	if(rotation)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d003      	beq.n	8000782 <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 800077a:	20a8      	movs	r0, #168	; 0xa8
 800077c:	f7ff fef0 	bl	8000560 <ILI9163_writeData>
 8000780:	e002      	b.n	8000788 <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 8000782:	2068      	movs	r0, #104	; 0x68
 8000784:	f7ff feec 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 8000788:	2013      	movs	r0, #19
 800078a:	f7ff fec3 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 800078e:	2029      	movs	r0, #41	; 0x29
 8000790:	f7ff fec0 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 8000794:	202c      	movs	r0, #44	; 0x2c
 8000796:	f7ff febd 	bl	8000514 <ILI9163_writeCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020c00 	.word	0x40020c00

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fdbb 	bl	800132a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f836 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 f94c 	bl	8000a54 <MX_GPIO_Init>
  MX_DMA_Init();
 80007bc:	f000 f92c 	bl	8000a18 <MX_DMA_Init>
  MX_SPI1_Init();
 80007c0:	f000 f898 	bl	80008f4 <MX_SPI1_Init>
  MX_TIM14_Init();
 80007c4:	f000 f8d4 	bl	8000970 <MX_TIM14_Init>
  MX_USART6_UART_Init();
 80007c8:	f000 f8f6 	bl	80009b8 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 80007cc:	f009 fe30 	bl	800a430 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  ILI9163_init(0);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff ff03 	bl	80005dc <ILI9163_init>
//  char *message = "STM32 is ready\r\n";
//   HAL_UART_Transmit(&huart6, (uint8_t *)message, strlen(message), HAL_MAX_DELAY); // Send message over USART6

   // Start receiving data in interrupt mode

   HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
 80007d6:	2201      	movs	r2, #1
 80007d8:	490d      	ldr	r1, [pc, #52]	; (8000810 <main+0x64>)
 80007da:	480e      	ldr	r0, [pc, #56]	; (8000814 <main+0x68>)
 80007dc:	f005 f825 	bl	800582a <HAL_UART_Receive_IT>
	  //char *dataToSend = "Hello Bluetooth!";

	  // Check if data is received from USB CDC
	  // Check if data is received from USB CDC

	  statePinStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0); // Replace GPIOx with the actual GPIO port and STATE_PIN with the actual pin number
 80007e0:	2101      	movs	r1, #1
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <main+0x6c>)
 80007e4:	f001 fc5c 	bl	80020a0 <HAL_GPIO_ReadPin>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <main+0x70>)
 80007ee:	701a      	strb	r2, [r3, #0]

	  if(statePinStatus == GPIO_PIN_SET) {
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <main+0x70>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d105      	bne.n	8000804 <main+0x58>
	          // The module is connected to another Bluetooth device
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn on LED
 80007f8:	2201      	movs	r2, #1
 80007fa:	2101      	movs	r1, #1
 80007fc:	4808      	ldr	r0, [pc, #32]	; (8000820 <main+0x74>)
 80007fe:	f001 fc67 	bl	80020d0 <HAL_GPIO_WritePin>
 8000802:	e7ed      	b.n	80007e0 <main+0x34>
//	              }
	          }

	      else {
	         // The module is not connected
	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn off LED
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <main+0x74>)
 800080a:	f001 fc61 	bl	80020d0 <HAL_GPIO_WritePin>
	  statePinStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0); // Replace GPIOx with the actual GPIO port and STATE_PIN with the actual pin number
 800080e:	e7e7      	b.n	80007e0 <main+0x34>
 8000810:	20000334 	.word	0x20000334
 8000814:	200002a8 	.word	0x200002a8
 8000818:	40021800 	.word	0x40021800
 800081c:	20000721 	.word	0x20000721
 8000820:	40020400 	.word	0x40020400

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	; 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	2230      	movs	r2, #48	; 0x30
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f00a fc28 	bl	800b088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000848:	f002 ff38 	bl	80036bc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <SystemClock_Config+0xc8>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	4a26      	ldr	r2, [pc, #152]	; (80008ec <SystemClock_Config+0xc8>)
 8000852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
 8000858:	4b24      	ldr	r3, [pc, #144]	; (80008ec <SystemClock_Config+0xc8>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <SystemClock_Config+0xcc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800086c:	4a20      	ldr	r2, [pc, #128]	; (80008f0 <SystemClock_Config+0xcc>)
 800086e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <SystemClock_Config+0xcc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000880:	2301      	movs	r3, #1
 8000882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000884:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000894:	2304      	movs	r3, #4
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000898:	2348      	movs	r3, #72	; 0x48
 800089a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008a0:	2303      	movs	r3, #3
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 ff17 	bl	80036dc <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b4:	f000 f9c2 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2302      	movs	r3, #2
 80008be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	2102      	movs	r1, #2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 f9a5 	bl	8003c24 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008e0:	f000 f9ac 	bl	8000c3c <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	3750      	adds	r7, #80	; 0x50
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_SPI1_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <MX_SPI1_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_SPI1_Init+0x74>)
 8000900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_SPI1_Init+0x74>)
 800090e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000912:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_SPI1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_SPI1_Init+0x74>)
 8000922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000926:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_SPI1_Init+0x74>)
 800092a:	2208      	movs	r2, #8
 800092c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_SPI1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_SPI1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_SPI1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_SPI1_Init+0x74>)
 8000942:	2207      	movs	r2, #7
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_SPI1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_SPI1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_SPI1_Init+0x74>)
 8000954:	f003 ff7c 	bl	8004850 <HAL_SPI_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800095e:	f000 f96d 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000198 	.word	0x20000198
 800096c:	40013000 	.word	0x40013000

08000970 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_TIM14_Init+0x40>)
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <MX_TIM14_Init+0x44>)
 8000978:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_TIM14_Init+0x40>)
 800097c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000980:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_TIM14_Init+0x40>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_TIM14_Init+0x40>)
 800098a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800098e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_TIM14_Init+0x40>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_TIM14_Init+0x40>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_TIM14_Init+0x40>)
 800099e:	f004 fc0d 	bl	80051bc <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80009a8:	f000 f948 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000025c 	.word	0x2000025c
 80009b4:	40002000 	.word	0x40002000

080009b8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <MX_USART6_UART_Init+0x5c>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009fc:	f004 fe44 	bl	8005688 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 f919 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200002a8 	.word	0x200002a8
 8000a14:	40011400 	.word	0x40011400

08000a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_DMA_Init+0x38>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <MX_DMA_Init+0x38>)
 8000a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_DMA_Init+0x38>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	203b      	movs	r0, #59	; 0x3b
 8000a3c:	f000 fdd1 	bl	80015e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a40:	203b      	movs	r0, #59	; 0x3b
 8000a42:	f000 fdea 	bl	800161a <HAL_NVIC_EnableIRQ>

}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	; 0x30
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a6a:	4b4f      	ldr	r3, [pc, #316]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a4e      	ldr	r2, [pc, #312]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000a70:	f043 0310 	orr.w	r3, r3, #16
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b4c      	ldr	r3, [pc, #304]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0310 	and.w	r3, r3, #16
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b49      	ldr	r3, [pc, #292]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a48      	ldr	r2, [pc, #288]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9a:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a42      	ldr	r2, [pc, #264]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b40      	ldr	r3, [pc, #256]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b3d      	ldr	r3, [pc, #244]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a3c      	ldr	r2, [pc, #240]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b3a      	ldr	r3, [pc, #232]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a36      	ldr	r2, [pc, #216]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a30      	ldr	r2, [pc, #192]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13
 8000afa:	2200      	movs	r2, #0
 8000afc:	f64a 3103 	movw	r1, #43779	; 0xab03
 8000b00:	482a      	ldr	r0, [pc, #168]	; (8000bac <MX_GPIO_Init+0x158>)
 8000b02:	f001 fae5 	bl	80020d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b06:	2320      	movs	r3, #32
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b0a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <MX_GPIO_Init+0x15c>)
 8000b1c:	f001 f914 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 8000b20:	f240 3301 	movw	r3, #769	; 0x301
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	481c      	ldr	r0, [pc, #112]	; (8000bac <MX_GPIO_Init+0x158>)
 8000b3a:	f001 f905 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB11 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 8000b3e:	f64a 0302 	movw	r3, #43010	; 0xa802
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <MX_GPIO_Init+0x158>)
 8000b58:	f001 f8f6 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ble_state_Pin */
  GPIO_InitStruct.Pin = ble_state_Pin;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ble_state_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <MX_GPIO_Init+0x160>)
 8000b70:	f001 f8ea 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000b74:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <MX_GPIO_Init+0x164>)
 8000b8c:	f001 f8dc 	bl	8001d48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2017      	movs	r0, #23
 8000b96:	f000 fd24 	bl	80015e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b9a:	2017      	movs	r0, #23
 8000b9c:	f000 fd3d 	bl	800161a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba0:	bf00      	nop
 8000ba2:	3730      	adds	r7, #48	; 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40021800 	.word	0x40021800
 8000bb8:	40020800 	.word	0x40020800

08000bbc <HAL_UART_RxCpltCallback>:
    }
    rxIn[i] = '\0'; // Null-terminate the string
    // Print the response (implement this according to your needs)
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <HAL_UART_RxCpltCallback+0x6c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d127      	bne.n	8000c1e <HAL_UART_RxCpltCallback+0x62>
    // Print the received byte for debugging
   // HAL_UART_Transmit(&huart6, (uint8_t *)receiveBuffer, 1, HAL_MAX_DELAY); // Echo the byte

    // Append received byte to receivedData buffer
    receivedData[receivedDataIndex++] = receiveBuffer[0];
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_UART_RxCpltCallback+0x70>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	b2d1      	uxtb	r1, r2
 8000bd6:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <HAL_UART_RxCpltCallback+0x70>)
 8000bd8:	7011      	strb	r1, [r2, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_UART_RxCpltCallback+0x74>)
 8000bde:	7819      	ldrb	r1, [r3, #0]
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_UART_RxCpltCallback+0x78>)
 8000be2:	5499      	strb	r1, [r3, r2]

    // Check for end of message or buffer overflow
    if (receiveBuffer[0] == '\n' || receivedDataIndex >= sizeof(receivedData) - 1) {
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_UART_RxCpltCallback+0x74>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b0a      	cmp	r3, #10
 8000bea:	d113      	bne.n	8000c14 <HAL_UART_RxCpltCallback+0x58>
      // Null-terminate the string and reset index
      receivedData[receivedDataIndex] = '\0';
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_UART_RxCpltCallback+0x70>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_UART_RxCpltCallback+0x78>)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	5499      	strb	r1, [r3, r2]
      receivedDataIndex = 0;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_UART_RxCpltCallback+0x70>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]

      // Echo received data back to the sender for confirmation
      HAL_UART_Transmit(&huart6, (uint8_t *)receivedData, strlen(receivedData), HAL_MAX_DELAY);
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <HAL_UART_RxCpltCallback+0x78>)
 8000c00:	f7ff fb02 	bl	8000208 <strlen>
 8000c04:	4603      	mov	r3, r0
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	4909      	ldr	r1, [pc, #36]	; (8000c34 <HAL_UART_RxCpltCallback+0x78>)
 8000c0e:	480a      	ldr	r0, [pc, #40]	; (8000c38 <HAL_UART_RxCpltCallback+0x7c>)
 8000c10:	f004 fd88 	bl	8005724 <HAL_UART_Transmit>
    }

    // Re-enable UART receive interrupt for the next byte
    HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
 8000c14:	2201      	movs	r2, #1
 8000c16:	4906      	ldr	r1, [pc, #24]	; (8000c30 <HAL_UART_RxCpltCallback+0x74>)
 8000c18:	4807      	ldr	r0, [pc, #28]	; (8000c38 <HAL_UART_RxCpltCallback+0x7c>)
 8000c1a:	f004 fe06 	bl	800582a <HAL_UART_Receive_IT>
  }
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40011400 	.word	0x40011400
 8000c2c:	20000720 	.word	0x20000720
 8000c30:	20000334 	.word	0x20000334
 8000c34:	20000338 	.word	0x20000338
 8000c38:	200002a8 	.word	0x200002a8

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_MspInit+0x44>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_MspInit+0x44>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x44>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x44>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a37      	ldr	r2, [pc, #220]	; (8000d8c <HAL_SPI_MspInit+0xfc>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d168      	bne.n	8000d84 <HAL_SPI_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cb2:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <HAL_SPI_MspInit+0x100>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a36      	ldr	r2, [pc, #216]	; (8000d90 <HAL_SPI_MspInit+0x100>)
 8000cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b34      	ldr	r3, [pc, #208]	; (8000d90 <HAL_SPI_MspInit+0x100>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b31      	ldr	r3, [pc, #196]	; (8000d90 <HAL_SPI_MspInit+0x100>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a30      	ldr	r2, [pc, #192]	; (8000d90 <HAL_SPI_MspInit+0x100>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <HAL_SPI_MspInit+0x100>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ce2:	23e0      	movs	r3, #224	; 0xe0
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4825      	ldr	r0, [pc, #148]	; (8000d94 <HAL_SPI_MspInit+0x104>)
 8000cfe:	f001 f823 	bl	8001d48 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000d02:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d04:	4a25      	ldr	r2, [pc, #148]	; (8000d9c <HAL_SPI_MspInit+0x10c>)
 8000d06:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000d08:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d0a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d0e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d10:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d12:	2240      	movs	r2, #64	; 0x40
 8000d14:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d22:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d2a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d32:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d42:	2204      	movs	r2, #4
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d58:	480f      	ldr	r0, [pc, #60]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d5a:	f000 fc79 	bl	8001650 <HAL_DMA_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_SPI_MspInit+0xd8>
    {
      Error_Handler();
 8000d64:	f7ff ff6a 	bl	8000c3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d6c:	655a      	str	r2, [r3, #84]	; 0x54
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_SPI_MspInit+0x108>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	2023      	movs	r0, #35	; 0x23
 8000d7a:	f000 fc32 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d7e:	2023      	movs	r0, #35	; 0x23
 8000d80:	f000 fc4b 	bl	800161a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	; 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40013000 	.word	0x40013000
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000
 8000d98:	200001fc 	.word	0x200001fc
 8000d9c:	40026458 	.word	0x40026458

08000da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <HAL_TIM_Base_MspInit+0x44>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d113      	bne.n	8000dda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_TIM_Base_MspInit+0x48>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <HAL_TIM_Base_MspInit+0x48>)
 8000db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_TIM_Base_MspInit+0x48>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	202d      	movs	r0, #45	; 0x2d
 8000dd0:	f000 fc07 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000dd4:	202d      	movs	r0, #45	; 0x2d
 8000dd6:	f000 fc20 	bl	800161a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40002000 	.word	0x40002000
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0aa      	sub	sp, #168	; 0xa8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	2284      	movs	r2, #132	; 0x84
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f00a f93b 	bl	800b088 <memset>
  if(huart->Instance==USART6)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a26      	ldr	r2, [pc, #152]	; (8000eb0 <HAL_UART_MspInit+0xc4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d144      	bne.n	8000ea6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000e1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e22:	2300      	movs	r3, #0
 8000e24:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 f920 	bl	8004070 <HAL_RCCEx_PeriphCLKConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e36:	f7ff ff01 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <HAL_UART_MspInit+0xc8>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <HAL_UART_MspInit+0xc8>)
 8000e40:	f043 0320 	orr.w	r3, r3, #32
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_UART_MspInit+0xc8>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f003 0320 	and.w	r3, r3, #32
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_UART_MspInit+0xc8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <HAL_UART_MspInit+0xc8>)
 8000e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_UART_MspInit+0xc8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000e6a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000e6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e84:	2308      	movs	r3, #8
 8000e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <HAL_UART_MspInit+0xcc>)
 8000e92:	f000 ff59 	bl	8001d48 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2047      	movs	r0, #71	; 0x47
 8000e9c:	f000 fba1 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000ea0:	2047      	movs	r0, #71	; 0x47
 8000ea2:	f000 fbba 	bl	800161a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	37a8      	adds	r7, #168	; 0xa8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40011400 	.word	0x40011400
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40021800 	.word	0x40021800

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 fa48 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	key = 0;
 8000f1e:	4b51      	ldr	r3, [pc, #324]	; (8001064 <EXTI9_5_IRQHandler+0x14c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	801a      	strh	r2, [r3, #0]
		for(uint8_t c=0 ; c<4 ; c++){
 8000f24:	2300      	movs	r3, #0
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	e075      	b.n	8001016 <EXTI9_5_IRQHandler+0xfe>
			for(uint8_t i=0 ; i<4 ; i++){
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	71bb      	strb	r3, [r7, #6]
 8000f2e:	e00e      	b.n	8000f4e <EXTI9_5_IRQHandler+0x36>
				HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	4a4d      	ldr	r2, [pc, #308]	; (8001068 <EXTI9_5_IRQHandler+0x150>)
 8000f34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	4a4c      	ldr	r2, [pc, #304]	; (800106c <EXTI9_5_IRQHandler+0x154>)
 8000f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f40:	2201      	movs	r2, #1
 8000f42:	4619      	mov	r1, r3
 8000f44:	f001 f8c4 	bl	80020d0 <HAL_GPIO_WritePin>
			for(uint8_t i=0 ; i<4 ; i++){
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	71bb      	strb	r3, [r7, #6]
 8000f4e:	79bb      	ldrb	r3, [r7, #6]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d9ed      	bls.n	8000f30 <EXTI9_5_IRQHandler+0x18>
			}
			HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4a44      	ldr	r2, [pc, #272]	; (8001068 <EXTI9_5_IRQHandler+0x150>)
 8000f58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	4a43      	ldr	r2, [pc, #268]	; (800106c <EXTI9_5_IRQHandler+0x154>)
 8000f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f64:	2200      	movs	r2, #0
 8000f66:	4619      	mov	r1, r3
 8000f68:	f001 f8b2 	bl	80020d0 <HAL_GPIO_WritePin>
			for(uint8_t r=0 ; r<4 ; r++){
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	717b      	strb	r3, [r7, #5]
 8000f70:	e04b      	b.n	800100a <EXTI9_5_IRQHandler+0xf2>
				if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000f72:	797b      	ldrb	r3, [r7, #5]
 8000f74:	4a3e      	ldr	r2, [pc, #248]	; (8001070 <EXTI9_5_IRQHandler+0x158>)
 8000f76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f7a:	797b      	ldrb	r3, [r7, #5]
 8000f7c:	493d      	ldr	r1, [pc, #244]	; (8001074 <EXTI9_5_IRQHandler+0x15c>)
 8000f7e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f82:	4619      	mov	r1, r3
 8000f84:	4610      	mov	r0, r2
 8000f86:	f001 f88b 	bl	80020a0 <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d139      	bne.n	8001004 <EXTI9_5_IRQHandler+0xec>
					if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000f90:	797b      	ldrb	r3, [r7, #5]
 8000f92:	4a37      	ldr	r2, [pc, #220]	; (8001070 <EXTI9_5_IRQHandler+0x158>)
 8000f94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f98:	797b      	ldrb	r3, [r7, #5]
 8000f9a:	4936      	ldr	r1, [pc, #216]	; (8001074 <EXTI9_5_IRQHandler+0x15c>)
 8000f9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	f001 f87c 	bl	80020a0 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d12a      	bne.n	8001004 <EXTI9_5_IRQHandler+0xec>
						key |= 1<<c;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <EXTI9_5_IRQHandler+0x14c>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <EXTI9_5_IRQHandler+0x14c>)
 8000fc6:	801a      	strh	r2, [r3, #0]
						key |= 1<<(r+8);
 8000fc8:	797b      	ldrb	r3, [r7, #5]
 8000fca:	3308      	adds	r3, #8
 8000fcc:	2201      	movs	r2, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	4b23      	ldr	r3, [pc, #140]	; (8001064 <EXTI9_5_IRQHandler+0x14c>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <EXTI9_5_IRQHandler+0x14c>)
 8000fe2:	801a      	strh	r2, [r3, #0]
						while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000fe4:	bf00      	nop
 8000fe6:	797b      	ldrb	r3, [r7, #5]
 8000fe8:	4a21      	ldr	r2, [pc, #132]	; (8001070 <EXTI9_5_IRQHandler+0x158>)
 8000fea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fee:	797b      	ldrb	r3, [r7, #5]
 8000ff0:	4920      	ldr	r1, [pc, #128]	; (8001074 <EXTI9_5_IRQHandler+0x15c>)
 8000ff2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	f001 f851 	bl	80020a0 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f0      	beq.n	8000fe6 <EXTI9_5_IRQHandler+0xce>
			for(uint8_t r=0 ; r<4 ; r++){
 8001004:	797b      	ldrb	r3, [r7, #5]
 8001006:	3301      	adds	r3, #1
 8001008:	717b      	strb	r3, [r7, #5]
 800100a:	797b      	ldrb	r3, [r7, #5]
 800100c:	2b03      	cmp	r3, #3
 800100e:	d9b0      	bls.n	8000f72 <EXTI9_5_IRQHandler+0x5a>
		for(uint8_t c=0 ; c<4 ; c++){
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	3301      	adds	r3, #1
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b03      	cmp	r3, #3
 800101a:	d986      	bls.n	8000f2a <EXTI9_5_IRQHandler+0x12>
					}
				}
			}
		}

		keyChar = KeyPadGetChar(key);
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <EXTI9_5_IRQHandler+0x14c>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f85f 	bl	80010e4 <KeyPadGetChar>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <EXTI9_5_IRQHandler+0x160>)
 800102c:	701a      	strb	r2, [r3, #0]
		key = 0;
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <EXTI9_5_IRQHandler+0x14c>)
 8001030:	2200      	movs	r2, #0
 8001032:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f64a 0102 	movw	r1, #43010	; 0xa802
 800103a:	4810      	ldr	r0, [pc, #64]	; (800107c <EXTI9_5_IRQHandler+0x164>)
 800103c:	f001 f848 	bl	80020d0 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001040:	2020      	movs	r0, #32
 8001042:	f001 f85f 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001046:	2040      	movs	r0, #64	; 0x40
 8001048:	f001 f85c 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800104c:	2080      	movs	r0, #128	; 0x80
 800104e:	f001 f859 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001052:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001056:	f001 f855 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000332 	.word	0x20000332
 8001068:	20000000 	.word	0x20000000
 800106c:	0800b208 	.word	0x0800b208
 8001070:	20000010 	.word	0x20000010
 8001074:	0800b210 	.word	0x0800b210
 8001078:	20000330 	.word	0x20000330
 800107c:	40020400 	.word	0x40020400

08001080 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <SPI1_IRQHandler+0x10>)
 8001086:	f003 fdfd 	bl	8004c84 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000198 	.word	0x20000198

08001094 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800109a:	f004 f8e6 	bl	800526a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000025c 	.word	0x2000025c

080010a8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <DMA2_Stream3_IRQHandler+0x10>)
 80010ae:	f000 fc0f 	bl	80018d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001fc 	.word	0x200001fc

080010bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <OTG_FS_IRQHandler+0x10>)
 80010c2:	f001 f988 	bl	80023d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20001c0c 	.word	0x20001c0c

080010d0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <USART6_IRQHandler+0x10>)
 80010d6:	f004 fbed 	bl	80058b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200002a8 	.word	0x200002a8

080010e4 <KeyPadGetChar>:

/* USER CODE BEGIN 1 */
char KeyPadGetChar(uint16_t	key)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
  switch(key)
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	f640 0208 	movw	r2, #2056	; 0x808
 80010f4:	4293      	cmp	r3, r2
 80010f6:	f300 809f 	bgt.w	8001238 <KeyPadGetChar+0x154>
 80010fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010fe:	dc1a      	bgt.n	8001136 <KeyPadGetChar+0x52>
 8001100:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8001104:	f300 8098 	bgt.w	8001238 <KeyPadGetChar+0x154>
 8001108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110c:	dc2a      	bgt.n	8001164 <KeyPadGetChar+0x80>
 800110e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8001112:	f300 8091 	bgt.w	8001238 <KeyPadGetChar+0x154>
 8001116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800111a:	dc3b      	bgt.n	8001194 <KeyPadGetChar+0xb0>
 800111c:	2b00      	cmp	r3, #0
 800111e:	d069      	beq.n	80011f4 <KeyPadGetChar+0x110>
 8001120:	2b00      	cmp	r3, #0
 8001122:	f2c0 8089 	blt.w	8001238 <KeyPadGetChar+0x154>
 8001126:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800112a:	f300 8085 	bgt.w	8001238 <KeyPadGetChar+0x154>
 800112e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001132:	dc47      	bgt.n	80011c4 <KeyPadGetChar+0xe0>
 8001134:	e080      	b.n	8001238 <KeyPadGetChar+0x154>
 8001136:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 800113a:	2b07      	cmp	r3, #7
 800113c:	d87c      	bhi.n	8001238 <KeyPadGetChar+0x154>
 800113e:	a201      	add	r2, pc, #4	; (adr r2, 8001144 <KeyPadGetChar+0x60>)
 8001140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001144:	08001205 	.word	0x08001205
 8001148:	08001215 	.word	0x08001215
 800114c:	08001239 	.word	0x08001239
 8001150:	08001225 	.word	0x08001225
 8001154:	08001239 	.word	0x08001239
 8001158:	08001239 	.word	0x08001239
 800115c:	08001239 	.word	0x08001239
 8001160:	08001235 	.word	0x08001235
 8001164:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8001168:	2b07      	cmp	r3, #7
 800116a:	d865      	bhi.n	8001238 <KeyPadGetChar+0x154>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <KeyPadGetChar+0x90>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	08001201 	.word	0x08001201
 8001178:	08001211 	.word	0x08001211
 800117c:	08001239 	.word	0x08001239
 8001180:	08001221 	.word	0x08001221
 8001184:	08001239 	.word	0x08001239
 8001188:	08001239 	.word	0x08001239
 800118c:	08001239 	.word	0x08001239
 8001190:	08001231 	.word	0x08001231
 8001194:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001198:	2b07      	cmp	r3, #7
 800119a:	d84d      	bhi.n	8001238 <KeyPadGetChar+0x154>
 800119c:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <KeyPadGetChar+0xc0>)
 800119e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a2:	bf00      	nop
 80011a4:	080011fd 	.word	0x080011fd
 80011a8:	0800120d 	.word	0x0800120d
 80011ac:	08001239 	.word	0x08001239
 80011b0:	0800121d 	.word	0x0800121d
 80011b4:	08001239 	.word	0x08001239
 80011b8:	08001239 	.word	0x08001239
 80011bc:	08001239 	.word	0x08001239
 80011c0:	0800122d 	.word	0x0800122d
 80011c4:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80011c8:	2b07      	cmp	r3, #7
 80011ca:	d835      	bhi.n	8001238 <KeyPadGetChar+0x154>
 80011cc:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <KeyPadGetChar+0xf0>)
 80011ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d2:	bf00      	nop
 80011d4:	080011f9 	.word	0x080011f9
 80011d8:	08001209 	.word	0x08001209
 80011dc:	08001239 	.word	0x08001239
 80011e0:	08001219 	.word	0x08001219
 80011e4:	08001239 	.word	0x08001239
 80011e8:	08001239 	.word	0x08001239
 80011ec:	08001239 	.word	0x08001239
 80011f0:	08001229 	.word	0x08001229
  {
    case 0x0000:
      return 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e020      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0101:
			return '1';
 80011f8:	2331      	movs	r3, #49	; 0x31
 80011fa:	e01e      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0201:
			return '2';
 80011fc:	2332      	movs	r3, #50	; 0x32
 80011fe:	e01c      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0401:
			return '3';
 8001200:	2333      	movs	r3, #51	; 0x33
 8001202:	e01a      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0801:
			return 'A';
 8001204:	2341      	movs	r3, #65	; 0x41
 8001206:	e018      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0102:
			return '4';
 8001208:	2334      	movs	r3, #52	; 0x34
 800120a:	e016      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0202:
			return '5';
 800120c:	2335      	movs	r3, #53	; 0x35
 800120e:	e014      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0402:
			return '6';
 8001210:	2336      	movs	r3, #54	; 0x36
 8001212:	e012      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0802:
			return 'B';
 8001214:	2342      	movs	r3, #66	; 0x42
 8001216:	e010      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0104:
			return '7';
 8001218:	2337      	movs	r3, #55	; 0x37
 800121a:	e00e      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0204:
			return '8';
 800121c:	2338      	movs	r3, #56	; 0x38
 800121e:	e00c      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0404:
			return '9';
 8001220:	2339      	movs	r3, #57	; 0x39
 8001222:	e00a      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0804:
			return 'C';
 8001224:	2343      	movs	r3, #67	; 0x43
 8001226:	e008      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0108:
			return '*';
 8001228:	232a      	movs	r3, #42	; 0x2a
 800122a:	e006      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0208:
			return '0';
 800122c:	2330      	movs	r3, #48	; 0x30
 800122e:	e004      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0408:
			return '#';
 8001230:	2323      	movs	r3, #35	; 0x23
 8001232:	e002      	b.n	800123a <KeyPadGetChar+0x156>
		case 0x0808:
			return 'D';
 8001234:	2344      	movs	r3, #68	; 0x44
 8001236:	e000      	b.n	800123a <KeyPadGetChar+0x156>
		default:
			return 0;
 8001238:	2300      	movs	r3, #0
	}
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop

08001248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001250:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <_sbrk+0x5c>)
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <_sbrk+0x60>)
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <_sbrk+0x64>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <_sbrk+0x68>)
 8001268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	429a      	cmp	r2, r3
 8001276:	d207      	bcs.n	8001288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001278:	f009 ff1e 	bl	800b0b8 <__errno>
 800127c:	4603      	mov	r3, r0
 800127e:	220c      	movs	r2, #12
 8001280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e009      	b.n	800129c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <_sbrk+0x64>)
 8001298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20050000 	.word	0x20050000
 80012a8:	00000400 	.word	0x00000400
 80012ac:	20000724 	.word	0x20000724
 80012b0:	20002260 	.word	0x20002260

080012b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <SystemInit+0x20>)
 80012ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <SystemInit+0x20>)
 80012c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001310 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012dc:	480d      	ldr	r0, [pc, #52]	; (8001314 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012de:	490e      	ldr	r1, [pc, #56]	; (8001318 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e4:	e002      	b.n	80012ec <LoopCopyDataInit>

080012e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ea:	3304      	adds	r3, #4

080012ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f0:	d3f9      	bcc.n	80012e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012f4:	4c0b      	ldr	r4, [pc, #44]	; (8001324 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f8:	e001      	b.n	80012fe <LoopFillZerobss>

080012fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012fc:	3204      	adds	r2, #4

080012fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001302:	f7ff ffd7 	bl	80012b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001306:	f009 fedd 	bl	800b0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130a:	f7ff fa4f 	bl	80007ac <main>
  bx  lr    
 800130e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001310:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800131c:	0800b248 	.word	0x0800b248
  ldr r2, =_sbss
 8001320:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001324:	2000225c 	.word	0x2000225c

08001328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC_IRQHandler>

0800132a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132e:	2003      	movs	r0, #3
 8001330:	f000 f94c 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001334:	2000      	movs	r0, #0
 8001336:	f000 f805 	bl	8001344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800133a:	f7ff fc85 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x54>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x58>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f967 	bl	8001636 <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 f92f 	bl	80015e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_InitTick+0x5c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000020 	.word	0x20000020
 800139c:	20000028 	.word	0x20000028
 80013a0:	20000024 	.word	0x20000024

080013a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000028 	.word	0x20000028
 80013c8:	20000728 	.word	0x20000728

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000728 	.word	0x20000728

080013e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff ffee 	bl	80013cc <HAL_GetTick>
 80013f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d005      	beq.n	800140a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_Delay+0x44>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140a:	bf00      	nop
 800140c:	f7ff ffde 	bl	80013cc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d8f7      	bhi.n	800140c <HAL_Delay+0x28>
  {
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000028 	.word	0x20000028

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <__NVIC_SetPriorityGrouping+0x40>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	4313      	orrs	r3, r2
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <__NVIC_SetPriorityGrouping+0x40>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00
 8001470:	05fa0000 	.word	0x05fa0000

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db0b      	blt.n	80014ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	4907      	ldr	r1, [pc, #28]	; (80014c8 <__NVIC_EnableIRQ+0x38>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	2001      	movs	r0, #1
 80014b2:	fa00 f202 	lsl.w	r2, r0, r2
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	; (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	; (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001598:	d301      	bcc.n	800159e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2301      	movs	r3, #1
 800159c:	e00f      	b.n	80015be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <SysTick_Config+0x40>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a6:	210f      	movs	r1, #15
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f7ff ff8e 	bl	80014cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <SysTick_Config+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <SysTick_Config+0x40>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff29 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f4:	f7ff ff3e 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7ff ff8e 	bl	8001520 <NVIC_EncodePriority>
 8001604:	4602      	mov	r2, r0
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff5d 	bl	80014cc <__NVIC_SetPriority>
}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff31 	bl	8001490 <__NVIC_EnableIRQ>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffa2 	bl	8001588 <SysTick_Config>
 8001644:	4603      	mov	r3, r0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff feb6 	bl	80013cc <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e099      	b.n	80017a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800168c:	e00f      	b.n	80016ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800168e:	f7ff fe9d 	bl	80013cc <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b05      	cmp	r3, #5
 800169a:	d908      	bls.n	80016ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2220      	movs	r2, #32
 80016a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2203      	movs	r2, #3
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e078      	b.n	80017a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e8      	bne.n	800168e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	4b38      	ldr	r3, [pc, #224]	; (80017a8 <HAL_DMA_Init+0x158>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	2b04      	cmp	r3, #4
 8001706:	d107      	bne.n	8001718 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4313      	orrs	r3, r2
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4313      	orrs	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f023 0307 	bic.w	r3, r3, #7
 800172e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	4313      	orrs	r3, r2
 8001738:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	2b04      	cmp	r3, #4
 8001740:	d117      	bne.n	8001772 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4313      	orrs	r3, r2
 800174a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00e      	beq.n	8001772 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 fa7b 	bl	8001c50 <DMA_CheckFifoParam>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2240      	movs	r2, #64	; 0x40
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800176e:	2301      	movs	r3, #1
 8001770:	e016      	b.n	80017a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fa32 	bl	8001be4 <DMA_CalcBaseAndBitshift>
 8001780:	4603      	mov	r3, r0
 8001782:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	223f      	movs	r2, #63	; 0x3f
 800178a:	409a      	lsls	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	f010803f 	.word	0xf010803f

080017ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017ba:	f7ff fe07 	bl	80013cc <HAL_GetTick>
 80017be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d008      	beq.n	80017de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e052      	b.n	8001884 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0216 	bic.w	r2, r2, #22
 80017ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695a      	ldr	r2, [r3, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	2b00      	cmp	r3, #0
 8001804:	d103      	bne.n	800180e <HAL_DMA_Abort+0x62>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0208 	bic.w	r2, r2, #8
 800181c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0201 	bic.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800182e:	e013      	b.n	8001858 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001830:	f7ff fdcc 	bl	80013cc <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b05      	cmp	r3, #5
 800183c:	d90c      	bls.n	8001858 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2220      	movs	r2, #32
 8001842:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2203      	movs	r2, #3
 8001848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e015      	b.n	8001884 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1e4      	bne.n	8001830 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186a:	223f      	movs	r2, #63	; 0x3f
 800186c:	409a      	lsls	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d004      	beq.n	80018aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00c      	b.n	80018c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2205      	movs	r2, #5
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0201 	bic.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80018dc:	4b8e      	ldr	r3, [pc, #568]	; (8001b18 <HAL_DMA_IRQHandler+0x248>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a8e      	ldr	r2, [pc, #568]	; (8001b1c <HAL_DMA_IRQHandler+0x24c>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	0a9b      	lsrs	r3, r3, #10
 80018e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fa:	2208      	movs	r2, #8
 80018fc:	409a      	lsls	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4013      	ands	r3, r2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d01a      	beq.n	800193c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d013      	beq.n	800193c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0204 	bic.w	r2, r2, #4
 8001922:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001928:	2208      	movs	r2, #8
 800192a:	409a      	lsls	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001934:	f043 0201 	orr.w	r2, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001940:	2201      	movs	r2, #1
 8001942:	409a      	lsls	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d012      	beq.n	8001972 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195e:	2201      	movs	r2, #1
 8001960:	409a      	lsls	r2, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196a:	f043 0202 	orr.w	r2, r3, #2
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001976:	2204      	movs	r2, #4
 8001978:	409a      	lsls	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d012      	beq.n	80019a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00b      	beq.n	80019a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001994:	2204      	movs	r2, #4
 8001996:	409a      	lsls	r2, r3
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a0:	f043 0204 	orr.w	r2, r3, #4
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ac:	2210      	movs	r2, #16
 80019ae:	409a      	lsls	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d043      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d03c      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	2210      	movs	r2, #16
 80019cc:	409a      	lsls	r2, r3
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d018      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d108      	bne.n	8001a00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d024      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	4798      	blx	r3
 80019fe:	e01f      	b.n	8001a40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01b      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	4798      	blx	r3
 8001a10:	e016      	b.n	8001a40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d107      	bne.n	8001a30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0208 	bic.w	r2, r2, #8
 8001a2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a44:	2220      	movs	r2, #32
 8001a46:	409a      	lsls	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 808f 	beq.w	8001b70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 8087 	beq.w	8001b70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	2220      	movs	r2, #32
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d136      	bne.n	8001ae8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0216 	bic.w	r2, r2, #22
 8001a88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695a      	ldr	r2, [r3, #20]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d103      	bne.n	8001aaa <HAL_DMA_IRQHandler+0x1da>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0208 	bic.w	r2, r2, #8
 8001ab8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abe:	223f      	movs	r2, #63	; 0x3f
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d07e      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	4798      	blx	r3
        }
        return;
 8001ae6:	e079      	b.n	8001bdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d01d      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10d      	bne.n	8001b20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d031      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4798      	blx	r3
 8001b14:	e02c      	b.n	8001b70 <HAL_DMA_IRQHandler+0x2a0>
 8001b16:	bf00      	nop
 8001b18:	20000020 	.word	0x20000020
 8001b1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d023      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	4798      	blx	r3
 8001b30:	e01e      	b.n	8001b70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10f      	bne.n	8001b60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0210 	bic.w	r2, r2, #16
 8001b4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d032      	beq.n	8001bde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d022      	beq.n	8001bca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2205      	movs	r2, #5
 8001b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0201 	bic.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d307      	bcc.n	8001bb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f2      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x2cc>
 8001bb6:	e000      	b.n	8001bba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	4798      	blx	r3
 8001bda:	e000      	b.n	8001bde <HAL_DMA_IRQHandler+0x30e>
        return;
 8001bdc:	bf00      	nop
    }
  }
}
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	3b10      	subs	r3, #16
 8001bf4:	4a13      	ldr	r2, [pc, #76]	; (8001c44 <DMA_CalcBaseAndBitshift+0x60>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <DMA_CalcBaseAndBitshift+0x64>)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d908      	bls.n	8001c24 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <DMA_CalcBaseAndBitshift+0x68>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	1d1a      	adds	r2, r3, #4
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	659a      	str	r2, [r3, #88]	; 0x58
 8001c22:	e006      	b.n	8001c32 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <DMA_CalcBaseAndBitshift+0x68>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	aaaaaaab 	.word	0xaaaaaaab
 8001c48:	0800b230 	.word	0x0800b230
 8001c4c:	fffffc00 	.word	0xfffffc00

08001c50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d11f      	bne.n	8001caa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d856      	bhi.n	8001d1e <DMA_CheckFifoParam+0xce>
 8001c70:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <DMA_CheckFifoParam+0x28>)
 8001c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c76:	bf00      	nop
 8001c78:	08001c89 	.word	0x08001c89
 8001c7c:	08001c9b 	.word	0x08001c9b
 8001c80:	08001c89 	.word	0x08001c89
 8001c84:	08001d1f 	.word	0x08001d1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d046      	beq.n	8001d22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c98:	e043      	b.n	8001d22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ca2:	d140      	bne.n	8001d26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ca8:	e03d      	b.n	8001d26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cb2:	d121      	bne.n	8001cf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d837      	bhi.n	8001d2a <DMA_CheckFifoParam+0xda>
 8001cba:	a201      	add	r2, pc, #4	; (adr r2, 8001cc0 <DMA_CheckFifoParam+0x70>)
 8001cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc0:	08001cd1 	.word	0x08001cd1
 8001cc4:	08001cd7 	.word	0x08001cd7
 8001cc8:	08001cd1 	.word	0x08001cd1
 8001ccc:	08001ce9 	.word	0x08001ce9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd4:	e030      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d025      	beq.n	8001d2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ce6:	e022      	b.n	8001d2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cf0:	d11f      	bne.n	8001d32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cf6:	e01c      	b.n	8001d32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d903      	bls.n	8001d06 <DMA_CheckFifoParam+0xb6>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d003      	beq.n	8001d0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d04:	e018      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
      break;
 8001d0a:	e015      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00e      	beq.n	8001d36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d1c:	e00b      	b.n	8001d36 <DMA_CheckFifoParam+0xe6>
      break;
 8001d1e:	bf00      	nop
 8001d20:	e00a      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      break;
 8001d22:	bf00      	nop
 8001d24:	e008      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      break;
 8001d26:	bf00      	nop
 8001d28:	e006      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      break;
 8001d2a:	bf00      	nop
 8001d2c:	e004      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      break;
 8001d2e:	bf00      	nop
 8001d30:	e002      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d32:	bf00      	nop
 8001d34:	e000      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      break;
 8001d36:	bf00      	nop
    }
  } 
  
  return status; 
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e175      	b.n	8002054 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 8164 	bne.w	800204e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d005      	beq.n	8001d9e <HAL_GPIO_Init+0x56>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d130      	bne.n	8001e00 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 0201 	and.w	r2, r3, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d017      	beq.n	8001e3c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d123      	bne.n	8001e90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80be 	beq.w	800204e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	4b66      	ldr	r3, [pc, #408]	; (800206c <HAL_GPIO_Init+0x324>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a65      	ldr	r2, [pc, #404]	; (800206c <HAL_GPIO_Init+0x324>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_GPIO_Init+0x324>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001eea:	4a61      	ldr	r2, [pc, #388]	; (8002070 <HAL_GPIO_Init+0x328>)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a58      	ldr	r2, [pc, #352]	; (8002074 <HAL_GPIO_Init+0x32c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d037      	beq.n	8001f86 <HAL_GPIO_Init+0x23e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a57      	ldr	r2, [pc, #348]	; (8002078 <HAL_GPIO_Init+0x330>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d031      	beq.n	8001f82 <HAL_GPIO_Init+0x23a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a56      	ldr	r2, [pc, #344]	; (800207c <HAL_GPIO_Init+0x334>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d02b      	beq.n	8001f7e <HAL_GPIO_Init+0x236>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a55      	ldr	r2, [pc, #340]	; (8002080 <HAL_GPIO_Init+0x338>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d025      	beq.n	8001f7a <HAL_GPIO_Init+0x232>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a54      	ldr	r2, [pc, #336]	; (8002084 <HAL_GPIO_Init+0x33c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01f      	beq.n	8001f76 <HAL_GPIO_Init+0x22e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a53      	ldr	r2, [pc, #332]	; (8002088 <HAL_GPIO_Init+0x340>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_GPIO_Init+0x22a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a52      	ldr	r2, [pc, #328]	; (800208c <HAL_GPIO_Init+0x344>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0x226>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a51      	ldr	r2, [pc, #324]	; (8002090 <HAL_GPIO_Init+0x348>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00d      	beq.n	8001f6a <HAL_GPIO_Init+0x222>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a50      	ldr	r2, [pc, #320]	; (8002094 <HAL_GPIO_Init+0x34c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <HAL_GPIO_Init+0x21e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4f      	ldr	r2, [pc, #316]	; (8002098 <HAL_GPIO_Init+0x350>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_GPIO_Init+0x21a>
 8001f5e:	2309      	movs	r3, #9
 8001f60:	e012      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f62:	230a      	movs	r3, #10
 8001f64:	e010      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f66:	2308      	movs	r3, #8
 8001f68:	e00e      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	e00c      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f6e:	2306      	movs	r3, #6
 8001f70:	e00a      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f72:	2305      	movs	r3, #5
 8001f74:	e008      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f76:	2304      	movs	r3, #4
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e004      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f86:	2300      	movs	r3, #0
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	f002 0203 	and.w	r2, r2, #3
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	4093      	lsls	r3, r2
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f98:	4935      	ldr	r1, [pc, #212]	; (8002070 <HAL_GPIO_Init+0x328>)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	; (800209c <HAL_GPIO_Init+0x354>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fca:	4a34      	ldr	r2, [pc, #208]	; (800209c <HAL_GPIO_Init+0x354>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd0:	4b32      	ldr	r3, [pc, #200]	; (800209c <HAL_GPIO_Init+0x354>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff4:	4a29      	ldr	r2, [pc, #164]	; (800209c <HAL_GPIO_Init+0x354>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ffa:	4b28      	ldr	r3, [pc, #160]	; (800209c <HAL_GPIO_Init+0x354>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800201e:	4a1f      	ldr	r2, [pc, #124]	; (800209c <HAL_GPIO_Init+0x354>)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002024:	4b1d      	ldr	r3, [pc, #116]	; (800209c <HAL_GPIO_Init+0x354>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <HAL_GPIO_Init+0x354>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3301      	adds	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	f67f ae86 	bls.w	8001d68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	40013800 	.word	0x40013800
 8002074:	40020000 	.word	0x40020000
 8002078:	40020400 	.word	0x40020400
 800207c:	40020800 	.word	0x40020800
 8002080:	40020c00 	.word	0x40020c00
 8002084:	40021000 	.word	0x40021000
 8002088:	40021400 	.word	0x40021400
 800208c:	40021800 	.word	0x40021800
 8002090:	40021c00 	.word	0x40021c00
 8002094:	40022000 	.word	0x40022000
 8002098:	40022400 	.word	0x40022400
 800209c:	40013c00 	.word	0x40013c00

080020a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	e001      	b.n	80020c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
 80020dc:	4613      	mov	r3, r2
 80020de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e0:	787b      	ldrb	r3, [r7, #1]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020ec:	e003      	b.n	80020f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020ee:	887b      	ldrh	r3, [r7, #2]
 80020f0:	041a      	lsls	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	619a      	str	r2, [r3, #24]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800211a:	4a05      	ldr	r2, [pc, #20]	; (8002130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f806 	bl	8002134 <HAL_GPIO_EXTI_Callback>
  }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40013c00 	.word	0x40013c00

08002134 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800214a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214c:	b08f      	sub	sp, #60	; 0x3c
 800214e:	af0a      	add	r7, sp, #40	; 0x28
 8002150:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e116      	b.n	800238a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f008 fb4c 	bl	800a814 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2203      	movs	r2, #3
 8002180:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f004 fe5b 	bl	8006e56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	687e      	ldr	r6, [r7, #4]
 80021a8:	466d      	mov	r5, sp
 80021aa:	f106 0410 	add.w	r4, r6, #16
 80021ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80021be:	1d33      	adds	r3, r6, #4
 80021c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c2:	6838      	ldr	r0, [r7, #0]
 80021c4:	f004 fd3c 	bl	8006c40 <USB_CoreInit>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2202      	movs	r2, #2
 80021d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0d7      	b.n	800238a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f004 fe49 	bl	8006e78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
 80021ea:	e04a      	b.n	8002282 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	333d      	adds	r3, #61	; 0x3d
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	333c      	adds	r3, #60	; 0x3c
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	b298      	uxth	r0, r3
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	3344      	adds	r3, #68	; 0x44
 8002228:	4602      	mov	r2, r0
 800222a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	3340      	adds	r3, #64	; 0x40
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3348      	adds	r3, #72	; 0x48
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	334c      	adds	r3, #76	; 0x4c
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	3354      	adds	r3, #84	; 0x54
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	3301      	adds	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	d3af      	bcc.n	80021ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800228c:	2300      	movs	r3, #0
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	e044      	b.n	800231c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	3301      	adds	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	429a      	cmp	r2, r3
 8002324:	d3b5      	bcc.n	8002292 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	687e      	ldr	r6, [r7, #4]
 800232e:	466d      	mov	r5, sp
 8002330:	f106 0410 	add.w	r4, r6, #16
 8002334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002340:	e885 0003 	stmia.w	r5, {r0, r1}
 8002344:	1d33      	adds	r3, r6, #4
 8002346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002348:	6838      	ldr	r0, [r7, #0]
 800234a:	f004 fde1 	bl	8006f10 <USB_DevInit>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e014      	b.n	800238a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	2b01      	cmp	r3, #1
 8002376:	d102      	bne.n	800237e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f001 f97b 	bl	8003674 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f005 ff2f 	bl	80081e6 <USB_DevDisconnect>

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002392 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_PCD_Start+0x16>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e012      	b.n	80023ce <HAL_PCD_Start+0x3c>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f004 fd3d 	bl	8006e34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f005 fef0 	bl	80081a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023d6:	b590      	push	{r4, r7, lr}
 80023d8:	b08d      	sub	sp, #52	; 0x34
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f005 ffae 	bl	800834e <USB_GetMode>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f040 84b7 	bne.w	8002d68 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f005 ff12 	bl	8008228 <USB_ReadInterrupts>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 84ad 	beq.w	8002d66 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f005 feff 	bl	8008228 <USB_ReadInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b02      	cmp	r3, #2
 8002432:	d107      	bne.n	8002444 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f002 0202 	and.w	r2, r2, #2
 8002442:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f005 feed 	bl	8008228 <USB_ReadInterrupts>
 800244e:	4603      	mov	r3, r0
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b10      	cmp	r3, #16
 8002456:	d161      	bne.n	800251c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0210 	bic.w	r2, r2, #16
 8002466:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	f003 020f 	and.w	r2, r3, #15
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	4413      	add	r3, r2
 8002484:	3304      	adds	r3, #4
 8002486:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	0c5b      	lsrs	r3, r3, #17
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	2b02      	cmp	r3, #2
 8002492:	d124      	bne.n	80024de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d035      	beq.n	800250c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	6a38      	ldr	r0, [r7, #32]
 80024b4:	f005 fd24 	bl	8007f00 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024c4:	441a      	add	r2, r3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	6a1a      	ldr	r2, [r3, #32]
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024d6:	441a      	add	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	621a      	str	r2, [r3, #32]
 80024dc:	e016      	b.n	800250c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	0c5b      	lsrs	r3, r3, #17
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d110      	bne.n	800250c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024f0:	2208      	movs	r2, #8
 80024f2:	4619      	mov	r1, r3
 80024f4:	6a38      	ldr	r0, [r7, #32]
 80024f6:	f005 fd03 	bl	8007f00 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	6a1a      	ldr	r2, [r3, #32]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002506:	441a      	add	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0210 	orr.w	r2, r2, #16
 800251a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f005 fe81 	bl	8008228 <USB_ReadInterrupts>
 8002526:	4603      	mov	r3, r0
 8002528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800252c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002530:	f040 80a7 	bne.w	8002682 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f005 fe86 	bl	800824e <USB_ReadDevAllOutEpInterrupt>
 8002542:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002544:	e099      	b.n	800267a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 808e 	beq.w	800266e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f005 feaa 	bl	80082b6 <USB_ReadDevOutEPInterrupt>
 8002562:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00c      	beq.n	8002588 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	4413      	add	r3, r2
 8002576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800257a:	461a      	mov	r2, r3
 800257c:	2301      	movs	r3, #1
 800257e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fef0 	bl	8003368 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00c      	beq.n	80025ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	4413      	add	r3, r2
 800259a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800259e:	461a      	mov	r2, r3
 80025a0:	2308      	movs	r3, #8
 80025a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80025a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 ffc6 	bl	8003538 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c2:	461a      	mov	r2, r3
 80025c4:	2310      	movs	r3, #16
 80025c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d030      	beq.n	8002634 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025da:	2b80      	cmp	r3, #128	; 0x80
 80025dc:	d109      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80025f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	3304      	adds	r3, #4
 8002606:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	78db      	ldrb	r3, [r3, #3]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d108      	bne.n	8002622 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2200      	movs	r2, #0
 8002614:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	b2db      	uxtb	r3, r3
 800261a:	4619      	mov	r1, r3
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f008 fa2d 	bl	800aa7c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	4413      	add	r3, r2
 800262a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262e:	461a      	mov	r2, r3
 8002630:	2302      	movs	r3, #2
 8002632:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	4413      	add	r3, r2
 8002646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264a:	461a      	mov	r2, r3
 800264c:	2320      	movs	r3, #32
 800264e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d009      	beq.n	800266e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	4413      	add	r3, r2
 8002662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002666:	461a      	mov	r2, r3
 8002668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800266c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	3301      	adds	r3, #1
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	085b      	lsrs	r3, r3, #1
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f af62 	bne.w	8002546 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f005 fdce 	bl	8008228 <USB_ReadInterrupts>
 800268c:	4603      	mov	r3, r0
 800268e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002692:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002696:	f040 80db 	bne.w	8002850 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f005 fdef 	bl	8008282 <USB_ReadDevAllInEpInterrupt>
 80026a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026aa:	e0cd      	b.n	8002848 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80c2 	beq.w	800283c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f005 fe15 	bl	80082f2 <USB_ReadDevInEPInterrupt>
 80026c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d057      	beq.n	8002784 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	2201      	movs	r2, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69f9      	ldr	r1, [r7, #28]
 80026f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026f4:	4013      	ands	r3, r2
 80026f6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002704:	461a      	mov	r2, r3
 8002706:	2301      	movs	r3, #1
 8002708:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d132      	bne.n	8002778 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	334c      	adds	r3, #76	; 0x4c
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4403      	add	r3, r0
 8002732:	3348      	adds	r3, #72	; 0x48
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4419      	add	r1, r3
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4403      	add	r3, r0
 8002746:	334c      	adds	r3, #76	; 0x4c
 8002748:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	2b00      	cmp	r3, #0
 800274e:	d113      	bne.n	8002778 <HAL_PCD_IRQHandler+0x3a2>
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3354      	adds	r3, #84	; 0x54
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d108      	bne.n	8002778 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002770:	461a      	mov	r2, r3
 8002772:	2101      	movs	r1, #1
 8002774:	f005 fe1e 	bl	80083b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4619      	mov	r1, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f008 f8f7 	bl	800a972 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	4413      	add	r3, r2
 8002796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800279a:	461a      	mov	r2, r3
 800279c:	2308      	movs	r3, #8
 800279e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b6:	461a      	mov	r2, r3
 80027b8:	2310      	movs	r3, #16
 80027ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d2:	461a      	mov	r2, r3
 80027d4:	2340      	movs	r3, #64	; 0x40
 80027d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d023      	beq.n	800282a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80027e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e4:	6a38      	ldr	r0, [r7, #32]
 80027e6:	f004 fcf1 	bl	80071cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	3338      	adds	r3, #56	; 0x38
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	3304      	adds	r3, #4
 80027fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	78db      	ldrb	r3, [r3, #3]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d108      	bne.n	8002818 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2200      	movs	r2, #0
 800280a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4619      	mov	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f008 f944 	bl	800aaa0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	4413      	add	r3, r2
 8002820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002824:	461a      	mov	r2, r3
 8002826:	2302      	movs	r3, #2
 8002828:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002834:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fd08 	bl	800324c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	3301      	adds	r3, #1
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	2b00      	cmp	r3, #0
 800284c:	f47f af2e 	bne.w	80026ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f005 fce7 	bl	8008228 <USB_ReadInterrupts>
 800285a:	4603      	mov	r3, r0
 800285c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002864:	d122      	bne.n	80028ac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002880:	2b01      	cmp	r3, #1
 8002882:	d108      	bne.n	8002896 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800288c:	2100      	movs	r1, #0
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f008 fabe 	bl	800ae10 <HAL_PCDEx_LPM_Callback>
 8002894:	e002      	b.n	800289c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f008 f8e2 	bl	800aa60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f005 fcb9 	bl	8008228 <USB_ReadInterrupts>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028c0:	d112      	bne.n	80028e8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d102      	bne.n	80028d8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f008 f89e 	bl	800aa14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f005 fc9b 	bl	8008228 <USB_ReadInterrupts>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028fc:	d121      	bne.n	8002942 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800290c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d111      	bne.n	800293c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	f003 020f 	and.w	r2, r3, #15
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002932:	2101      	movs	r1, #1
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f008 fa6b 	bl	800ae10 <HAL_PCDEx_LPM_Callback>
 800293a:	e002      	b.n	8002942 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f008 f869 	bl	800aa14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f005 fc6e 	bl	8008228 <USB_ReadInterrupts>
 800294c:	4603      	mov	r3, r0
 800294e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002956:	f040 80b7 	bne.w	8002ac8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2110      	movs	r1, #16
 8002974:	4618      	mov	r0, r3
 8002976:	f004 fc29 	bl	80071cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297a:	2300      	movs	r3, #0
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800297e:	e046      	b.n	8002a0e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800298c:	461a      	mov	r2, r3
 800298e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002992:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	4413      	add	r3, r2
 800299c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a4:	0151      	lsls	r1, r2, #5
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	440a      	add	r2, r1
 80029aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c0:	461a      	mov	r2, r3
 80029c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d8:	0151      	lsls	r1, r2, #5
 80029da:	69fa      	ldr	r2, [r7, #28]
 80029dc:	440a      	add	r2, r1
 80029de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f8:	0151      	lsls	r1, r2, #5
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	440a      	add	r2, r1
 80029fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a06:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d3b3      	bcc.n	8002980 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a26:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a2a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d016      	beq.n	8002a62 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a44:	f043 030b 	orr.w	r3, r3, #11
 8002a48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a5a:	f043 030b 	orr.w	r3, r3, #11
 8002a5e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a60:	e015      	b.n	8002a8e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a70:	4619      	mov	r1, r3
 8002a72:	f242 032b 	movw	r3, #8235	; 0x202b
 8002a76:	4313      	orrs	r3, r2
 8002a78:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a88:	f043 030b 	orr.w	r3, r3, #11
 8002a8c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a9c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002aa0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f005 fc7e 	bl	80083b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f005 fbab 	bl	8008228 <USB_ReadInterrupts>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002adc:	d124      	bne.n	8002b28 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f005 fc42 	bl	800836c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 fbea 	bl	80072c6 <USB_GetDevSpeed>
 8002af2:	4603      	mov	r3, r0
 8002af4:	461a      	mov	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681c      	ldr	r4, [r3, #0]
 8002afe:	f001 fa83 	bl	8004008 <HAL_RCC_GetHCLKFreq>
 8002b02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f004 f8ef 	bl	8006cf0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f007 ff55 	bl	800a9c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b26:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f005 fb7b 	bl	8008228 <USB_ReadInterrupts>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d10a      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f007 ff32 	bl	800a9a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f002 0208 	and.w	r2, r2, #8
 8002b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f005 fb66 	bl	8008228 <USB_ReadInterrupts>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	d122      	bne.n	8002bac <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b72:	2301      	movs	r3, #1
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
 8002b76:	e014      	b.n	8002ba2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fb27 	bl	80031ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d3e5      	bcc.n	8002b78 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f005 fb39 	bl	8008228 <USB_ReadInterrupts>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bc0:	d13b      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc6:	e02b      	b.n	8002c20 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	3340      	adds	r3, #64	; 0x40
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d115      	bne.n	8002c1a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002bee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	da12      	bge.n	8002c1a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	333f      	adds	r3, #63	; 0x3f
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	4619      	mov	r1, r3
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fae8 	bl	80031ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d3ce      	bcc.n	8002bc8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f005 faf2 	bl	8008228 <USB_ReadInterrupts>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c4e:	d155      	bne.n	8002cfc <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c50:	2301      	movs	r3, #1
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
 8002c54:	e045      	b.n	8002ce2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d12e      	bne.n	8002cdc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	da2b      	bge.n	8002cdc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002c90:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d121      	bne.n	8002cdc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10a      	bne.n	8002cdc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd8:	6053      	str	r3, [r2, #4]
            break;
 8002cda:	e007      	b.n	8002cec <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	3301      	adds	r3, #1
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d3b4      	bcc.n	8002c56 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f005 fa91 	bl	8008228 <USB_ReadInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d10:	d10a      	bne.n	8002d28 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f007 fed6 	bl	800aac4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f005 fa7b 	bl	8008228 <USB_ReadInterrupts>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d115      	bne.n	8002d68 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f007 fec6 	bl	800aae0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	e000      	b.n	8002d68 <HAL_PCD_IRQHandler+0x992>
      return;
 8002d66:	bf00      	nop
    }
  }
}
 8002d68:	3734      	adds	r7, #52	; 0x34
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd90      	pop	{r4, r7, pc}

08002d6e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_PCD_SetAddress+0x1a>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e013      	b.n	8002db0 <HAL_PCD_SetAddress+0x42>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f005 f9d9 	bl	8008158 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	4608      	mov	r0, r1
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	70fb      	strb	r3, [r7, #3]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	803b      	strh	r3, [r7, #0]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	da0f      	bge.n	8002dfe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	f003 020f 	and.w	r2, r3, #15
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	3338      	adds	r3, #56	; 0x38
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	3304      	adds	r3, #4
 8002df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	705a      	strb	r2, [r3, #1]
 8002dfc:	e00f      	b.n	8002e1e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	f003 020f 	and.w	r2, r3, #15
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	4413      	add	r3, r2
 8002e14:	3304      	adds	r3, #4
 8002e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e2a:	883a      	ldrh	r2, [r7, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	78ba      	ldrb	r2, [r7, #2]
 8002e34:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	785b      	ldrb	r3, [r3, #1]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d004      	beq.n	8002e48 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e48:	78bb      	ldrb	r3, [r7, #2]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d102      	bne.n	8002e54 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_PCD_EP_Open+0xaa>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e00e      	b.n	8002e80 <HAL_PCD_EP_Open+0xc8>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68f9      	ldr	r1, [r7, #12]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f004 fa4d 	bl	8007310 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	da0f      	bge.n	8002ebc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	f003 020f 	and.w	r2, r3, #15
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	3338      	adds	r3, #56	; 0x38
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	4413      	add	r3, r2
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	705a      	strb	r2, [r3, #1]
 8002eba:	e00f      	b.n	8002edc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 020f 	and.w	r2, r3, #15
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_PCD_EP_Close+0x6e>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e00e      	b.n	8002f14 <HAL_PCD_EP_Close+0x8c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68f9      	ldr	r1, [r7, #12]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f004 fa8b 	bl	8007420 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f2c:	7afb      	ldrb	r3, [r7, #11]
 8002f2e:	f003 020f 	and.w	r2, r3, #15
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4413      	add	r3, r2
 8002f42:	3304      	adds	r3, #4
 8002f44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2200      	movs	r2, #0
 8002f56:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5e:	7afb      	ldrb	r3, [r7, #11]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d102      	bne.n	8002f78 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f78:	7afb      	ldrb	r3, [r7, #11]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	6979      	ldr	r1, [r7, #20]
 8002f90:	f004 fd72 	bl	8007a78 <USB_EP0StartXfer>
 8002f94:	e008      	b.n	8002fa8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	6979      	ldr	r1, [r7, #20]
 8002fa4:	f004 fb18 	bl	80075d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	f003 020f 	and.w	r2, r3, #15
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002fd4:	681b      	ldr	r3, [r3, #0]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b086      	sub	sp, #24
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	f003 020f 	and.w	r2, r3, #15
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	3338      	adds	r3, #56	; 0x38
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4413      	add	r3, r2
 8003006:	3304      	adds	r3, #4
 8003008:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2201      	movs	r2, #1
 8003020:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003022:	7afb      	ldrb	r3, [r7, #11]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	b2da      	uxtb	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d102      	bne.n	800303c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800303c:	7afb      	ldrb	r3, [r7, #11]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6979      	ldr	r1, [r7, #20]
 8003054:	f004 fd10 	bl	8007a78 <USB_EP0StartXfer>
 8003058:	e008      	b.n	800306c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	6979      	ldr	r1, [r7, #20]
 8003068:	f004 fab6 	bl	80075d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f003 020f 	and.w	r2, r3, #15
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	d901      	bls.n	8003094 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e050      	b.n	8003136 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003098:	2b00      	cmp	r3, #0
 800309a:	da0f      	bge.n	80030bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	f003 020f 	and.w	r2, r3, #15
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	3338      	adds	r3, #56	; 0x38
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	3304      	adds	r3, #4
 80030b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	705a      	strb	r2, [r3, #1]
 80030ba:	e00d      	b.n	80030d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	3304      	adds	r3, #4
 80030d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_PCD_EP_SetStall+0x82>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e01e      	b.n	8003136 <HAL_PCD_EP_SetStall+0xc0>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68f9      	ldr	r1, [r7, #12]
 8003106:	4618      	mov	r0, r3
 8003108:	f004 ff52 	bl	8007fb0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	b2d9      	uxtb	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003126:	461a      	mov	r2, r3
 8003128:	f005 f944 	bl	80083b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	460b      	mov	r3, r1
 8003148:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	f003 020f 	and.w	r2, r3, #15
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	d901      	bls.n	800315c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e042      	b.n	80031e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800315c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003160:	2b00      	cmp	r3, #0
 8003162:	da0f      	bge.n	8003184 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 020f 	and.w	r2, r3, #15
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	3338      	adds	r3, #56	; 0x38
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	3304      	adds	r3, #4
 800317a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	705a      	strb	r2, [r3, #1]
 8003182:	e00f      	b.n	80031a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_PCD_EP_ClrStall+0x86>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e00e      	b.n	80031e2 <HAL_PCD_EP_ClrStall+0xa4>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68f9      	ldr	r1, [r7, #12]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f004 ff5a 	bl	800808c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80031f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	da0c      	bge.n	8003218 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	f003 020f 	and.w	r2, r3, #15
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	3338      	adds	r3, #56	; 0x38
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	3304      	adds	r3, #4
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	e00c      	b.n	8003232 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 020f 	and.w	r2, r3, #15
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	3304      	adds	r3, #4
 8003230:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68f9      	ldr	r1, [r7, #12]
 8003238:	4618      	mov	r0, r3
 800323a:	f004 fd79 	bl	8007d30 <USB_EPStopXfer>
 800323e:	4603      	mov	r3, r0
 8003240:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003242:	7afb      	ldrb	r3, [r7, #11]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	af02      	add	r7, sp, #8
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	3338      	adds	r3, #56	; 0x38
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	3304      	adds	r3, #4
 8003272:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a1a      	ldr	r2, [r3, #32]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	429a      	cmp	r2, r3
 800327e:	d901      	bls.n	8003284 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e06c      	b.n	800335e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	699a      	ldr	r2, [r3, #24]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	429a      	cmp	r2, r3
 8003298:	d902      	bls.n	80032a0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	3303      	adds	r3, #3
 80032a4:	089b      	lsrs	r3, r3, #2
 80032a6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032a8:	e02b      	b.n	8003302 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d902      	bls.n	80032c6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3303      	adds	r3, #3
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6919      	ldr	r1, [r3, #16]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	4603      	mov	r3, r0
 80032e4:	6978      	ldr	r0, [r7, #20]
 80032e6:	f004 fdcd 	bl	8007e84 <USB_WritePacket>

    ep->xfer_buff  += len;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	441a      	add	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a1a      	ldr	r2, [r3, #32]
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	441a      	add	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	429a      	cmp	r2, r3
 8003316:	d809      	bhi.n	800332c <PCD_WriteEmptyTxFifo+0xe0>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a1a      	ldr	r2, [r3, #32]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003320:	429a      	cmp	r2, r3
 8003322:	d203      	bcs.n	800332c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1be      	bne.n	80032aa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	699a      	ldr	r2, [r3, #24]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	429a      	cmp	r2, r3
 8003336:	d811      	bhi.n	800335c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	2201      	movs	r2, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	43db      	mvns	r3, r3
 8003352:	6939      	ldr	r1, [r7, #16]
 8003354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003358:	4013      	ands	r3, r2
 800335a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	333c      	adds	r3, #60	; 0x3c
 8003380:	3304      	adds	r3, #4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d17b      	bne.n	8003496 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d015      	beq.n	80033d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	4a61      	ldr	r2, [pc, #388]	; (8003530 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	f240 80b9 	bls.w	8003524 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80b3 	beq.w	8003524 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ca:	461a      	mov	r2, r3
 80033cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d0:	6093      	str	r3, [r2, #8]
 80033d2:	e0a7      	b.n	8003524 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ea:	461a      	mov	r2, r3
 80033ec:	2320      	movs	r3, #32
 80033ee:	6093      	str	r3, [r2, #8]
 80033f0:	e098      	b.n	8003524 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f040 8093 	bne.w	8003524 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	4a4b      	ldr	r2, [pc, #300]	; (8003530 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d90f      	bls.n	8003426 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341c:	461a      	mov	r2, r3
 800341e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003422:	6093      	str	r3, [r2, #8]
 8003424:	e07e      	b.n	8003524 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4413      	add	r3, r2
 8003438:	3304      	adds	r3, #4
 800343a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	0159      	lsls	r1, r3, #5
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	440b      	add	r3, r1
 8003448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003452:	1ad2      	subs	r2, r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d114      	bne.n	8003488 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003470:	461a      	mov	r2, r3
 8003472:	2101      	movs	r1, #1
 8003474:	f004 ff9e 	bl	80083b4 <USB_EP0_OutStart>
 8003478:	e006      	b.n	8003488 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	441a      	add	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	4619      	mov	r1, r3
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f007 fa54 	bl	800a93c <HAL_PCD_DataOutStageCallback>
 8003494:	e046      	b.n	8003524 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	4a26      	ldr	r2, [pc, #152]	; (8003534 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d124      	bne.n	80034e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b4:	461a      	mov	r2, r3
 80034b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ba:	6093      	str	r3, [r2, #8]
 80034bc:	e032      	b.n	8003524 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d4:	461a      	mov	r2, r3
 80034d6:	2320      	movs	r3, #32
 80034d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	4619      	mov	r1, r3
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f007 fa2b 	bl	800a93c <HAL_PCD_DataOutStageCallback>
 80034e6:	e01d      	b.n	8003524 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d114      	bne.n	8003518 <PCD_EP_OutXfrComplete_int+0x1b0>
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d108      	bne.n	8003518 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003510:	461a      	mov	r2, r3
 8003512:	2100      	movs	r1, #0
 8003514:	f004 ff4e 	bl	80083b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	4619      	mov	r1, r3
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f007 fa0c 	bl	800a93c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	4f54300a 	.word	0x4f54300a
 8003534:	4f54310a 	.word	0x4f54310a

08003538 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	333c      	adds	r3, #60	; 0x3c
 8003550:	3304      	adds	r3, #4
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4a15      	ldr	r2, [pc, #84]	; (80035c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d90e      	bls.n	800358c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003584:	461a      	mov	r2, r3
 8003586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f007 f9c3 	bl	800a918 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d90c      	bls.n	80035b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d108      	bne.n	80035b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035ac:	461a      	mov	r2, r3
 80035ae:	2101      	movs	r1, #1
 80035b0:	f004 ff00 	bl	80083b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	4f54300a 	.word	0x4f54300a

080035c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	70fb      	strb	r3, [r7, #3]
 80035d0:	4613      	mov	r3, r2
 80035d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d107      	bne.n	80035f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035e2:	883b      	ldrh	r3, [r7, #0]
 80035e4:	0419      	lsls	r1, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	629a      	str	r2, [r3, #40]	; 0x28
 80035f0:	e028      	b.n	8003644 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4413      	add	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003600:	2300      	movs	r3, #0
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	e00d      	b.n	8003622 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	3340      	adds	r3, #64	; 0x40
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	0c1b      	lsrs	r3, r3, #16
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4413      	add	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	3301      	adds	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	3b01      	subs	r3, #1
 8003628:	429a      	cmp	r2, r3
 800362a:	d3ec      	bcc.n	8003606 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800362c:	883b      	ldrh	r3, [r7, #0]
 800362e:	0418      	lsls	r0, r3, #16
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	3b01      	subs	r3, #1
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	4302      	orrs	r2, r0
 800363c:	3340      	adds	r3, #64	; 0x40
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	460b      	mov	r3, r1
 800365c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	10000003 	.word	0x10000003

080036bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]
}
 80036cc:	bf00      	nop
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40007000 	.word	0x40007000

080036dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036e4:	2300      	movs	r3, #0
 80036e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e291      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8087 	beq.w	800380e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003700:	4b96      	ldr	r3, [pc, #600]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b04      	cmp	r3, #4
 800370a:	d00c      	beq.n	8003726 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370c:	4b93      	ldr	r3, [pc, #588]	; (800395c <HAL_RCC_OscConfig+0x280>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b08      	cmp	r3, #8
 8003716:	d112      	bne.n	800373e <HAL_RCC_OscConfig+0x62>
 8003718:	4b90      	ldr	r3, [pc, #576]	; (800395c <HAL_RCC_OscConfig+0x280>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003724:	d10b      	bne.n	800373e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003726:	4b8d      	ldr	r3, [pc, #564]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d06c      	beq.n	800380c <HAL_RCC_OscConfig+0x130>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d168      	bne.n	800380c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e26b      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003746:	d106      	bne.n	8003756 <HAL_RCC_OscConfig+0x7a>
 8003748:	4b84      	ldr	r3, [pc, #528]	; (800395c <HAL_RCC_OscConfig+0x280>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a83      	ldr	r2, [pc, #524]	; (800395c <HAL_RCC_OscConfig+0x280>)
 800374e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	e02e      	b.n	80037b4 <HAL_RCC_OscConfig+0xd8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0x9c>
 800375e:	4b7f      	ldr	r3, [pc, #508]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a7e      	ldr	r2, [pc, #504]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b7c      	ldr	r3, [pc, #496]	; (800395c <HAL_RCC_OscConfig+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a7b      	ldr	r2, [pc, #492]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e01d      	b.n	80037b4 <HAL_RCC_OscConfig+0xd8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0xc0>
 8003782:	4b76      	ldr	r3, [pc, #472]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a75      	ldr	r2, [pc, #468]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b73      	ldr	r3, [pc, #460]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a72      	ldr	r2, [pc, #456]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e00b      	b.n	80037b4 <HAL_RCC_OscConfig+0xd8>
 800379c:	4b6f      	ldr	r3, [pc, #444]	; (800395c <HAL_RCC_OscConfig+0x280>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a6e      	ldr	r2, [pc, #440]	; (800395c <HAL_RCC_OscConfig+0x280>)
 80037a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b6c      	ldr	r3, [pc, #432]	; (800395c <HAL_RCC_OscConfig+0x280>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a6b      	ldr	r2, [pc, #428]	; (800395c <HAL_RCC_OscConfig+0x280>)
 80037ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d013      	beq.n	80037e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fd fe06 	bl	80013cc <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fd fe02 	bl	80013cc <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	; 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e21f      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	4b61      	ldr	r3, [pc, #388]	; (800395c <HAL_RCC_OscConfig+0x280>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0xe8>
 80037e2:	e014      	b.n	800380e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fd fdf2 	bl	80013cc <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd fdee 	bl	80013cc <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e20b      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fe:	4b57      	ldr	r3, [pc, #348]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x110>
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d069      	beq.n	80038ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800381a:	4b50      	ldr	r3, [pc, #320]	; (800395c <HAL_RCC_OscConfig+0x280>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003826:	4b4d      	ldr	r3, [pc, #308]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b08      	cmp	r3, #8
 8003830:	d11c      	bne.n	800386c <HAL_RCC_OscConfig+0x190>
 8003832:	4b4a      	ldr	r3, [pc, #296]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d116      	bne.n	800386c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	4b47      	ldr	r3, [pc, #284]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_RCC_OscConfig+0x17a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d001      	beq.n	8003856 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e1df      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003856:	4b41      	ldr	r3, [pc, #260]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	493d      	ldr	r1, [pc, #244]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386a:	e040      	b.n	80038ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d023      	beq.n	80038bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003874:	4b39      	ldr	r3, [pc, #228]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a38      	ldr	r2, [pc, #224]	; (800395c <HAL_RCC_OscConfig+0x280>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fd fda4 	bl	80013cc <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003888:	f7fd fda0 	bl	80013cc <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e1bd      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389a:	4b30      	ldr	r3, [pc, #192]	; (800395c <HAL_RCC_OscConfig+0x280>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a6:	4b2d      	ldr	r3, [pc, #180]	; (800395c <HAL_RCC_OscConfig+0x280>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4929      	ldr	r1, [pc, #164]	; (800395c <HAL_RCC_OscConfig+0x280>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	600b      	str	r3, [r1, #0]
 80038ba:	e018      	b.n	80038ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038bc:	4b27      	ldr	r3, [pc, #156]	; (800395c <HAL_RCC_OscConfig+0x280>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a26      	ldr	r2, [pc, #152]	; (800395c <HAL_RCC_OscConfig+0x280>)
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fd fd80 	bl	80013cc <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d0:	f7fd fd7c 	bl	80013cc <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e199      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e2:	4b1e      	ldr	r3, [pc, #120]	; (800395c <HAL_RCC_OscConfig+0x280>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d038      	beq.n	800396c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d019      	beq.n	8003936 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003902:	4b16      	ldr	r3, [pc, #88]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003906:	4a15      	ldr	r2, [pc, #84]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390e:	f7fd fd5d 	bl	80013cc <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003916:	f7fd fd59 	bl	80013cc <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e176      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003928:	4b0c      	ldr	r3, [pc, #48]	; (800395c <HAL_RCC_OscConfig+0x280>)
 800392a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f0      	beq.n	8003916 <HAL_RCC_OscConfig+0x23a>
 8003934:	e01a      	b.n	800396c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <HAL_RCC_OscConfig+0x280>)
 8003938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393a:	4a08      	ldr	r2, [pc, #32]	; (800395c <HAL_RCC_OscConfig+0x280>)
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003942:	f7fd fd43 	bl	80013cc <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003948:	e00a      	b.n	8003960 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800394a:	f7fd fd3f 	bl	80013cc <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d903      	bls.n	8003960 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e15c      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
 800395c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003960:	4b91      	ldr	r3, [pc, #580]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1ee      	bne.n	800394a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80a4 	beq.w	8003ac2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800397a:	4b8b      	ldr	r3, [pc, #556]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10d      	bne.n	80039a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003986:	4b88      	ldr	r3, [pc, #544]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	4a87      	ldr	r2, [pc, #540]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003990:	6413      	str	r3, [r2, #64]	; 0x40
 8003992:	4b85      	ldr	r3, [pc, #532]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a2:	4b82      	ldr	r3, [pc, #520]	; (8003bac <HAL_RCC_OscConfig+0x4d0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d118      	bne.n	80039e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039ae:	4b7f      	ldr	r3, [pc, #508]	; (8003bac <HAL_RCC_OscConfig+0x4d0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a7e      	ldr	r2, [pc, #504]	; (8003bac <HAL_RCC_OscConfig+0x4d0>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ba:	f7fd fd07 	bl	80013cc <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7fd fd03 	bl	80013cc <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b64      	cmp	r3, #100	; 0x64
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e120      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d4:	4b75      	ldr	r3, [pc, #468]	; (8003bac <HAL_RCC_OscConfig+0x4d0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d106      	bne.n	80039f6 <HAL_RCC_OscConfig+0x31a>
 80039e8:	4b6f      	ldr	r3, [pc, #444]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	4a6e      	ldr	r2, [pc, #440]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	; 0x70
 80039f4:	e02d      	b.n	8003a52 <HAL_RCC_OscConfig+0x376>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x33c>
 80039fe:	4b6a      	ldr	r3, [pc, #424]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	4a69      	ldr	r2, [pc, #420]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0a:	4b67      	ldr	r3, [pc, #412]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	4a66      	ldr	r2, [pc, #408]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003a10:	f023 0304 	bic.w	r3, r3, #4
 8003a14:	6713      	str	r3, [r2, #112]	; 0x70
 8003a16:	e01c      	b.n	8003a52 <HAL_RCC_OscConfig+0x376>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b05      	cmp	r3, #5
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCC_OscConfig+0x35e>
 8003a20:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	4a60      	ldr	r2, [pc, #384]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003a26:	f043 0304 	orr.w	r3, r3, #4
 8003a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2c:	4b5e      	ldr	r3, [pc, #376]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	4a5d      	ldr	r2, [pc, #372]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70
 8003a38:	e00b      	b.n	8003a52 <HAL_RCC_OscConfig+0x376>
 8003a3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a5a      	ldr	r2, [pc, #360]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70
 8003a46:	4b58      	ldr	r3, [pc, #352]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a57      	ldr	r2, [pc, #348]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003a4c:	f023 0304 	bic.w	r3, r3, #4
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d015      	beq.n	8003a86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5a:	f7fd fcb7 	bl	80013cc <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fd fcb3 	bl	80013cc <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e0ce      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a78:	4b4b      	ldr	r3, [pc, #300]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ee      	beq.n	8003a62 <HAL_RCC_OscConfig+0x386>
 8003a84:	e014      	b.n	8003ab0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a86:	f7fd fca1 	bl	80013cc <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fd fc9d 	bl	80013cc <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e0b8      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa4:	4b40      	ldr	r3, [pc, #256]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ee      	bne.n	8003a8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d105      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab6:	4b3c      	ldr	r3, [pc, #240]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	4a3b      	ldr	r2, [pc, #236]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80a4 	beq.w	8003c14 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003acc:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d06b      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d149      	bne.n	8003b74 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae0:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a30      	ldr	r2, [pc, #192]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fd fc6e 	bl	80013cc <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fd fc6a 	bl	80013cc <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e087      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b06:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69da      	ldr	r2, [r3, #28]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	019b      	lsls	r3, r3, #6
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	085b      	lsrs	r3, r3, #1
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	041b      	lsls	r3, r3, #16
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	061b      	lsls	r3, r3, #24
 8003b36:	4313      	orrs	r3, r2
 8003b38:	4a1b      	ldr	r2, [pc, #108]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003b3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b3e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a18      	ldr	r2, [pc, #96]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fc3e 	bl	80013cc <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fd fc3a 	bl	80013cc <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e057      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b66:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x478>
 8003b72:	e04f      	b.n	8003c14 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fd fc24 	bl	80013cc <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b88:	f7fd fc20 	bl	80013cc <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e03d      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <HAL_RCC_OscConfig+0x4cc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x4ac>
 8003ba6:	e035      	b.n	8003c14 <HAL_RCC_OscConfig+0x538>
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <HAL_RCC_OscConfig+0x544>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d028      	beq.n	8003c10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d121      	bne.n	8003c10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d11a      	bne.n	8003c10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003be0:	4013      	ands	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003be6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d111      	bne.n	8003c10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	085b      	lsrs	r3, r3, #1
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d107      	bne.n	8003c10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800

08003c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0d0      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	; (8003de8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d910      	bls.n	8003c6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b67      	ldr	r3, [pc, #412]	; (8003de8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 020f 	bic.w	r2, r3, #15
 8003c52:	4965      	ldr	r1, [pc, #404]	; (8003de8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b63      	ldr	r3, [pc, #396]	; (8003de8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0b8      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d020      	beq.n	8003cba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c84:	4b59      	ldr	r3, [pc, #356]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4a58      	ldr	r2, [pc, #352]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003c8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c9c:	4b53      	ldr	r3, [pc, #332]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4a52      	ldr	r2, [pc, #328]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003ca2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ca6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca8:	4b50      	ldr	r3, [pc, #320]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	494d      	ldr	r1, [pc, #308]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d040      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d107      	bne.n	8003cde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	4b47      	ldr	r3, [pc, #284]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d115      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e07f      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce6:	4b41      	ldr	r3, [pc, #260]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e073      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf6:	4b3d      	ldr	r3, [pc, #244]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e06b      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d06:	4b39      	ldr	r3, [pc, #228]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f023 0203 	bic.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4936      	ldr	r1, [pc, #216]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d18:	f7fd fb58 	bl	80013cc <HAL_GetTick>
 8003d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d20:	f7fd fb54 	bl	80013cc <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e053      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 020c 	and.w	r2, r3, #12
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d1eb      	bne.n	8003d20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d48:	4b27      	ldr	r3, [pc, #156]	; (8003de8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d210      	bcs.n	8003d78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 020f 	bic.w	r2, r3, #15
 8003d5e:	4922      	ldr	r1, [pc, #136]	; (8003de8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d66:	4b20      	ldr	r3, [pc, #128]	; (8003de8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e032      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d84:	4b19      	ldr	r3, [pc, #100]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4916      	ldr	r1, [pc, #88]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	490e      	ldr	r1, [pc, #56]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003db6:	f000 f821 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	490a      	ldr	r1, [pc, #40]	; (8003df0 <HAL_RCC_ClockConfig+0x1cc>)
 8003dc8:	5ccb      	ldrb	r3, [r1, r3]
 8003dca:	fa22 f303 	lsr.w	r3, r2, r3
 8003dce:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <HAL_RCC_ClockConfig+0x1d0>)
 8003dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCC_ClockConfig+0x1d4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fd fab4 	bl	8001344 <HAL_InitTick>

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40023c00 	.word	0x40023c00
 8003dec:	40023800 	.word	0x40023800
 8003df0:	0800b218 	.word	0x0800b218
 8003df4:	20000020 	.word	0x20000020
 8003df8:	20000024 	.word	0x20000024

08003dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e00:	b094      	sub	sp, #80	; 0x50
 8003e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	647b      	str	r3, [r7, #68]	; 0x44
 8003e08:	2300      	movs	r3, #0
 8003e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e14:	4b79      	ldr	r3, [pc, #484]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d00d      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x40>
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	f200 80e1 	bhi.w	8003fe8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x34>
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d003      	beq.n	8003e36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e2e:	e0db      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e30:	4b73      	ldr	r3, [pc, #460]	; (8004000 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e34:	e0db      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e36:	4b73      	ldr	r3, [pc, #460]	; (8004004 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e3a:	e0d8      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e3c:	4b6f      	ldr	r3, [pc, #444]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e44:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e46:	4b6d      	ldr	r3, [pc, #436]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d063      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e52:	4b6a      	ldr	r3, [pc, #424]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	099b      	lsrs	r3, r3, #6
 8003e58:	2200      	movs	r2, #0
 8003e5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30
 8003e66:	2300      	movs	r3, #0
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e6e:	4622      	mov	r2, r4
 8003e70:	462b      	mov	r3, r5
 8003e72:	f04f 0000 	mov.w	r0, #0
 8003e76:	f04f 0100 	mov.w	r1, #0
 8003e7a:	0159      	lsls	r1, r3, #5
 8003e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e80:	0150      	lsls	r0, r2, #5
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4621      	mov	r1, r4
 8003e88:	1a51      	subs	r1, r2, r1
 8003e8a:	6139      	str	r1, [r7, #16]
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ea0:	4659      	mov	r1, fp
 8003ea2:	018b      	lsls	r3, r1, #6
 8003ea4:	4651      	mov	r1, sl
 8003ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eaa:	4651      	mov	r1, sl
 8003eac:	018a      	lsls	r2, r1, #6
 8003eae:	4651      	mov	r1, sl
 8003eb0:	ebb2 0801 	subs.w	r8, r2, r1
 8003eb4:	4659      	mov	r1, fp
 8003eb6:	eb63 0901 	sbc.w	r9, r3, r1
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ece:	4690      	mov	r8, r2
 8003ed0:	4699      	mov	r9, r3
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	eb18 0303 	adds.w	r3, r8, r3
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	462b      	mov	r3, r5
 8003edc:	eb49 0303 	adc.w	r3, r9, r3
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eee:	4629      	mov	r1, r5
 8003ef0:	024b      	lsls	r3, r1, #9
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ef8:	4621      	mov	r1, r4
 8003efa:	024a      	lsls	r2, r1, #9
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f02:	2200      	movs	r2, #0
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f0c:	f7fc f984 	bl	8000218 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4613      	mov	r3, r2
 8003f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f18:	e058      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1a:	4b38      	ldr	r3, [pc, #224]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	099b      	lsrs	r3, r3, #6
 8003f20:	2200      	movs	r2, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	4611      	mov	r1, r2
 8003f26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f2a:	623b      	str	r3, [r7, #32]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	f04f 0000 	mov.w	r0, #0
 8003f3c:	f04f 0100 	mov.w	r1, #0
 8003f40:	0159      	lsls	r1, r3, #5
 8003f42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f46:	0150      	lsls	r0, r2, #5
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4641      	mov	r1, r8
 8003f4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f52:	4649      	mov	r1, r9
 8003f54:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f6c:	ebb2 040a 	subs.w	r4, r2, sl
 8003f70:	eb63 050b 	sbc.w	r5, r3, fp
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	00eb      	lsls	r3, r5, #3
 8003f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f82:	00e2      	lsls	r2, r4, #3
 8003f84:	4614      	mov	r4, r2
 8003f86:	461d      	mov	r5, r3
 8003f88:	4643      	mov	r3, r8
 8003f8a:	18e3      	adds	r3, r4, r3
 8003f8c:	603b      	str	r3, [r7, #0]
 8003f8e:	464b      	mov	r3, r9
 8003f90:	eb45 0303 	adc.w	r3, r5, r3
 8003f94:	607b      	str	r3, [r7, #4]
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	028b      	lsls	r3, r1, #10
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fac:	4621      	mov	r1, r4
 8003fae:	028a      	lsls	r2, r1, #10
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	61fa      	str	r2, [r7, #28]
 8003fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fc0:	f7fc f92a 	bl	8000218 <__aeabi_uldivmod>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4613      	mov	r3, r2
 8003fca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	0c1b      	lsrs	r3, r3, #16
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003fdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fe6:	e002      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3750      	adds	r7, #80	; 0x50
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023800 	.word	0x40023800
 8004000:	00f42400 	.word	0x00f42400
 8004004:	007a1200 	.word	0x007a1200

08004008 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800400c:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_RCC_GetHCLKFreq+0x14>)
 800400e:	681b      	ldr	r3, [r3, #0]
}
 8004010:	4618      	mov	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20000020 	.word	0x20000020

08004020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004024:	f7ff fff0 	bl	8004008 <HAL_RCC_GetHCLKFreq>
 8004028:	4602      	mov	r2, r0
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	0a9b      	lsrs	r3, r3, #10
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	4903      	ldr	r1, [pc, #12]	; (8004044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004036:	5ccb      	ldrb	r3, [r1, r3]
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40023800 	.word	0x40023800
 8004044:	0800b228 	.word	0x0800b228

08004048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800404c:	f7ff ffdc 	bl	8004008 <HAL_RCC_GetHCLKFreq>
 8004050:	4602      	mov	r2, r0
 8004052:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	0b5b      	lsrs	r3, r3, #13
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	4903      	ldr	r1, [pc, #12]	; (800406c <HAL_RCC_GetPCLK2Freq+0x24>)
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004064:	4618      	mov	r0, r3
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40023800 	.word	0x40023800
 800406c:	0800b228 	.word	0x0800b228

08004070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d012      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004098:	4b69      	ldr	r3, [pc, #420]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4a68      	ldr	r2, [pc, #416]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040a2:	6093      	str	r3, [r2, #8]
 80040a4:	4b66      	ldr	r3, [pc, #408]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ac:	4964      	ldr	r1, [pc, #400]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80040ba:	2301      	movs	r3, #1
 80040bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d017      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040ca:	4b5d      	ldr	r3, [pc, #372]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	4959      	ldr	r1, [pc, #356]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e8:	d101      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80040ea:	2301      	movs	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80040f6:	2301      	movs	r3, #1
 80040f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d017      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004106:	4b4e      	ldr	r3, [pc, #312]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800410c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	494a      	ldr	r1, [pc, #296]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004124:	d101      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004126:	2301      	movs	r3, #1
 8004128:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004132:	2301      	movs	r3, #1
 8004134:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004142:	2301      	movs	r3, #1
 8004144:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 808b 	beq.w	800426a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004154:	4b3a      	ldr	r3, [pc, #232]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	4a39      	ldr	r2, [pc, #228]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415e:	6413      	str	r3, [r2, #64]	; 0x40
 8004160:	4b37      	ldr	r3, [pc, #220]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800416c:	4b35      	ldr	r3, [pc, #212]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a34      	ldr	r2, [pc, #208]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004178:	f7fd f928 	bl	80013cc <HAL_GetTick>
 800417c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004180:	f7fd f924 	bl	80013cc <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	; 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e357      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004192:	4b2c      	ldr	r3, [pc, #176]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800419e:	4b28      	ldr	r3, [pc, #160]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d035      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d02e      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041bc:	4b20      	ldr	r3, [pc, #128]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041c6:	4b1e      	ldr	r3, [pc, #120]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041d2:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	4a1a      	ldr	r2, [pc, #104]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80041de:	4a18      	ldr	r2, [pc, #96]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041e4:	4b16      	ldr	r3, [pc, #88]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d114      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fd f8ec 	bl	80013cc <HAL_GetTick>
 80041f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f6:	e00a      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f7fd f8e8 	bl	80013cc <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e319      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420e:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0ee      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004226:	d111      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004234:	4b04      	ldr	r3, [pc, #16]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004236:	400b      	ands	r3, r1
 8004238:	4901      	ldr	r1, [pc, #4]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
 800423e:	e00b      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004240:	40023800 	.word	0x40023800
 8004244:	40007000 	.word	0x40007000
 8004248:	0ffffcff 	.word	0x0ffffcff
 800424c:	4baa      	ldr	r3, [pc, #680]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4aa9      	ldr	r2, [pc, #676]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004252:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004256:	6093      	str	r3, [r2, #8]
 8004258:	4ba7      	ldr	r3, [pc, #668]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800425a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004264:	49a4      	ldr	r1, [pc, #656]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004266:	4313      	orrs	r3, r2
 8004268:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	d010      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004276:	4ba0      	ldr	r3, [pc, #640]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800427c:	4a9e      	ldr	r2, [pc, #632]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800427e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004282:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004286:	4b9c      	ldr	r3, [pc, #624]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004288:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	4999      	ldr	r1, [pc, #612]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042a4:	4b94      	ldr	r3, [pc, #592]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b2:	4991      	ldr	r1, [pc, #580]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042c6:	4b8c      	ldr	r3, [pc, #560]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d4:	4988      	ldr	r1, [pc, #544]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042e8:	4b83      	ldr	r3, [pc, #524]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042f6:	4980      	ldr	r1, [pc, #512]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800430a:	4b7b      	ldr	r3, [pc, #492]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	4977      	ldr	r1, [pc, #476]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800432c:	4b72      	ldr	r3, [pc, #456]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	f023 0203 	bic.w	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	496f      	ldr	r1, [pc, #444]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800434e:	4b6a      	ldr	r3, [pc, #424]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004354:	f023 020c 	bic.w	r2, r3, #12
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435c:	4966      	ldr	r1, [pc, #408]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004370:	4b61      	ldr	r3, [pc, #388]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437e:	495e      	ldr	r1, [pc, #376]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004392:	4b59      	ldr	r3, [pc, #356]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a0:	4955      	ldr	r1, [pc, #340]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043b4:	4b50      	ldr	r3, [pc, #320]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	494d      	ldr	r1, [pc, #308]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80043d6:	4b48      	ldr	r3, [pc, #288]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e4:	4944      	ldr	r1, [pc, #272]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80043f8:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004406:	493c      	ldr	r1, [pc, #240]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800441a:	4b37      	ldr	r3, [pc, #220]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800441c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004420:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004428:	4933      	ldr	r1, [pc, #204]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800443c:	4b2e      	ldr	r3, [pc, #184]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004442:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800444a:	492b      	ldr	r1, [pc, #172]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d011      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800445e:	4b26      	ldr	r3, [pc, #152]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004464:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800446c:	4922      	ldr	r1, [pc, #136]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800447c:	d101      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800447e:	2301      	movs	r3, #1
 8004480:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800448e:	2301      	movs	r3, #1
 8004490:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800449e:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ac:	4912      	ldr	r1, [pc, #72]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00b      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044c0:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d0:	4909      	ldr	r1, [pc, #36]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d006      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 80d9 	beq.w	800469e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044ec:	4b02      	ldr	r3, [pc, #8]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a01      	ldr	r2, [pc, #4]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044f6:	e001      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80044f8:	40023800 	.word	0x40023800
 80044fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fe:	f7fc ff65 	bl	80013cc <HAL_GetTick>
 8004502:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004506:	f7fc ff61 	bl	80013cc <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b64      	cmp	r3, #100	; 0x64
 8004512:	d901      	bls.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e194      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004518:	4b6c      	ldr	r3, [pc, #432]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d021      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004534:	2b00      	cmp	r3, #0
 8004536:	d11d      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004538:	4b64      	ldr	r3, [pc, #400]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800453a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800453e:	0c1b      	lsrs	r3, r3, #16
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004546:	4b61      	ldr	r3, [pc, #388]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454c:	0e1b      	lsrs	r3, r3, #24
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	019a      	lsls	r2, r3, #6
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	431a      	orrs	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	061b      	lsls	r3, r3, #24
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	071b      	lsls	r3, r3, #28
 800456c:	4957      	ldr	r1, [pc, #348]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d004      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004588:	d00a      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004592:	2b00      	cmp	r3, #0
 8004594:	d02e      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800459e:	d129      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045a0:	4b4a      	ldr	r3, [pc, #296]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a6:	0c1b      	lsrs	r3, r3, #16
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045ae:	4b47      	ldr	r3, [pc, #284]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b4:	0f1b      	lsrs	r3, r3, #28
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	019a      	lsls	r2, r3, #6
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	431a      	orrs	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	071b      	lsls	r3, r3, #28
 80045d4:	493d      	ldr	r1, [pc, #244]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045dc:	4b3b      	ldr	r3, [pc, #236]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e2:	f023 021f 	bic.w	r2, r3, #31
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	3b01      	subs	r3, #1
 80045ec:	4937      	ldr	r1, [pc, #220]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01d      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004600:	4b32      	ldr	r3, [pc, #200]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004606:	0e1b      	lsrs	r3, r3, #24
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800460e:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004614:	0f1b      	lsrs	r3, r3, #28
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	019a      	lsls	r2, r3, #6
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	041b      	lsls	r3, r3, #16
 8004628:	431a      	orrs	r2, r3
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	431a      	orrs	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	071b      	lsls	r3, r3, #28
 8004634:	4925      	ldr	r1, [pc, #148]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d011      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	019a      	lsls	r2, r3, #6
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	041b      	lsls	r3, r3, #16
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	061b      	lsls	r3, r3, #24
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	071b      	lsls	r3, r3, #28
 8004664:	4919      	ldr	r1, [pc, #100]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800466c:	4b17      	ldr	r3, [pc, #92]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a16      	ldr	r2, [pc, #88]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004672:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004678:	f7fc fea8 	bl	80013cc <HAL_GetTick>
 800467c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004680:	f7fc fea4 	bl	80013cc <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	; 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e0d7      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004692:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	f040 80cd 	bne.w	8004840 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046a6:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a08      	ldr	r2, [pc, #32]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b2:	f7fc fe8b 	bl	80013cc <HAL_GetTick>
 80046b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046b8:	e00a      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046ba:	f7fc fe87 	bl	80013cc <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b64      	cmp	r3, #100	; 0x64
 80046c6:	d903      	bls.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e0ba      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80046cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046d0:	4b5e      	ldr	r3, [pc, #376]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046dc:	d0ed      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d02e      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d12a      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004706:	4b51      	ldr	r3, [pc, #324]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004714:	4b4d      	ldr	r3, [pc, #308]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	0f1b      	lsrs	r3, r3, #28
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	019a      	lsls	r2, r3, #6
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	041b      	lsls	r3, r3, #16
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	061b      	lsls	r3, r3, #24
 8004734:	431a      	orrs	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	071b      	lsls	r3, r3, #28
 800473a:	4944      	ldr	r1, [pc, #272]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004742:	4b42      	ldr	r3, [pc, #264]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004748:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	3b01      	subs	r3, #1
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	493d      	ldr	r1, [pc, #244]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d022      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800476c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004770:	d11d      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004772:	4b36      	ldr	r3, [pc, #216]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004778:	0e1b      	lsrs	r3, r3, #24
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004780:	4b32      	ldr	r3, [pc, #200]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004786:	0f1b      	lsrs	r3, r3, #28
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	019a      	lsls	r2, r3, #6
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	431a      	orrs	r2, r3
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	061b      	lsls	r3, r3, #24
 80047a0:	431a      	orrs	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	071b      	lsls	r3, r3, #28
 80047a6:	4929      	ldr	r1, [pc, #164]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d028      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	0e1b      	lsrs	r3, r3, #24
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047c8:	4b20      	ldr	r3, [pc, #128]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	019a      	lsls	r2, r3, #6
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	041b      	lsls	r3, r3, #16
 80047e0:	431a      	orrs	r2, r3
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	071b      	lsls	r3, r3, #28
 80047ee:	4917      	ldr	r1, [pc, #92]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80047f6:	4b15      	ldr	r3, [pc, #84]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	4911      	ldr	r1, [pc, #68]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800480c:	4b0f      	ldr	r3, [pc, #60]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a0e      	ldr	r2, [pc, #56]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004818:	f7fc fdd8 	bl	80013cc <HAL_GetTick>
 800481c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004820:	f7fc fdd4 	bl	80013cc <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	; 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e007      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004832:	4b06      	ldr	r3, [pc, #24]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800483a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800483e:	d1ef      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800

08004850 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e09d      	b.n	800499e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b00      	cmp	r3, #0
 8004868:	d108      	bne.n	800487c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004872:	d009      	beq.n	8004888 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	61da      	str	r2, [r3, #28]
 800487a:	e005      	b.n	8004888 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fc f9f4 	bl	8000c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048c8:	d902      	bls.n	80048d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e002      	b.n	80048d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048de:	d007      	beq.n	80048f0 <HAL_SPI_Init+0xa0>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048e8:	d002      	beq.n	80048f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004932:	ea42 0103 	orr.w	r1, r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	0c1b      	lsrs	r3, r3, #16
 800494c:	f003 0204 	and.w	r2, r3, #4
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800496c:	ea42 0103 	orr.w	r1, r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800498c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b088      	sub	sp, #32
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	4613      	mov	r3, r2
 80049b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_SPI_Transmit+0x22>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e158      	b.n	8004c7a <HAL_SPI_Transmit+0x2d4>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049d0:	f7fc fcfc 	bl	80013cc <HAL_GetTick>
 80049d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d002      	beq.n	80049ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
 80049e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049ea:	e13d      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_SPI_Transmit+0x52>
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d102      	bne.n	80049fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049fc:	e134      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2203      	movs	r2, #3
 8004a02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	88fa      	ldrh	r2, [r7, #6]
 8004a16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a48:	d10f      	bne.n	8004a6a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d007      	beq.n	8004a88 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a90:	d94b      	bls.n	8004b2a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_SPI_Transmit+0xfa>
 8004a9a:	8afb      	ldrh	r3, [r7, #22]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d13e      	bne.n	8004b1e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	881a      	ldrh	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	1c9a      	adds	r2, r3, #2
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ac4:	e02b      	b.n	8004b1e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d112      	bne.n	8004afa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	881a      	ldrh	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	1c9a      	adds	r2, r3, #2
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004af8:	e011      	b.n	8004b1e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004afa:	f7fc fc67 	bl	80013cc <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d803      	bhi.n	8004b12 <HAL_SPI_Transmit+0x16c>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d102      	bne.n	8004b18 <HAL_SPI_Transmit+0x172>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b1c:	e0a4      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ce      	bne.n	8004ac6 <HAL_SPI_Transmit+0x120>
 8004b28:	e07c      	b.n	8004c24 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_SPI_Transmit+0x192>
 8004b32:	8afb      	ldrh	r3, [r7, #22]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d170      	bne.n	8004c1a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d912      	bls.n	8004b68 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	881a      	ldrh	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	1c9a      	adds	r2, r3, #2
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b02      	subs	r3, #2
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b66:	e058      	b.n	8004c1a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	7812      	ldrb	r2, [r2, #0]
 8004b74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b8e:	e044      	b.n	8004c1a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d12b      	bne.n	8004bf6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d912      	bls.n	8004bce <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	881a      	ldrh	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	1c9a      	adds	r2, r3, #2
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b02      	subs	r3, #2
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bcc:	e025      	b.n	8004c1a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	7812      	ldrb	r2, [r2, #0]
 8004bda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bf4:	e011      	b.n	8004c1a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bf6:	f7fc fbe9 	bl	80013cc <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d803      	bhi.n	8004c0e <HAL_SPI_Transmit+0x268>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d102      	bne.n	8004c14 <HAL_SPI_Transmit+0x26e>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c18:	e026      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1b5      	bne.n	8004b90 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	6839      	ldr	r1, [r7, #0]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fa5d 	bl	80050e8 <SPI_EndRxTxTransaction>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c42:	2300      	movs	r3, #0
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e000      	b.n	8004c68 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004c66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10e      	bne.n	8004cc4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d009      	beq.n	8004cc4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d004      	beq.n	8004cc4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4798      	blx	r3
    return;
 8004cc2:	e0ce      	b.n	8004e62 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_SPI_IRQHandler+0x5e>
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4798      	blx	r3
    return;
 8004ce0:	e0bf      	b.n	8004e62 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <HAL_SPI_IRQHandler+0x7e>
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80b0 	beq.w	8004e62 <HAL_SPI_IRQHandler+0x1de>
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80aa 	beq.w	8004e62 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d023      	beq.n	8004d60 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d011      	beq.n	8004d48 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d28:	f043 0204 	orr.w	r2, r3, #4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	e00b      	b.n	8004d60 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	693b      	ldr	r3, [r7, #16]
        return;
 8004d5e:	e080      	b.n	8004e62 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d014      	beq.n	8004d94 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6e:	f043 0201 	orr.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00c      	beq.n	8004db8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da2:	f043 0208 	orr.w	r2, r3, #8
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004daa:	2300      	movs	r3, #0
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d04f      	beq.n	8004e60 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004dce:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d104      	bne.n	8004dec <HAL_SPI_IRQHandler+0x168>
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d034      	beq.n	8004e56 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0203 	bic.w	r2, r2, #3
 8004dfa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d011      	beq.n	8004e28 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e08:	4a17      	ldr	r2, [pc, #92]	; (8004e68 <HAL_SPI_IRQHandler+0x1e4>)
 8004e0a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fc fd3b 	bl	800188c <HAL_DMA_Abort_IT>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d016      	beq.n	8004e5e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e34:	4a0c      	ldr	r2, [pc, #48]	; (8004e68 <HAL_SPI_IRQHandler+0x1e4>)
 8004e36:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fc fd25 	bl	800188c <HAL_DMA_Abort_IT>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004e54:	e003      	b.n	8004e5e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f808 	bl	8004e6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e5c:	e000      	b.n	8004e60 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004e5e:	bf00      	nop
    return;
 8004e60:	bf00      	nop
  }
}
 8004e62:	3720      	adds	r7, #32
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	08004e81 	.word	0x08004e81

08004e6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f7ff ffe5 	bl	8004e6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ea2:	bf00      	nop
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ebc:	f7fc fa86 	bl	80013cc <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	4413      	add	r3, r2
 8004eca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ecc:	f7fc fa7e 	bl	80013cc <HAL_GetTick>
 8004ed0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ed2:	4b39      	ldr	r3, [pc, #228]	; (8004fb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	015b      	lsls	r3, r3, #5
 8004ed8:	0d1b      	lsrs	r3, r3, #20
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	fb02 f303 	mul.w	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ee2:	e054      	b.n	8004f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eea:	d050      	beq.n	8004f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004eec:	f7fc fa6e 	bl	80013cc <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d902      	bls.n	8004f02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d13d      	bne.n	8004f7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f1a:	d111      	bne.n	8004f40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f24:	d004      	beq.n	8004f30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2e:	d107      	bne.n	8004f40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f48:	d10f      	bne.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e017      	b.n	8004fae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4013      	ands	r3, r2
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	bf0c      	ite	eq
 8004f9e:	2301      	moveq	r3, #1
 8004fa0:	2300      	movne	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d19b      	bne.n	8004ee4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3720      	adds	r7, #32
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000020 	.word	0x20000020

08004fbc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08a      	sub	sp, #40	; 0x28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fce:	f7fc f9fd 	bl	80013cc <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	1a9b      	subs	r3, r3, r2
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	4413      	add	r3, r2
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004fde:	f7fc f9f5 	bl	80013cc <HAL_GetTick>
 8004fe2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	330c      	adds	r3, #12
 8004fea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fec:	4b3d      	ldr	r3, [pc, #244]	; (80050e4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	00da      	lsls	r2, r3, #3
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	0d1b      	lsrs	r3, r3, #20
 8004ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ffe:	fb02 f303 	mul.w	r3, r2, r3
 8005002:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005004:	e060      	b.n	80050c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800500c:	d107      	bne.n	800501e <SPI_WaitFifoStateUntilTimeout+0x62>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	b2db      	uxtb	r3, r3
 800501a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800501c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d050      	beq.n	80050c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005026:	f7fc f9d1 	bl	80013cc <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005032:	429a      	cmp	r2, r3
 8005034:	d902      	bls.n	800503c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d13d      	bne.n	80050b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800504a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005054:	d111      	bne.n	800507a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505e:	d004      	beq.n	800506a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005068:	d107      	bne.n	800507a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005078:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005082:	d10f      	bne.n	80050a4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e010      	b.n	80050da <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4013      	ands	r3, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d196      	bne.n	8005006 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3728      	adds	r7, #40	; 0x28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000020 	.word	0x20000020

080050e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f7ff ff5b 	bl	8004fbc <SPI_WaitFifoStateUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005110:	f043 0220 	orr.w	r2, r3, #32
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e046      	b.n	80051aa <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <SPI_EndRxTxTransaction+0xcc>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a25      	ldr	r2, [pc, #148]	; (80051b8 <SPI_EndRxTxTransaction+0xd0>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	0d5b      	lsrs	r3, r3, #21
 8005128:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800512c:	fb02 f303 	mul.w	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800513a:	d112      	bne.n	8005162 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2200      	movs	r2, #0
 8005144:	2180      	movs	r1, #128	; 0x80
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff feb0 	bl	8004eac <SPI_WaitFlagStateUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d016      	beq.n	8005180 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005156:	f043 0220 	orr.w	r2, r3, #32
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e023      	b.n	80051aa <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	3b01      	subs	r3, #1
 800516c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005178:	2b80      	cmp	r3, #128	; 0x80
 800517a:	d0f2      	beq.n	8005162 <SPI_EndRxTxTransaction+0x7a>
 800517c:	e000      	b.n	8005180 <SPI_EndRxTxTransaction+0x98>
        break;
 800517e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2200      	movs	r2, #0
 8005188:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7ff ff15 	bl	8004fbc <SPI_WaitFifoStateUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519c:	f043 0220 	orr.w	r2, r3, #32
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e000      	b.n	80051aa <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000020 	.word	0x20000020
 80051b8:	165e9f81 	.word	0x165e9f81

080051bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e049      	b.n	8005262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fb fddc 	bl	8000da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3304      	adds	r3, #4
 80051f8:	4619      	mov	r1, r3
 80051fa:	4610      	mov	r0, r2
 80051fc:	f000 f986 	bl	800550c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b02      	cmp	r3, #2
 800527e:	d122      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b02      	cmp	r3, #2
 800528c:	d11b      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f06f 0202 	mvn.w	r2, #2
 8005296:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f90f 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 80052b2:	e005      	b.n	80052c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f901 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f912 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d122      	bne.n	800531a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d11b      	bne.n	800531a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f06f 0204 	mvn.w	r2, #4
 80052ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f8e5 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 8005306:	e005      	b.n	8005314 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f8d7 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f8e8 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b08      	cmp	r3, #8
 8005326:	d122      	bne.n	800536e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b08      	cmp	r3, #8
 8005334:	d11b      	bne.n	800536e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f06f 0208 	mvn.w	r2, #8
 800533e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2204      	movs	r2, #4
 8005344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f8bb 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 800535a:	e005      	b.n	8005368 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f8ad 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8be 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b10      	cmp	r3, #16
 800537a:	d122      	bne.n	80053c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f003 0310 	and.w	r3, r3, #16
 8005386:	2b10      	cmp	r3, #16
 8005388:	d11b      	bne.n	80053c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f06f 0210 	mvn.w	r2, #16
 8005392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2208      	movs	r2, #8
 8005398:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f891 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 80053ae:	e005      	b.n	80053bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f883 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f894 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d10e      	bne.n	80053ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d107      	bne.n	80053ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f06f 0201 	mvn.w	r2, #1
 80053e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f85d 	bl	80054a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f8:	2b80      	cmp	r3, #128	; 0x80
 80053fa:	d10e      	bne.n	800541a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005406:	2b80      	cmp	r3, #128	; 0x80
 8005408:	d107      	bne.n	800541a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f923 	bl	8005660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005428:	d10e      	bne.n	8005448 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005434:	2b80      	cmp	r3, #128	; 0x80
 8005436:	d107      	bne.n	8005448 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f916 	bl	8005674 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	2b40      	cmp	r3, #64	; 0x40
 8005454:	d10e      	bne.n	8005474 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005460:	2b40      	cmp	r3, #64	; 0x40
 8005462:	d107      	bne.n	8005474 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800546c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f842 	bl	80054f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b20      	cmp	r3, #32
 8005480:	d10e      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	2b20      	cmp	r3, #32
 800548e:	d107      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0220 	mvn.w	r2, #32
 8005498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f8d6 	bl	800564c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a40      	ldr	r2, [pc, #256]	; (8005620 <TIM_Base_SetConfig+0x114>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552a:	d00f      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a3d      	ldr	r2, [pc, #244]	; (8005624 <TIM_Base_SetConfig+0x118>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00b      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a3c      	ldr	r2, [pc, #240]	; (8005628 <TIM_Base_SetConfig+0x11c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d007      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a3b      	ldr	r2, [pc, #236]	; (800562c <TIM_Base_SetConfig+0x120>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d003      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a3a      	ldr	r2, [pc, #232]	; (8005630 <TIM_Base_SetConfig+0x124>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d108      	bne.n	800555e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a2f      	ldr	r2, [pc, #188]	; (8005620 <TIM_Base_SetConfig+0x114>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d02b      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556c:	d027      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a2c      	ldr	r2, [pc, #176]	; (8005624 <TIM_Base_SetConfig+0x118>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d023      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a2b      	ldr	r2, [pc, #172]	; (8005628 <TIM_Base_SetConfig+0x11c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01f      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a2a      	ldr	r2, [pc, #168]	; (800562c <TIM_Base_SetConfig+0x120>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d01b      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a29      	ldr	r2, [pc, #164]	; (8005630 <TIM_Base_SetConfig+0x124>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d017      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a28      	ldr	r2, [pc, #160]	; (8005634 <TIM_Base_SetConfig+0x128>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d013      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a27      	ldr	r2, [pc, #156]	; (8005638 <TIM_Base_SetConfig+0x12c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00f      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a26      	ldr	r2, [pc, #152]	; (800563c <TIM_Base_SetConfig+0x130>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00b      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a25      	ldr	r2, [pc, #148]	; (8005640 <TIM_Base_SetConfig+0x134>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d007      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a24      	ldr	r2, [pc, #144]	; (8005644 <TIM_Base_SetConfig+0x138>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d003      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a23      	ldr	r2, [pc, #140]	; (8005648 <TIM_Base_SetConfig+0x13c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d108      	bne.n	80055d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a0a      	ldr	r2, [pc, #40]	; (8005620 <TIM_Base_SetConfig+0x114>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0xf8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a0c      	ldr	r2, [pc, #48]	; (8005630 <TIM_Base_SetConfig+0x124>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d103      	bne.n	800560c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	615a      	str	r2, [r3, #20]
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40010000 	.word	0x40010000
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800
 800562c:	40000c00 	.word	0x40000c00
 8005630:	40010400 	.word	0x40010400
 8005634:	40014000 	.word	0x40014000
 8005638:	40014400 	.word	0x40014400
 800563c:	40014800 	.word	0x40014800
 8005640:	40001800 	.word	0x40001800
 8005644:	40001c00 	.word	0x40001c00
 8005648:	40002000 	.word	0x40002000

0800564c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e040      	b.n	800571c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7fb fb9e 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2224      	movs	r2, #36	; 0x24
 80056b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0201 	bic.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fbe6 	bl	8005e98 <UART_SetConfig>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e022      	b.n	800571c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fe3e 	bl	8006360 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005702:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fec5 	bl	80064a4 <UART_CheckIdleState>
 800571a:	4603      	mov	r3, r0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08a      	sub	sp, #40	; 0x28
 8005728:	af02      	add	r7, sp, #8
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	4613      	mov	r3, r2
 8005732:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005738:	2b20      	cmp	r3, #32
 800573a:	d171      	bne.n	8005820 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <HAL_UART_Transmit+0x24>
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e06a      	b.n	8005822 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2221      	movs	r2, #33	; 0x21
 8005758:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800575a:	f7fb fe37 	bl	80013cc <HAL_GetTick>
 800575e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	88fa      	ldrh	r2, [r7, #6]
 8005764:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	88fa      	ldrh	r2, [r7, #6]
 800576c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005778:	d108      	bne.n	800578c <HAL_UART_Transmit+0x68>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005782:	2300      	movs	r3, #0
 8005784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	e003      	b.n	8005794 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005790:	2300      	movs	r3, #0
 8005792:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005794:	e02c      	b.n	80057f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2200      	movs	r2, #0
 800579e:	2180      	movs	r1, #128	; 0x80
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 feb6 	bl	8006512 <UART_WaitOnFlagUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e038      	b.n	8005822 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10b      	bne.n	80057ce <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	3302      	adds	r3, #2
 80057ca:	61bb      	str	r3, [r7, #24]
 80057cc:	e007      	b.n	80057de <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	781a      	ldrb	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	3301      	adds	r3, #1
 80057dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1cc      	bne.n	8005796 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2200      	movs	r2, #0
 8005804:	2140      	movs	r1, #64	; 0x40
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 fe83 	bl	8006512 <UART_WaitOnFlagUntilTimeout>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e005      	b.n	8005822 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2220      	movs	r2, #32
 800581a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	e000      	b.n	8005822 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005820:	2302      	movs	r3, #2
  }
}
 8005822:	4618      	mov	r0, r3
 8005824:	3720      	adds	r7, #32
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b08a      	sub	sp, #40	; 0x28
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	4613      	mov	r3, r2
 8005836:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800583e:	2b20      	cmp	r3, #32
 8005840:	d132      	bne.n	80058a8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HAL_UART_Receive_IT+0x24>
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e02b      	b.n	80058aa <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d018      	beq.n	8005898 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	613b      	str	r3, [r7, #16]
   return(result);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	623b      	str	r3, [r7, #32]
 8005886:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	69f9      	ldr	r1, [r7, #28]
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	61bb      	str	r3, [r7, #24]
   return(result);
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e6      	bne.n	8005866 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005898:	88fb      	ldrh	r3, [r7, #6]
 800589a:	461a      	mov	r2, r3
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 fefe 	bl	80066a0 <UART_Start_Receive_IT>
 80058a4:	4603      	mov	r3, r0
 80058a6:	e000      	b.n	80058aa <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
  }
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3728      	adds	r7, #40	; 0x28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b0ba      	sub	sp, #232	; 0xe8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058de:	f640 030f 	movw	r3, #2063	; 0x80f
 80058e2:	4013      	ands	r3, r2
 80058e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d115      	bne.n	800591c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00f      	beq.n	800591c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b00      	cmp	r3, #0
 8005906:	d009      	beq.n	800591c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8297 	beq.w	8005e40 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	4798      	blx	r3
      }
      return;
 800591a:	e291      	b.n	8005e40 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800591c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 8117 	beq.w	8005b54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005932:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005936:	4b85      	ldr	r3, [pc, #532]	; (8005b4c <HAL_UART_IRQHandler+0x298>)
 8005938:	4013      	ands	r3, r2
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 810a 	beq.w	8005b54 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d011      	beq.n	8005970 <HAL_UART_IRQHandler+0xbc>
 800594c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00b      	beq.n	8005970 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2201      	movs	r2, #1
 800595e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005966:	f043 0201 	orr.w	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d011      	beq.n	80059a0 <HAL_UART_IRQHandler+0xec>
 800597c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2202      	movs	r2, #2
 800598e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005996:	f043 0204 	orr.w	r2, r3, #4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d011      	beq.n	80059d0 <HAL_UART_IRQHandler+0x11c>
 80059ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00b      	beq.n	80059d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2204      	movs	r2, #4
 80059be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c6:	f043 0202 	orr.w	r2, r3, #2
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d017      	beq.n	8005a0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d105      	bne.n	80059f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2208      	movs	r2, #8
 80059fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a02:	f043 0208 	orr.w	r2, r3, #8
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d012      	beq.n	8005a3e <HAL_UART_IRQHandler+0x18a>
 8005a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00c      	beq.n	8005a3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a34:	f043 0220 	orr.w	r2, r3, #32
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 81fd 	beq.w	8005e44 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00d      	beq.n	8005a72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d007      	beq.n	8005a72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d005      	beq.n	8005a96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d04f      	beq.n	8005b36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fec8 	bl	800682c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d141      	bne.n	8005b2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ad6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ae2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1d9      	bne.n	8005aaa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d013      	beq.n	8005b26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b02:	4a13      	ldr	r2, [pc, #76]	; (8005b50 <HAL_UART_IRQHandler+0x29c>)
 8005b04:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fb febe 	bl	800188c <HAL_DMA_Abort_IT>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d017      	beq.n	8005b46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b20:	4610      	mov	r0, r2
 8005b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b24:	e00f      	b.n	8005b46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f9a0 	bl	8005e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2c:	e00b      	b.n	8005b46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f99c 	bl	8005e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b34:	e007      	b.n	8005b46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f998 	bl	8005e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005b44:	e17e      	b.n	8005e44 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b46:	bf00      	nop
    return;
 8005b48:	e17c      	b.n	8005e44 <HAL_UART_IRQHandler+0x590>
 8005b4a:	bf00      	nop
 8005b4c:	04000120 	.word	0x04000120
 8005b50:	080068f5 	.word	0x080068f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	f040 814c 	bne.w	8005df6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b62:	f003 0310 	and.w	r3, r3, #16
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 8145 	beq.w	8005df6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 813e 	beq.w	8005df6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2210      	movs	r2, #16
 8005b80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8c:	2b40      	cmp	r3, #64	; 0x40
 8005b8e:	f040 80b6 	bne.w	8005cfe <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 8150 	beq.w	8005e48 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	f080 8148 	bcs.w	8005e48 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bcc:	f000 8086 	beq.w	8005cdc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bfe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c0a:	e841 2300 	strex	r3, r2, [r1]
 8005c0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1da      	bne.n	8005bd0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c2c:	f023 0301 	bic.w	r3, r3, #1
 8005c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3308      	adds	r3, #8
 8005c3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e1      	bne.n	8005c1a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3308      	adds	r3, #8
 8005c76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e3      	bne.n	8005c56 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca4:	e853 3f00 	ldrex	r3, [r3]
 8005ca8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cac:	f023 0310 	bic.w	r3, r3, #16
 8005cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cc0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e4      	bne.n	8005c9c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fb fd68 	bl	80017ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f8c2 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cfc:	e0a4      	b.n	8005e48 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 8096 	beq.w	8005e4c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8091 	beq.w	8005e4c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e4      	bne.n	8005d2a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3308      	adds	r3, #8
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	f023 0301 	bic.w	r3, r3, #1
 8005d76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3308      	adds	r3, #8
 8005d80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d84:	633a      	str	r2, [r7, #48]	; 0x30
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e3      	bne.n	8005d60 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f023 0310 	bic.w	r3, r3, #16
 8005dc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	69b9      	ldr	r1, [r7, #24]
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	617b      	str	r3, [r7, #20]
   return(result);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e4      	bne.n	8005dac <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2202      	movs	r2, #2
 8005de6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005de8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f846 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005df4:	e02a      	b.n	8005e4c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00e      	beq.n	8005e20 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d008      	beq.n	8005e20 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01c      	beq.n	8005e50 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	4798      	blx	r3
    }
    return;
 8005e1e:	e017      	b.n	8005e50 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d012      	beq.n	8005e52 <HAL_UART_IRQHandler+0x59e>
 8005e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00c      	beq.n	8005e52 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fd71 	bl	8006920 <UART_EndTransmit_IT>
    return;
 8005e3e:	e008      	b.n	8005e52 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e40:	bf00      	nop
 8005e42:	e006      	b.n	8005e52 <HAL_UART_IRQHandler+0x59e>
    return;
 8005e44:	bf00      	nop
 8005e46:	e004      	b.n	8005e52 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e48:	bf00      	nop
 8005e4a:	e002      	b.n	8005e52 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e4c:	bf00      	nop
 8005e4e:	e000      	b.n	8005e52 <HAL_UART_IRQHandler+0x59e>
    return;
 8005e50:	bf00      	nop
  }

}
 8005e52:	37e8      	adds	r7, #232	; 0xe8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4ba6      	ldr	r3, [pc, #664]	; (800615c <UART_SetConfig+0x2c4>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	6979      	ldr	r1, [r7, #20]
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a94      	ldr	r2, [pc, #592]	; (8006160 <UART_SetConfig+0x2c8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d120      	bne.n	8005f56 <UART_SetConfig+0xbe>
 8005f14:	4b93      	ldr	r3, [pc, #588]	; (8006164 <UART_SetConfig+0x2cc>)
 8005f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d816      	bhi.n	8005f50 <UART_SetConfig+0xb8>
 8005f22:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <UART_SetConfig+0x90>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f39 	.word	0x08005f39
 8005f2c:	08005f45 	.word	0x08005f45
 8005f30:	08005f3f 	.word	0x08005f3f
 8005f34:	08005f4b 	.word	0x08005f4b
 8005f38:	2301      	movs	r3, #1
 8005f3a:	77fb      	strb	r3, [r7, #31]
 8005f3c:	e150      	b.n	80061e0 <UART_SetConfig+0x348>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	77fb      	strb	r3, [r7, #31]
 8005f42:	e14d      	b.n	80061e0 <UART_SetConfig+0x348>
 8005f44:	2304      	movs	r3, #4
 8005f46:	77fb      	strb	r3, [r7, #31]
 8005f48:	e14a      	b.n	80061e0 <UART_SetConfig+0x348>
 8005f4a:	2308      	movs	r3, #8
 8005f4c:	77fb      	strb	r3, [r7, #31]
 8005f4e:	e147      	b.n	80061e0 <UART_SetConfig+0x348>
 8005f50:	2310      	movs	r3, #16
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e144      	b.n	80061e0 <UART_SetConfig+0x348>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a83      	ldr	r2, [pc, #524]	; (8006168 <UART_SetConfig+0x2d0>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d132      	bne.n	8005fc6 <UART_SetConfig+0x12e>
 8005f60:	4b80      	ldr	r3, [pc, #512]	; (8006164 <UART_SetConfig+0x2cc>)
 8005f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f66:	f003 030c 	and.w	r3, r3, #12
 8005f6a:	2b0c      	cmp	r3, #12
 8005f6c:	d828      	bhi.n	8005fc0 <UART_SetConfig+0x128>
 8005f6e:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <UART_SetConfig+0xdc>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08005fa9 	.word	0x08005fa9
 8005f78:	08005fc1 	.word	0x08005fc1
 8005f7c:	08005fc1 	.word	0x08005fc1
 8005f80:	08005fc1 	.word	0x08005fc1
 8005f84:	08005fb5 	.word	0x08005fb5
 8005f88:	08005fc1 	.word	0x08005fc1
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	08005fc1 	.word	0x08005fc1
 8005f94:	08005faf 	.word	0x08005faf
 8005f98:	08005fc1 	.word	0x08005fc1
 8005f9c:	08005fc1 	.word	0x08005fc1
 8005fa0:	08005fc1 	.word	0x08005fc1
 8005fa4:	08005fbb 	.word	0x08005fbb
 8005fa8:	2300      	movs	r3, #0
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e118      	b.n	80061e0 <UART_SetConfig+0x348>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	77fb      	strb	r3, [r7, #31]
 8005fb2:	e115      	b.n	80061e0 <UART_SetConfig+0x348>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e112      	b.n	80061e0 <UART_SetConfig+0x348>
 8005fba:	2308      	movs	r3, #8
 8005fbc:	77fb      	strb	r3, [r7, #31]
 8005fbe:	e10f      	b.n	80061e0 <UART_SetConfig+0x348>
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e10c      	b.n	80061e0 <UART_SetConfig+0x348>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a68      	ldr	r2, [pc, #416]	; (800616c <UART_SetConfig+0x2d4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d120      	bne.n	8006012 <UART_SetConfig+0x17a>
 8005fd0:	4b64      	ldr	r3, [pc, #400]	; (8006164 <UART_SetConfig+0x2cc>)
 8005fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fda:	2b30      	cmp	r3, #48	; 0x30
 8005fdc:	d013      	beq.n	8006006 <UART_SetConfig+0x16e>
 8005fde:	2b30      	cmp	r3, #48	; 0x30
 8005fe0:	d814      	bhi.n	800600c <UART_SetConfig+0x174>
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d009      	beq.n	8005ffa <UART_SetConfig+0x162>
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	d810      	bhi.n	800600c <UART_SetConfig+0x174>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <UART_SetConfig+0x15c>
 8005fee:	2b10      	cmp	r3, #16
 8005ff0:	d006      	beq.n	8006000 <UART_SetConfig+0x168>
 8005ff2:	e00b      	b.n	800600c <UART_SetConfig+0x174>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	77fb      	strb	r3, [r7, #31]
 8005ff8:	e0f2      	b.n	80061e0 <UART_SetConfig+0x348>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	77fb      	strb	r3, [r7, #31]
 8005ffe:	e0ef      	b.n	80061e0 <UART_SetConfig+0x348>
 8006000:	2304      	movs	r3, #4
 8006002:	77fb      	strb	r3, [r7, #31]
 8006004:	e0ec      	b.n	80061e0 <UART_SetConfig+0x348>
 8006006:	2308      	movs	r3, #8
 8006008:	77fb      	strb	r3, [r7, #31]
 800600a:	e0e9      	b.n	80061e0 <UART_SetConfig+0x348>
 800600c:	2310      	movs	r3, #16
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e0e6      	b.n	80061e0 <UART_SetConfig+0x348>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a56      	ldr	r2, [pc, #344]	; (8006170 <UART_SetConfig+0x2d8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d120      	bne.n	800605e <UART_SetConfig+0x1c6>
 800601c:	4b51      	ldr	r3, [pc, #324]	; (8006164 <UART_SetConfig+0x2cc>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006022:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006026:	2bc0      	cmp	r3, #192	; 0xc0
 8006028:	d013      	beq.n	8006052 <UART_SetConfig+0x1ba>
 800602a:	2bc0      	cmp	r3, #192	; 0xc0
 800602c:	d814      	bhi.n	8006058 <UART_SetConfig+0x1c0>
 800602e:	2b80      	cmp	r3, #128	; 0x80
 8006030:	d009      	beq.n	8006046 <UART_SetConfig+0x1ae>
 8006032:	2b80      	cmp	r3, #128	; 0x80
 8006034:	d810      	bhi.n	8006058 <UART_SetConfig+0x1c0>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <UART_SetConfig+0x1a8>
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d006      	beq.n	800604c <UART_SetConfig+0x1b4>
 800603e:	e00b      	b.n	8006058 <UART_SetConfig+0x1c0>
 8006040:	2300      	movs	r3, #0
 8006042:	77fb      	strb	r3, [r7, #31]
 8006044:	e0cc      	b.n	80061e0 <UART_SetConfig+0x348>
 8006046:	2302      	movs	r3, #2
 8006048:	77fb      	strb	r3, [r7, #31]
 800604a:	e0c9      	b.n	80061e0 <UART_SetConfig+0x348>
 800604c:	2304      	movs	r3, #4
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e0c6      	b.n	80061e0 <UART_SetConfig+0x348>
 8006052:	2308      	movs	r3, #8
 8006054:	77fb      	strb	r3, [r7, #31]
 8006056:	e0c3      	b.n	80061e0 <UART_SetConfig+0x348>
 8006058:	2310      	movs	r3, #16
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	e0c0      	b.n	80061e0 <UART_SetConfig+0x348>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a44      	ldr	r2, [pc, #272]	; (8006174 <UART_SetConfig+0x2dc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d125      	bne.n	80060b4 <UART_SetConfig+0x21c>
 8006068:	4b3e      	ldr	r3, [pc, #248]	; (8006164 <UART_SetConfig+0x2cc>)
 800606a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006076:	d017      	beq.n	80060a8 <UART_SetConfig+0x210>
 8006078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800607c:	d817      	bhi.n	80060ae <UART_SetConfig+0x216>
 800607e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006082:	d00b      	beq.n	800609c <UART_SetConfig+0x204>
 8006084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006088:	d811      	bhi.n	80060ae <UART_SetConfig+0x216>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <UART_SetConfig+0x1fe>
 800608e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006092:	d006      	beq.n	80060a2 <UART_SetConfig+0x20a>
 8006094:	e00b      	b.n	80060ae <UART_SetConfig+0x216>
 8006096:	2300      	movs	r3, #0
 8006098:	77fb      	strb	r3, [r7, #31]
 800609a:	e0a1      	b.n	80061e0 <UART_SetConfig+0x348>
 800609c:	2302      	movs	r3, #2
 800609e:	77fb      	strb	r3, [r7, #31]
 80060a0:	e09e      	b.n	80061e0 <UART_SetConfig+0x348>
 80060a2:	2304      	movs	r3, #4
 80060a4:	77fb      	strb	r3, [r7, #31]
 80060a6:	e09b      	b.n	80061e0 <UART_SetConfig+0x348>
 80060a8:	2308      	movs	r3, #8
 80060aa:	77fb      	strb	r3, [r7, #31]
 80060ac:	e098      	b.n	80061e0 <UART_SetConfig+0x348>
 80060ae:	2310      	movs	r3, #16
 80060b0:	77fb      	strb	r3, [r7, #31]
 80060b2:	e095      	b.n	80061e0 <UART_SetConfig+0x348>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a2f      	ldr	r2, [pc, #188]	; (8006178 <UART_SetConfig+0x2e0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d125      	bne.n	800610a <UART_SetConfig+0x272>
 80060be:	4b29      	ldr	r3, [pc, #164]	; (8006164 <UART_SetConfig+0x2cc>)
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060cc:	d017      	beq.n	80060fe <UART_SetConfig+0x266>
 80060ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060d2:	d817      	bhi.n	8006104 <UART_SetConfig+0x26c>
 80060d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d8:	d00b      	beq.n	80060f2 <UART_SetConfig+0x25a>
 80060da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060de:	d811      	bhi.n	8006104 <UART_SetConfig+0x26c>
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <UART_SetConfig+0x254>
 80060e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e8:	d006      	beq.n	80060f8 <UART_SetConfig+0x260>
 80060ea:	e00b      	b.n	8006104 <UART_SetConfig+0x26c>
 80060ec:	2301      	movs	r3, #1
 80060ee:	77fb      	strb	r3, [r7, #31]
 80060f0:	e076      	b.n	80061e0 <UART_SetConfig+0x348>
 80060f2:	2302      	movs	r3, #2
 80060f4:	77fb      	strb	r3, [r7, #31]
 80060f6:	e073      	b.n	80061e0 <UART_SetConfig+0x348>
 80060f8:	2304      	movs	r3, #4
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	e070      	b.n	80061e0 <UART_SetConfig+0x348>
 80060fe:	2308      	movs	r3, #8
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e06d      	b.n	80061e0 <UART_SetConfig+0x348>
 8006104:	2310      	movs	r3, #16
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e06a      	b.n	80061e0 <UART_SetConfig+0x348>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1b      	ldr	r2, [pc, #108]	; (800617c <UART_SetConfig+0x2e4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d138      	bne.n	8006186 <UART_SetConfig+0x2ee>
 8006114:	4b13      	ldr	r3, [pc, #76]	; (8006164 <UART_SetConfig+0x2cc>)
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800611e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006122:	d017      	beq.n	8006154 <UART_SetConfig+0x2bc>
 8006124:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006128:	d82a      	bhi.n	8006180 <UART_SetConfig+0x2e8>
 800612a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800612e:	d00b      	beq.n	8006148 <UART_SetConfig+0x2b0>
 8006130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006134:	d824      	bhi.n	8006180 <UART_SetConfig+0x2e8>
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <UART_SetConfig+0x2aa>
 800613a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613e:	d006      	beq.n	800614e <UART_SetConfig+0x2b6>
 8006140:	e01e      	b.n	8006180 <UART_SetConfig+0x2e8>
 8006142:	2300      	movs	r3, #0
 8006144:	77fb      	strb	r3, [r7, #31]
 8006146:	e04b      	b.n	80061e0 <UART_SetConfig+0x348>
 8006148:	2302      	movs	r3, #2
 800614a:	77fb      	strb	r3, [r7, #31]
 800614c:	e048      	b.n	80061e0 <UART_SetConfig+0x348>
 800614e:	2304      	movs	r3, #4
 8006150:	77fb      	strb	r3, [r7, #31]
 8006152:	e045      	b.n	80061e0 <UART_SetConfig+0x348>
 8006154:	2308      	movs	r3, #8
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e042      	b.n	80061e0 <UART_SetConfig+0x348>
 800615a:	bf00      	nop
 800615c:	efff69f3 	.word	0xefff69f3
 8006160:	40011000 	.word	0x40011000
 8006164:	40023800 	.word	0x40023800
 8006168:	40004400 	.word	0x40004400
 800616c:	40004800 	.word	0x40004800
 8006170:	40004c00 	.word	0x40004c00
 8006174:	40005000 	.word	0x40005000
 8006178:	40011400 	.word	0x40011400
 800617c:	40007800 	.word	0x40007800
 8006180:	2310      	movs	r3, #16
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e02c      	b.n	80061e0 <UART_SetConfig+0x348>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a72      	ldr	r2, [pc, #456]	; (8006354 <UART_SetConfig+0x4bc>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d125      	bne.n	80061dc <UART_SetConfig+0x344>
 8006190:	4b71      	ldr	r3, [pc, #452]	; (8006358 <UART_SetConfig+0x4c0>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800619a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800619e:	d017      	beq.n	80061d0 <UART_SetConfig+0x338>
 80061a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061a4:	d817      	bhi.n	80061d6 <UART_SetConfig+0x33e>
 80061a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061aa:	d00b      	beq.n	80061c4 <UART_SetConfig+0x32c>
 80061ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b0:	d811      	bhi.n	80061d6 <UART_SetConfig+0x33e>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <UART_SetConfig+0x326>
 80061b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061ba:	d006      	beq.n	80061ca <UART_SetConfig+0x332>
 80061bc:	e00b      	b.n	80061d6 <UART_SetConfig+0x33e>
 80061be:	2300      	movs	r3, #0
 80061c0:	77fb      	strb	r3, [r7, #31]
 80061c2:	e00d      	b.n	80061e0 <UART_SetConfig+0x348>
 80061c4:	2302      	movs	r3, #2
 80061c6:	77fb      	strb	r3, [r7, #31]
 80061c8:	e00a      	b.n	80061e0 <UART_SetConfig+0x348>
 80061ca:	2304      	movs	r3, #4
 80061cc:	77fb      	strb	r3, [r7, #31]
 80061ce:	e007      	b.n	80061e0 <UART_SetConfig+0x348>
 80061d0:	2308      	movs	r3, #8
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e004      	b.n	80061e0 <UART_SetConfig+0x348>
 80061d6:	2310      	movs	r3, #16
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e001      	b.n	80061e0 <UART_SetConfig+0x348>
 80061dc:	2310      	movs	r3, #16
 80061de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e8:	d15b      	bne.n	80062a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80061ea:	7ffb      	ldrb	r3, [r7, #31]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d828      	bhi.n	8006242 <UART_SetConfig+0x3aa>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <UART_SetConfig+0x360>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	0800621d 	.word	0x0800621d
 80061fc:	08006225 	.word	0x08006225
 8006200:	0800622d 	.word	0x0800622d
 8006204:	08006243 	.word	0x08006243
 8006208:	08006233 	.word	0x08006233
 800620c:	08006243 	.word	0x08006243
 8006210:	08006243 	.word	0x08006243
 8006214:	08006243 	.word	0x08006243
 8006218:	0800623b 	.word	0x0800623b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800621c:	f7fd ff00 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 8006220:	61b8      	str	r0, [r7, #24]
        break;
 8006222:	e013      	b.n	800624c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006224:	f7fd ff10 	bl	8004048 <HAL_RCC_GetPCLK2Freq>
 8006228:	61b8      	str	r0, [r7, #24]
        break;
 800622a:	e00f      	b.n	800624c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800622c:	4b4b      	ldr	r3, [pc, #300]	; (800635c <UART_SetConfig+0x4c4>)
 800622e:	61bb      	str	r3, [r7, #24]
        break;
 8006230:	e00c      	b.n	800624c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006232:	f7fd fde3 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8006236:	61b8      	str	r0, [r7, #24]
        break;
 8006238:	e008      	b.n	800624c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800623a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800623e:	61bb      	str	r3, [r7, #24]
        break;
 8006240:	e004      	b.n	800624c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	77bb      	strb	r3, [r7, #30]
        break;
 800624a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d074      	beq.n	800633c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	005a      	lsls	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	085b      	lsrs	r3, r3, #1
 800625c:	441a      	add	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	fbb2 f3f3 	udiv	r3, r2, r3
 8006266:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2b0f      	cmp	r3, #15
 800626c:	d916      	bls.n	800629c <UART_SetConfig+0x404>
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006274:	d212      	bcs.n	800629c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	b29b      	uxth	r3, r3
 800627a:	f023 030f 	bic.w	r3, r3, #15
 800627e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	085b      	lsrs	r3, r3, #1
 8006284:	b29b      	uxth	r3, r3
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	b29a      	uxth	r2, r3
 800628c:	89fb      	ldrh	r3, [r7, #14]
 800628e:	4313      	orrs	r3, r2
 8006290:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	89fa      	ldrh	r2, [r7, #14]
 8006298:	60da      	str	r2, [r3, #12]
 800629a:	e04f      	b.n	800633c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	77bb      	strb	r3, [r7, #30]
 80062a0:	e04c      	b.n	800633c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062a2:	7ffb      	ldrb	r3, [r7, #31]
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d828      	bhi.n	80062fa <UART_SetConfig+0x462>
 80062a8:	a201      	add	r2, pc, #4	; (adr r2, 80062b0 <UART_SetConfig+0x418>)
 80062aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ae:	bf00      	nop
 80062b0:	080062d5 	.word	0x080062d5
 80062b4:	080062dd 	.word	0x080062dd
 80062b8:	080062e5 	.word	0x080062e5
 80062bc:	080062fb 	.word	0x080062fb
 80062c0:	080062eb 	.word	0x080062eb
 80062c4:	080062fb 	.word	0x080062fb
 80062c8:	080062fb 	.word	0x080062fb
 80062cc:	080062fb 	.word	0x080062fb
 80062d0:	080062f3 	.word	0x080062f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062d4:	f7fd fea4 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 80062d8:	61b8      	str	r0, [r7, #24]
        break;
 80062da:	e013      	b.n	8006304 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062dc:	f7fd feb4 	bl	8004048 <HAL_RCC_GetPCLK2Freq>
 80062e0:	61b8      	str	r0, [r7, #24]
        break;
 80062e2:	e00f      	b.n	8006304 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062e4:	4b1d      	ldr	r3, [pc, #116]	; (800635c <UART_SetConfig+0x4c4>)
 80062e6:	61bb      	str	r3, [r7, #24]
        break;
 80062e8:	e00c      	b.n	8006304 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ea:	f7fd fd87 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 80062ee:	61b8      	str	r0, [r7, #24]
        break;
 80062f0:	e008      	b.n	8006304 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f6:	61bb      	str	r3, [r7, #24]
        break;
 80062f8:	e004      	b.n	8006304 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	77bb      	strb	r3, [r7, #30]
        break;
 8006302:	bf00      	nop
    }

    if (pclk != 0U)
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d018      	beq.n	800633c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	085a      	lsrs	r2, r3, #1
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	441a      	add	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	fbb2 f3f3 	udiv	r3, r2, r3
 800631c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b0f      	cmp	r3, #15
 8006322:	d909      	bls.n	8006338 <UART_SetConfig+0x4a0>
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800632a:	d205      	bcs.n	8006338 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	b29a      	uxth	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	60da      	str	r2, [r3, #12]
 8006336:	e001      	b.n	800633c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006348:	7fbb      	ldrb	r3, [r7, #30]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3720      	adds	r7, #32
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	40007c00 	.word	0x40007c00
 8006358:	40023800 	.word	0x40023800
 800635c:	00f42400 	.word	0x00f42400

08006360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01a      	beq.n	8006476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800645e:	d10a      	bne.n	8006476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	605a      	str	r2, [r3, #4]
  }
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064b4:	f7fa ff8a 	bl	80013cc <HAL_GetTick>
 80064b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d10e      	bne.n	80064e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f81b 	bl	8006512 <UART_WaitOnFlagUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e011      	b.n	800650a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b09c      	sub	sp, #112	; 0x70
 8006516:	af00      	add	r7, sp, #0
 8006518:	60f8      	str	r0, [r7, #12]
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	603b      	str	r3, [r7, #0]
 800651e:	4613      	mov	r3, r2
 8006520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006522:	e0a7      	b.n	8006674 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	f000 80a3 	beq.w	8006674 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652e:	f7fa ff4d 	bl	80013cc <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800653a:	429a      	cmp	r2, r3
 800653c:	d302      	bcc.n	8006544 <UART_WaitOnFlagUntilTimeout+0x32>
 800653e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006540:	2b00      	cmp	r3, #0
 8006542:	d13f      	bne.n	80065c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006554:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006558:	667b      	str	r3, [r7, #100]	; 0x64
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006564:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006568:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e6      	bne.n	8006544 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3308      	adds	r3, #8
 800657c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	663b      	str	r3, [r7, #96]	; 0x60
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3308      	adds	r3, #8
 8006594:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006596:	64ba      	str	r2, [r7, #72]	; 0x48
 8006598:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800659c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800659e:	e841 2300 	strex	r3, r2, [r1]
 80065a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1e5      	bne.n	8006576 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2220      	movs	r2, #32
 80065ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e068      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d050      	beq.n	8006674 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065e0:	d148      	bne.n	8006674 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006600:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660a:	637b      	str	r3, [r7, #52]	; 0x34
 800660c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e6      	bne.n	80065ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3308      	adds	r3, #8
 8006624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	613b      	str	r3, [r7, #16]
   return(result);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f023 0301 	bic.w	r3, r3, #1
 8006634:	66bb      	str	r3, [r7, #104]	; 0x68
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3308      	adds	r3, #8
 800663c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800663e:	623a      	str	r2, [r7, #32]
 8006640:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	69f9      	ldr	r1, [r7, #28]
 8006644:	6a3a      	ldr	r2, [r7, #32]
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	61bb      	str	r3, [r7, #24]
   return(result);
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e5      	bne.n	800661e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e010      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69da      	ldr	r2, [r3, #28]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4013      	ands	r3, r2
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	429a      	cmp	r2, r3
 8006682:	bf0c      	ite	eq
 8006684:	2301      	moveq	r3, #1
 8006686:	2300      	movne	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	429a      	cmp	r2, r3
 8006690:	f43f af48 	beq.w	8006524 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3770      	adds	r7, #112	; 0x70
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b097      	sub	sp, #92	; 0x5c
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	88fa      	ldrh	r2, [r7, #6]
 80066b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	88fa      	ldrh	r2, [r7, #6]
 80066c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d2:	d10e      	bne.n	80066f2 <UART_Start_Receive_IT+0x52>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d105      	bne.n	80066e8 <UART_Start_Receive_IT+0x48>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066e6:	e02d      	b.n	8006744 <UART_Start_Receive_IT+0xa4>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	22ff      	movs	r2, #255	; 0xff
 80066ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066f0:	e028      	b.n	8006744 <UART_Start_Receive_IT+0xa4>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10d      	bne.n	8006716 <UART_Start_Receive_IT+0x76>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d104      	bne.n	800670c <UART_Start_Receive_IT+0x6c>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	22ff      	movs	r2, #255	; 0xff
 8006706:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800670a:	e01b      	b.n	8006744 <UART_Start_Receive_IT+0xa4>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	227f      	movs	r2, #127	; 0x7f
 8006710:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006714:	e016      	b.n	8006744 <UART_Start_Receive_IT+0xa4>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800671e:	d10d      	bne.n	800673c <UART_Start_Receive_IT+0x9c>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d104      	bne.n	8006732 <UART_Start_Receive_IT+0x92>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	227f      	movs	r2, #127	; 0x7f
 800672c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006730:	e008      	b.n	8006744 <UART_Start_Receive_IT+0xa4>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	223f      	movs	r2, #63	; 0x3f
 8006736:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800673a:	e003      	b.n	8006744 <UART_Start_Receive_IT+0xa4>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2222      	movs	r2, #34	; 0x22
 8006750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3308      	adds	r3, #8
 800675a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675e:	e853 3f00 	ldrex	r3, [r3]
 8006762:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	f043 0301 	orr.w	r3, r3, #1
 800676a:	657b      	str	r3, [r7, #84]	; 0x54
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3308      	adds	r3, #8
 8006772:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006774:	64ba      	str	r2, [r7, #72]	; 0x48
 8006776:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800677a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e5      	bne.n	8006754 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006790:	d107      	bne.n	80067a2 <UART_Start_Receive_IT+0x102>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d103      	bne.n	80067a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4a21      	ldr	r2, [pc, #132]	; (8006824 <UART_Start_Receive_IT+0x184>)
 800679e:	669a      	str	r2, [r3, #104]	; 0x68
 80067a0:	e002      	b.n	80067a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4a20      	ldr	r2, [pc, #128]	; (8006828 <UART_Start_Receive_IT+0x188>)
 80067a6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d019      	beq.n	80067e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	e853 3f00 	ldrex	r3, [r3]
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80067c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34
 80067d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1e6      	bne.n	80067b0 <UART_Start_Receive_IT+0x110>
 80067e2:	e018      	b.n	8006816 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	e853 3f00 	ldrex	r3, [r3]
 80067f0:	613b      	str	r3, [r7, #16]
   return(result);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f043 0320 	orr.w	r3, r3, #32
 80067f8:	653b      	str	r3, [r7, #80]	; 0x50
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	461a      	mov	r2, r3
 8006800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006802:	623b      	str	r3, [r7, #32]
 8006804:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	69f9      	ldr	r1, [r7, #28]
 8006808:	6a3a      	ldr	r2, [r7, #32]
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e6      	bne.n	80067e4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	375c      	adds	r7, #92	; 0x5c
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	08006adb 	.word	0x08006adb
 8006828:	08006975 	.word	0x08006975

0800682c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b095      	sub	sp, #84	; 0x54
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006852:	643b      	str	r3, [r7, #64]	; 0x40
 8006854:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e6      	bne.n	8006834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3308      	adds	r3, #8
 800686c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	61fb      	str	r3, [r7, #28]
   return(result);
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	64bb      	str	r3, [r7, #72]	; 0x48
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3308      	adds	r3, #8
 8006884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800688c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e5      	bne.n	8006866 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d118      	bne.n	80068d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f023 0310 	bic.w	r3, r3, #16
 80068b6:	647b      	str	r3, [r7, #68]	; 0x44
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6979      	ldr	r1, [r7, #20]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	613b      	str	r3, [r7, #16]
   return(result);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e6      	bne.n	80068a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80068e8:	bf00      	nop
 80068ea:	3754      	adds	r7, #84	; 0x54
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff faaa 	bl	8005e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	60bb      	str	r3, [r7, #8]
   return(result);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800693c:	61fb      	str	r3, [r7, #28]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6979      	ldr	r1, [r7, #20]
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	613b      	str	r3, [r7, #16]
   return(result);
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e6      	bne.n	8006928 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff fa76 	bl	8005e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800696c:	bf00      	nop
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b096      	sub	sp, #88	; 0x58
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006982:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800698c:	2b22      	cmp	r3, #34	; 0x22
 800698e:	f040 8098 	bne.w	8006ac2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800699c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80069a0:	b2d9      	uxtb	r1, r3
 80069a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ac:	400a      	ands	r2, r1
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d17b      	bne.n	8006ad2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e2:	e853 3f00 	ldrex	r3, [r3]
 80069e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ee:	653b      	str	r3, [r7, #80]	; 0x50
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	461a      	mov	r2, r3
 80069f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f8:	647b      	str	r3, [r7, #68]	; 0x44
 80069fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a00:	e841 2300 	strex	r3, r2, [r1]
 8006a04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e6      	bne.n	80069da <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3308      	adds	r3, #8
 8006a12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	f023 0301 	bic.w	r3, r3, #1
 8006a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3308      	adds	r3, #8
 8006a2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a2c:	633a      	str	r2, [r7, #48]	; 0x30
 8006a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e5      	bne.n	8006a0c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d12e      	bne.n	8006aba <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0310 	bic.w	r3, r3, #16
 8006a76:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a80:	61fb      	str	r3, [r7, #28]
 8006a82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	69b9      	ldr	r1, [r7, #24]
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e6      	bne.n	8006a62 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	2b10      	cmp	r3, #16
 8006aa0:	d103      	bne.n	8006aaa <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2210      	movs	r2, #16
 8006aa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff f9e4 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ab8:	e00b      	b.n	8006ad2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7fa f87e 	bl	8000bbc <HAL_UART_RxCpltCallback>
}
 8006ac0:	e007      	b.n	8006ad2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f042 0208 	orr.w	r2, r2, #8
 8006ad0:	619a      	str	r2, [r3, #24]
}
 8006ad2:	bf00      	nop
 8006ad4:	3758      	adds	r7, #88	; 0x58
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b096      	sub	sp, #88	; 0x58
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ae8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006af2:	2b22      	cmp	r3, #34	; 0x22
 8006af4:	f040 8098 	bne.w	8006c28 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b06:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b08:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006b0c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b10:	4013      	ands	r3, r2
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b16:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1c:	1c9a      	adds	r2, r3, #2
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d17b      	bne.n	8006c38 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8006b60:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e6      	bne.n	8006b40 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3308      	adds	r3, #8
 8006b78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e5      	bne.n	8006b72 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d12e      	bne.n	8006c20 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f023 0310 	bic.w	r3, r3, #16
 8006bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be6:	61bb      	str	r3, [r7, #24]
 8006be8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6979      	ldr	r1, [r7, #20]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e6      	bne.n	8006bc8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f003 0310 	and.w	r3, r3, #16
 8006c04:	2b10      	cmp	r3, #16
 8006c06:	d103      	bne.n	8006c10 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2210      	movs	r2, #16
 8006c0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff f931 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c1e:	e00b      	b.n	8006c38 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7f9 ffcb 	bl	8000bbc <HAL_UART_RxCpltCallback>
}
 8006c26:	e007      	b.n	8006c38 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0208 	orr.w	r2, r2, #8
 8006c36:	619a      	str	r2, [r3, #24]
}
 8006c38:	bf00      	nop
 8006c3a:	3758      	adds	r7, #88	; 0x58
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c40:	b084      	sub	sp, #16
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	f107 001c 	add.w	r0, r7, #28
 8006c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d120      	bne.n	8006c9a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	4b20      	ldr	r3, [pc, #128]	; (8006cec <USB_CoreInit+0xac>)
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d105      	bne.n	8006c8e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fbee 	bl	8008470 <USB_CoreReset>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]
 8006c98:	e010      	b.n	8006cbc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 fbe2 	bl	8008470 <USB_CoreReset>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d10b      	bne.n	8006cda <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f043 0206 	orr.w	r2, r3, #6
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f043 0220 	orr.w	r2, r3, #32
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ce6:	b004      	add	sp, #16
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	ffbdffbf 	.word	0xffbdffbf

08006cf0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d165      	bne.n	8006dd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4a41      	ldr	r2, [pc, #260]	; (8006e0c <USB_SetTurnaroundTime+0x11c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d906      	bls.n	8006d1a <USB_SetTurnaroundTime+0x2a>
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4a40      	ldr	r2, [pc, #256]	; (8006e10 <USB_SetTurnaroundTime+0x120>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d202      	bcs.n	8006d1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d14:	230f      	movs	r3, #15
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	e062      	b.n	8006de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	4a3c      	ldr	r2, [pc, #240]	; (8006e10 <USB_SetTurnaroundTime+0x120>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d306      	bcc.n	8006d30 <USB_SetTurnaroundTime+0x40>
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	4a3b      	ldr	r2, [pc, #236]	; (8006e14 <USB_SetTurnaroundTime+0x124>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d202      	bcs.n	8006d30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d2a:	230e      	movs	r3, #14
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	e057      	b.n	8006de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4a38      	ldr	r2, [pc, #224]	; (8006e14 <USB_SetTurnaroundTime+0x124>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d306      	bcc.n	8006d46 <USB_SetTurnaroundTime+0x56>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4a37      	ldr	r2, [pc, #220]	; (8006e18 <USB_SetTurnaroundTime+0x128>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d202      	bcs.n	8006d46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d40:	230d      	movs	r3, #13
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	e04c      	b.n	8006de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4a33      	ldr	r2, [pc, #204]	; (8006e18 <USB_SetTurnaroundTime+0x128>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d306      	bcc.n	8006d5c <USB_SetTurnaroundTime+0x6c>
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	4a32      	ldr	r2, [pc, #200]	; (8006e1c <USB_SetTurnaroundTime+0x12c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d802      	bhi.n	8006d5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d56:	230c      	movs	r3, #12
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	e041      	b.n	8006de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4a2f      	ldr	r2, [pc, #188]	; (8006e1c <USB_SetTurnaroundTime+0x12c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d906      	bls.n	8006d72 <USB_SetTurnaroundTime+0x82>
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4a2e      	ldr	r2, [pc, #184]	; (8006e20 <USB_SetTurnaroundTime+0x130>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d802      	bhi.n	8006d72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d6c:	230b      	movs	r3, #11
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	e036      	b.n	8006de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	4a2a      	ldr	r2, [pc, #168]	; (8006e20 <USB_SetTurnaroundTime+0x130>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d906      	bls.n	8006d88 <USB_SetTurnaroundTime+0x98>
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	4a29      	ldr	r2, [pc, #164]	; (8006e24 <USB_SetTurnaroundTime+0x134>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d802      	bhi.n	8006d88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d82:	230a      	movs	r3, #10
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	e02b      	b.n	8006de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4a26      	ldr	r2, [pc, #152]	; (8006e24 <USB_SetTurnaroundTime+0x134>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d906      	bls.n	8006d9e <USB_SetTurnaroundTime+0xae>
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4a25      	ldr	r2, [pc, #148]	; (8006e28 <USB_SetTurnaroundTime+0x138>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d202      	bcs.n	8006d9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d98:	2309      	movs	r3, #9
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	e020      	b.n	8006de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	4a21      	ldr	r2, [pc, #132]	; (8006e28 <USB_SetTurnaroundTime+0x138>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d306      	bcc.n	8006db4 <USB_SetTurnaroundTime+0xc4>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	4a20      	ldr	r2, [pc, #128]	; (8006e2c <USB_SetTurnaroundTime+0x13c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d802      	bhi.n	8006db4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006dae:	2308      	movs	r3, #8
 8006db0:	617b      	str	r3, [r7, #20]
 8006db2:	e015      	b.n	8006de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	4a1d      	ldr	r2, [pc, #116]	; (8006e2c <USB_SetTurnaroundTime+0x13c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d906      	bls.n	8006dca <USB_SetTurnaroundTime+0xda>
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4a1c      	ldr	r2, [pc, #112]	; (8006e30 <USB_SetTurnaroundTime+0x140>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d202      	bcs.n	8006dca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006dc4:	2307      	movs	r3, #7
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	e00a      	b.n	8006de0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006dca:	2306      	movs	r3, #6
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e007      	b.n	8006de0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006dd0:	79fb      	ldrb	r3, [r7, #7]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d102      	bne.n	8006ddc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006dd6:	2309      	movs	r3, #9
 8006dd8:	617b      	str	r3, [r7, #20]
 8006dda:	e001      	b.n	8006de0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006ddc:	2309      	movs	r3, #9
 8006dde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	029b      	lsls	r3, r3, #10
 8006df4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	371c      	adds	r7, #28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	00d8acbf 	.word	0x00d8acbf
 8006e10:	00e4e1c0 	.word	0x00e4e1c0
 8006e14:	00f42400 	.word	0x00f42400
 8006e18:	01067380 	.word	0x01067380
 8006e1c:	011a499f 	.word	0x011a499f
 8006e20:	01312cff 	.word	0x01312cff
 8006e24:	014ca43f 	.word	0x014ca43f
 8006e28:	016e3600 	.word	0x016e3600
 8006e2c:	01a6ab1f 	.word	0x01a6ab1f
 8006e30:	01e84800 	.word	0x01e84800

08006e34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f043 0201 	orr.w	r2, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f023 0201 	bic.w	r2, r3, #1
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	460b      	mov	r3, r1
 8006e82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d115      	bne.n	8006ec6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ea6:	2001      	movs	r0, #1
 8006ea8:	f7fa fa9c 	bl	80013e4 <HAL_Delay>
      ms++;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 fa4b 	bl	800834e <USB_GetMode>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d01e      	beq.n	8006efc <USB_SetCurrentMode+0x84>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b31      	cmp	r3, #49	; 0x31
 8006ec2:	d9f0      	bls.n	8006ea6 <USB_SetCurrentMode+0x2e>
 8006ec4:	e01a      	b.n	8006efc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ec6:	78fb      	ldrb	r3, [r7, #3]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d115      	bne.n	8006ef8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ed8:	2001      	movs	r0, #1
 8006eda:	f7fa fa83 	bl	80013e4 <HAL_Delay>
      ms++;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 fa32 	bl	800834e <USB_GetMode>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <USB_SetCurrentMode+0x84>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b31      	cmp	r3, #49	; 0x31
 8006ef4:	d9f0      	bls.n	8006ed8 <USB_SetCurrentMode+0x60>
 8006ef6:	e001      	b.n	8006efc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e005      	b.n	8006f08 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b32      	cmp	r3, #50	; 0x32
 8006f00:	d101      	bne.n	8006f06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e000      	b.n	8006f08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f10:	b084      	sub	sp, #16
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	613b      	str	r3, [r7, #16]
 8006f2e:	e009      	b.n	8006f44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	3340      	adds	r3, #64	; 0x40
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	3301      	adds	r3, #1
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	2b0e      	cmp	r3, #14
 8006f48:	d9f2      	bls.n	8006f30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d11c      	bne.n	8006f8a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f5e:	f043 0302 	orr.w	r3, r3, #2
 8006f62:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	e005      	b.n	8006f96 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa8:	4619      	mov	r1, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	680b      	ldr	r3, [r1, #0]
 8006fb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d10c      	bne.n	8006fd6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f965 	bl	8007294 <USB_SetDevSpeed>
 8006fca:	e008      	b.n	8006fde <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fcc:	2101      	movs	r1, #1
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f960 	bl	8007294 <USB_SetDevSpeed>
 8006fd4:	e003      	b.n	8006fde <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fd6:	2103      	movs	r1, #3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f95b 	bl	8007294 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fde:	2110      	movs	r1, #16
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f8f3 	bl	80071cc <USB_FlushTxFifo>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f91f 	bl	8007234 <USB_FlushRxFifo>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007006:	461a      	mov	r2, r3
 8007008:	2300      	movs	r3, #0
 800700a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007012:	461a      	mov	r2, r3
 8007014:	2300      	movs	r3, #0
 8007016:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701e:	461a      	mov	r2, r3
 8007020:	2300      	movs	r3, #0
 8007022:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007024:	2300      	movs	r3, #0
 8007026:	613b      	str	r3, [r7, #16]
 8007028:	e043      	b.n	80070b2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800703c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007040:	d118      	bne.n	8007074 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007054:	461a      	mov	r2, r3
 8007056:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	e013      	b.n	8007086 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706a:	461a      	mov	r2, r3
 800706c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	e008      	b.n	8007086 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007080:	461a      	mov	r2, r3
 8007082:	2300      	movs	r3, #0
 8007084:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007092:	461a      	mov	r2, r3
 8007094:	2300      	movs	r3, #0
 8007096:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	461a      	mov	r2, r3
 80070a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	3301      	adds	r3, #1
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d3b7      	bcc.n	800702a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ba:	2300      	movs	r3, #0
 80070bc:	613b      	str	r3, [r7, #16]
 80070be:	e043      	b.n	8007148 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070d6:	d118      	bne.n	800710a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10a      	bne.n	80070f4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ea:	461a      	mov	r2, r3
 80070ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	e013      	b.n	800711c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007100:	461a      	mov	r2, r3
 8007102:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	e008      	b.n	800711c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007116:	461a      	mov	r2, r3
 8007118:	2300      	movs	r3, #0
 800711a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007128:	461a      	mov	r2, r3
 800712a:	2300      	movs	r3, #0
 800712c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713a:	461a      	mov	r2, r3
 800713c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007140:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	3301      	adds	r3, #1
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	429a      	cmp	r2, r3
 800714e:	d3b7      	bcc.n	80070c0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800715e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007162:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007170:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	2b00      	cmp	r3, #0
 8007176:	d105      	bne.n	8007184 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f043 0210 	orr.w	r2, r3, #16
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699a      	ldr	r2, [r3, #24]
 8007188:	4b0e      	ldr	r3, [pc, #56]	; (80071c4 <USB_DevInit+0x2b4>)
 800718a:	4313      	orrs	r3, r2
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f043 0208 	orr.w	r2, r3, #8
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d105      	bne.n	80071b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <USB_DevInit+0x2b8>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071c0:	b004      	add	sp, #16
 80071c2:	4770      	bx	lr
 80071c4:	803c3800 	.word	0x803c3800
 80071c8:	40000004 	.word	0x40000004

080071cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3301      	adds	r3, #1
 80071de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4a13      	ldr	r2, [pc, #76]	; (8007230 <USB_FlushTxFifo+0x64>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d901      	bls.n	80071ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e01b      	b.n	8007224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	daf2      	bge.n	80071da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	019b      	lsls	r3, r3, #6
 80071fc:	f043 0220 	orr.w	r2, r3, #32
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3301      	adds	r3, #1
 8007208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4a08      	ldr	r2, [pc, #32]	; (8007230 <USB_FlushTxFifo+0x64>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d901      	bls.n	8007216 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e006      	b.n	8007224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b20      	cmp	r3, #32
 8007220:	d0f0      	beq.n	8007204 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	00030d40 	.word	0x00030d40

08007234 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3301      	adds	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4a11      	ldr	r2, [pc, #68]	; (8007290 <USB_FlushRxFifo+0x5c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d901      	bls.n	8007252 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e018      	b.n	8007284 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	daf2      	bge.n	8007240 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2210      	movs	r2, #16
 8007262:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3301      	adds	r3, #1
 8007268:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a08      	ldr	r2, [pc, #32]	; (8007290 <USB_FlushRxFifo+0x5c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d901      	bls.n	8007276 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e006      	b.n	8007284 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f003 0310 	and.w	r3, r3, #16
 800727e:	2b10      	cmp	r3, #16
 8007280:	d0f0      	beq.n	8007264 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	00030d40 	.word	0x00030d40

08007294 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	68f9      	ldr	r1, [r7, #12]
 80072b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b4:	4313      	orrs	r3, r2
 80072b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b087      	sub	sp, #28
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f003 0306 	and.w	r3, r3, #6
 80072de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d102      	bne.n	80072ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80072e6:	2300      	movs	r3, #0
 80072e8:	75fb      	strb	r3, [r7, #23]
 80072ea:	e00a      	b.n	8007302 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d002      	beq.n	80072f8 <USB_GetDevSpeed+0x32>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b06      	cmp	r3, #6
 80072f6:	d102      	bne.n	80072fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80072f8:	2302      	movs	r3, #2
 80072fa:	75fb      	strb	r3, [r7, #23]
 80072fc:	e001      	b.n	8007302 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80072fe:	230f      	movs	r3, #15
 8007300:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
}
 8007304:	4618      	mov	r0, r3
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	785b      	ldrb	r3, [r3, #1]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d139      	bne.n	80073a0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007332:	69da      	ldr	r2, [r3, #28]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f003 030f 	and.w	r3, r3, #15
 800733c:	2101      	movs	r1, #1
 800733e:	fa01 f303 	lsl.w	r3, r1, r3
 8007342:	b29b      	uxth	r3, r3
 8007344:	68f9      	ldr	r1, [r7, #12]
 8007346:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800734a:	4313      	orrs	r3, r2
 800734c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d153      	bne.n	800740c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	791b      	ldrb	r3, [r3, #4]
 800737e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007380:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	059b      	lsls	r3, r3, #22
 8007386:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007388:	431a      	orrs	r2, r3
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	0159      	lsls	r1, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	440b      	add	r3, r1
 8007392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007396:	4619      	mov	r1, r3
 8007398:	4b20      	ldr	r3, [pc, #128]	; (800741c <USB_ActivateEndpoint+0x10c>)
 800739a:	4313      	orrs	r3, r2
 800739c:	600b      	str	r3, [r1, #0]
 800739e:	e035      	b.n	800740c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a6:	69da      	ldr	r2, [r3, #28]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	f003 030f 	and.w	r3, r3, #15
 80073b0:	2101      	movs	r1, #1
 80073b2:	fa01 f303 	lsl.w	r3, r1, r3
 80073b6:	041b      	lsls	r3, r3, #16
 80073b8:	68f9      	ldr	r1, [r7, #12]
 80073ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073be:	4313      	orrs	r3, r2
 80073c0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d119      	bne.n	800740c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	791b      	ldrb	r3, [r3, #4]
 80073f2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073f4:	430b      	orrs	r3, r1
 80073f6:	431a      	orrs	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	0159      	lsls	r1, r3, #5
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	440b      	add	r3, r1
 8007400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007404:	4619      	mov	r1, r3
 8007406:	4b05      	ldr	r3, [pc, #20]	; (800741c <USB_ActivateEndpoint+0x10c>)
 8007408:	4313      	orrs	r3, r2
 800740a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	10008000 	.word	0x10008000

08007420 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d161      	bne.n	8007500 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800744e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007452:	d11f      	bne.n	8007494 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4413      	add	r3, r2
 800745c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	0151      	lsls	r1, r2, #5
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	440a      	add	r2, r1
 800746a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007472:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	0151      	lsls	r1, r2, #5
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	440a      	add	r2, r1
 800748a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007492:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	2101      	movs	r1, #1
 80074a6:	fa01 f303 	lsl.w	r3, r1, r3
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	43db      	mvns	r3, r3
 80074ae:	68f9      	ldr	r1, [r7, #12]
 80074b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074b4:	4013      	ands	r3, r2
 80074b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074be:	69da      	ldr	r2, [r3, #28]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	f003 030f 	and.w	r3, r3, #15
 80074c8:	2101      	movs	r1, #1
 80074ca:	fa01 f303 	lsl.w	r3, r1, r3
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	43db      	mvns	r3, r3
 80074d2:	68f9      	ldr	r1, [r7, #12]
 80074d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074d8:	4013      	ands	r3, r2
 80074da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	0159      	lsls	r1, r3, #5
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	440b      	add	r3, r1
 80074f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f6:	4619      	mov	r1, r3
 80074f8:	4b35      	ldr	r3, [pc, #212]	; (80075d0 <USB_DeactivateEndpoint+0x1b0>)
 80074fa:	4013      	ands	r3, r2
 80074fc:	600b      	str	r3, [r1, #0]
 80074fe:	e060      	b.n	80075c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007516:	d11f      	bne.n	8007558 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	0151      	lsls	r1, r2, #5
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	440a      	add	r2, r1
 800752e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007532:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007536:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	0151      	lsls	r1, r2, #5
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	440a      	add	r2, r1
 800754e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007552:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007556:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800755e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	f003 030f 	and.w	r3, r3, #15
 8007568:	2101      	movs	r1, #1
 800756a:	fa01 f303 	lsl.w	r3, r1, r3
 800756e:	041b      	lsls	r3, r3, #16
 8007570:	43db      	mvns	r3, r3
 8007572:	68f9      	ldr	r1, [r7, #12]
 8007574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007578:	4013      	ands	r3, r2
 800757a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007582:	69da      	ldr	r2, [r3, #28]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	f003 030f 	and.w	r3, r3, #15
 800758c:	2101      	movs	r1, #1
 800758e:	fa01 f303 	lsl.w	r3, r1, r3
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	43db      	mvns	r3, r3
 8007596:	68f9      	ldr	r1, [r7, #12]
 8007598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800759c:	4013      	ands	r3, r2
 800759e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	0159      	lsls	r1, r3, #5
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	440b      	add	r3, r1
 80075b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ba:	4619      	mov	r1, r3
 80075bc:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <USB_DeactivateEndpoint+0x1b4>)
 80075be:	4013      	ands	r3, r2
 80075c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	ec337800 	.word	0xec337800
 80075d4:	eff37800 	.word	0xeff37800

080075d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08a      	sub	sp, #40	; 0x28
 80075dc:	af02      	add	r7, sp, #8
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	785b      	ldrb	r3, [r3, #1]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	f040 8163 	bne.w	80078c0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d132      	bne.n	8007668 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	0159      	lsls	r1, r3, #5
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	440b      	add	r3, r1
 8007618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761c:	4619      	mov	r1, r3
 800761e:	4ba5      	ldr	r3, [pc, #660]	; (80078b4 <USB_EPStartXfer+0x2dc>)
 8007620:	4013      	ands	r3, r2
 8007622:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	4413      	add	r3, r2
 800762c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	0151      	lsls	r1, r2, #5
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	440a      	add	r2, r1
 800763a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800763e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007642:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007650:	691a      	ldr	r2, [r3, #16]
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	0159      	lsls	r1, r3, #5
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	440b      	add	r3, r1
 800765a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765e:	4619      	mov	r1, r3
 8007660:	4b95      	ldr	r3, [pc, #596]	; (80078b8 <USB_EPStartXfer+0x2e0>)
 8007662:	4013      	ands	r3, r2
 8007664:	610b      	str	r3, [r1, #16]
 8007666:	e074      	b.n	8007752 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	0159      	lsls	r1, r3, #5
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	440b      	add	r3, r1
 800767e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007682:	4619      	mov	r1, r3
 8007684:	4b8c      	ldr	r3, [pc, #560]	; (80078b8 <USB_EPStartXfer+0x2e0>)
 8007686:	4013      	ands	r3, r2
 8007688:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	0159      	lsls	r1, r3, #5
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	440b      	add	r3, r1
 80076a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a4:	4619      	mov	r1, r3
 80076a6:	4b83      	ldr	r3, [pc, #524]	; (80078b4 <USB_EPStartXfer+0x2dc>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6999      	ldr	r1, [r3, #24]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	440b      	add	r3, r1
 80076c4:	1e59      	subs	r1, r3, #1
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80076ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80076d0:	4b7a      	ldr	r3, [pc, #488]	; (80078bc <USB_EPStartXfer+0x2e4>)
 80076d2:	400b      	ands	r3, r1
 80076d4:	69b9      	ldr	r1, [r7, #24]
 80076d6:	0148      	lsls	r0, r1, #5
 80076d8:	69f9      	ldr	r1, [r7, #28]
 80076da:	4401      	add	r1, r0
 80076dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076e0:	4313      	orrs	r3, r2
 80076e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f0:	691a      	ldr	r2, [r3, #16]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076fa:	69b9      	ldr	r1, [r7, #24]
 80076fc:	0148      	lsls	r0, r1, #5
 80076fe:	69f9      	ldr	r1, [r7, #28]
 8007700:	4401      	add	r1, r0
 8007702:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007706:	4313      	orrs	r3, r2
 8007708:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	791b      	ldrb	r3, [r3, #4]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d11f      	bne.n	8007752 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	0151      	lsls	r1, r2, #5
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	440a      	add	r2, r1
 8007728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800772c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007730:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	0151      	lsls	r1, r2, #5
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	440a      	add	r2, r1
 8007748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800774c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007750:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d14b      	bne.n	80077f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d009      	beq.n	8007774 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776c:	461a      	mov	r2, r3
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	791b      	ldrb	r3, [r3, #4]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d128      	bne.n	80077ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007788:	2b00      	cmp	r3, #0
 800778a:	d110      	bne.n	80077ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	e00f      	b.n	80077ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	0151      	lsls	r1, r2, #5
 80077c0:	69fa      	ldr	r2, [r7, #28]
 80077c2:	440a      	add	r2, r1
 80077c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	0151      	lsls	r1, r2, #5
 80077e0:	69fa      	ldr	r2, [r7, #28]
 80077e2:	440a      	add	r2, r1
 80077e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	e137      	b.n	8007a60 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	0151      	lsls	r1, r2, #5
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	440a      	add	r2, r1
 8007806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800780a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800780e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	791b      	ldrb	r3, [r3, #4]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d015      	beq.n	8007844 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 811f 	beq.w	8007a60 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	2101      	movs	r1, #1
 8007834:	fa01 f303 	lsl.w	r3, r1, r3
 8007838:	69f9      	ldr	r1, [r7, #28]
 800783a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800783e:	4313      	orrs	r3, r2
 8007840:	634b      	str	r3, [r1, #52]	; 0x34
 8007842:	e10d      	b.n	8007a60 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007850:	2b00      	cmp	r3, #0
 8007852:	d110      	bne.n	8007876 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	0151      	lsls	r1, r2, #5
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	440a      	add	r2, r1
 800786a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800786e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	e00f      	b.n	8007896 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	0151      	lsls	r1, r2, #5
 8007888:	69fa      	ldr	r2, [r7, #28]
 800788a:	440a      	add	r2, r1
 800788c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007894:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6919      	ldr	r1, [r3, #16]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	781a      	ldrb	r2, [r3, #0]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	b298      	uxth	r0, r3
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	4603      	mov	r3, r0
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 faea 	bl	8007e84 <USB_WritePacket>
 80078b0:	e0d6      	b.n	8007a60 <USB_EPStartXfer+0x488>
 80078b2:	bf00      	nop
 80078b4:	e007ffff 	.word	0xe007ffff
 80078b8:	fff80000 	.word	0xfff80000
 80078bc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078cc:	691a      	ldr	r2, [r3, #16]
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	0159      	lsls	r1, r3, #5
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	440b      	add	r3, r1
 80078d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078da:	4619      	mov	r1, r3
 80078dc:	4b63      	ldr	r3, [pc, #396]	; (8007a6c <USB_EPStartXfer+0x494>)
 80078de:	4013      	ands	r3, r2
 80078e0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	691a      	ldr	r2, [r3, #16]
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	0159      	lsls	r1, r3, #5
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	440b      	add	r3, r1
 80078f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fc:	4619      	mov	r1, r3
 80078fe:	4b5c      	ldr	r3, [pc, #368]	; (8007a70 <USB_EPStartXfer+0x498>)
 8007900:	4013      	ands	r3, r2
 8007902:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d123      	bne.n	8007954 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007918:	691a      	ldr	r2, [r3, #16]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007922:	69b9      	ldr	r1, [r7, #24]
 8007924:	0148      	lsls	r0, r1, #5
 8007926:	69f9      	ldr	r1, [r7, #28]
 8007928:	4401      	add	r1, r0
 800792a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800792e:	4313      	orrs	r3, r2
 8007930:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	4413      	add	r3, r2
 800793a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	0151      	lsls	r1, r2, #5
 8007944:	69fa      	ldr	r2, [r7, #28]
 8007946:	440a      	add	r2, r1
 8007948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800794c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007950:	6113      	str	r3, [r2, #16]
 8007952:	e037      	b.n	80079c4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	699a      	ldr	r2, [r3, #24]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	4413      	add	r3, r2
 800795e:	1e5a      	subs	r2, r3, #1
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	fbb2 f3f3 	udiv	r3, r2, r3
 8007968:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	8afa      	ldrh	r2, [r7, #22]
 8007970:	fb03 f202 	mul.w	r2, r3, r2
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007984:	691a      	ldr	r2, [r3, #16]
 8007986:	8afb      	ldrh	r3, [r7, #22]
 8007988:	04d9      	lsls	r1, r3, #19
 800798a:	4b3a      	ldr	r3, [pc, #232]	; (8007a74 <USB_EPStartXfer+0x49c>)
 800798c:	400b      	ands	r3, r1
 800798e:	69b9      	ldr	r1, [r7, #24]
 8007990:	0148      	lsls	r0, r1, #5
 8007992:	69f9      	ldr	r1, [r7, #28]
 8007994:	4401      	add	r1, r0
 8007996:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800799a:	4313      	orrs	r3, r2
 800799c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079aa:	691a      	ldr	r2, [r3, #16]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	69db      	ldr	r3, [r3, #28]
 80079b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079b4:	69b9      	ldr	r1, [r7, #24]
 80079b6:	0148      	lsls	r0, r1, #5
 80079b8:	69f9      	ldr	r1, [r7, #28]
 80079ba:	4401      	add	r1, r0
 80079bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079c0:	4313      	orrs	r3, r2
 80079c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d10d      	bne.n	80079e6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d009      	beq.n	80079e6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	6919      	ldr	r1, [r3, #16]
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e2:	460a      	mov	r2, r1
 80079e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	791b      	ldrb	r3, [r3, #4]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d128      	bne.n	8007a40 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d110      	bne.n	8007a20 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a1c:	6013      	str	r3, [r2, #0]
 8007a1e:	e00f      	b.n	8007a40 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69ba      	ldr	r2, [r7, #24]
 8007a30:	0151      	lsls	r1, r2, #5
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	440a      	add	r2, r1
 8007a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	0151      	lsls	r1, r2, #5
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	440a      	add	r2, r1
 8007a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3720      	adds	r7, #32
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	fff80000 	.word	0xfff80000
 8007a70:	e007ffff 	.word	0xe007ffff
 8007a74:	1ff80000 	.word	0x1ff80000

08007a78 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	4613      	mov	r3, r2
 8007a84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	785b      	ldrb	r3, [r3, #1]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	f040 80ce 	bne.w	8007c36 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d132      	bne.n	8007b08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aae:	691a      	ldr	r2, [r3, #16]
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	0159      	lsls	r1, r3, #5
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	440b      	add	r3, r1
 8007ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abc:	4619      	mov	r1, r3
 8007abe:	4b9a      	ldr	r3, [pc, #616]	; (8007d28 <USB_EP0StartXfer+0x2b0>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	0151      	lsls	r1, r2, #5
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	440a      	add	r2, r1
 8007ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ade:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ae2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af0:	691a      	ldr	r2, [r3, #16]
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	0159      	lsls	r1, r3, #5
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	440b      	add	r3, r1
 8007afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007afe:	4619      	mov	r1, r3
 8007b00:	4b8a      	ldr	r3, [pc, #552]	; (8007d2c <USB_EP0StartXfer+0x2b4>)
 8007b02:	4013      	ands	r3, r2
 8007b04:	610b      	str	r3, [r1, #16]
 8007b06:	e04e      	b.n	8007ba6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b14:	691a      	ldr	r2, [r3, #16]
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	0159      	lsls	r1, r3, #5
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	440b      	add	r3, r1
 8007b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b22:	4619      	mov	r1, r3
 8007b24:	4b81      	ldr	r3, [pc, #516]	; (8007d2c <USB_EP0StartXfer+0x2b4>)
 8007b26:	4013      	ands	r3, r2
 8007b28:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b36:	691a      	ldr	r2, [r3, #16]
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	0159      	lsls	r1, r3, #5
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	440b      	add	r3, r1
 8007b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b44:	4619      	mov	r1, r3
 8007b46:	4b78      	ldr	r3, [pc, #480]	; (8007d28 <USB_EP0StartXfer+0x2b0>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	699a      	ldr	r2, [r3, #24]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d903      	bls.n	8007b60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	0151      	lsls	r1, r2, #5
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	440a      	add	r2, r1
 8007b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8c:	691a      	ldr	r2, [r3, #16]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b96:	6939      	ldr	r1, [r7, #16]
 8007b98:	0148      	lsls	r0, r1, #5
 8007b9a:	6979      	ldr	r1, [r7, #20]
 8007b9c:	4401      	add	r1, r0
 8007b9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d11e      	bne.n	8007bea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d009      	beq.n	8007bc8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	015a      	lsls	r2, r3, #5
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	4413      	add	r3, r2
 8007bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	0151      	lsls	r1, r2, #5
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	440a      	add	r2, r1
 8007bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	e097      	b.n	8007d1a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	0151      	lsls	r1, r2, #5
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	440a      	add	r2, r1
 8007c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 8083 	beq.w	8007d1a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	f003 030f 	and.w	r3, r3, #15
 8007c24:	2101      	movs	r1, #1
 8007c26:	fa01 f303 	lsl.w	r3, r1, r3
 8007c2a:	6979      	ldr	r1, [r7, #20]
 8007c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c30:	4313      	orrs	r3, r2
 8007c32:	634b      	str	r3, [r1, #52]	; 0x34
 8007c34:	e071      	b.n	8007d1a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c42:	691a      	ldr	r2, [r3, #16]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	0159      	lsls	r1, r3, #5
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	440b      	add	r3, r1
 8007c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c50:	4619      	mov	r1, r3
 8007c52:	4b36      	ldr	r3, [pc, #216]	; (8007d2c <USB_EP0StartXfer+0x2b4>)
 8007c54:	4013      	ands	r3, r2
 8007c56:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c64:	691a      	ldr	r2, [r3, #16]
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	0159      	lsls	r1, r3, #5
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	440b      	add	r3, r1
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c72:	4619      	mov	r1, r3
 8007c74:	4b2c      	ldr	r3, [pc, #176]	; (8007d28 <USB_EP0StartXfer+0x2b0>)
 8007c76:	4013      	ands	r3, r2
 8007c78:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	68da      	ldr	r2, [r3, #12]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	0151      	lsls	r1, r2, #5
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	440a      	add	r2, r1
 8007ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbe:	691a      	ldr	r2, [r3, #16]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cc8:	6939      	ldr	r1, [r7, #16]
 8007cca:	0148      	lsls	r0, r1, #5
 8007ccc:	6979      	ldr	r1, [r7, #20]
 8007cce:	4401      	add	r1, r0
 8007cd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d10d      	bne.n	8007cfa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d009      	beq.n	8007cfa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	6919      	ldr	r1, [r3, #16]
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf6:	460a      	mov	r2, r1
 8007cf8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	0151      	lsls	r1, r2, #5
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	440a      	add	r2, r1
 8007d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	371c      	adds	r7, #28
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	e007ffff 	.word	0xe007ffff
 8007d2c:	fff80000 	.word	0xfff80000

08007d30 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	785b      	ldrb	r3, [r3, #1]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d14a      	bne.n	8007de4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d66:	f040 8086 	bne.w	8007e76 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	7812      	ldrb	r2, [r2, #0]
 8007d7e:	0151      	lsls	r1, r2, #5
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	440a      	add	r2, r1
 8007d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d8c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	7812      	ldrb	r2, [r2, #0]
 8007da2:	0151      	lsls	r1, r2, #5
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	440a      	add	r2, r1
 8007da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007db0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3301      	adds	r3, #1
 8007db6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f242 7210 	movw	r2, #10000	; 0x2710
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d902      	bls.n	8007dc8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	75fb      	strb	r3, [r7, #23]
          break;
 8007dc6:	e056      	b.n	8007e76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007de0:	d0e7      	beq.n	8007db2 <USB_EPStopXfer+0x82>
 8007de2:	e048      	b.n	8007e76 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dfc:	d13b      	bne.n	8007e76 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	7812      	ldrb	r2, [r2, #0]
 8007e12:	0151      	lsls	r1, r2, #5
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	440a      	add	r2, r1
 8007e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e20:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	7812      	ldrb	r2, [r2, #0]
 8007e36:	0151      	lsls	r1, r2, #5
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	440a      	add	r2, r1
 8007e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d902      	bls.n	8007e5c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	75fb      	strb	r3, [r7, #23]
          break;
 8007e5a:	e00c      	b.n	8007e76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e74:	d0e7      	beq.n	8007e46 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	371c      	adds	r7, #28
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b089      	sub	sp, #36	; 0x24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	4611      	mov	r1, r2
 8007e90:	461a      	mov	r2, r3
 8007e92:	460b      	mov	r3, r1
 8007e94:	71fb      	strb	r3, [r7, #7]
 8007e96:	4613      	mov	r3, r2
 8007e98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ea2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d123      	bne.n	8007ef2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007eaa:	88bb      	ldrh	r3, [r7, #4]
 8007eac:	3303      	adds	r3, #3
 8007eae:	089b      	lsrs	r3, r3, #2
 8007eb0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	61bb      	str	r3, [r7, #24]
 8007eb6:	e018      	b.n	8007eea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	031a      	lsls	r2, r3, #12
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	3301      	adds	r3, #1
 8007edc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	61bb      	str	r3, [r7, #24]
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d3e2      	bcc.n	8007eb8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3724      	adds	r7, #36	; 0x24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b08b      	sub	sp, #44	; 0x2c
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f16:	88fb      	ldrh	r3, [r7, #6]
 8007f18:	089b      	lsrs	r3, r3, #2
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f1e:	88fb      	ldrh	r3, [r7, #6]
 8007f20:	f003 0303 	and.w	r3, r3, #3
 8007f24:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f26:	2300      	movs	r3, #0
 8007f28:	623b      	str	r3, [r7, #32]
 8007f2a:	e014      	b.n	8007f56 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	3301      	adds	r3, #1
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	3301      	adds	r3, #1
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	3301      	adds	r3, #1
 8007f54:	623b      	str	r3, [r7, #32]
 8007f56:	6a3a      	ldr	r2, [r7, #32]
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d3e6      	bcc.n	8007f2c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f5e:	8bfb      	ldrh	r3, [r7, #30]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d01e      	beq.n	8007fa2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f107 0310 	add.w	r3, r7, #16
 8007f74:	6812      	ldr	r2, [r2, #0]
 8007f76:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	00db      	lsls	r3, r3, #3
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	701a      	strb	r2, [r3, #0]
      i++;
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	3301      	adds	r3, #1
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007f96:	8bfb      	ldrh	r3, [r7, #30]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f9c:	8bfb      	ldrh	r3, [r7, #30]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1ea      	bne.n	8007f78 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	372c      	adds	r7, #44	; 0x2c
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	785b      	ldrb	r3, [r3, #1]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d12c      	bne.n	8008026 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	db12      	blt.n	8008004 <USB_EPSetStall+0x54>
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00f      	beq.n	8008004 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	0151      	lsls	r1, r2, #5
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	440a      	add	r2, r1
 8007ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ffe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008002:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	0151      	lsls	r1, r2, #5
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	440a      	add	r2, r1
 800801a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800801e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	e02b      	b.n	800807e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	db12      	blt.n	800805e <USB_EPSetStall+0xae>
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00f      	beq.n	800805e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	0151      	lsls	r1, r2, #5
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	440a      	add	r2, r1
 8008054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008058:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800805c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	440a      	add	r2, r1
 8008074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800807c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	785b      	ldrb	r3, [r3, #1]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d128      	bne.n	80080fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	0151      	lsls	r1, r2, #5
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	440a      	add	r2, r1
 80080be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	791b      	ldrb	r3, [r3, #4]
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d003      	beq.n	80080d8 <USB_EPClearStall+0x4c>
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	791b      	ldrb	r3, [r3, #4]
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d138      	bne.n	800814a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	0151      	lsls	r1, r2, #5
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	440a      	add	r2, r1
 80080ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080f6:	6013      	str	r3, [r2, #0]
 80080f8:	e027      	b.n	800814a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	0151      	lsls	r1, r2, #5
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	440a      	add	r2, r1
 8008110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008114:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008118:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	791b      	ldrb	r3, [r3, #4]
 800811e:	2b03      	cmp	r3, #3
 8008120:	d003      	beq.n	800812a <USB_EPClearStall+0x9e>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	791b      	ldrb	r3, [r3, #4]
 8008126:	2b02      	cmp	r3, #2
 8008128:	d10f      	bne.n	800814a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	440a      	add	r2, r1
 8008140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008148:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008176:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800817a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	78fb      	ldrb	r3, [r7, #3]
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800818c:	68f9      	ldr	r1, [r7, #12]
 800818e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008192:	4313      	orrs	r3, r2
 8008194:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081be:	f023 0303 	bic.w	r3, r3, #3
 80081c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081d2:	f023 0302 	bic.w	r3, r3, #2
 80081d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008200:	f023 0303 	bic.w	r3, r3, #3
 8008204:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008214:	f043 0302 	orr.w	r3, r3, #2
 8008218:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	4013      	ands	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008240:	68fb      	ldr	r3, [r7, #12]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800824e:	b480      	push	{r7}
 8008250:	b085      	sub	sp, #20
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	4013      	ands	r3, r2
 8008270:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	0c1b      	lsrs	r3, r3, #16
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008282:	b480      	push	{r7}
 8008284:	b085      	sub	sp, #20
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	4013      	ands	r3, r2
 80082a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	b29b      	uxth	r3, r3
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b085      	sub	sp, #20
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	460b      	mov	r3, r1
 80082c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80082c6:	78fb      	ldrb	r3, [r7, #3]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	4013      	ands	r3, r2
 80082e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082e4:	68bb      	ldr	r3, [r7, #8]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b087      	sub	sp, #28
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	460b      	mov	r3, r1
 80082fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008314:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008316:	78fb      	ldrb	r3, [r7, #3]
 8008318:	f003 030f 	and.w	r3, r3, #15
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	fa22 f303 	lsr.w	r3, r2, r3
 8008322:	01db      	lsls	r3, r3, #7
 8008324:	b2db      	uxtb	r3, r3
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	4313      	orrs	r3, r2
 800832a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800832c:	78fb      	ldrb	r3, [r7, #3]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	4413      	add	r3, r2
 8008334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4013      	ands	r3, r2
 800833e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008340:	68bb      	ldr	r3, [r7, #8]
}
 8008342:	4618      	mov	r0, r3
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	f003 0301 	and.w	r3, r3, #1
}
 800835e:	4618      	mov	r0, r3
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
	...

0800836c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008386:	4619      	mov	r1, r3
 8008388:	4b09      	ldr	r3, [pc, #36]	; (80083b0 <USB_ActivateSetup+0x44>)
 800838a:	4013      	ands	r3, r2
 800838c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800839c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	fffff800 	.word	0xfffff800

080083b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	460b      	mov	r3, r1
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	333c      	adds	r3, #60	; 0x3c
 80083ca:	3304      	adds	r3, #4
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	4a26      	ldr	r2, [pc, #152]	; (800846c <USB_EP0_OutStart+0xb8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d90a      	bls.n	80083ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083e8:	d101      	bne.n	80083ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	e037      	b.n	800845e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f4:	461a      	mov	r2, r3
 80083f6:	2300      	movs	r3, #0
 80083f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008408:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800840c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800841c:	f043 0318 	orr.w	r3, r3, #24
 8008420:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008430:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008434:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008436:	7afb      	ldrb	r3, [r7, #11]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d10f      	bne.n	800845c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008442:	461a      	mov	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008456:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800845a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	4f54300a 	.word	0x4f54300a

08008470 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008478:	2300      	movs	r3, #0
 800847a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3301      	adds	r3, #1
 8008480:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	4a13      	ldr	r2, [pc, #76]	; (80084d4 <USB_CoreReset+0x64>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d901      	bls.n	800848e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e01b      	b.n	80084c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	daf2      	bge.n	800847c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	f043 0201 	orr.w	r2, r3, #1
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3301      	adds	r3, #1
 80084aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4a09      	ldr	r2, [pc, #36]	; (80084d4 <USB_CoreReset+0x64>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d901      	bls.n	80084b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e006      	b.n	80084c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d0f0      	beq.n	80084a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	00030d40 	.word	0x00030d40

080084d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80084e8:	f002 fd12 	bl	800af10 <malloc>
 80084ec:	4603      	mov	r3, r0
 80084ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d109      	bne.n	800850a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	32b0      	adds	r2, #176	; 0xb0
 8008500:	2100      	movs	r1, #0
 8008502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008506:	2302      	movs	r3, #2
 8008508:	e0d4      	b.n	80086b4 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800850a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800850e:	2100      	movs	r1, #0
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f002 fdb9 	bl	800b088 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	32b0      	adds	r2, #176	; 0xb0
 8008520:	68f9      	ldr	r1, [r7, #12]
 8008522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	32b0      	adds	r2, #176	; 0xb0
 8008530:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	7c1b      	ldrb	r3, [r3, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d138      	bne.n	80085b4 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008542:	4b5e      	ldr	r3, [pc, #376]	; (80086bc <USBD_CDC_Init+0x1e4>)
 8008544:	7819      	ldrb	r1, [r3, #0]
 8008546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800854a:	2202      	movs	r2, #2
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f002 fb3c 	bl	800abca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008552:	4b5a      	ldr	r3, [pc, #360]	; (80086bc <USBD_CDC_Init+0x1e4>)
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	f003 020f 	and.w	r2, r3, #15
 800855a:	6879      	ldr	r1, [r7, #4]
 800855c:	4613      	mov	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	440b      	add	r3, r1
 8008566:	3324      	adds	r3, #36	; 0x24
 8008568:	2201      	movs	r2, #1
 800856a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800856c:	4b54      	ldr	r3, [pc, #336]	; (80086c0 <USBD_CDC_Init+0x1e8>)
 800856e:	7819      	ldrb	r1, [r3, #0]
 8008570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008574:	2202      	movs	r2, #2
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f002 fb27 	bl	800abca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800857c:	4b50      	ldr	r3, [pc, #320]	; (80086c0 <USBD_CDC_Init+0x1e8>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	f003 020f 	and.w	r2, r3, #15
 8008584:	6879      	ldr	r1, [r7, #4]
 8008586:	4613      	mov	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	440b      	add	r3, r1
 8008590:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008594:	2201      	movs	r2, #1
 8008596:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008598:	4b4a      	ldr	r3, [pc, #296]	; (80086c4 <USBD_CDC_Init+0x1ec>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	f003 020f 	and.w	r2, r3, #15
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	440b      	add	r3, r1
 80085ac:	3326      	adds	r3, #38	; 0x26
 80085ae:	2210      	movs	r2, #16
 80085b0:	801a      	strh	r2, [r3, #0]
 80085b2:	e035      	b.n	8008620 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80085b4:	4b41      	ldr	r3, [pc, #260]	; (80086bc <USBD_CDC_Init+0x1e4>)
 80085b6:	7819      	ldrb	r1, [r3, #0]
 80085b8:	2340      	movs	r3, #64	; 0x40
 80085ba:	2202      	movs	r2, #2
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f002 fb04 	bl	800abca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80085c2:	4b3e      	ldr	r3, [pc, #248]	; (80086bc <USBD_CDC_Init+0x1e4>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	f003 020f 	and.w	r2, r3, #15
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	4613      	mov	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	440b      	add	r3, r1
 80085d6:	3324      	adds	r3, #36	; 0x24
 80085d8:	2201      	movs	r2, #1
 80085da:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80085dc:	4b38      	ldr	r3, [pc, #224]	; (80086c0 <USBD_CDC_Init+0x1e8>)
 80085de:	7819      	ldrb	r1, [r3, #0]
 80085e0:	2340      	movs	r3, #64	; 0x40
 80085e2:	2202      	movs	r2, #2
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f002 faf0 	bl	800abca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80085ea:	4b35      	ldr	r3, [pc, #212]	; (80086c0 <USBD_CDC_Init+0x1e8>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	f003 020f 	and.w	r2, r3, #15
 80085f2:	6879      	ldr	r1, [r7, #4]
 80085f4:	4613      	mov	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	440b      	add	r3, r1
 80085fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008602:	2201      	movs	r2, #1
 8008604:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008606:	4b2f      	ldr	r3, [pc, #188]	; (80086c4 <USBD_CDC_Init+0x1ec>)
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	f003 020f 	and.w	r2, r3, #15
 800860e:	6879      	ldr	r1, [r7, #4]
 8008610:	4613      	mov	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	440b      	add	r3, r1
 800861a:	3326      	adds	r3, #38	; 0x26
 800861c:	2210      	movs	r2, #16
 800861e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008620:	4b28      	ldr	r3, [pc, #160]	; (80086c4 <USBD_CDC_Init+0x1ec>)
 8008622:	7819      	ldrb	r1, [r3, #0]
 8008624:	2308      	movs	r3, #8
 8008626:	2203      	movs	r2, #3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f002 face 	bl	800abca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800862e:	4b25      	ldr	r3, [pc, #148]	; (80086c4 <USBD_CDC_Init+0x1ec>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	f003 020f 	and.w	r2, r3, #15
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	4613      	mov	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	440b      	add	r3, r1
 8008642:	3324      	adds	r3, #36	; 0x24
 8008644:	2201      	movs	r2, #1
 8008646:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	33b0      	adds	r3, #176	; 0xb0
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800867e:	2302      	movs	r3, #2
 8008680:	e018      	b.n	80086b4 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	7c1b      	ldrb	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10a      	bne.n	80086a0 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800868a:	4b0d      	ldr	r3, [pc, #52]	; (80086c0 <USBD_CDC_Init+0x1e8>)
 800868c:	7819      	ldrb	r1, [r3, #0]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f002 fb85 	bl	800ada8 <USBD_LL_PrepareReceive>
 800869e:	e008      	b.n	80086b2 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086a0:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <USBD_CDC_Init+0x1e8>)
 80086a2:	7819      	ldrb	r1, [r3, #0]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086aa:	2340      	movs	r3, #64	; 0x40
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f002 fb7b 	bl	800ada8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	200000b3 	.word	0x200000b3
 80086c0:	200000b4 	.word	0x200000b4
 80086c4:	200000b5 	.word	0x200000b5

080086c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80086d4:	4b3a      	ldr	r3, [pc, #232]	; (80087c0 <USBD_CDC_DeInit+0xf8>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f002 fa9b 	bl	800ac16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80086e0:	4b37      	ldr	r3, [pc, #220]	; (80087c0 <USBD_CDC_DeInit+0xf8>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	f003 020f 	and.w	r2, r3, #15
 80086e8:	6879      	ldr	r1, [r7, #4]
 80086ea:	4613      	mov	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	440b      	add	r3, r1
 80086f4:	3324      	adds	r3, #36	; 0x24
 80086f6:	2200      	movs	r2, #0
 80086f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80086fa:	4b32      	ldr	r3, [pc, #200]	; (80087c4 <USBD_CDC_DeInit+0xfc>)
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	4619      	mov	r1, r3
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f002 fa88 	bl	800ac16 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008706:	4b2f      	ldr	r3, [pc, #188]	; (80087c4 <USBD_CDC_DeInit+0xfc>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	f003 020f 	and.w	r2, r3, #15
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	4613      	mov	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	440b      	add	r3, r1
 800871a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800871e:	2200      	movs	r2, #0
 8008720:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008722:	4b29      	ldr	r3, [pc, #164]	; (80087c8 <USBD_CDC_DeInit+0x100>)
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f002 fa74 	bl	800ac16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800872e:	4b26      	ldr	r3, [pc, #152]	; (80087c8 <USBD_CDC_DeInit+0x100>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	f003 020f 	and.w	r2, r3, #15
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	440b      	add	r3, r1
 8008742:	3324      	adds	r3, #36	; 0x24
 8008744:	2200      	movs	r2, #0
 8008746:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008748:	4b1f      	ldr	r3, [pc, #124]	; (80087c8 <USBD_CDC_DeInit+0x100>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	f003 020f 	and.w	r2, r3, #15
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	440b      	add	r3, r1
 800875c:	3326      	adds	r3, #38	; 0x26
 800875e:	2200      	movs	r2, #0
 8008760:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	32b0      	adds	r2, #176	; 0xb0
 800876c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d01f      	beq.n	80087b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	33b0      	adds	r3, #176	; 0xb0
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	32b0      	adds	r2, #176	; 0xb0
 8008792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008796:	4618      	mov	r0, r3
 8008798:	f002 fbc2 	bl	800af20 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	32b0      	adds	r2, #176	; 0xb0
 80087a6:	2100      	movs	r1, #0
 80087a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	200000b3 	.word	0x200000b3
 80087c4:	200000b4 	.word	0x200000b4
 80087c8:	200000b5 	.word	0x200000b5

080087cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	32b0      	adds	r2, #176	; 0xb0
 80087e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d101      	bne.n	80087fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e0bf      	b.n	800897c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008804:	2b00      	cmp	r3, #0
 8008806:	d050      	beq.n	80088aa <USBD_CDC_Setup+0xde>
 8008808:	2b20      	cmp	r3, #32
 800880a:	f040 80af 	bne.w	800896c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	88db      	ldrh	r3, [r3, #6]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d03a      	beq.n	800888c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	b25b      	sxtb	r3, r3
 800881c:	2b00      	cmp	r3, #0
 800881e:	da1b      	bge.n	8008858 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	33b0      	adds	r3, #176	; 0xb0
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008836:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	88d2      	ldrh	r2, [r2, #6]
 800883c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	88db      	ldrh	r3, [r3, #6]
 8008842:	2b07      	cmp	r3, #7
 8008844:	bf28      	it	cs
 8008846:	2307      	movcs	r3, #7
 8008848:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	89fa      	ldrh	r2, [r7, #14]
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 fd6d 	bl	800a330 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008856:	e090      	b.n	800897a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	785a      	ldrb	r2, [r3, #1]
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	88db      	ldrh	r3, [r3, #6]
 8008866:	2b3f      	cmp	r3, #63	; 0x3f
 8008868:	d803      	bhi.n	8008872 <USBD_CDC_Setup+0xa6>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	88db      	ldrh	r3, [r3, #6]
 800886e:	b2da      	uxtb	r2, r3
 8008870:	e000      	b.n	8008874 <USBD_CDC_Setup+0xa8>
 8008872:	2240      	movs	r2, #64	; 0x40
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800887a:	6939      	ldr	r1, [r7, #16]
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008882:	461a      	mov	r2, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f001 fd7f 	bl	800a388 <USBD_CtlPrepareRx>
      break;
 800888a:	e076      	b.n	800897a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	33b0      	adds	r3, #176	; 0xb0
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	7850      	ldrb	r0, [r2, #1]
 80088a2:	2200      	movs	r2, #0
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	4798      	blx	r3
      break;
 80088a8:	e067      	b.n	800897a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	785b      	ldrb	r3, [r3, #1]
 80088ae:	2b0b      	cmp	r3, #11
 80088b0:	d851      	bhi.n	8008956 <USBD_CDC_Setup+0x18a>
 80088b2:	a201      	add	r2, pc, #4	; (adr r2, 80088b8 <USBD_CDC_Setup+0xec>)
 80088b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b8:	080088e9 	.word	0x080088e9
 80088bc:	08008965 	.word	0x08008965
 80088c0:	08008957 	.word	0x08008957
 80088c4:	08008957 	.word	0x08008957
 80088c8:	08008957 	.word	0x08008957
 80088cc:	08008957 	.word	0x08008957
 80088d0:	08008957 	.word	0x08008957
 80088d4:	08008957 	.word	0x08008957
 80088d8:	08008957 	.word	0x08008957
 80088dc:	08008957 	.word	0x08008957
 80088e0:	08008913 	.word	0x08008913
 80088e4:	0800893d 	.word	0x0800893d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d107      	bne.n	8008904 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80088f4:	f107 030a 	add.w	r3, r7, #10
 80088f8:	2202      	movs	r2, #2
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 fd17 	bl	800a330 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008902:	e032      	b.n	800896a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 fca1 	bl	800a24e <USBD_CtlError>
            ret = USBD_FAIL;
 800890c:	2303      	movs	r3, #3
 800890e:	75fb      	strb	r3, [r7, #23]
          break;
 8008910:	e02b      	b.n	800896a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b03      	cmp	r3, #3
 800891c:	d107      	bne.n	800892e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800891e:	f107 030d 	add.w	r3, r7, #13
 8008922:	2201      	movs	r2, #1
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f001 fd02 	bl	800a330 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800892c:	e01d      	b.n	800896a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 fc8c 	bl	800a24e <USBD_CtlError>
            ret = USBD_FAIL;
 8008936:	2303      	movs	r3, #3
 8008938:	75fb      	strb	r3, [r7, #23]
          break;
 800893a:	e016      	b.n	800896a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b03      	cmp	r3, #3
 8008946:	d00f      	beq.n	8008968 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f001 fc7f 	bl	800a24e <USBD_CtlError>
            ret = USBD_FAIL;
 8008950:	2303      	movs	r3, #3
 8008952:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008954:	e008      	b.n	8008968 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f001 fc78 	bl	800a24e <USBD_CtlError>
          ret = USBD_FAIL;
 800895e:	2303      	movs	r3, #3
 8008960:	75fb      	strb	r3, [r7, #23]
          break;
 8008962:	e002      	b.n	800896a <USBD_CDC_Setup+0x19e>
          break;
 8008964:	bf00      	nop
 8008966:	e008      	b.n	800897a <USBD_CDC_Setup+0x1ae>
          break;
 8008968:	bf00      	nop
      }
      break;
 800896a:	e006      	b.n	800897a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 fc6d 	bl	800a24e <USBD_CtlError>
      ret = USBD_FAIL;
 8008974:	2303      	movs	r3, #3
 8008976:	75fb      	strb	r3, [r7, #23]
      break;
 8008978:	bf00      	nop
  }

  return (uint8_t)ret;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008996:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	32b0      	adds	r2, #176	; 0xb0
 80089a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e065      	b.n	8008a7a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	32b0      	adds	r2, #176	; 0xb0
 80089b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80089be:	78fb      	ldrb	r3, [r7, #3]
 80089c0:	f003 020f 	and.w	r2, r3, #15
 80089c4:	6879      	ldr	r1, [r7, #4]
 80089c6:	4613      	mov	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	440b      	add	r3, r1
 80089d0:	3318      	adds	r3, #24
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d02f      	beq.n	8008a38 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80089d8:	78fb      	ldrb	r3, [r7, #3]
 80089da:	f003 020f 	and.w	r2, r3, #15
 80089de:	6879      	ldr	r1, [r7, #4]
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	3318      	adds	r3, #24
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	f003 010f 	and.w	r1, r3, #15
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	460b      	mov	r3, r1
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	440b      	add	r3, r1
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4403      	add	r3, r0
 8008a00:	3348      	adds	r3, #72	; 0x48
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a08:	fb01 f303 	mul.w	r3, r1, r3
 8008a0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d112      	bne.n	8008a38 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008a12:	78fb      	ldrb	r3, [r7, #3]
 8008a14:	f003 020f 	and.w	r2, r3, #15
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	440b      	add	r3, r1
 8008a24:	3318      	adds	r3, #24
 8008a26:	2200      	movs	r2, #0
 8008a28:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a2a:	78f9      	ldrb	r1, [r7, #3]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	2200      	movs	r2, #0
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f002 f998 	bl	800ad66 <USBD_LL_Transmit>
 8008a36:	e01f      	b.n	8008a78 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	33b0      	adds	r3, #176	; 0xb0
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d010      	beq.n	8008a78 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	33b0      	adds	r3, #176	; 0xb0
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008a74:	78fa      	ldrb	r2, [r7, #3]
 8008a76:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	32b0      	adds	r2, #176	; 0xb0
 8008a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	32b0      	adds	r2, #176	; 0xb0
 8008aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e01a      	b.n	8008aea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f002 f996 	bl	800adea <USBD_LL_GetRxDataSize>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	33b0      	adds	r3, #176	; 0xb0
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	32b0      	adds	r2, #176	; 0xb0
 8008b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e025      	b.n	8008b60 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	33b0      	adds	r3, #176	; 0xb0
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d01a      	beq.n	8008b5e <USBD_CDC_EP0_RxReady+0x6c>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008b2e:	2bff      	cmp	r3, #255	; 0xff
 8008b30:	d015      	beq.n	8008b5e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	33b0      	adds	r3, #176	; 0xb0
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008b4a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b52:	b292      	uxth	r2, r2
 8008b54:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	22ff      	movs	r2, #255	; 0xff
 8008b5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b70:	2182      	movs	r1, #130	; 0x82
 8008b72:	4818      	ldr	r0, [pc, #96]	; (8008bd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b74:	f000 fd09 	bl	800958a <USBD_GetEpDesc>
 8008b78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	4815      	ldr	r0, [pc, #84]	; (8008bd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b7e:	f000 fd04 	bl	800958a <USBD_GetEpDesc>
 8008b82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b84:	2181      	movs	r1, #129	; 0x81
 8008b86:	4813      	ldr	r0, [pc, #76]	; (8008bd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b88:	f000 fcff 	bl	800958a <USBD_GetEpDesc>
 8008b8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2210      	movs	r2, #16
 8008b98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d006      	beq.n	8008bae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ba8:	711a      	strb	r2, [r3, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d006      	beq.n	8008bc2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bbc:	711a      	strb	r2, [r3, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2243      	movs	r2, #67	; 0x43
 8008bc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008bc8:	4b02      	ldr	r3, [pc, #8]	; (8008bd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20000070 	.word	0x20000070

08008bd8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008be0:	2182      	movs	r1, #130	; 0x82
 8008be2:	4818      	ldr	r0, [pc, #96]	; (8008c44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008be4:	f000 fcd1 	bl	800958a <USBD_GetEpDesc>
 8008be8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008bea:	2101      	movs	r1, #1
 8008bec:	4815      	ldr	r0, [pc, #84]	; (8008c44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bee:	f000 fccc 	bl	800958a <USBD_GetEpDesc>
 8008bf2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008bf4:	2181      	movs	r1, #129	; 0x81
 8008bf6:	4813      	ldr	r0, [pc, #76]	; (8008c44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bf8:	f000 fcc7 	bl	800958a <USBD_GetEpDesc>
 8008bfc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	2210      	movs	r2, #16
 8008c08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d006      	beq.n	8008c1e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	2200      	movs	r2, #0
 8008c14:	711a      	strb	r2, [r3, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f042 0202 	orr.w	r2, r2, #2
 8008c1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d006      	beq.n	8008c32 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	711a      	strb	r2, [r3, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f042 0202 	orr.w	r2, r2, #2
 8008c30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2243      	movs	r2, #67	; 0x43
 8008c36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c38:	4b02      	ldr	r3, [pc, #8]	; (8008c44 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000070 	.word	0x20000070

08008c48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c50:	2182      	movs	r1, #130	; 0x82
 8008c52:	4818      	ldr	r0, [pc, #96]	; (8008cb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c54:	f000 fc99 	bl	800958a <USBD_GetEpDesc>
 8008c58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c5a:	2101      	movs	r1, #1
 8008c5c:	4815      	ldr	r0, [pc, #84]	; (8008cb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c5e:	f000 fc94 	bl	800958a <USBD_GetEpDesc>
 8008c62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c64:	2181      	movs	r1, #129	; 0x81
 8008c66:	4813      	ldr	r0, [pc, #76]	; (8008cb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c68:	f000 fc8f 	bl	800958a <USBD_GetEpDesc>
 8008c6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	2210      	movs	r2, #16
 8008c78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d006      	beq.n	8008c8e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c88:	711a      	strb	r2, [r3, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d006      	beq.n	8008ca2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c9c:	711a      	strb	r2, [r3, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2243      	movs	r2, #67	; 0x43
 8008ca6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ca8:	4b02      	ldr	r3, [pc, #8]	; (8008cb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20000070 	.word	0x20000070

08008cb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	220a      	movs	r2, #10
 8008cc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008cc6:	4b03      	ldr	r3, [pc, #12]	; (8008cd4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	2000002c 	.word	0x2000002c

08008cd8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e009      	b.n	8008d00 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	33b0      	adds	r3, #176	; 0xb0
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	32b0      	adds	r2, #176	; 0xb0
 8008d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d26:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e008      	b.n	8008d44 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	371c      	adds	r7, #28
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	32b0      	adds	r2, #176	; 0xb0
 8008d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e004      	b.n	8008d7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
	...

08008d8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	32b0      	adds	r2, #176	; 0xb0
 8008d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	32b0      	adds	r2, #176	; 0xb0
 8008dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d101      	bne.n	8008dba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e018      	b.n	8008dec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	7c1b      	ldrb	r3, [r3, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10a      	bne.n	8008dd8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008dc2:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <USBD_CDC_ReceivePacket+0x68>)
 8008dc4:	7819      	ldrb	r1, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f001 ffe9 	bl	800ada8 <USBD_LL_PrepareReceive>
 8008dd6:	e008      	b.n	8008dea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008dd8:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <USBD_CDC_ReceivePacket+0x68>)
 8008dda:	7819      	ldrb	r1, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008de2:	2340      	movs	r3, #64	; 0x40
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f001 ffdf 	bl	800ada8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	200000b4 	.word	0x200000b4

08008df8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	4613      	mov	r3, r2
 8008e04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d101      	bne.n	8008e10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e01f      	b.n	8008e50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	79fa      	ldrb	r2, [r7, #7]
 8008e42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f001 fe59 	bl	800aafc <USBD_LL_Init>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e62:	2300      	movs	r3, #0
 8008e64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e025      	b.n	8008ebc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	32ae      	adds	r2, #174	; 0xae
 8008e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00f      	beq.n	8008eac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	32ae      	adds	r2, #174	; 0xae
 8008e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9c:	f107 020e 	add.w	r2, r7, #14
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	4798      	blx	r3
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f001 fe61 	bl	800ab94 <USBD_LL_Start>
 8008ed2:	4603      	mov	r3, r0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ee4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	460b      	mov	r3, r1
 8008efc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008efe:	2300      	movs	r3, #0
 8008f00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d009      	beq.n	8008f20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	78fa      	ldrb	r2, [r7, #3]
 8008f16:	4611      	mov	r1, r2
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	4798      	blx	r3
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	460b      	mov	r3, r1
 8008f34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	78fa      	ldrb	r2, [r7, #3]
 8008f44:	4611      	mov	r1, r2
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	4798      	blx	r3
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008f50:	2303      	movs	r3, #3
 8008f52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b084      	sub	sp, #16
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f6e:	6839      	ldr	r1, [r7, #0]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f001 f932 	bl	800a1da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008f84:	461a      	mov	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008f92:	f003 031f 	and.w	r3, r3, #31
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d01a      	beq.n	8008fd0 <USBD_LL_SetupStage+0x72>
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d822      	bhi.n	8008fe4 <USBD_LL_SetupStage+0x86>
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d002      	beq.n	8008fa8 <USBD_LL_SetupStage+0x4a>
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d00a      	beq.n	8008fbc <USBD_LL_SetupStage+0x5e>
 8008fa6:	e01d      	b.n	8008fe4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fb5f 	bl	8009674 <USBD_StdDevReq>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8008fba:	e020      	b.n	8008ffe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fbc7 	bl	8009758 <USBD_StdItfReq>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fce:	e016      	b.n	8008ffe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fc29 	bl	8009830 <USBD_StdEPReq>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe2:	e00c      	b.n	8008ffe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f001 fe2e 	bl	800ac54 <USBD_LL_StallEP>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8008ffc:	bf00      	nop
  }

  return ret;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	460b      	mov	r3, r1
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800901a:	7afb      	ldrb	r3, [r7, #11]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d16e      	bne.n	80090fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009026:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800902e:	2b03      	cmp	r3, #3
 8009030:	f040 8098 	bne.w	8009164 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	689a      	ldr	r2, [r3, #8]
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	429a      	cmp	r2, r3
 800903e:	d913      	bls.n	8009068 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	689a      	ldr	r2, [r3, #8]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	1ad2      	subs	r2, r2, r3
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	4293      	cmp	r3, r2
 8009058:	bf28      	it	cs
 800905a:	4613      	movcs	r3, r2
 800905c:	461a      	mov	r2, r3
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f001 f9ae 	bl	800a3c2 <USBD_CtlContinueRx>
 8009066:	e07d      	b.n	8009164 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800906e:	f003 031f 	and.w	r3, r3, #31
 8009072:	2b02      	cmp	r3, #2
 8009074:	d014      	beq.n	80090a0 <USBD_LL_DataOutStage+0x98>
 8009076:	2b02      	cmp	r3, #2
 8009078:	d81d      	bhi.n	80090b6 <USBD_LL_DataOutStage+0xae>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <USBD_LL_DataOutStage+0x7c>
 800907e:	2b01      	cmp	r3, #1
 8009080:	d003      	beq.n	800908a <USBD_LL_DataOutStage+0x82>
 8009082:	e018      	b.n	80090b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009084:	2300      	movs	r3, #0
 8009086:	75bb      	strb	r3, [r7, #22]
            break;
 8009088:	e018      	b.n	80090bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009090:	b2db      	uxtb	r3, r3
 8009092:	4619      	mov	r1, r3
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f000 fa5e 	bl	8009556 <USBD_CoreFindIF>
 800909a:	4603      	mov	r3, r0
 800909c:	75bb      	strb	r3, [r7, #22]
            break;
 800909e:	e00d      	b.n	80090bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	4619      	mov	r1, r3
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f000 fa60 	bl	8009570 <USBD_CoreFindEP>
 80090b0:	4603      	mov	r3, r0
 80090b2:	75bb      	strb	r3, [r7, #22]
            break;
 80090b4:	e002      	b.n	80090bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	75bb      	strb	r3, [r7, #22]
            break;
 80090ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80090bc:	7dbb      	ldrb	r3, [r7, #22]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d119      	bne.n	80090f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d113      	bne.n	80090f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80090ce:	7dba      	ldrb	r2, [r7, #22]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	32ae      	adds	r2, #174	; 0xae
 80090d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00b      	beq.n	80090f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80090de:	7dba      	ldrb	r2, [r7, #22]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80090e6:	7dba      	ldrb	r2, [r7, #22]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	32ae      	adds	r2, #174	; 0xae
 80090ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f001 f974 	bl	800a3e4 <USBD_CtlSendStatus>
 80090fc:	e032      	b.n	8009164 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80090fe:	7afb      	ldrb	r3, [r7, #11]
 8009100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009104:	b2db      	uxtb	r3, r3
 8009106:	4619      	mov	r1, r3
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 fa31 	bl	8009570 <USBD_CoreFindEP>
 800910e:	4603      	mov	r3, r0
 8009110:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009112:	7dbb      	ldrb	r3, [r7, #22]
 8009114:	2bff      	cmp	r3, #255	; 0xff
 8009116:	d025      	beq.n	8009164 <USBD_LL_DataOutStage+0x15c>
 8009118:	7dbb      	ldrb	r3, [r7, #22]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d122      	bne.n	8009164 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b03      	cmp	r3, #3
 8009128:	d117      	bne.n	800915a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800912a:	7dba      	ldrb	r2, [r7, #22]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	32ae      	adds	r2, #174	; 0xae
 8009130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00f      	beq.n	800915a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800913a:	7dba      	ldrb	r2, [r7, #22]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009142:	7dba      	ldrb	r2, [r7, #22]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	32ae      	adds	r2, #174	; 0xae
 8009148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	7afa      	ldrb	r2, [r7, #11]
 8009150:	4611      	mov	r1, r2
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	4798      	blx	r3
 8009156:	4603      	mov	r3, r0
 8009158:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800915a:	7dfb      	ldrb	r3, [r7, #23]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009160:	7dfb      	ldrb	r3, [r7, #23]
 8009162:	e000      	b.n	8009166 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b086      	sub	sp, #24
 8009172:	af00      	add	r7, sp, #0
 8009174:	60f8      	str	r0, [r7, #12]
 8009176:	460b      	mov	r3, r1
 8009178:	607a      	str	r2, [r7, #4]
 800917a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800917c:	7afb      	ldrb	r3, [r7, #11]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d16f      	bne.n	8009262 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	3314      	adds	r3, #20
 8009186:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800918e:	2b02      	cmp	r3, #2
 8009190:	d15a      	bne.n	8009248 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	429a      	cmp	r2, r3
 800919c:	d914      	bls.n	80091c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	1ad2      	subs	r2, r2, r3
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	461a      	mov	r2, r3
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f001 f8d6 	bl	800a366 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091ba:	2300      	movs	r3, #0
 80091bc:	2200      	movs	r2, #0
 80091be:	2100      	movs	r1, #0
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f001 fdf1 	bl	800ada8 <USBD_LL_PrepareReceive>
 80091c6:	e03f      	b.n	8009248 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	68da      	ldr	r2, [r3, #12]
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d11c      	bne.n	800920e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	685a      	ldr	r2, [r3, #4]
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80091dc:	429a      	cmp	r2, r3
 80091de:	d316      	bcc.n	800920e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d20f      	bcs.n	800920e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091ee:	2200      	movs	r2, #0
 80091f0:	2100      	movs	r1, #0
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f001 f8b7 	bl	800a366 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009200:	2300      	movs	r3, #0
 8009202:	2200      	movs	r2, #0
 8009204:	2100      	movs	r1, #0
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f001 fdce 	bl	800ada8 <USBD_LL_PrepareReceive>
 800920c:	e01c      	b.n	8009248 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b03      	cmp	r3, #3
 8009218:	d10f      	bne.n	800923a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d009      	beq.n	800923a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800923a:	2180      	movs	r1, #128	; 0x80
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f001 fd09 	bl	800ac54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f001 f8e1 	bl	800a40a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d03a      	beq.n	80092c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f7ff fe42 	bl	8008edc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009260:	e032      	b.n	80092c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009262:	7afb      	ldrb	r3, [r7, #11]
 8009264:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009268:	b2db      	uxtb	r3, r3
 800926a:	4619      	mov	r1, r3
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 f97f 	bl	8009570 <USBD_CoreFindEP>
 8009272:	4603      	mov	r3, r0
 8009274:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	2bff      	cmp	r3, #255	; 0xff
 800927a:	d025      	beq.n	80092c8 <USBD_LL_DataInStage+0x15a>
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d122      	bne.n	80092c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b03      	cmp	r3, #3
 800928c:	d11c      	bne.n	80092c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800928e:	7dfa      	ldrb	r2, [r7, #23]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	32ae      	adds	r2, #174	; 0xae
 8009294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d014      	beq.n	80092c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800929e:	7dfa      	ldrb	r2, [r7, #23]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80092a6:	7dfa      	ldrb	r2, [r7, #23]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	32ae      	adds	r2, #174	; 0xae
 80092ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	7afa      	ldrb	r2, [r7, #11]
 80092b4:	4611      	mov	r1, r2
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	4798      	blx	r3
 80092ba:	4603      	mov	r3, r0
 80092bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80092be:	7dbb      	ldrb	r3, [r7, #22]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80092c4:	7dbb      	ldrb	r3, [r7, #22]
 80092c6:	e000      	b.n	80092ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800930a:	2b00      	cmp	r3, #0
 800930c:	d014      	beq.n	8009338 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00e      	beq.n	8009338 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	6852      	ldr	r2, [r2, #4]
 8009326:	b2d2      	uxtb	r2, r2
 8009328:	4611      	mov	r1, r2
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	4798      	blx	r3
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009334:	2303      	movs	r3, #3
 8009336:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009338:	2340      	movs	r3, #64	; 0x40
 800933a:	2200      	movs	r2, #0
 800933c:	2100      	movs	r1, #0
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f001 fc43 	bl	800abca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2240      	movs	r2, #64	; 0x40
 8009350:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009354:	2340      	movs	r3, #64	; 0x40
 8009356:	2200      	movs	r2, #0
 8009358:	2180      	movs	r1, #128	; 0x80
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f001 fc35 	bl	800abca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2240      	movs	r2, #64	; 0x40
 800936a:	621a      	str	r2, [r3, #32]

  return ret;
 800936c:	7bfb      	ldrb	r3, [r7, #15]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	460b      	mov	r3, r1
 8009380:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	78fa      	ldrb	r2, [r7, #3]
 8009386:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2204      	movs	r2, #4
 80093b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b083      	sub	sp, #12
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b04      	cmp	r3, #4
 80093d4:	d106      	bne.n	80093e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b03      	cmp	r3, #3
 8009404:	d110      	bne.n	8009428 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00b      	beq.n	8009428 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009416:	69db      	ldr	r3, [r3, #28]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d005      	beq.n	8009428 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	460b      	mov	r3, r1
 800943c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	32ae      	adds	r2, #174	; 0xae
 8009448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009450:	2303      	movs	r3, #3
 8009452:	e01c      	b.n	800948e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b03      	cmp	r3, #3
 800945e:	d115      	bne.n	800948c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	32ae      	adds	r2, #174	; 0xae
 800946a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800946e:	6a1b      	ldr	r3, [r3, #32]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00b      	beq.n	800948c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	32ae      	adds	r2, #174	; 0xae
 800947e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	78fa      	ldrb	r2, [r7, #3]
 8009486:	4611      	mov	r1, r2
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b082      	sub	sp, #8
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	460b      	mov	r3, r1
 80094a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	32ae      	adds	r2, #174	; 0xae
 80094ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d101      	bne.n	80094b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e01c      	b.n	80094f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	2b03      	cmp	r3, #3
 80094c2:	d115      	bne.n	80094f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	32ae      	adds	r2, #174	; 0xae
 80094ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00b      	beq.n	80094f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	32ae      	adds	r2, #174	; 0xae
 80094e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	78fa      	ldrb	r2, [r7, #3]
 80094ea:	4611      	mov	r1, r2
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b083      	sub	sp, #12
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00e      	beq.n	800954c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	6852      	ldr	r2, [r2, #4]
 800953a:	b2d2      	uxtb	r2, r2
 800953c:	4611      	mov	r1, r2
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	4798      	blx	r3
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009548:	2303      	movs	r3, #3
 800954a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	460b      	mov	r3, r1
 8009560:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009562:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800957c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800957e:	4618      	mov	r0, r3
 8009580:	370c      	adds	r7, #12
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b086      	sub	sp, #24
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800959e:	2300      	movs	r3, #0
 80095a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	885b      	ldrh	r3, [r3, #2]
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d920      	bls.n	80095f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80095ba:	e013      	b.n	80095e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80095bc:	f107 030a 	add.w	r3, r7, #10
 80095c0:	4619      	mov	r1, r3
 80095c2:	6978      	ldr	r0, [r7, #20]
 80095c4:	f000 f81b 	bl	80095fe <USBD_GetNextDesc>
 80095c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	785b      	ldrb	r3, [r3, #1]
 80095ce:	2b05      	cmp	r3, #5
 80095d0:	d108      	bne.n	80095e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	789b      	ldrb	r3, [r3, #2]
 80095da:	78fa      	ldrb	r2, [r7, #3]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d008      	beq.n	80095f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80095e0:	2300      	movs	r3, #0
 80095e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	885b      	ldrh	r3, [r3, #2]
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	897b      	ldrh	r3, [r7, #10]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d8e5      	bhi.n	80095bc <USBD_GetEpDesc+0x32>
 80095f0:	e000      	b.n	80095f4 <USBD_GetEpDesc+0x6a>
          break;
 80095f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80095f4:	693b      	ldr	r3, [r7, #16]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3718      	adds	r7, #24
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80095fe:	b480      	push	{r7}
 8009600:	b085      	sub	sp, #20
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	881a      	ldrh	r2, [r3, #0]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	b29b      	uxth	r3, r3
 8009616:	4413      	add	r3, r2
 8009618:	b29a      	uxth	r2, r3
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4413      	add	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800962a:	68fb      	ldr	r3, [r7, #12]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009638:	b480      	push	{r7}
 800963a:	b087      	sub	sp, #28
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	3301      	adds	r3, #1
 800964e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009656:	8a3b      	ldrh	r3, [r7, #16]
 8009658:	021b      	lsls	r3, r3, #8
 800965a:	b21a      	sxth	r2, r3
 800965c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009660:	4313      	orrs	r3, r2
 8009662:	b21b      	sxth	r3, r3
 8009664:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009666:	89fb      	ldrh	r3, [r7, #14]
}
 8009668:	4618      	mov	r0, r3
 800966a:	371c      	adds	r7, #28
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800968a:	2b40      	cmp	r3, #64	; 0x40
 800968c:	d005      	beq.n	800969a <USBD_StdDevReq+0x26>
 800968e:	2b40      	cmp	r3, #64	; 0x40
 8009690:	d857      	bhi.n	8009742 <USBD_StdDevReq+0xce>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00f      	beq.n	80096b6 <USBD_StdDevReq+0x42>
 8009696:	2b20      	cmp	r3, #32
 8009698:	d153      	bne.n	8009742 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	32ae      	adds	r2, #174	; 0xae
 80096a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	4798      	blx	r3
 80096b0:	4603      	mov	r3, r0
 80096b2:	73fb      	strb	r3, [r7, #15]
      break;
 80096b4:	e04a      	b.n	800974c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	785b      	ldrb	r3, [r3, #1]
 80096ba:	2b09      	cmp	r3, #9
 80096bc:	d83b      	bhi.n	8009736 <USBD_StdDevReq+0xc2>
 80096be:	a201      	add	r2, pc, #4	; (adr r2, 80096c4 <USBD_StdDevReq+0x50>)
 80096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c4:	08009719 	.word	0x08009719
 80096c8:	0800972d 	.word	0x0800972d
 80096cc:	08009737 	.word	0x08009737
 80096d0:	08009723 	.word	0x08009723
 80096d4:	08009737 	.word	0x08009737
 80096d8:	080096f7 	.word	0x080096f7
 80096dc:	080096ed 	.word	0x080096ed
 80096e0:	08009737 	.word	0x08009737
 80096e4:	0800970f 	.word	0x0800970f
 80096e8:	08009701 	.word	0x08009701
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fa3c 	bl	8009b6c <USBD_GetDescriptor>
          break;
 80096f4:	e024      	b.n	8009740 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fbcb 	bl	8009e94 <USBD_SetAddress>
          break;
 80096fe:	e01f      	b.n	8009740 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fc0a 	bl	8009f1c <USBD_SetConfig>
 8009708:	4603      	mov	r3, r0
 800970a:	73fb      	strb	r3, [r7, #15]
          break;
 800970c:	e018      	b.n	8009740 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fcad 	bl	800a070 <USBD_GetConfig>
          break;
 8009716:	e013      	b.n	8009740 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fcde 	bl	800a0dc <USBD_GetStatus>
          break;
 8009720:	e00e      	b.n	8009740 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fd0d 	bl	800a144 <USBD_SetFeature>
          break;
 800972a:	e009      	b.n	8009740 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fd31 	bl	800a196 <USBD_ClrFeature>
          break;
 8009734:	e004      	b.n	8009740 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fd88 	bl	800a24e <USBD_CtlError>
          break;
 800973e:	bf00      	nop
      }
      break;
 8009740:	e004      	b.n	800974c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fd82 	bl	800a24e <USBD_CtlError>
      break;
 800974a:	bf00      	nop
  }

  return ret;
 800974c:	7bfb      	ldrb	r3, [r7, #15]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop

08009758 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800976e:	2b40      	cmp	r3, #64	; 0x40
 8009770:	d005      	beq.n	800977e <USBD_StdItfReq+0x26>
 8009772:	2b40      	cmp	r3, #64	; 0x40
 8009774:	d852      	bhi.n	800981c <USBD_StdItfReq+0xc4>
 8009776:	2b00      	cmp	r3, #0
 8009778:	d001      	beq.n	800977e <USBD_StdItfReq+0x26>
 800977a:	2b20      	cmp	r3, #32
 800977c:	d14e      	bne.n	800981c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009784:	b2db      	uxtb	r3, r3
 8009786:	3b01      	subs	r3, #1
 8009788:	2b02      	cmp	r3, #2
 800978a:	d840      	bhi.n	800980e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	889b      	ldrh	r3, [r3, #4]
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b01      	cmp	r3, #1
 8009794:	d836      	bhi.n	8009804 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	889b      	ldrh	r3, [r3, #4]
 800979a:	b2db      	uxtb	r3, r3
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7ff fed9 	bl	8009556 <USBD_CoreFindIF>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	2bff      	cmp	r3, #255	; 0xff
 80097ac:	d01d      	beq.n	80097ea <USBD_StdItfReq+0x92>
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d11a      	bne.n	80097ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80097b4:	7bba      	ldrb	r2, [r7, #14]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	32ae      	adds	r2, #174	; 0xae
 80097ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00f      	beq.n	80097e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80097c4:	7bba      	ldrb	r2, [r7, #14]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097cc:	7bba      	ldrb	r2, [r7, #14]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	32ae      	adds	r2, #174	; 0xae
 80097d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	4798      	blx	r3
 80097de:	4603      	mov	r3, r0
 80097e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097e2:	e004      	b.n	80097ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80097e4:	2303      	movs	r3, #3
 80097e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097e8:	e001      	b.n	80097ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80097ea:	2303      	movs	r3, #3
 80097ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	88db      	ldrh	r3, [r3, #6]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d110      	bne.n	8009818 <USBD_StdItfReq+0xc0>
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10d      	bne.n	8009818 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fdf1 	bl	800a3e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009802:	e009      	b.n	8009818 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 fd21 	bl	800a24e <USBD_CtlError>
          break;
 800980c:	e004      	b.n	8009818 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fd1c 	bl	800a24e <USBD_CtlError>
          break;
 8009816:	e000      	b.n	800981a <USBD_StdItfReq+0xc2>
          break;
 8009818:	bf00      	nop
      }
      break;
 800981a:	e004      	b.n	8009826 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fd15 	bl	800a24e <USBD_CtlError>
      break;
 8009824:	bf00      	nop
  }

  return ret;
 8009826:	7bfb      	ldrb	r3, [r7, #15]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	889b      	ldrh	r3, [r3, #4]
 8009842:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800984c:	2b40      	cmp	r3, #64	; 0x40
 800984e:	d007      	beq.n	8009860 <USBD_StdEPReq+0x30>
 8009850:	2b40      	cmp	r3, #64	; 0x40
 8009852:	f200 817f 	bhi.w	8009b54 <USBD_StdEPReq+0x324>
 8009856:	2b00      	cmp	r3, #0
 8009858:	d02a      	beq.n	80098b0 <USBD_StdEPReq+0x80>
 800985a:	2b20      	cmp	r3, #32
 800985c:	f040 817a 	bne.w	8009b54 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7ff fe83 	bl	8009570 <USBD_CoreFindEP>
 800986a:	4603      	mov	r3, r0
 800986c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800986e:	7b7b      	ldrb	r3, [r7, #13]
 8009870:	2bff      	cmp	r3, #255	; 0xff
 8009872:	f000 8174 	beq.w	8009b5e <USBD_StdEPReq+0x32e>
 8009876:	7b7b      	ldrb	r3, [r7, #13]
 8009878:	2b00      	cmp	r3, #0
 800987a:	f040 8170 	bne.w	8009b5e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800987e:	7b7a      	ldrb	r2, [r7, #13]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009886:	7b7a      	ldrb	r2, [r7, #13]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	32ae      	adds	r2, #174	; 0xae
 800988c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 8163 	beq.w	8009b5e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009898:	7b7a      	ldrb	r2, [r7, #13]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	32ae      	adds	r2, #174	; 0xae
 800989e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	4798      	blx	r3
 80098aa:	4603      	mov	r3, r0
 80098ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098ae:	e156      	b.n	8009b5e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	785b      	ldrb	r3, [r3, #1]
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d008      	beq.n	80098ca <USBD_StdEPReq+0x9a>
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	f300 8145 	bgt.w	8009b48 <USBD_StdEPReq+0x318>
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f000 809b 	beq.w	80099fa <USBD_StdEPReq+0x1ca>
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d03c      	beq.n	8009942 <USBD_StdEPReq+0x112>
 80098c8:	e13e      	b.n	8009b48 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d002      	beq.n	80098dc <USBD_StdEPReq+0xac>
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	d016      	beq.n	8009908 <USBD_StdEPReq+0xd8>
 80098da:	e02c      	b.n	8009936 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00d      	beq.n	80098fe <USBD_StdEPReq+0xce>
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
 80098e4:	2b80      	cmp	r3, #128	; 0x80
 80098e6:	d00a      	beq.n	80098fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098e8:	7bbb      	ldrb	r3, [r7, #14]
 80098ea:	4619      	mov	r1, r3
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f001 f9b1 	bl	800ac54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098f2:	2180      	movs	r1, #128	; 0x80
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f001 f9ad 	bl	800ac54 <USBD_LL_StallEP>
 80098fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098fc:	e020      	b.n	8009940 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80098fe:	6839      	ldr	r1, [r7, #0]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fca4 	bl	800a24e <USBD_CtlError>
              break;
 8009906:	e01b      	b.n	8009940 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	885b      	ldrh	r3, [r3, #2]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10e      	bne.n	800992e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009910:	7bbb      	ldrb	r3, [r7, #14]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00b      	beq.n	800992e <USBD_StdEPReq+0xfe>
 8009916:	7bbb      	ldrb	r3, [r7, #14]
 8009918:	2b80      	cmp	r3, #128	; 0x80
 800991a:	d008      	beq.n	800992e <USBD_StdEPReq+0xfe>
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	88db      	ldrh	r3, [r3, #6]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d104      	bne.n	800992e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f001 f993 	bl	800ac54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fd58 	bl	800a3e4 <USBD_CtlSendStatus>

              break;
 8009934:	e004      	b.n	8009940 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fc88 	bl	800a24e <USBD_CtlError>
              break;
 800993e:	bf00      	nop
          }
          break;
 8009940:	e107      	b.n	8009b52 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b02      	cmp	r3, #2
 800994c:	d002      	beq.n	8009954 <USBD_StdEPReq+0x124>
 800994e:	2b03      	cmp	r3, #3
 8009950:	d016      	beq.n	8009980 <USBD_StdEPReq+0x150>
 8009952:	e04b      	b.n	80099ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009954:	7bbb      	ldrb	r3, [r7, #14]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00d      	beq.n	8009976 <USBD_StdEPReq+0x146>
 800995a:	7bbb      	ldrb	r3, [r7, #14]
 800995c:	2b80      	cmp	r3, #128	; 0x80
 800995e:	d00a      	beq.n	8009976 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f001 f975 	bl	800ac54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800996a:	2180      	movs	r1, #128	; 0x80
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f001 f971 	bl	800ac54 <USBD_LL_StallEP>
 8009972:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009974:	e040      	b.n	80099f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fc68 	bl	800a24e <USBD_CtlError>
              break;
 800997e:	e03b      	b.n	80099f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	885b      	ldrh	r3, [r3, #2]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d136      	bne.n	80099f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009988:	7bbb      	ldrb	r3, [r7, #14]
 800998a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800998e:	2b00      	cmp	r3, #0
 8009990:	d004      	beq.n	800999c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009992:	7bbb      	ldrb	r3, [r7, #14]
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f001 f97b 	bl	800ac92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fd21 	bl	800a3e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7ff fde2 	bl	8009570 <USBD_CoreFindEP>
 80099ac:	4603      	mov	r3, r0
 80099ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099b0:	7b7b      	ldrb	r3, [r7, #13]
 80099b2:	2bff      	cmp	r3, #255	; 0xff
 80099b4:	d01f      	beq.n	80099f6 <USBD_StdEPReq+0x1c6>
 80099b6:	7b7b      	ldrb	r3, [r7, #13]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d11c      	bne.n	80099f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80099bc:	7b7a      	ldrb	r2, [r7, #13]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80099c4:	7b7a      	ldrb	r2, [r7, #13]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	32ae      	adds	r2, #174	; 0xae
 80099ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d010      	beq.n	80099f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80099d4:	7b7a      	ldrb	r2, [r7, #13]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	32ae      	adds	r2, #174	; 0xae
 80099da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	4798      	blx	r3
 80099e6:	4603      	mov	r3, r0
 80099e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80099ea:	e004      	b.n	80099f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fc2d 	bl	800a24e <USBD_CtlError>
              break;
 80099f4:	e000      	b.n	80099f8 <USBD_StdEPReq+0x1c8>
              break;
 80099f6:	bf00      	nop
          }
          break;
 80099f8:	e0ab      	b.n	8009b52 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d002      	beq.n	8009a0c <USBD_StdEPReq+0x1dc>
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d032      	beq.n	8009a70 <USBD_StdEPReq+0x240>
 8009a0a:	e097      	b.n	8009b3c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d007      	beq.n	8009a22 <USBD_StdEPReq+0x1f2>
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
 8009a14:	2b80      	cmp	r3, #128	; 0x80
 8009a16:	d004      	beq.n	8009a22 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fc17 	bl	800a24e <USBD_CtlError>
                break;
 8009a20:	e091      	b.n	8009b46 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	da0b      	bge.n	8009a42 <USBD_StdEPReq+0x212>
 8009a2a:	7bbb      	ldrb	r3, [r7, #14]
 8009a2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a30:	4613      	mov	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4413      	add	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	3310      	adds	r3, #16
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	3304      	adds	r3, #4
 8009a40:	e00b      	b.n	8009a5a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a42:	7bbb      	ldrb	r3, [r7, #14]
 8009a44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a48:	4613      	mov	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	4413      	add	r3, r2
 8009a58:	3304      	adds	r3, #4
 8009a5a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	2202      	movs	r2, #2
 8009a66:	4619      	mov	r1, r3
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fc61 	bl	800a330 <USBD_CtlSendData>
              break;
 8009a6e:	e06a      	b.n	8009b46 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	da11      	bge.n	8009a9c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a78:	7bbb      	ldrb	r3, [r7, #14]
 8009a7a:	f003 020f 	and.w	r2, r3, #15
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	4613      	mov	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	440b      	add	r3, r1
 8009a8a:	3324      	adds	r3, #36	; 0x24
 8009a8c:	881b      	ldrh	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d117      	bne.n	8009ac2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fbda 	bl	800a24e <USBD_CtlError>
                  break;
 8009a9a:	e054      	b.n	8009b46 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	f003 020f 	and.w	r2, r3, #15
 8009aa2:	6879      	ldr	r1, [r7, #4]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	440b      	add	r3, r1
 8009aae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d104      	bne.n	8009ac2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fbc7 	bl	800a24e <USBD_CtlError>
                  break;
 8009ac0:	e041      	b.n	8009b46 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ac2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	da0b      	bge.n	8009ae2 <USBD_StdEPReq+0x2b2>
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	3310      	adds	r3, #16
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	4413      	add	r3, r2
 8009ade:	3304      	adds	r3, #4
 8009ae0:	e00b      	b.n	8009afa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
 8009ae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ae8:	4613      	mov	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4413      	add	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	4413      	add	r3, r2
 8009af8:	3304      	adds	r3, #4
 8009afa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d002      	beq.n	8009b08 <USBD_StdEPReq+0x2d8>
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
 8009b04:	2b80      	cmp	r3, #128	; 0x80
 8009b06:	d103      	bne.n	8009b10 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	e00e      	b.n	8009b2e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f001 f8db 	bl	800acd0 <USBD_LL_IsStallEP>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d003      	beq.n	8009b28 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2201      	movs	r2, #1
 8009b24:	601a      	str	r2, [r3, #0]
 8009b26:	e002      	b.n	8009b2e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2202      	movs	r2, #2
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fbfb 	bl	800a330 <USBD_CtlSendData>
              break;
 8009b3a:	e004      	b.n	8009b46 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fb85 	bl	800a24e <USBD_CtlError>
              break;
 8009b44:	bf00      	nop
          }
          break;
 8009b46:	e004      	b.n	8009b52 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fb7f 	bl	800a24e <USBD_CtlError>
          break;
 8009b50:	bf00      	nop
      }
      break;
 8009b52:	e005      	b.n	8009b60 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fb79 	bl	800a24e <USBD_CtlError>
      break;
 8009b5c:	e000      	b.n	8009b60 <USBD_StdEPReq+0x330>
      break;
 8009b5e:	bf00      	nop
  }

  return ret;
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
	...

08009b6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	885b      	ldrh	r3, [r3, #2]
 8009b86:	0a1b      	lsrs	r3, r3, #8
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	2b0e      	cmp	r3, #14
 8009b8e:	f200 8152 	bhi.w	8009e36 <USBD_GetDescriptor+0x2ca>
 8009b92:	a201      	add	r2, pc, #4	; (adr r2, 8009b98 <USBD_GetDescriptor+0x2c>)
 8009b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b98:	08009c09 	.word	0x08009c09
 8009b9c:	08009c21 	.word	0x08009c21
 8009ba0:	08009c61 	.word	0x08009c61
 8009ba4:	08009e37 	.word	0x08009e37
 8009ba8:	08009e37 	.word	0x08009e37
 8009bac:	08009dd7 	.word	0x08009dd7
 8009bb0:	08009e03 	.word	0x08009e03
 8009bb4:	08009e37 	.word	0x08009e37
 8009bb8:	08009e37 	.word	0x08009e37
 8009bbc:	08009e37 	.word	0x08009e37
 8009bc0:	08009e37 	.word	0x08009e37
 8009bc4:	08009e37 	.word	0x08009e37
 8009bc8:	08009e37 	.word	0x08009e37
 8009bcc:	08009e37 	.word	0x08009e37
 8009bd0:	08009bd5 	.word	0x08009bd5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bda:	69db      	ldr	r3, [r3, #28]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00b      	beq.n	8009bf8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be6:	69db      	ldr	r3, [r3, #28]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	7c12      	ldrb	r2, [r2, #16]
 8009bec:	f107 0108 	add.w	r1, r7, #8
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4798      	blx	r3
 8009bf4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bf6:	e126      	b.n	8009e46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fb27 	bl	800a24e <USBD_CtlError>
        err++;
 8009c00:	7afb      	ldrb	r3, [r7, #11]
 8009c02:	3301      	adds	r3, #1
 8009c04:	72fb      	strb	r3, [r7, #11]
      break;
 8009c06:	e11e      	b.n	8009e46 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	7c12      	ldrb	r2, [r2, #16]
 8009c14:	f107 0108 	add.w	r1, r7, #8
 8009c18:	4610      	mov	r0, r2
 8009c1a:	4798      	blx	r3
 8009c1c:	60f8      	str	r0, [r7, #12]
      break;
 8009c1e:	e112      	b.n	8009e46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	7c1b      	ldrb	r3, [r3, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10d      	bne.n	8009c44 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c30:	f107 0208 	add.w	r2, r7, #8
 8009c34:	4610      	mov	r0, r2
 8009c36:	4798      	blx	r3
 8009c38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	2202      	movs	r2, #2
 8009c40:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c42:	e100      	b.n	8009e46 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4c:	f107 0208 	add.w	r2, r7, #8
 8009c50:	4610      	mov	r0, r2
 8009c52:	4798      	blx	r3
 8009c54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	701a      	strb	r2, [r3, #0]
      break;
 8009c5e:	e0f2      	b.n	8009e46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	885b      	ldrh	r3, [r3, #2]
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b05      	cmp	r3, #5
 8009c68:	f200 80ac 	bhi.w	8009dc4 <USBD_GetDescriptor+0x258>
 8009c6c:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <USBD_GetDescriptor+0x108>)
 8009c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c72:	bf00      	nop
 8009c74:	08009c8d 	.word	0x08009c8d
 8009c78:	08009cc1 	.word	0x08009cc1
 8009c7c:	08009cf5 	.word	0x08009cf5
 8009c80:	08009d29 	.word	0x08009d29
 8009c84:	08009d5d 	.word	0x08009d5d
 8009c88:	08009d91 	.word	0x08009d91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00b      	beq.n	8009cb0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	7c12      	ldrb	r2, [r2, #16]
 8009ca4:	f107 0108 	add.w	r1, r7, #8
 8009ca8:	4610      	mov	r0, r2
 8009caa:	4798      	blx	r3
 8009cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cae:	e091      	b.n	8009dd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 facb 	bl	800a24e <USBD_CtlError>
            err++;
 8009cb8:	7afb      	ldrb	r3, [r7, #11]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cbe:	e089      	b.n	8009dd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00b      	beq.n	8009ce4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	7c12      	ldrb	r2, [r2, #16]
 8009cd8:	f107 0108 	add.w	r1, r7, #8
 8009cdc:	4610      	mov	r0, r2
 8009cde:	4798      	blx	r3
 8009ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ce2:	e077      	b.n	8009dd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ce4:	6839      	ldr	r1, [r7, #0]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fab1 	bl	800a24e <USBD_CtlError>
            err++;
 8009cec:	7afb      	ldrb	r3, [r7, #11]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8009cf2:	e06f      	b.n	8009dd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00b      	beq.n	8009d18 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	7c12      	ldrb	r2, [r2, #16]
 8009d0c:	f107 0108 	add.w	r1, r7, #8
 8009d10:	4610      	mov	r0, r2
 8009d12:	4798      	blx	r3
 8009d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d16:	e05d      	b.n	8009dd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d18:	6839      	ldr	r1, [r7, #0]
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fa97 	bl	800a24e <USBD_CtlError>
            err++;
 8009d20:	7afb      	ldrb	r3, [r7, #11]
 8009d22:	3301      	adds	r3, #1
 8009d24:	72fb      	strb	r3, [r7, #11]
          break;
 8009d26:	e055      	b.n	8009dd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00b      	beq.n	8009d4c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d3a:	691b      	ldr	r3, [r3, #16]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	7c12      	ldrb	r2, [r2, #16]
 8009d40:	f107 0108 	add.w	r1, r7, #8
 8009d44:	4610      	mov	r0, r2
 8009d46:	4798      	blx	r3
 8009d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d4a:	e043      	b.n	8009dd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d4c:	6839      	ldr	r1, [r7, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fa7d 	bl	800a24e <USBD_CtlError>
            err++;
 8009d54:	7afb      	ldrb	r3, [r7, #11]
 8009d56:	3301      	adds	r3, #1
 8009d58:	72fb      	strb	r3, [r7, #11]
          break;
 8009d5a:	e03b      	b.n	8009dd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00b      	beq.n	8009d80 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	7c12      	ldrb	r2, [r2, #16]
 8009d74:	f107 0108 	add.w	r1, r7, #8
 8009d78:	4610      	mov	r0, r2
 8009d7a:	4798      	blx	r3
 8009d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d7e:	e029      	b.n	8009dd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fa63 	bl	800a24e <USBD_CtlError>
            err++;
 8009d88:	7afb      	ldrb	r3, [r7, #11]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d8e:	e021      	b.n	8009dd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00b      	beq.n	8009db4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	7c12      	ldrb	r2, [r2, #16]
 8009da8:	f107 0108 	add.w	r1, r7, #8
 8009dac:	4610      	mov	r0, r2
 8009dae:	4798      	blx	r3
 8009db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009db2:	e00f      	b.n	8009dd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fa49 	bl	800a24e <USBD_CtlError>
            err++;
 8009dbc:	7afb      	ldrb	r3, [r7, #11]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8009dc2:	e007      	b.n	8009dd4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009dc4:	6839      	ldr	r1, [r7, #0]
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fa41 	bl	800a24e <USBD_CtlError>
          err++;
 8009dcc:	7afb      	ldrb	r3, [r7, #11]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009dd2:	bf00      	nop
      }
      break;
 8009dd4:	e037      	b.n	8009e46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	7c1b      	ldrb	r3, [r3, #16]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d109      	bne.n	8009df2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de6:	f107 0208 	add.w	r2, r7, #8
 8009dea:	4610      	mov	r0, r2
 8009dec:	4798      	blx	r3
 8009dee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009df0:	e029      	b.n	8009e46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fa2a 	bl	800a24e <USBD_CtlError>
        err++;
 8009dfa:	7afb      	ldrb	r3, [r7, #11]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	72fb      	strb	r3, [r7, #11]
      break;
 8009e00:	e021      	b.n	8009e46 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	7c1b      	ldrb	r3, [r3, #16]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10d      	bne.n	8009e26 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e12:	f107 0208 	add.w	r2, r7, #8
 8009e16:	4610      	mov	r0, r2
 8009e18:	4798      	blx	r3
 8009e1a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	2207      	movs	r2, #7
 8009e22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e24:	e00f      	b.n	8009e46 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fa10 	bl	800a24e <USBD_CtlError>
        err++;
 8009e2e:	7afb      	ldrb	r3, [r7, #11]
 8009e30:	3301      	adds	r3, #1
 8009e32:	72fb      	strb	r3, [r7, #11]
      break;
 8009e34:	e007      	b.n	8009e46 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fa08 	bl	800a24e <USBD_CtlError>
      err++;
 8009e3e:	7afb      	ldrb	r3, [r7, #11]
 8009e40:	3301      	adds	r3, #1
 8009e42:	72fb      	strb	r3, [r7, #11]
      break;
 8009e44:	bf00      	nop
  }

  if (err != 0U)
 8009e46:	7afb      	ldrb	r3, [r7, #11]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d11e      	bne.n	8009e8a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	88db      	ldrh	r3, [r3, #6]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d016      	beq.n	8009e82 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009e54:	893b      	ldrh	r3, [r7, #8]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00e      	beq.n	8009e78 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	88da      	ldrh	r2, [r3, #6]
 8009e5e:	893b      	ldrh	r3, [r7, #8]
 8009e60:	4293      	cmp	r3, r2
 8009e62:	bf28      	it	cs
 8009e64:	4613      	movcs	r3, r2
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e6a:	893b      	ldrh	r3, [r7, #8]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	68f9      	ldr	r1, [r7, #12]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fa5d 	bl	800a330 <USBD_CtlSendData>
 8009e76:	e009      	b.n	8009e8c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f9e7 	bl	800a24e <USBD_CtlError>
 8009e80:	e004      	b.n	8009e8c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 faae 	bl	800a3e4 <USBD_CtlSendStatus>
 8009e88:	e000      	b.n	8009e8c <USBD_GetDescriptor+0x320>
    return;
 8009e8a:	bf00      	nop
  }
}
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop

08009e94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	889b      	ldrh	r3, [r3, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d131      	bne.n	8009f0a <USBD_SetAddress+0x76>
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	88db      	ldrh	r3, [r3, #6]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d12d      	bne.n	8009f0a <USBD_SetAddress+0x76>
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	885b      	ldrh	r3, [r3, #2]
 8009eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8009eb4:	d829      	bhi.n	8009f0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	885b      	ldrh	r3, [r3, #2]
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ec0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	d104      	bne.n	8009ed8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f9bc 	bl	800a24e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed6:	e01d      	b.n	8009f14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	7bfa      	ldrb	r2, [r7, #15]
 8009edc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 ff1f 	bl	800ad28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fa7a 	bl	800a3e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d004      	beq.n	8009f00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2202      	movs	r2, #2
 8009efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009efe:	e009      	b.n	8009f14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f08:	e004      	b.n	8009f14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f99e 	bl	800a24e <USBD_CtlError>
  }
}
 8009f12:	bf00      	nop
 8009f14:	bf00      	nop
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	885b      	ldrh	r3, [r3, #2]
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	4b4e      	ldr	r3, [pc, #312]	; (800a06c <USBD_SetConfig+0x150>)
 8009f32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f34:	4b4d      	ldr	r3, [pc, #308]	; (800a06c <USBD_SetConfig+0x150>)
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d905      	bls.n	8009f48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f985 	bl	800a24e <USBD_CtlError>
    return USBD_FAIL;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e08c      	b.n	800a062 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d002      	beq.n	8009f5a <USBD_SetConfig+0x3e>
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d029      	beq.n	8009fac <USBD_SetConfig+0x90>
 8009f58:	e075      	b.n	800a046 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009f5a:	4b44      	ldr	r3, [pc, #272]	; (800a06c <USBD_SetConfig+0x150>)
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d020      	beq.n	8009fa4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009f62:	4b42      	ldr	r3, [pc, #264]	; (800a06c <USBD_SetConfig+0x150>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	461a      	mov	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f6c:	4b3f      	ldr	r3, [pc, #252]	; (800a06c <USBD_SetConfig+0x150>)
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	4619      	mov	r1, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7fe ffbd 	bl	8008ef2 <USBD_SetClassConfig>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d008      	beq.n	8009f94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f962 	bl	800a24e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f92:	e065      	b.n	800a060 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fa25 	bl	800a3e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2203      	movs	r2, #3
 8009f9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009fa2:	e05d      	b.n	800a060 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 fa1d 	bl	800a3e4 <USBD_CtlSendStatus>
      break;
 8009faa:	e059      	b.n	800a060 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009fac:	4b2f      	ldr	r3, [pc, #188]	; (800a06c <USBD_SetConfig+0x150>)
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d112      	bne.n	8009fda <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009fbc:	4b2b      	ldr	r3, [pc, #172]	; (800a06c <USBD_SetConfig+0x150>)
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009fc6:	4b29      	ldr	r3, [pc, #164]	; (800a06c <USBD_SetConfig+0x150>)
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f7fe ffac 	bl	8008f2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fa06 	bl	800a3e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fd8:	e042      	b.n	800a060 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009fda:	4b24      	ldr	r3, [pc, #144]	; (800a06c <USBD_SetConfig+0x150>)
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d02a      	beq.n	800a03e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f7fe ff9a 	bl	8008f2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009ff6:	4b1d      	ldr	r3, [pc, #116]	; (800a06c <USBD_SetConfig+0x150>)
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a000:	4b1a      	ldr	r3, [pc, #104]	; (800a06c <USBD_SetConfig+0x150>)
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f7fe ff73 	bl	8008ef2 <USBD_SetClassConfig>
 800a00c:	4603      	mov	r3, r0
 800a00e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a010:	7bfb      	ldrb	r3, [r7, #15]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00f      	beq.n	800a036 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f918 	bl	800a24e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	b2db      	uxtb	r3, r3
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7fe ff7f 	bl	8008f2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2202      	movs	r2, #2
 800a030:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a034:	e014      	b.n	800a060 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f9d4 	bl	800a3e4 <USBD_CtlSendStatus>
      break;
 800a03c:	e010      	b.n	800a060 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f9d0 	bl	800a3e4 <USBD_CtlSendStatus>
      break;
 800a044:	e00c      	b.n	800a060 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f900 	bl	800a24e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a04e:	4b07      	ldr	r3, [pc, #28]	; (800a06c <USBD_SetConfig+0x150>)
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	4619      	mov	r1, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7fe ff68 	bl	8008f2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a05a:	2303      	movs	r3, #3
 800a05c:	73fb      	strb	r3, [r7, #15]
      break;
 800a05e:	bf00      	nop
  }

  return ret;
 800a060:	7bfb      	ldrb	r3, [r7, #15]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	2000072c 	.word	0x2000072c

0800a070 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	88db      	ldrh	r3, [r3, #6]
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d004      	beq.n	800a08c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 f8e2 	bl	800a24e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a08a:	e023      	b.n	800a0d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b02      	cmp	r3, #2
 800a096:	dc02      	bgt.n	800a09e <USBD_GetConfig+0x2e>
 800a098:	2b00      	cmp	r3, #0
 800a09a:	dc03      	bgt.n	800a0a4 <USBD_GetConfig+0x34>
 800a09c:	e015      	b.n	800a0ca <USBD_GetConfig+0x5a>
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d00b      	beq.n	800a0ba <USBD_GetConfig+0x4a>
 800a0a2:	e012      	b.n	800a0ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	3308      	adds	r3, #8
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f93c 	bl	800a330 <USBD_CtlSendData>
        break;
 800a0b8:	e00c      	b.n	800a0d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	2201      	movs	r2, #1
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f934 	bl	800a330 <USBD_CtlSendData>
        break;
 800a0c8:	e004      	b.n	800a0d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f8be 	bl	800a24e <USBD_CtlError>
        break;
 800a0d2:	bf00      	nop
}
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d81e      	bhi.n	800a132 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	88db      	ldrh	r3, [r3, #6]
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d004      	beq.n	800a106 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a0fc:	6839      	ldr	r1, [r7, #0]
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f8a5 	bl	800a24e <USBD_CtlError>
        break;
 800a104:	e01a      	b.n	800a13c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a112:	2b00      	cmp	r3, #0
 800a114:	d005      	beq.n	800a122 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	f043 0202 	orr.w	r2, r3, #2
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	330c      	adds	r3, #12
 800a126:	2202      	movs	r2, #2
 800a128:	4619      	mov	r1, r3
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f900 	bl	800a330 <USBD_CtlSendData>
      break;
 800a130:	e004      	b.n	800a13c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f88a 	bl	800a24e <USBD_CtlError>
      break;
 800a13a:	bf00      	nop
  }
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	885b      	ldrh	r3, [r3, #2]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d107      	bne.n	800a166 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2201      	movs	r2, #1
 800a15a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f940 	bl	800a3e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a164:	e013      	b.n	800a18e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	885b      	ldrh	r3, [r3, #2]
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d10b      	bne.n	800a186 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	889b      	ldrh	r3, [r3, #4]
 800a172:	0a1b      	lsrs	r3, r3, #8
 800a174:	b29b      	uxth	r3, r3
 800a176:	b2da      	uxtb	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f930 	bl	800a3e4 <USBD_CtlSendStatus>
}
 800a184:	e003      	b.n	800a18e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a186:	6839      	ldr	r1, [r7, #0]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f860 	bl	800a24e <USBD_CtlError>
}
 800a18e:	bf00      	nop
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b082      	sub	sp, #8
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d80b      	bhi.n	800a1c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	885b      	ldrh	r3, [r3, #2]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d10c      	bne.n	800a1d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f910 	bl	800a3e4 <USBD_CtlSendStatus>
      }
      break;
 800a1c4:	e004      	b.n	800a1d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f840 	bl	800a24e <USBD_CtlError>
      break;
 800a1ce:	e000      	b.n	800a1d2 <USBD_ClrFeature+0x3c>
      break;
 800a1d0:	bf00      	nop
  }
}
 800a1d2:	bf00      	nop
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b084      	sub	sp, #16
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	781a      	ldrb	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	781a      	ldrb	r2, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3301      	adds	r3, #1
 800a202:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7ff fa17 	bl	8009638 <SWAPBYTE>
 800a20a:	4603      	mov	r3, r0
 800a20c:	461a      	mov	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	3301      	adds	r3, #1
 800a216:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3301      	adds	r3, #1
 800a21c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f7ff fa0a 	bl	8009638 <SWAPBYTE>
 800a224:	4603      	mov	r3, r0
 800a226:	461a      	mov	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3301      	adds	r3, #1
 800a230:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	3301      	adds	r3, #1
 800a236:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f7ff f9fd 	bl	8009638 <SWAPBYTE>
 800a23e:	4603      	mov	r3, r0
 800a240:	461a      	mov	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	80da      	strh	r2, [r3, #6]
}
 800a246:	bf00      	nop
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a258:	2180      	movs	r1, #128	; 0x80
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fcfa 	bl	800ac54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a260:	2100      	movs	r1, #0
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fcf6 	bl	800ac54 <USBD_LL_StallEP>
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d036      	beq.n	800a2f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a28a:	6938      	ldr	r0, [r7, #16]
 800a28c:	f000 f836 	bl	800a2fc <USBD_GetLen>
 800a290:	4603      	mov	r3, r0
 800a292:	3301      	adds	r3, #1
 800a294:	b29b      	uxth	r3, r3
 800a296:	005b      	lsls	r3, r3, #1
 800a298:	b29a      	uxth	r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a29e:	7dfb      	ldrb	r3, [r7, #23]
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	7812      	ldrb	r2, [r2, #0]
 800a2a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a2aa:	7dfb      	ldrb	r3, [r7, #23]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a2b0:	7dfb      	ldrb	r3, [r7, #23]
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	2203      	movs	r2, #3
 800a2b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a2ba:	7dfb      	ldrb	r3, [r7, #23]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a2c0:	e013      	b.n	800a2ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	7812      	ldrb	r2, [r2, #0]
 800a2cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	613b      	str	r3, [r7, #16]
    idx++;
 800a2d4:	7dfb      	ldrb	r3, [r7, #23]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a2da:	7dfb      	ldrb	r3, [r7, #23]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	4413      	add	r3, r2
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	701a      	strb	r2, [r3, #0]
    idx++;
 800a2e4:	7dfb      	ldrb	r3, [r7, #23]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1e7      	bne.n	800a2c2 <USBD_GetString+0x52>
 800a2f2:	e000      	b.n	800a2f6 <USBD_GetString+0x86>
    return;
 800a2f4:	bf00      	nop
  }
}
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a304:	2300      	movs	r3, #0
 800a306:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a30c:	e005      	b.n	800a31a <USBD_GetLen+0x1e>
  {
    len++;
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
 800a310:	3301      	adds	r3, #1
 800a312:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	3301      	adds	r3, #1
 800a318:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1f5      	bne.n	800a30e <USBD_GetLen+0x12>
  }

  return len;
 800a322:	7bfb      	ldrb	r3, [r7, #15]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3714      	adds	r7, #20
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2202      	movs	r2, #2
 800a340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	2100      	movs	r1, #0
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 fd05 	bl	800ad66 <USBD_LL_Transmit>

  return USBD_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b084      	sub	sp, #16
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	60f8      	str	r0, [r7, #12]
 800a36e:	60b9      	str	r1, [r7, #8]
 800a370:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	2100      	movs	r1, #0
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 fcf4 	bl	800ad66 <USBD_LL_Transmit>

  return USBD_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2203      	movs	r2, #3
 800a398:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f000 fcf8 	bl	800ada8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	60f8      	str	r0, [r7, #12]
 800a3ca:	60b9      	str	r1, [r7, #8]
 800a3cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f000 fce7 	bl	800ada8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2204      	movs	r2, #4
 800a3f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fcb3 	bl	800ad66 <USBD_LL_Transmit>

  return USBD_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b082      	sub	sp, #8
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2205      	movs	r2, #5
 800a416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a41a:	2300      	movs	r3, #0
 800a41c:	2200      	movs	r2, #0
 800a41e:	2100      	movs	r1, #0
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fcc1 	bl	800ada8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a434:	2200      	movs	r2, #0
 800a436:	4912      	ldr	r1, [pc, #72]	; (800a480 <MX_USB_DEVICE_Init+0x50>)
 800a438:	4812      	ldr	r0, [pc, #72]	; (800a484 <MX_USB_DEVICE_Init+0x54>)
 800a43a:	f7fe fcdd 	bl	8008df8 <USBD_Init>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a444:	f7f6 fbfa 	bl	8000c3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a448:	490f      	ldr	r1, [pc, #60]	; (800a488 <MX_USB_DEVICE_Init+0x58>)
 800a44a:	480e      	ldr	r0, [pc, #56]	; (800a484 <MX_USB_DEVICE_Init+0x54>)
 800a44c:	f7fe fd04 	bl	8008e58 <USBD_RegisterClass>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a456:	f7f6 fbf1 	bl	8000c3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a45a:	490c      	ldr	r1, [pc, #48]	; (800a48c <MX_USB_DEVICE_Init+0x5c>)
 800a45c:	4809      	ldr	r0, [pc, #36]	; (800a484 <MX_USB_DEVICE_Init+0x54>)
 800a45e:	f7fe fc3b 	bl	8008cd8 <USBD_CDC_RegisterInterface>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a468:	f7f6 fbe8 	bl	8000c3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a46c:	4805      	ldr	r0, [pc, #20]	; (800a484 <MX_USB_DEVICE_Init+0x54>)
 800a46e:	f7fe fd29 	bl	8008ec4 <USBD_Start>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a478:	f7f6 fbe0 	bl	8000c3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a47c:	bf00      	nop
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	200000cc 	.word	0x200000cc
 800a484:	20000730 	.word	0x20000730
 800a488:	20000038 	.word	0x20000038
 800a48c:	200000b8 	.word	0x200000b8

0800a490 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a494:	2200      	movs	r2, #0
 800a496:	4905      	ldr	r1, [pc, #20]	; (800a4ac <CDC_Init_FS+0x1c>)
 800a498:	4805      	ldr	r0, [pc, #20]	; (800a4b0 <CDC_Init_FS+0x20>)
 800a49a:	f7fe fc37 	bl	8008d0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a49e:	4905      	ldr	r1, [pc, #20]	; (800a4b4 <CDC_Init_FS+0x24>)
 800a4a0:	4803      	ldr	r0, [pc, #12]	; (800a4b0 <CDC_Init_FS+0x20>)
 800a4a2:	f7fe fc55 	bl	8008d50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a4a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	2000120c 	.word	0x2000120c
 800a4b0:	20000730 	.word	0x20000730
 800a4b4:	20000a0c 	.word	0x20000a0c

0800a4b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a4bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	6039      	str	r1, [r7, #0]
 800a4d2:	71fb      	strb	r3, [r7, #7]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
 800a4da:	2b23      	cmp	r3, #35	; 0x23
 800a4dc:	d84a      	bhi.n	800a574 <CDC_Control_FS+0xac>
 800a4de:	a201      	add	r2, pc, #4	; (adr r2, 800a4e4 <CDC_Control_FS+0x1c>)
 800a4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e4:	0800a575 	.word	0x0800a575
 800a4e8:	0800a575 	.word	0x0800a575
 800a4ec:	0800a575 	.word	0x0800a575
 800a4f0:	0800a575 	.word	0x0800a575
 800a4f4:	0800a575 	.word	0x0800a575
 800a4f8:	0800a575 	.word	0x0800a575
 800a4fc:	0800a575 	.word	0x0800a575
 800a500:	0800a575 	.word	0x0800a575
 800a504:	0800a575 	.word	0x0800a575
 800a508:	0800a575 	.word	0x0800a575
 800a50c:	0800a575 	.word	0x0800a575
 800a510:	0800a575 	.word	0x0800a575
 800a514:	0800a575 	.word	0x0800a575
 800a518:	0800a575 	.word	0x0800a575
 800a51c:	0800a575 	.word	0x0800a575
 800a520:	0800a575 	.word	0x0800a575
 800a524:	0800a575 	.word	0x0800a575
 800a528:	0800a575 	.word	0x0800a575
 800a52c:	0800a575 	.word	0x0800a575
 800a530:	0800a575 	.word	0x0800a575
 800a534:	0800a575 	.word	0x0800a575
 800a538:	0800a575 	.word	0x0800a575
 800a53c:	0800a575 	.word	0x0800a575
 800a540:	0800a575 	.word	0x0800a575
 800a544:	0800a575 	.word	0x0800a575
 800a548:	0800a575 	.word	0x0800a575
 800a54c:	0800a575 	.word	0x0800a575
 800a550:	0800a575 	.word	0x0800a575
 800a554:	0800a575 	.word	0x0800a575
 800a558:	0800a575 	.word	0x0800a575
 800a55c:	0800a575 	.word	0x0800a575
 800a560:	0800a575 	.word	0x0800a575
 800a564:	0800a575 	.word	0x0800a575
 800a568:	0800a575 	.word	0x0800a575
 800a56c:	0800a575 	.word	0x0800a575
 800a570:	0800a575 	.word	0x0800a575
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a574:	bf00      	nop
  }

  return (USBD_OK);
 800a576:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a578:	4618      	mov	r0, r3
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a58e:	6879      	ldr	r1, [r7, #4]
 800a590:	4805      	ldr	r0, [pc, #20]	; (800a5a8 <CDC_Receive_FS+0x24>)
 800a592:	f7fe fbdd 	bl	8008d50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a596:	4804      	ldr	r0, [pc, #16]	; (800a5a8 <CDC_Receive_FS+0x24>)
 800a598:	f7fe fbf8 	bl	8008d8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a59c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	20000730 	.word	0x20000730

0800a5ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b087      	sub	sp, #28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a5be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	6039      	str	r1, [r7, #0]
 800a5da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	2212      	movs	r2, #18
 800a5e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a5e2:	4b03      	ldr	r3, [pc, #12]	; (800a5f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	200000ec 	.word	0x200000ec

0800a5f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	6039      	str	r1, [r7, #0]
 800a5fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	2204      	movs	r2, #4
 800a604:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a606:	4b03      	ldr	r3, [pc, #12]	; (800a614 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a608:	4618      	mov	r0, r3
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	2000010c 	.word	0x2000010c

0800a618 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	4603      	mov	r3, r0
 800a620:	6039      	str	r1, [r7, #0]
 800a622:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a624:	79fb      	ldrb	r3, [r7, #7]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d105      	bne.n	800a636 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	4907      	ldr	r1, [pc, #28]	; (800a64c <USBD_FS_ProductStrDescriptor+0x34>)
 800a62e:	4808      	ldr	r0, [pc, #32]	; (800a650 <USBD_FS_ProductStrDescriptor+0x38>)
 800a630:	f7ff fe1e 	bl	800a270 <USBD_GetString>
 800a634:	e004      	b.n	800a640 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	4904      	ldr	r1, [pc, #16]	; (800a64c <USBD_FS_ProductStrDescriptor+0x34>)
 800a63a:	4805      	ldr	r0, [pc, #20]	; (800a650 <USBD_FS_ProductStrDescriptor+0x38>)
 800a63c:	f7ff fe18 	bl	800a270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a640:	4b02      	ldr	r3, [pc, #8]	; (800a64c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a642:	4618      	mov	r0, r3
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20001a0c 	.word	0x20001a0c
 800a650:	0800b1c0 	.word	0x0800b1c0

0800a654 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	6039      	str	r1, [r7, #0]
 800a65e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a660:	683a      	ldr	r2, [r7, #0]
 800a662:	4904      	ldr	r1, [pc, #16]	; (800a674 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a664:	4804      	ldr	r0, [pc, #16]	; (800a678 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a666:	f7ff fe03 	bl	800a270 <USBD_GetString>
  return USBD_StrDesc;
 800a66a:	4b02      	ldr	r3, [pc, #8]	; (800a674 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	20001a0c 	.word	0x20001a0c
 800a678:	0800b1d8 	.word	0x0800b1d8

0800a67c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	4603      	mov	r3, r0
 800a684:	6039      	str	r1, [r7, #0]
 800a686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	221a      	movs	r2, #26
 800a68c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a68e:	f000 f855 	bl	800a73c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a692:	4b02      	ldr	r3, [pc, #8]	; (800a69c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	20000110 	.word	0x20000110

0800a6a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	6039      	str	r1, [r7, #0]
 800a6aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a6ac:	79fb      	ldrb	r3, [r7, #7]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d105      	bne.n	800a6be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	4907      	ldr	r1, [pc, #28]	; (800a6d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6b6:	4808      	ldr	r0, [pc, #32]	; (800a6d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6b8:	f7ff fdda 	bl	800a270 <USBD_GetString>
 800a6bc:	e004      	b.n	800a6c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	4904      	ldr	r1, [pc, #16]	; (800a6d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6c2:	4805      	ldr	r0, [pc, #20]	; (800a6d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6c4:	f7ff fdd4 	bl	800a270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6c8:	4b02      	ldr	r3, [pc, #8]	; (800a6d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20001a0c 	.word	0x20001a0c
 800a6d8:	0800b1ec 	.word	0x0800b1ec

0800a6dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	6039      	str	r1, [r7, #0]
 800a6e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6e8:	79fb      	ldrb	r3, [r7, #7]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d105      	bne.n	800a6fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	4907      	ldr	r1, [pc, #28]	; (800a710 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6f2:	4808      	ldr	r0, [pc, #32]	; (800a714 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6f4:	f7ff fdbc 	bl	800a270 <USBD_GetString>
 800a6f8:	e004      	b.n	800a704 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	4904      	ldr	r1, [pc, #16]	; (800a710 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6fe:	4805      	ldr	r0, [pc, #20]	; (800a714 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a700:	f7ff fdb6 	bl	800a270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a704:	4b02      	ldr	r3, [pc, #8]	; (800a710 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a706:	4618      	mov	r0, r3
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20001a0c 	.word	0x20001a0c
 800a714:	0800b1f8 	.word	0x0800b1f8

0800a718 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	4603      	mov	r3, r0
 800a720:	6039      	str	r1, [r7, #0]
 800a722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	220c      	movs	r2, #12
 800a728:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a72a:	4b03      	ldr	r3, [pc, #12]	; (800a738 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr
 800a738:	20000100 	.word	0x20000100

0800a73c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a742:	4b0f      	ldr	r3, [pc, #60]	; (800a780 <Get_SerialNum+0x44>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a748:	4b0e      	ldr	r3, [pc, #56]	; (800a784 <Get_SerialNum+0x48>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a74e:	4b0e      	ldr	r3, [pc, #56]	; (800a788 <Get_SerialNum+0x4c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4413      	add	r3, r2
 800a75a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d009      	beq.n	800a776 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a762:	2208      	movs	r2, #8
 800a764:	4909      	ldr	r1, [pc, #36]	; (800a78c <Get_SerialNum+0x50>)
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f000 f814 	bl	800a794 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a76c:	2204      	movs	r2, #4
 800a76e:	4908      	ldr	r1, [pc, #32]	; (800a790 <Get_SerialNum+0x54>)
 800a770:	68b8      	ldr	r0, [r7, #8]
 800a772:	f000 f80f 	bl	800a794 <IntToUnicode>
  }
}
 800a776:	bf00      	nop
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	1ff0f420 	.word	0x1ff0f420
 800a784:	1ff0f424 	.word	0x1ff0f424
 800a788:	1ff0f428 	.word	0x1ff0f428
 800a78c:	20000112 	.word	0x20000112
 800a790:	20000122 	.word	0x20000122

0800a794 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a794:	b480      	push	{r7}
 800a796:	b087      	sub	sp, #28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	75fb      	strb	r3, [r7, #23]
 800a7aa:	e027      	b.n	800a7fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	0f1b      	lsrs	r3, r3, #28
 800a7b0:	2b09      	cmp	r3, #9
 800a7b2:	d80b      	bhi.n	800a7cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	0f1b      	lsrs	r3, r3, #28
 800a7b8:	b2da      	uxtb	r2, r3
 800a7ba:	7dfb      	ldrb	r3, [r7, #23]
 800a7bc:	005b      	lsls	r3, r3, #1
 800a7be:	4619      	mov	r1, r3
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	440b      	add	r3, r1
 800a7c4:	3230      	adds	r2, #48	; 0x30
 800a7c6:	b2d2      	uxtb	r2, r2
 800a7c8:	701a      	strb	r2, [r3, #0]
 800a7ca:	e00a      	b.n	800a7e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	0f1b      	lsrs	r3, r3, #28
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	7dfb      	ldrb	r3, [r7, #23]
 800a7d4:	005b      	lsls	r3, r3, #1
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	440b      	add	r3, r1
 800a7dc:	3237      	adds	r2, #55	; 0x37
 800a7de:	b2d2      	uxtb	r2, r2
 800a7e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	011b      	lsls	r3, r3, #4
 800a7e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a7e8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ea:	005b      	lsls	r3, r3, #1
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	75fb      	strb	r3, [r7, #23]
 800a7fc:	7dfa      	ldrb	r2, [r7, #23]
 800a7fe:	79fb      	ldrb	r3, [r7, #7]
 800a800:	429a      	cmp	r2, r3
 800a802:	d3d3      	bcc.n	800a7ac <IntToUnicode+0x18>
  }
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop
 800a808:	371c      	adds	r7, #28
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
	...

0800a814 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b0ac      	sub	sp, #176	; 0xb0
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a81c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	605a      	str	r2, [r3, #4]
 800a826:	609a      	str	r2, [r3, #8]
 800a828:	60da      	str	r2, [r3, #12]
 800a82a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a82c:	f107 0318 	add.w	r3, r7, #24
 800a830:	2284      	movs	r2, #132	; 0x84
 800a832:	2100      	movs	r1, #0
 800a834:	4618      	mov	r0, r3
 800a836:	f000 fc27 	bl	800b088 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a842:	d161      	bne.n	800a908 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a844:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a848:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a84a:	2300      	movs	r3, #0
 800a84c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a850:	f107 0318 	add.w	r3, r7, #24
 800a854:	4618      	mov	r0, r3
 800a856:	f7f9 fc0b 	bl	8004070 <HAL_RCCEx_PeriphCLKConfig>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a860:	f7f6 f9ec 	bl	8000c3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a864:	4b2a      	ldr	r3, [pc, #168]	; (800a910 <HAL_PCD_MspInit+0xfc>)
 800a866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a868:	4a29      	ldr	r2, [pc, #164]	; (800a910 <HAL_PCD_MspInit+0xfc>)
 800a86a:	f043 0301 	orr.w	r3, r3, #1
 800a86e:	6313      	str	r3, [r2, #48]	; 0x30
 800a870:	4b27      	ldr	r3, [pc, #156]	; (800a910 <HAL_PCD_MspInit+0xfc>)
 800a872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a874:	f003 0301 	and.w	r3, r3, #1
 800a878:	617b      	str	r3, [r7, #20]
 800a87a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a87c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a884:	2302      	movs	r3, #2
 800a886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a890:	2303      	movs	r3, #3
 800a892:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a896:	230a      	movs	r3, #10
 800a898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a89c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	481c      	ldr	r0, [pc, #112]	; (800a914 <HAL_PCD_MspInit+0x100>)
 800a8a4:	f7f7 fa50 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a8a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a8bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	4814      	ldr	r0, [pc, #80]	; (800a914 <HAL_PCD_MspInit+0x100>)
 800a8c4:	f7f7 fa40 	bl	8001d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a8c8:	4b11      	ldr	r3, [pc, #68]	; (800a910 <HAL_PCD_MspInit+0xfc>)
 800a8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8cc:	4a10      	ldr	r2, [pc, #64]	; (800a910 <HAL_PCD_MspInit+0xfc>)
 800a8ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d2:	6353      	str	r3, [r2, #52]	; 0x34
 800a8d4:	4b0e      	ldr	r3, [pc, #56]	; (800a910 <HAL_PCD_MspInit+0xfc>)
 800a8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8dc:	613b      	str	r3, [r7, #16]
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	4b0b      	ldr	r3, [pc, #44]	; (800a910 <HAL_PCD_MspInit+0xfc>)
 800a8e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e4:	4a0a      	ldr	r2, [pc, #40]	; (800a910 <HAL_PCD_MspInit+0xfc>)
 800a8e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8ea:	6453      	str	r3, [r2, #68]	; 0x44
 800a8ec:	4b08      	ldr	r3, [pc, #32]	; (800a910 <HAL_PCD_MspInit+0xfc>)
 800a8ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8f4:	60fb      	str	r3, [r7, #12]
 800a8f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	2043      	movs	r0, #67	; 0x43
 800a8fe:	f7f6 fe70 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a902:	2043      	movs	r0, #67	; 0x43
 800a904:	f7f6 fe89 	bl	800161a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a908:	bf00      	nop
 800a90a:	37b0      	adds	r7, #176	; 0xb0
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	40023800 	.word	0x40023800
 800a914:	40020000 	.word	0x40020000

0800a918 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a92c:	4619      	mov	r1, r3
 800a92e:	4610      	mov	r0, r2
 800a930:	f7fe fb15 	bl	8008f5e <USBD_LL_SetupStage>
}
 800a934:	bf00      	nop
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	460b      	mov	r3, r1
 800a946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800a94e:	78fa      	ldrb	r2, [r7, #3]
 800a950:	6879      	ldr	r1, [r7, #4]
 800a952:	4613      	mov	r3, r2
 800a954:	00db      	lsls	r3, r3, #3
 800a956:	4413      	add	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	440b      	add	r3, r1
 800a95c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	78fb      	ldrb	r3, [r7, #3]
 800a964:	4619      	mov	r1, r3
 800a966:	f7fe fb4f 	bl	8009008 <USBD_LL_DataOutStage>
}
 800a96a:	bf00      	nop
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b082      	sub	sp, #8
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	460b      	mov	r3, r1
 800a97c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800a984:	78fa      	ldrb	r2, [r7, #3]
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	4613      	mov	r3, r2
 800a98a:	00db      	lsls	r3, r3, #3
 800a98c:	4413      	add	r3, r2
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	440b      	add	r3, r1
 800a992:	334c      	adds	r3, #76	; 0x4c
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	78fb      	ldrb	r3, [r7, #3]
 800a998:	4619      	mov	r1, r3
 800a99a:	f7fe fbe8 	bl	800916e <USBD_LL_DataInStage>
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe fd1c 	bl	80093f2 <USBD_LL_SOF>
}
 800a9ba:	bf00      	nop
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b084      	sub	sp, #16
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d102      	bne.n	800a9dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	73fb      	strb	r3, [r7, #15]
 800a9da:	e008      	b.n	800a9ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d102      	bne.n	800a9ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	73fb      	strb	r3, [r7, #15]
 800a9e8:	e001      	b.n	800a9ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a9ea:	f7f6 f927 	bl	8000c3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a9f4:	7bfa      	ldrb	r2, [r7, #15]
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fe fcbc 	bl	8009376 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fe fc64 	bl	80092d2 <USBD_LL_Reset>
}
 800aa0a:	bf00      	nop
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
	...

0800aa14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fcb7 	bl	8009396 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	6812      	ldr	r2, [r2, #0]
 800aa36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa3a:	f043 0301 	orr.w	r3, r3, #1
 800aa3e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a1b      	ldr	r3, [r3, #32]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d005      	beq.n	800aa54 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa48:	4b04      	ldr	r3, [pc, #16]	; (800aa5c <HAL_PCD_SuspendCallback+0x48>)
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	4a03      	ldr	r2, [pc, #12]	; (800aa5c <HAL_PCD_SuspendCallback+0x48>)
 800aa4e:	f043 0306 	orr.w	r3, r3, #6
 800aa52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa54:	bf00      	nop
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	e000ed00 	.word	0xe000ed00

0800aa60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fca7 	bl	80093c2 <USBD_LL_Resume>
}
 800aa74:	bf00      	nop
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa8e:	78fa      	ldrb	r2, [r7, #3]
 800aa90:	4611      	mov	r1, r2
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fe fcff 	bl	8009496 <USBD_LL_IsoOUTIncomplete>
}
 800aa98:	bf00      	nop
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aab2:	78fa      	ldrb	r2, [r7, #3]
 800aab4:	4611      	mov	r1, r2
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fe fcbb 	bl	8009432 <USBD_LL_IsoINIncomplete>
}
 800aabc:	bf00      	nop
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe fd11 	bl	80094fa <USBD_LL_DevConnected>
}
 800aad8:	bf00      	nop
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fe fd0e 	bl	8009510 <USBD_LL_DevDisconnected>
}
 800aaf4:	bf00      	nop
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d13c      	bne.n	800ab86 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ab0c:	4a20      	ldr	r2, [pc, #128]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a1e      	ldr	r2, [pc, #120]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab18:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab1c:	4b1c      	ldr	r3, [pc, #112]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ab24:	4b1a      	ldr	r3, [pc, #104]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab26:	2206      	movs	r2, #6
 800ab28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ab2a:	4b19      	ldr	r3, [pc, #100]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ab30:	4b17      	ldr	r3, [pc, #92]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab36:	4b16      	ldr	r3, [pc, #88]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab38:	2202      	movs	r2, #2
 800ab3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ab3c:	4b14      	ldr	r3, [pc, #80]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ab42:	4b13      	ldr	r3, [pc, #76]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ab48:	4b11      	ldr	r3, [pc, #68]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ab4e:	4b10      	ldr	r3, [pc, #64]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ab54:	4b0e      	ldr	r3, [pc, #56]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab56:	2200      	movs	r2, #0
 800ab58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ab5a:	480d      	ldr	r0, [pc, #52]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab5c:	f7f7 faf5 	bl	800214a <HAL_PCD_Init>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ab66:	f7f6 f869 	bl	8000c3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ab6a:	2180      	movs	r1, #128	; 0x80
 800ab6c:	4808      	ldr	r0, [pc, #32]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab6e:	f7f8 fd70 	bl	8003652 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ab72:	2240      	movs	r2, #64	; 0x40
 800ab74:	2100      	movs	r1, #0
 800ab76:	4806      	ldr	r0, [pc, #24]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab78:	f7f8 fd24 	bl	80035c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ab7c:	2280      	movs	r2, #128	; 0x80
 800ab7e:	2101      	movs	r1, #1
 800ab80:	4803      	ldr	r0, [pc, #12]	; (800ab90 <USBD_LL_Init+0x94>)
 800ab82:	f7f8 fd1f 	bl	80035c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	20001c0c 	.word	0x20001c0c

0800ab94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba0:	2300      	movs	r3, #0
 800aba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abaa:	4618      	mov	r0, r3
 800abac:	f7f7 fbf1 	bl	8002392 <HAL_PCD_Start>
 800abb0:	4603      	mov	r3, r0
 800abb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abb4:	7bfb      	ldrb	r3, [r7, #15]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 f97e 	bl	800aeb8 <USBD_Get_USB_Status>
 800abbc:	4603      	mov	r3, r0
 800abbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b084      	sub	sp, #16
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	4608      	mov	r0, r1
 800abd4:	4611      	mov	r1, r2
 800abd6:	461a      	mov	r2, r3
 800abd8:	4603      	mov	r3, r0
 800abda:	70fb      	strb	r3, [r7, #3]
 800abdc:	460b      	mov	r3, r1
 800abde:	70bb      	strb	r3, [r7, #2]
 800abe0:	4613      	mov	r3, r2
 800abe2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe8:	2300      	movs	r3, #0
 800abea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800abf2:	78bb      	ldrb	r3, [r7, #2]
 800abf4:	883a      	ldrh	r2, [r7, #0]
 800abf6:	78f9      	ldrb	r1, [r7, #3]
 800abf8:	f7f8 f8de 	bl	8002db8 <HAL_PCD_EP_Open>
 800abfc:	4603      	mov	r3, r0
 800abfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac00:	7bfb      	ldrb	r3, [r7, #15]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f000 f958 	bl	800aeb8 <USBD_Get_USB_Status>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b084      	sub	sp, #16
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	460b      	mov	r3, r1
 800ac20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac30:	78fa      	ldrb	r2, [r7, #3]
 800ac32:	4611      	mov	r1, r2
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7f8 f927 	bl	8002e88 <HAL_PCD_EP_Close>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac3e:	7bfb      	ldrb	r3, [r7, #15]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f000 f939 	bl	800aeb8 <USBD_Get_USB_Status>
 800ac46:	4603      	mov	r3, r0
 800ac48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac60:	2300      	movs	r3, #0
 800ac62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac64:	2300      	movs	r3, #0
 800ac66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac6e:	78fa      	ldrb	r2, [r7, #3]
 800ac70:	4611      	mov	r1, r2
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7f8 f9ff 	bl	8003076 <HAL_PCD_EP_SetStall>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac7c:	7bfb      	ldrb	r3, [r7, #15]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 f91a 	bl	800aeb8 <USBD_Get_USB_Status>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b084      	sub	sp, #16
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aca2:	2300      	movs	r3, #0
 800aca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acac:	78fa      	ldrb	r2, [r7, #3]
 800acae:	4611      	mov	r1, r2
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7f8 fa44 	bl	800313e <HAL_PCD_EP_ClrStall>
 800acb6:	4603      	mov	r3, r0
 800acb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acba:	7bfb      	ldrb	r3, [r7, #15]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 f8fb 	bl	800aeb8 <USBD_Get_USB_Status>
 800acc2:	4603      	mov	r3, r0
 800acc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	460b      	mov	r3, r1
 800acda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ace2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ace4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	da0b      	bge.n	800ad04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800acec:	78fb      	ldrb	r3, [r7, #3]
 800acee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acf2:	68f9      	ldr	r1, [r7, #12]
 800acf4:	4613      	mov	r3, r2
 800acf6:	00db      	lsls	r3, r3, #3
 800acf8:	4413      	add	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	440b      	add	r3, r1
 800acfe:	333e      	adds	r3, #62	; 0x3e
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	e00b      	b.n	800ad1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad04:	78fb      	ldrb	r3, [r7, #3]
 800ad06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad0a:	68f9      	ldr	r1, [r7, #12]
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	00db      	lsls	r3, r3, #3
 800ad10:	4413      	add	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	440b      	add	r3, r1
 800ad16:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ad1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3714      	adds	r7, #20
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad42:	78fa      	ldrb	r2, [r7, #3]
 800ad44:	4611      	mov	r1, r2
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7f8 f811 	bl	8002d6e <HAL_PCD_SetAddress>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad50:	7bfb      	ldrb	r3, [r7, #15]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f000 f8b0 	bl	800aeb8 <USBD_Get_USB_Status>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b086      	sub	sp, #24
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	60f8      	str	r0, [r7, #12]
 800ad6e:	607a      	str	r2, [r7, #4]
 800ad70:	603b      	str	r3, [r7, #0]
 800ad72:	460b      	mov	r3, r1
 800ad74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ad84:	7af9      	ldrb	r1, [r7, #11]
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	f7f8 f92a 	bl	8002fe2 <HAL_PCD_EP_Transmit>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 f88f 	bl	800aeb8 <USBD_Get_USB_Status>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad9e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	607a      	str	r2, [r7, #4]
 800adb2:	603b      	str	r3, [r7, #0]
 800adb4:	460b      	mov	r3, r1
 800adb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800adc6:	7af9      	ldrb	r1, [r7, #11]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	f7f8 f8a6 	bl	8002f1c <HAL_PCD_EP_Receive>
 800add0:	4603      	mov	r3, r0
 800add2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800add4:	7dfb      	ldrb	r3, [r7, #23]
 800add6:	4618      	mov	r0, r3
 800add8:	f000 f86e 	bl	800aeb8 <USBD_Get_USB_Status>
 800addc:	4603      	mov	r3, r0
 800adde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ade0:	7dbb      	ldrb	r3, [r7, #22]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b082      	sub	sp, #8
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	460b      	mov	r3, r1
 800adf4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800adfc:	78fa      	ldrb	r2, [r7, #3]
 800adfe:	4611      	mov	r1, r2
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7f8 f8d6 	bl	8002fb2 <HAL_PCD_EP_GetRxCount>
 800ae06:	4603      	mov	r3, r0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ae1c:	78fb      	ldrb	r3, [r7, #3]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d002      	beq.n	800ae28 <HAL_PCDEx_LPM_Callback+0x18>
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d01f      	beq.n	800ae66 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ae26:	e03b      	b.n	800aea0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a1b      	ldr	r3, [r3, #32]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d007      	beq.n	800ae40 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ae30:	f000 f83c 	bl	800aeac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae34:	4b1c      	ldr	r3, [pc, #112]	; (800aea8 <HAL_PCDEx_LPM_Callback+0x98>)
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	4a1b      	ldr	r2, [pc, #108]	; (800aea8 <HAL_PCDEx_LPM_Callback+0x98>)
 800ae3a:	f023 0306 	bic.w	r3, r3, #6
 800ae3e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	6812      	ldr	r2, [r2, #0]
 800ae4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae52:	f023 0301 	bic.w	r3, r3, #1
 800ae56:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fe faaf 	bl	80093c2 <USBD_LL_Resume>
    break;
 800ae64:	e01c      	b.n	800aea0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	6812      	ldr	r2, [r2, #0]
 800ae74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae78:	f043 0301 	orr.w	r3, r3, #1
 800ae7c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7fe fa86 	bl	8009396 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d005      	beq.n	800ae9e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae92:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <HAL_PCDEx_LPM_Callback+0x98>)
 800ae94:	691b      	ldr	r3, [r3, #16]
 800ae96:	4a04      	ldr	r2, [pc, #16]	; (800aea8 <HAL_PCDEx_LPM_Callback+0x98>)
 800ae98:	f043 0306 	orr.w	r3, r3, #6
 800ae9c:	6113      	str	r3, [r2, #16]
    break;
 800ae9e:	bf00      	nop
}
 800aea0:	bf00      	nop
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	e000ed00 	.word	0xe000ed00

0800aeac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800aeb0:	f7f5 fcb8 	bl	8000824 <SystemClock_Config>
}
 800aeb4:	bf00      	nop
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	4603      	mov	r3, r0
 800aec0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aec6:	79fb      	ldrb	r3, [r7, #7]
 800aec8:	2b03      	cmp	r3, #3
 800aeca:	d817      	bhi.n	800aefc <USBD_Get_USB_Status+0x44>
 800aecc:	a201      	add	r2, pc, #4	; (adr r2, 800aed4 <USBD_Get_USB_Status+0x1c>)
 800aece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed2:	bf00      	nop
 800aed4:	0800aee5 	.word	0x0800aee5
 800aed8:	0800aeeb 	.word	0x0800aeeb
 800aedc:	0800aef1 	.word	0x0800aef1
 800aee0:	0800aef7 	.word	0x0800aef7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aee4:	2300      	movs	r3, #0
 800aee6:	73fb      	strb	r3, [r7, #15]
    break;
 800aee8:	e00b      	b.n	800af02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aeea:	2303      	movs	r3, #3
 800aeec:	73fb      	strb	r3, [r7, #15]
    break;
 800aeee:	e008      	b.n	800af02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aef0:	2301      	movs	r3, #1
 800aef2:	73fb      	strb	r3, [r7, #15]
    break;
 800aef4:	e005      	b.n	800af02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aef6:	2303      	movs	r3, #3
 800aef8:	73fb      	strb	r3, [r7, #15]
    break;
 800aefa:	e002      	b.n	800af02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aefc:	2303      	movs	r3, #3
 800aefe:	73fb      	strb	r3, [r7, #15]
    break;
 800af00:	bf00      	nop
  }
  return usb_status;
 800af02:	7bfb      	ldrb	r3, [r7, #15]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <malloc>:
 800af10:	4b02      	ldr	r3, [pc, #8]	; (800af1c <malloc+0xc>)
 800af12:	4601      	mov	r1, r0
 800af14:	6818      	ldr	r0, [r3, #0]
 800af16:	f000 b82b 	b.w	800af70 <_malloc_r>
 800af1a:	bf00      	nop
 800af1c:	20000178 	.word	0x20000178

0800af20 <free>:
 800af20:	4b02      	ldr	r3, [pc, #8]	; (800af2c <free+0xc>)
 800af22:	4601      	mov	r1, r0
 800af24:	6818      	ldr	r0, [r3, #0]
 800af26:	f000 b8f3 	b.w	800b110 <_free_r>
 800af2a:	bf00      	nop
 800af2c:	20000178 	.word	0x20000178

0800af30 <sbrk_aligned>:
 800af30:	b570      	push	{r4, r5, r6, lr}
 800af32:	4e0e      	ldr	r6, [pc, #56]	; (800af6c <sbrk_aligned+0x3c>)
 800af34:	460c      	mov	r4, r1
 800af36:	6831      	ldr	r1, [r6, #0]
 800af38:	4605      	mov	r5, r0
 800af3a:	b911      	cbnz	r1, 800af42 <sbrk_aligned+0x12>
 800af3c:	f000 f8ac 	bl	800b098 <_sbrk_r>
 800af40:	6030      	str	r0, [r6, #0]
 800af42:	4621      	mov	r1, r4
 800af44:	4628      	mov	r0, r5
 800af46:	f000 f8a7 	bl	800b098 <_sbrk_r>
 800af4a:	1c43      	adds	r3, r0, #1
 800af4c:	d00a      	beq.n	800af64 <sbrk_aligned+0x34>
 800af4e:	1cc4      	adds	r4, r0, #3
 800af50:	f024 0403 	bic.w	r4, r4, #3
 800af54:	42a0      	cmp	r0, r4
 800af56:	d007      	beq.n	800af68 <sbrk_aligned+0x38>
 800af58:	1a21      	subs	r1, r4, r0
 800af5a:	4628      	mov	r0, r5
 800af5c:	f000 f89c 	bl	800b098 <_sbrk_r>
 800af60:	3001      	adds	r0, #1
 800af62:	d101      	bne.n	800af68 <sbrk_aligned+0x38>
 800af64:	f04f 34ff 	mov.w	r4, #4294967295
 800af68:	4620      	mov	r0, r4
 800af6a:	bd70      	pop	{r4, r5, r6, pc}
 800af6c:	20002118 	.word	0x20002118

0800af70 <_malloc_r>:
 800af70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af74:	1ccd      	adds	r5, r1, #3
 800af76:	f025 0503 	bic.w	r5, r5, #3
 800af7a:	3508      	adds	r5, #8
 800af7c:	2d0c      	cmp	r5, #12
 800af7e:	bf38      	it	cc
 800af80:	250c      	movcc	r5, #12
 800af82:	2d00      	cmp	r5, #0
 800af84:	4607      	mov	r7, r0
 800af86:	db01      	blt.n	800af8c <_malloc_r+0x1c>
 800af88:	42a9      	cmp	r1, r5
 800af8a:	d905      	bls.n	800af98 <_malloc_r+0x28>
 800af8c:	230c      	movs	r3, #12
 800af8e:	603b      	str	r3, [r7, #0]
 800af90:	2600      	movs	r6, #0
 800af92:	4630      	mov	r0, r6
 800af94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b06c <_malloc_r+0xfc>
 800af9c:	f000 f868 	bl	800b070 <__malloc_lock>
 800afa0:	f8d8 3000 	ldr.w	r3, [r8]
 800afa4:	461c      	mov	r4, r3
 800afa6:	bb5c      	cbnz	r4, 800b000 <_malloc_r+0x90>
 800afa8:	4629      	mov	r1, r5
 800afaa:	4638      	mov	r0, r7
 800afac:	f7ff ffc0 	bl	800af30 <sbrk_aligned>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	4604      	mov	r4, r0
 800afb4:	d155      	bne.n	800b062 <_malloc_r+0xf2>
 800afb6:	f8d8 4000 	ldr.w	r4, [r8]
 800afba:	4626      	mov	r6, r4
 800afbc:	2e00      	cmp	r6, #0
 800afbe:	d145      	bne.n	800b04c <_malloc_r+0xdc>
 800afc0:	2c00      	cmp	r4, #0
 800afc2:	d048      	beq.n	800b056 <_malloc_r+0xe6>
 800afc4:	6823      	ldr	r3, [r4, #0]
 800afc6:	4631      	mov	r1, r6
 800afc8:	4638      	mov	r0, r7
 800afca:	eb04 0903 	add.w	r9, r4, r3
 800afce:	f000 f863 	bl	800b098 <_sbrk_r>
 800afd2:	4581      	cmp	r9, r0
 800afd4:	d13f      	bne.n	800b056 <_malloc_r+0xe6>
 800afd6:	6821      	ldr	r1, [r4, #0]
 800afd8:	1a6d      	subs	r5, r5, r1
 800afda:	4629      	mov	r1, r5
 800afdc:	4638      	mov	r0, r7
 800afde:	f7ff ffa7 	bl	800af30 <sbrk_aligned>
 800afe2:	3001      	adds	r0, #1
 800afe4:	d037      	beq.n	800b056 <_malloc_r+0xe6>
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	442b      	add	r3, r5
 800afea:	6023      	str	r3, [r4, #0]
 800afec:	f8d8 3000 	ldr.w	r3, [r8]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d038      	beq.n	800b066 <_malloc_r+0xf6>
 800aff4:	685a      	ldr	r2, [r3, #4]
 800aff6:	42a2      	cmp	r2, r4
 800aff8:	d12b      	bne.n	800b052 <_malloc_r+0xe2>
 800affa:	2200      	movs	r2, #0
 800affc:	605a      	str	r2, [r3, #4]
 800affe:	e00f      	b.n	800b020 <_malloc_r+0xb0>
 800b000:	6822      	ldr	r2, [r4, #0]
 800b002:	1b52      	subs	r2, r2, r5
 800b004:	d41f      	bmi.n	800b046 <_malloc_r+0xd6>
 800b006:	2a0b      	cmp	r2, #11
 800b008:	d917      	bls.n	800b03a <_malloc_r+0xca>
 800b00a:	1961      	adds	r1, r4, r5
 800b00c:	42a3      	cmp	r3, r4
 800b00e:	6025      	str	r5, [r4, #0]
 800b010:	bf18      	it	ne
 800b012:	6059      	strne	r1, [r3, #4]
 800b014:	6863      	ldr	r3, [r4, #4]
 800b016:	bf08      	it	eq
 800b018:	f8c8 1000 	streq.w	r1, [r8]
 800b01c:	5162      	str	r2, [r4, r5]
 800b01e:	604b      	str	r3, [r1, #4]
 800b020:	4638      	mov	r0, r7
 800b022:	f104 060b 	add.w	r6, r4, #11
 800b026:	f000 f829 	bl	800b07c <__malloc_unlock>
 800b02a:	f026 0607 	bic.w	r6, r6, #7
 800b02e:	1d23      	adds	r3, r4, #4
 800b030:	1af2      	subs	r2, r6, r3
 800b032:	d0ae      	beq.n	800af92 <_malloc_r+0x22>
 800b034:	1b9b      	subs	r3, r3, r6
 800b036:	50a3      	str	r3, [r4, r2]
 800b038:	e7ab      	b.n	800af92 <_malloc_r+0x22>
 800b03a:	42a3      	cmp	r3, r4
 800b03c:	6862      	ldr	r2, [r4, #4]
 800b03e:	d1dd      	bne.n	800affc <_malloc_r+0x8c>
 800b040:	f8c8 2000 	str.w	r2, [r8]
 800b044:	e7ec      	b.n	800b020 <_malloc_r+0xb0>
 800b046:	4623      	mov	r3, r4
 800b048:	6864      	ldr	r4, [r4, #4]
 800b04a:	e7ac      	b.n	800afa6 <_malloc_r+0x36>
 800b04c:	4634      	mov	r4, r6
 800b04e:	6876      	ldr	r6, [r6, #4]
 800b050:	e7b4      	b.n	800afbc <_malloc_r+0x4c>
 800b052:	4613      	mov	r3, r2
 800b054:	e7cc      	b.n	800aff0 <_malloc_r+0x80>
 800b056:	230c      	movs	r3, #12
 800b058:	603b      	str	r3, [r7, #0]
 800b05a:	4638      	mov	r0, r7
 800b05c:	f000 f80e 	bl	800b07c <__malloc_unlock>
 800b060:	e797      	b.n	800af92 <_malloc_r+0x22>
 800b062:	6025      	str	r5, [r4, #0]
 800b064:	e7dc      	b.n	800b020 <_malloc_r+0xb0>
 800b066:	605b      	str	r3, [r3, #4]
 800b068:	deff      	udf	#255	; 0xff
 800b06a:	bf00      	nop
 800b06c:	20002114 	.word	0x20002114

0800b070 <__malloc_lock>:
 800b070:	4801      	ldr	r0, [pc, #4]	; (800b078 <__malloc_lock+0x8>)
 800b072:	f000 b84b 	b.w	800b10c <__retarget_lock_acquire_recursive>
 800b076:	bf00      	nop
 800b078:	20002258 	.word	0x20002258

0800b07c <__malloc_unlock>:
 800b07c:	4801      	ldr	r0, [pc, #4]	; (800b084 <__malloc_unlock+0x8>)
 800b07e:	f000 b846 	b.w	800b10e <__retarget_lock_release_recursive>
 800b082:	bf00      	nop
 800b084:	20002258 	.word	0x20002258

0800b088 <memset>:
 800b088:	4402      	add	r2, r0
 800b08a:	4603      	mov	r3, r0
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d100      	bne.n	800b092 <memset+0xa>
 800b090:	4770      	bx	lr
 800b092:	f803 1b01 	strb.w	r1, [r3], #1
 800b096:	e7f9      	b.n	800b08c <memset+0x4>

0800b098 <_sbrk_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4d06      	ldr	r5, [pc, #24]	; (800b0b4 <_sbrk_r+0x1c>)
 800b09c:	2300      	movs	r3, #0
 800b09e:	4604      	mov	r4, r0
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	602b      	str	r3, [r5, #0]
 800b0a4:	f7f6 f8d0 	bl	8001248 <_sbrk>
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	d102      	bne.n	800b0b2 <_sbrk_r+0x1a>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	b103      	cbz	r3, 800b0b2 <_sbrk_r+0x1a>
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	20002254 	.word	0x20002254

0800b0b8 <__errno>:
 800b0b8:	4b01      	ldr	r3, [pc, #4]	; (800b0c0 <__errno+0x8>)
 800b0ba:	6818      	ldr	r0, [r3, #0]
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	20000178 	.word	0x20000178

0800b0c4 <__libc_init_array>:
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	4d0d      	ldr	r5, [pc, #52]	; (800b0fc <__libc_init_array+0x38>)
 800b0c8:	4c0d      	ldr	r4, [pc, #52]	; (800b100 <__libc_init_array+0x3c>)
 800b0ca:	1b64      	subs	r4, r4, r5
 800b0cc:	10a4      	asrs	r4, r4, #2
 800b0ce:	2600      	movs	r6, #0
 800b0d0:	42a6      	cmp	r6, r4
 800b0d2:	d109      	bne.n	800b0e8 <__libc_init_array+0x24>
 800b0d4:	4d0b      	ldr	r5, [pc, #44]	; (800b104 <__libc_init_array+0x40>)
 800b0d6:	4c0c      	ldr	r4, [pc, #48]	; (800b108 <__libc_init_array+0x44>)
 800b0d8:	f000 f866 	bl	800b1a8 <_init>
 800b0dc:	1b64      	subs	r4, r4, r5
 800b0de:	10a4      	asrs	r4, r4, #2
 800b0e0:	2600      	movs	r6, #0
 800b0e2:	42a6      	cmp	r6, r4
 800b0e4:	d105      	bne.n	800b0f2 <__libc_init_array+0x2e>
 800b0e6:	bd70      	pop	{r4, r5, r6, pc}
 800b0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ec:	4798      	blx	r3
 800b0ee:	3601      	adds	r6, #1
 800b0f0:	e7ee      	b.n	800b0d0 <__libc_init_array+0xc>
 800b0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0f6:	4798      	blx	r3
 800b0f8:	3601      	adds	r6, #1
 800b0fa:	e7f2      	b.n	800b0e2 <__libc_init_array+0x1e>
 800b0fc:	0800b240 	.word	0x0800b240
 800b100:	0800b240 	.word	0x0800b240
 800b104:	0800b240 	.word	0x0800b240
 800b108:	0800b244 	.word	0x0800b244

0800b10c <__retarget_lock_acquire_recursive>:
 800b10c:	4770      	bx	lr

0800b10e <__retarget_lock_release_recursive>:
 800b10e:	4770      	bx	lr

0800b110 <_free_r>:
 800b110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b112:	2900      	cmp	r1, #0
 800b114:	d044      	beq.n	800b1a0 <_free_r+0x90>
 800b116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b11a:	9001      	str	r0, [sp, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f1a1 0404 	sub.w	r4, r1, #4
 800b122:	bfb8      	it	lt
 800b124:	18e4      	addlt	r4, r4, r3
 800b126:	f7ff ffa3 	bl	800b070 <__malloc_lock>
 800b12a:	4a1e      	ldr	r2, [pc, #120]	; (800b1a4 <_free_r+0x94>)
 800b12c:	9801      	ldr	r0, [sp, #4]
 800b12e:	6813      	ldr	r3, [r2, #0]
 800b130:	b933      	cbnz	r3, 800b140 <_free_r+0x30>
 800b132:	6063      	str	r3, [r4, #4]
 800b134:	6014      	str	r4, [r2, #0]
 800b136:	b003      	add	sp, #12
 800b138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b13c:	f7ff bf9e 	b.w	800b07c <__malloc_unlock>
 800b140:	42a3      	cmp	r3, r4
 800b142:	d908      	bls.n	800b156 <_free_r+0x46>
 800b144:	6825      	ldr	r5, [r4, #0]
 800b146:	1961      	adds	r1, r4, r5
 800b148:	428b      	cmp	r3, r1
 800b14a:	bf01      	itttt	eq
 800b14c:	6819      	ldreq	r1, [r3, #0]
 800b14e:	685b      	ldreq	r3, [r3, #4]
 800b150:	1949      	addeq	r1, r1, r5
 800b152:	6021      	streq	r1, [r4, #0]
 800b154:	e7ed      	b.n	800b132 <_free_r+0x22>
 800b156:	461a      	mov	r2, r3
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	b10b      	cbz	r3, 800b160 <_free_r+0x50>
 800b15c:	42a3      	cmp	r3, r4
 800b15e:	d9fa      	bls.n	800b156 <_free_r+0x46>
 800b160:	6811      	ldr	r1, [r2, #0]
 800b162:	1855      	adds	r5, r2, r1
 800b164:	42a5      	cmp	r5, r4
 800b166:	d10b      	bne.n	800b180 <_free_r+0x70>
 800b168:	6824      	ldr	r4, [r4, #0]
 800b16a:	4421      	add	r1, r4
 800b16c:	1854      	adds	r4, r2, r1
 800b16e:	42a3      	cmp	r3, r4
 800b170:	6011      	str	r1, [r2, #0]
 800b172:	d1e0      	bne.n	800b136 <_free_r+0x26>
 800b174:	681c      	ldr	r4, [r3, #0]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	6053      	str	r3, [r2, #4]
 800b17a:	440c      	add	r4, r1
 800b17c:	6014      	str	r4, [r2, #0]
 800b17e:	e7da      	b.n	800b136 <_free_r+0x26>
 800b180:	d902      	bls.n	800b188 <_free_r+0x78>
 800b182:	230c      	movs	r3, #12
 800b184:	6003      	str	r3, [r0, #0]
 800b186:	e7d6      	b.n	800b136 <_free_r+0x26>
 800b188:	6825      	ldr	r5, [r4, #0]
 800b18a:	1961      	adds	r1, r4, r5
 800b18c:	428b      	cmp	r3, r1
 800b18e:	bf04      	itt	eq
 800b190:	6819      	ldreq	r1, [r3, #0]
 800b192:	685b      	ldreq	r3, [r3, #4]
 800b194:	6063      	str	r3, [r4, #4]
 800b196:	bf04      	itt	eq
 800b198:	1949      	addeq	r1, r1, r5
 800b19a:	6021      	streq	r1, [r4, #0]
 800b19c:	6054      	str	r4, [r2, #4]
 800b19e:	e7ca      	b.n	800b136 <_free_r+0x26>
 800b1a0:	b003      	add	sp, #12
 800b1a2:	bd30      	pop	{r4, r5, pc}
 800b1a4:	20002114 	.word	0x20002114

0800b1a8 <_init>:
 800b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1aa:	bf00      	nop
 800b1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ae:	bc08      	pop	{r3}
 800b1b0:	469e      	mov	lr, r3
 800b1b2:	4770      	bx	lr

0800b1b4 <_fini>:
 800b1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b6:	bf00      	nop
 800b1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ba:	bc08      	pop	{r3}
 800b1bc:	469e      	mov	lr, r3
 800b1be:	4770      	bx	lr
