
MPDD_Final_Project_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b004  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800b1cc  0800b1cc  0001b1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b244  0800b244  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b244  0800b244  0001b244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b24c  0800b24c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b24c  0800b24c  0001b24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b250  0800b250  0001b250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800b254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e0  2000017c  0800b3d0  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000225c  0800b3d0  0002225c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce49  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004127  00000000  00000000  0003d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  00041160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001239  00000000  00000000  000428f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029191  00000000  00000000  00043b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ecbd  00000000  00000000  0006ccc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7542  00000000  00000000  0008b97f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000668c  00000000  00000000  00182ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00189550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000017c 	.word	0x2000017c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b1b4 	.word	0x0800b1b4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000180 	.word	0x20000180
 8000204:	0800b1b4 	.word	0x0800b1b4

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <ILI9163_writeCommand+0x44>)
 8000526:	f001 fdd9 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000530:	4809      	ldr	r0, [pc, #36]	; (8000558 <ILI9163_writeCommand+0x44>)
 8000532:	f001 fdd3 	bl	80020dc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 8000536:	1df9      	adds	r1, r7, #7
 8000538:	2300      	movs	r3, #0
 800053a:	2201      	movs	r2, #1
 800053c:	4807      	ldr	r0, [pc, #28]	; (800055c <ILI9163_writeCommand+0x48>)
 800053e:	f004 fa38 	bl	80049b2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <ILI9163_writeCommand+0x44>)
 800054a:	f001 fdc7 	bl	80020dc <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40020400 	.word	0x40020400
 800055c:	20000198 	.word	0x20000198

08000560 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <ILI9163_writeData+0x44>)
 8000572:	f001 fdb3 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057c:	4809      	ldr	r0, [pc, #36]	; (80005a4 <ILI9163_writeData+0x44>)
 800057e:	f001 fdad 	bl	80020dc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 8000582:	1df9      	adds	r1, r7, #7
 8000584:	2300      	movs	r3, #0
 8000586:	2201      	movs	r2, #1
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <ILI9163_writeData+0x48>)
 800058a:	f004 fa12 	bl	80049b2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <ILI9163_writeData+0x44>)
 8000596:	f001 fda1 	bl	80020dc <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40020400 	.word	0x40020400
 80005a8:	20000198 	.word	0x20000198

080005ac <ILI9163_reset>:

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
}

void ILI9163_reset(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <ILI9163_reset+0x2c>)
 80005b8:	f001 fd90 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80005bc:	2032      	movs	r0, #50	; 0x32
 80005be:	f000 ff17 	bl	80013f0 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <ILI9163_reset+0x2c>)
 80005ca:	f001 fd87 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f000 ff0e 	bl	80013f0 <HAL_Delay>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40020c00 	.word	0x40020c00

080005dc <ILI9163_init>:

void ILI9163_init(int rotation) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ea:	486e      	ldr	r0, [pc, #440]	; (80007a4 <ILI9163_init+0x1c8>)
 80005ec:	f001 fd76 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f6:	486c      	ldr	r0, [pc, #432]	; (80007a8 <ILI9163_init+0x1cc>)
 80005f8:	f001 fd70 	bl	80020dc <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 80005fc:	f7ff ffd6 	bl	80005ac <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 8000600:	2011      	movs	r0, #17
 8000602:	f7ff ff87 	bl	8000514 <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 8000606:	2005      	movs	r0, #5
 8000608:	f000 fef2 	bl	80013f0 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 800060c:	203a      	movs	r0, #58	; 0x3a
 800060e:	f7ff ff81 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 8000612:	2005      	movs	r0, #5
 8000614:	f7ff ffa4 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 8000618:	2026      	movs	r0, #38	; 0x26
 800061a:	f7ff ff7b 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 800061e:	2004      	movs	r0, #4
 8000620:	f7ff ff9e 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8000624:	20f2      	movs	r0, #242	; 0xf2
 8000626:	f7ff ff75 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff ff98 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 8000630:	20e0      	movs	r0, #224	; 0xe0
 8000632:	f7ff ff6f 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 8000636:	203f      	movs	r0, #63	; 0x3f
 8000638:	f7ff ff92 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800063c:	2025      	movs	r0, #37	; 0x25
 800063e:	f7ff ff8f 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 8000642:	201c      	movs	r0, #28
 8000644:	f7ff ff8c 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 8000648:	201e      	movs	r0, #30
 800064a:	f7ff ff89 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800064e:	2020      	movs	r0, #32
 8000650:	f7ff ff86 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 8000654:	2012      	movs	r0, #18
 8000656:	f7ff ff83 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 800065a:	202a      	movs	r0, #42	; 0x2a
 800065c:	f7ff ff80 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 8000660:	2090      	movs	r0, #144	; 0x90
 8000662:	f7ff ff7d 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 8000666:	2024      	movs	r0, #36	; 0x24
 8000668:	f7ff ff7a 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 800066c:	2011      	movs	r0, #17
 800066e:	f7ff ff77 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff ff74 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ff71 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff ff6e 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff ff6b 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ff68 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 8000690:	20e1      	movs	r0, #225	; 0xe1
 8000692:	f7ff ff3f 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 8000696:	2020      	movs	r0, #32
 8000698:	f7ff ff62 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800069c:	2020      	movs	r0, #32
 800069e:	f7ff ff5f 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80006a2:	2020      	movs	r0, #32
 80006a4:	f7ff ff5c 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80006a8:	2020      	movs	r0, #32
 80006aa:	f7ff ff59 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 80006ae:	2005      	movs	r0, #5
 80006b0:	f7ff ff56 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ff53 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 80006ba:	2015      	movs	r0, #21
 80006bc:	f7ff ff50 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 80006c0:	20a7      	movs	r0, #167	; 0xa7
 80006c2:	f7ff ff4d 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 80006c6:	203d      	movs	r0, #61	; 0x3d
 80006c8:	f7ff ff4a 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 80006cc:	2018      	movs	r0, #24
 80006ce:	f7ff ff47 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 80006d2:	2025      	movs	r0, #37	; 0x25
 80006d4:	f7ff ff44 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 80006d8:	202a      	movs	r0, #42	; 0x2a
 80006da:	f7ff ff41 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 80006de:	202b      	movs	r0, #43	; 0x2b
 80006e0:	f7ff ff3e 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 80006e4:	202b      	movs	r0, #43	; 0x2b
 80006e6:	f7ff ff3b 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 80006ea:	203a      	movs	r0, #58	; 0x3a
 80006ec:	f7ff ff38 	bl	8000560 <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 80006f0:	20b1      	movs	r0, #177	; 0xb1
 80006f2:	f7ff ff0f 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 80006f6:	2008      	movs	r0, #8
 80006f8:	f7ff ff32 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff2f 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 8000702:	20b2      	movs	r0, #178	; 0xb2
 8000704:	f7ff ff06 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000708:	2008      	movs	r0, #8
 800070a:	f7ff ff29 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800070e:	2002      	movs	r0, #2
 8000710:	f7ff ff26 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8000714:	20b3      	movs	r0, #179	; 0xb3
 8000716:	f7ff fefd 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800071a:	2008      	movs	r0, #8
 800071c:	f7ff ff20 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff ff1d 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8000726:	20b4      	movs	r0, #180	; 0xb4
 8000728:	f7ff fef4 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 800072c:	2007      	movs	r0, #7
 800072e:	f7ff ff17 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8000732:	202a      	movs	r0, #42	; 0x2a
 8000734:	f7ff feee 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff ff11 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 800073e:	2000      	movs	r0, #0
 8000740:	f7ff ff0e 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff ff0b 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 800074a:	207f      	movs	r0, #127	; 0x7f
 800074c:	f7ff ff08 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8000750:	202b      	movs	r0, #43	; 0x2b
 8000752:	f7ff fedf 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff ff02 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff feff 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff fefc 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 8000768:	209f      	movs	r0, #159	; 0x9f
 800076a:	f7ff fef9 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 800076e:	2036      	movs	r0, #54	; 0x36
 8000770:	f7ff fed0 	bl	8000514 <ILI9163_writeCommand>
	if(rotation)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d003      	beq.n	8000782 <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 800077a:	20a8      	movs	r0, #168	; 0xa8
 800077c:	f7ff fef0 	bl	8000560 <ILI9163_writeData>
 8000780:	e002      	b.n	8000788 <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 8000782:	2068      	movs	r0, #104	; 0x68
 8000784:	f7ff feec 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 8000788:	2013      	movs	r0, #19
 800078a:	f7ff fec3 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 800078e:	2029      	movs	r0, #41	; 0x29
 8000790:	f7ff fec0 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 8000794:	202c      	movs	r0, #44	; 0x2c
 8000796:	f7ff febd 	bl	8000514 <ILI9163_writeCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020c00 	.word	0x40020c00

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fdc1 	bl	8001336 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f836 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 f94c 	bl	8000a54 <MX_GPIO_Init>
  MX_DMA_Init();
 80007bc:	f000 f92c 	bl	8000a18 <MX_DMA_Init>
  MX_SPI1_Init();
 80007c0:	f000 f898 	bl	80008f4 <MX_SPI1_Init>
  MX_TIM14_Init();
 80007c4:	f000 f8d4 	bl	8000970 <MX_TIM14_Init>
  MX_USART6_UART_Init();
 80007c8:	f000 f8f6 	bl	80009b8 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 80007cc:	f009 fe36 	bl	800a43c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  ILI9163_init(0);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff ff03 	bl	80005dc <ILI9163_init>
//  char *message = "STM32 is ready\r\n";
//   HAL_UART_Transmit(&huart6, (uint8_t *)message, strlen(message), HAL_MAX_DELAY); // Send message over USART6

   // Start receiving data in interrupt mode

   HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
 80007d6:	2201      	movs	r2, #1
 80007d8:	490d      	ldr	r1, [pc, #52]	; (8000810 <main+0x64>)
 80007da:	480e      	ldr	r0, [pc, #56]	; (8000814 <main+0x68>)
 80007dc:	f005 f82b 	bl	8005836 <HAL_UART_Receive_IT>
	  //char *dataToSend = "Hello Bluetooth!";

	  // Check if data is received from USB CDC
	  // Check if data is received from USB CDC

	  statePinStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0); // Replace GPIOx with the actual GPIO port and STATE_PIN with the actual pin number
 80007e0:	2101      	movs	r1, #1
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <main+0x6c>)
 80007e4:	f001 fc62 	bl	80020ac <HAL_GPIO_ReadPin>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <main+0x70>)
 80007ee:	701a      	strb	r2, [r3, #0]

	  if(statePinStatus == GPIO_PIN_SET) {
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <main+0x70>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d105      	bne.n	8000804 <main+0x58>
	          // The module is connected to another Bluetooth device
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn on LED
 80007f8:	2201      	movs	r2, #1
 80007fa:	2101      	movs	r1, #1
 80007fc:	4808      	ldr	r0, [pc, #32]	; (8000820 <main+0x74>)
 80007fe:	f001 fc6d 	bl	80020dc <HAL_GPIO_WritePin>
 8000802:	e7ed      	b.n	80007e0 <main+0x34>
//	              }
	          }

	      else {
	         // The module is not connected
	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn off LED
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <main+0x74>)
 800080a:	f001 fc67 	bl	80020dc <HAL_GPIO_WritePin>
	  statePinStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0); // Replace GPIOx with the actual GPIO port and STATE_PIN with the actual pin number
 800080e:	e7e7      	b.n	80007e0 <main+0x34>
 8000810:	20000334 	.word	0x20000334
 8000814:	200002a8 	.word	0x200002a8
 8000818:	40021800 	.word	0x40021800
 800081c:	20000721 	.word	0x20000721
 8000820:	40020400 	.word	0x40020400

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	; 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	2230      	movs	r2, #48	; 0x30
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f00a fc2e 	bl	800b094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000848:	f002 ff3e 	bl	80036c8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <SystemClock_Config+0xc8>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	4a26      	ldr	r2, [pc, #152]	; (80008ec <SystemClock_Config+0xc8>)
 8000852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
 8000858:	4b24      	ldr	r3, [pc, #144]	; (80008ec <SystemClock_Config+0xc8>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <SystemClock_Config+0xcc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800086c:	4a20      	ldr	r2, [pc, #128]	; (80008f0 <SystemClock_Config+0xcc>)
 800086e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <SystemClock_Config+0xcc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000880:	2301      	movs	r3, #1
 8000882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000884:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000894:	2304      	movs	r3, #4
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000898:	2348      	movs	r3, #72	; 0x48
 800089a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008a0:	2303      	movs	r3, #3
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 ff1d 	bl	80036e8 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b4:	f000 f9c8 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2302      	movs	r3, #2
 80008be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	2102      	movs	r1, #2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 f9ab 	bl	8003c30 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008e0:	f000 f9b2 	bl	8000c48 <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	3750      	adds	r7, #80	; 0x50
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_SPI1_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <MX_SPI1_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_SPI1_Init+0x74>)
 8000900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_SPI1_Init+0x74>)
 800090e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000912:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_SPI1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_SPI1_Init+0x74>)
 8000922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000926:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_SPI1_Init+0x74>)
 800092a:	2208      	movs	r2, #8
 800092c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_SPI1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_SPI1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_SPI1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_SPI1_Init+0x74>)
 8000942:	2207      	movs	r2, #7
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_SPI1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_SPI1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_SPI1_Init+0x74>)
 8000954:	f003 ff82 	bl	800485c <HAL_SPI_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800095e:	f000 f973 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000198 	.word	0x20000198
 800096c:	40013000 	.word	0x40013000

08000970 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_TIM14_Init+0x40>)
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <MX_TIM14_Init+0x44>)
 8000978:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_TIM14_Init+0x40>)
 800097c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000980:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_TIM14_Init+0x40>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_TIM14_Init+0x40>)
 800098a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800098e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_TIM14_Init+0x40>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_TIM14_Init+0x40>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_TIM14_Init+0x40>)
 800099e:	f004 fc13 	bl	80051c8 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80009a8:	f000 f94e 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000025c 	.word	0x2000025c
 80009b4:	40002000 	.word	0x40002000

080009b8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <MX_USART6_UART_Init+0x5c>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USART6_UART_Init+0x58>)
 80009fc:	f004 fe4a 	bl	8005694 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 f91f 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200002a8 	.word	0x200002a8
 8000a14:	40011400 	.word	0x40011400

08000a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_DMA_Init+0x38>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <MX_DMA_Init+0x38>)
 8000a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_DMA_Init+0x38>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	203b      	movs	r0, #59	; 0x3b
 8000a3c:	f000 fdd7 	bl	80015ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a40:	203b      	movs	r0, #59	; 0x3b
 8000a42:	f000 fdf0 	bl	8001626 <HAL_NVIC_EnableIRQ>

}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	; 0x30
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a6a:	4b4f      	ldr	r3, [pc, #316]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a4e      	ldr	r2, [pc, #312]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000a70:	f043 0310 	orr.w	r3, r3, #16
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b4c      	ldr	r3, [pc, #304]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0310 	and.w	r3, r3, #16
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b49      	ldr	r3, [pc, #292]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a48      	ldr	r2, [pc, #288]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9a:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a42      	ldr	r2, [pc, #264]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b40      	ldr	r3, [pc, #256]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b3d      	ldr	r3, [pc, #244]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a3c      	ldr	r2, [pc, #240]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b3a      	ldr	r3, [pc, #232]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a36      	ldr	r2, [pc, #216]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a30      	ldr	r2, [pc, #192]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <MX_GPIO_Init+0x154>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13
 8000afa:	2200      	movs	r2, #0
 8000afc:	f64a 3103 	movw	r1, #43779	; 0xab03
 8000b00:	482a      	ldr	r0, [pc, #168]	; (8000bac <MX_GPIO_Init+0x158>)
 8000b02:	f001 faeb 	bl	80020dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b06:	2320      	movs	r3, #32
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b0a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <MX_GPIO_Init+0x15c>)
 8000b1c:	f001 f91a 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 8000b20:	f240 3301 	movw	r3, #769	; 0x301
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	481c      	ldr	r0, [pc, #112]	; (8000bac <MX_GPIO_Init+0x158>)
 8000b3a:	f001 f90b 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB11 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 8000b3e:	f64a 0302 	movw	r3, #43010	; 0xa802
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <MX_GPIO_Init+0x158>)
 8000b58:	f001 f8fc 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ble_state_Pin */
  GPIO_InitStruct.Pin = ble_state_Pin;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ble_state_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <MX_GPIO_Init+0x160>)
 8000b70:	f001 f8f0 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000b74:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <MX_GPIO_Init+0x164>)
 8000b8c:	f001 f8e2 	bl	8001d54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2017      	movs	r0, #23
 8000b96:	f000 fd2a 	bl	80015ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b9a:	2017      	movs	r0, #23
 8000b9c:	f000 fd43 	bl	8001626 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba0:	bf00      	nop
 8000ba2:	3730      	adds	r7, #48	; 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40021800 	.word	0x40021800
 8000bb8:	40020800 	.word	0x40020800

08000bbc <HAL_UART_RxCpltCallback>:
    }
    rxIn[i] = '\0'; // Null-terminate the string
    // Print the response (implement this according to your needs)
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a1a      	ldr	r2, [pc, #104]	; (8000c34 <HAL_UART_RxCpltCallback+0x78>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12e      	bne.n	8000c2c <HAL_UART_RxCpltCallback+0x70>
    // Print the received byte for debugging
    HAL_UART_Transmit(&huart6, (uint8_t *)receiveBuffer, 1, HAL_MAX_DELAY); // Echo the byte
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4918      	ldr	r1, [pc, #96]	; (8000c38 <HAL_UART_RxCpltCallback+0x7c>)
 8000bd6:	4819      	ldr	r0, [pc, #100]	; (8000c3c <HAL_UART_RxCpltCallback+0x80>)
 8000bd8:	f004 fdaa 	bl	8005730 <HAL_UART_Transmit>

    // Append received byte to receivedData buffer
    receivedData[receivedDataIndex++] = receiveBuffer[0];
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_UART_RxCpltCallback+0x84>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	1c5a      	adds	r2, r3, #1
 8000be2:	b2d1      	uxtb	r1, r2
 8000be4:	4a16      	ldr	r2, [pc, #88]	; (8000c40 <HAL_UART_RxCpltCallback+0x84>)
 8000be6:	7011      	strb	r1, [r2, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <HAL_UART_RxCpltCallback+0x7c>)
 8000bec:	7819      	ldrb	r1, [r3, #0]
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_UART_RxCpltCallback+0x88>)
 8000bf0:	5499      	strb	r1, [r3, r2]

    // Check for end of message or buffer overflow
    if (receiveBuffer[0] == '\n' || receivedDataIndex >= sizeof(receivedData) - 1) {
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_UART_RxCpltCallback+0x7c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b0a      	cmp	r3, #10
 8000bf8:	d113      	bne.n	8000c22 <HAL_UART_RxCpltCallback+0x66>
      // Null-terminate the string and reset index
      receivedData[receivedDataIndex] = '\0';
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_UART_RxCpltCallback+0x84>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_UART_RxCpltCallback+0x88>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	5499      	strb	r1, [r3, r2]
      receivedDataIndex = 0;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_UART_RxCpltCallback+0x84>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]

      // Echo received data back to the sender for confirmation
      HAL_UART_Transmit(&huart6, (uint8_t *)receivedData, strlen(receivedData), HAL_MAX_DELAY);
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <HAL_UART_RxCpltCallback+0x88>)
 8000c0e:	f7ff fafb 	bl	8000208 <strlen>
 8000c12:	4603      	mov	r3, r0
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	490a      	ldr	r1, [pc, #40]	; (8000c44 <HAL_UART_RxCpltCallback+0x88>)
 8000c1c:	4807      	ldr	r0, [pc, #28]	; (8000c3c <HAL_UART_RxCpltCallback+0x80>)
 8000c1e:	f004 fd87 	bl	8005730 <HAL_UART_Transmit>
    }

    // Re-enable UART receive interrupt for the next byte
    HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
 8000c22:	2201      	movs	r2, #1
 8000c24:	4904      	ldr	r1, [pc, #16]	; (8000c38 <HAL_UART_RxCpltCallback+0x7c>)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_UART_RxCpltCallback+0x80>)
 8000c28:	f004 fe05 	bl	8005836 <HAL_UART_Receive_IT>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40011400 	.word	0x40011400
 8000c38:	20000334 	.word	0x20000334
 8000c3c:	200002a8 	.word	0x200002a8
 8000c40:	20000720 	.word	0x20000720
 8000c44:	20000338 	.word	0x20000338

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <HAL_MspInit+0x44>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <HAL_MspInit+0x44>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <HAL_MspInit+0x44>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_MspInit+0x44>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <HAL_MspInit+0x44>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_MspInit+0x44>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a37      	ldr	r2, [pc, #220]	; (8000d98 <HAL_SPI_MspInit+0xfc>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d168      	bne.n	8000d90 <HAL_SPI_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cbe:	4b37      	ldr	r3, [pc, #220]	; (8000d9c <HAL_SPI_MspInit+0x100>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a36      	ldr	r2, [pc, #216]	; (8000d9c <HAL_SPI_MspInit+0x100>)
 8000cc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <HAL_SPI_MspInit+0x100>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <HAL_SPI_MspInit+0x100>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a30      	ldr	r2, [pc, #192]	; (8000d9c <HAL_SPI_MspInit+0x100>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <HAL_SPI_MspInit+0x100>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cee:	23e0      	movs	r3, #224	; 0xe0
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cfe:	2305      	movs	r3, #5
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4825      	ldr	r0, [pc, #148]	; (8000da0 <HAL_SPI_MspInit+0x104>)
 8000d0a:	f001 f823 	bl	8001d54 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000d0e:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d10:	4a25      	ldr	r2, [pc, #148]	; (8000da8 <HAL_SPI_MspInit+0x10c>)
 8000d12:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d16:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d1a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d1e:	2240      	movs	r2, #64	; 0x40
 8000d20:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d2e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d36:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d3e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d4e:	2204      	movs	r2, #4
 8000d50:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d64:	480f      	ldr	r0, [pc, #60]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d66:	f000 fc79 	bl	800165c <HAL_DMA_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_SPI_MspInit+0xd8>
    {
      Error_Handler();
 8000d70:	f7ff ff6a 	bl	8000c48 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d78:	655a      	str	r2, [r3, #84]	; 0x54
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_SPI_MspInit+0x108>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	2023      	movs	r0, #35	; 0x23
 8000d86:	f000 fc32 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d8a:	2023      	movs	r0, #35	; 0x23
 8000d8c:	f000 fc4b 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	; 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40013000 	.word	0x40013000
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	200001fc 	.word	0x200001fc
 8000da8:	40026458 	.word	0x40026458

08000dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <HAL_TIM_Base_MspInit+0x44>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d113      	bne.n	8000de6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <HAL_TIM_Base_MspInit+0x48>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <HAL_TIM_Base_MspInit+0x48>)
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_TIM_Base_MspInit+0x48>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	202d      	movs	r0, #45	; 0x2d
 8000ddc:	f000 fc07 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000de0:	202d      	movs	r0, #45	; 0x2d
 8000de2:	f000 fc20 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40002000 	.word	0x40002000
 8000df4:	40023800 	.word	0x40023800

08000df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0aa      	sub	sp, #168	; 0xa8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	2284      	movs	r2, #132	; 0x84
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f00a f93b 	bl	800b094 <memset>
  if(huart->Instance==USART6)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <HAL_UART_MspInit+0xc4>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d144      	bne.n	8000eb2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000e28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	4618      	mov	r0, r3
 8000e38:	f003 f920 	bl	800407c <HAL_RCCEx_PeriphCLKConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e42:	f7ff ff01 	bl	8000c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <HAL_UART_MspInit+0xc8>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ec0 <HAL_UART_MspInit+0xc8>)
 8000e4c:	f043 0320 	orr.w	r3, r3, #32
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_UART_MspInit+0xc8>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f003 0320 	and.w	r3, r3, #32
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_UART_MspInit+0xc8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0xc8>)
 8000e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_UART_MspInit+0xc8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000e76:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000e7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e90:	2308      	movs	r3, #8
 8000e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e96:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <HAL_UART_MspInit+0xcc>)
 8000e9e:	f000 ff59 	bl	8001d54 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2047      	movs	r0, #71	; 0x47
 8000ea8:	f000 fba1 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000eac:	2047      	movs	r0, #71	; 0x47
 8000eae:	f000 fbba 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	37a8      	adds	r7, #168	; 0xa8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40011400 	.word	0x40011400
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40021800 	.word	0x40021800

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <UsageFault_Handler+0x4>

08000eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1c:	f000 fa48 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	key = 0;
 8000f2a:	4b51      	ldr	r3, [pc, #324]	; (8001070 <EXTI9_5_IRQHandler+0x14c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	801a      	strh	r2, [r3, #0]
		for(uint8_t c=0 ; c<4 ; c++){
 8000f30:	2300      	movs	r3, #0
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	e075      	b.n	8001022 <EXTI9_5_IRQHandler+0xfe>
			for(uint8_t i=0 ; i<4 ; i++){
 8000f36:	2300      	movs	r3, #0
 8000f38:	71bb      	strb	r3, [r7, #6]
 8000f3a:	e00e      	b.n	8000f5a <EXTI9_5_IRQHandler+0x36>
				HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	4a4d      	ldr	r2, [pc, #308]	; (8001074 <EXTI9_5_IRQHandler+0x150>)
 8000f40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	4a4c      	ldr	r2, [pc, #304]	; (8001078 <EXTI9_5_IRQHandler+0x154>)
 8000f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f001 f8c4 	bl	80020dc <HAL_GPIO_WritePin>
			for(uint8_t i=0 ; i<4 ; i++){
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	3301      	adds	r3, #1
 8000f58:	71bb      	strb	r3, [r7, #6]
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d9ed      	bls.n	8000f3c <EXTI9_5_IRQHandler+0x18>
			}
			HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4a44      	ldr	r2, [pc, #272]	; (8001074 <EXTI9_5_IRQHandler+0x150>)
 8000f64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4a43      	ldr	r2, [pc, #268]	; (8001078 <EXTI9_5_IRQHandler+0x154>)
 8000f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	f001 f8b2 	bl	80020dc <HAL_GPIO_WritePin>
			for(uint8_t r=0 ; r<4 ; r++){
 8000f78:	2300      	movs	r3, #0
 8000f7a:	717b      	strb	r3, [r7, #5]
 8000f7c:	e04b      	b.n	8001016 <EXTI9_5_IRQHandler+0xf2>
				if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000f7e:	797b      	ldrb	r3, [r7, #5]
 8000f80:	4a3e      	ldr	r2, [pc, #248]	; (800107c <EXTI9_5_IRQHandler+0x158>)
 8000f82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f86:	797b      	ldrb	r3, [r7, #5]
 8000f88:	493d      	ldr	r1, [pc, #244]	; (8001080 <EXTI9_5_IRQHandler+0x15c>)
 8000f8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4610      	mov	r0, r2
 8000f92:	f001 f88b 	bl	80020ac <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d139      	bne.n	8001010 <EXTI9_5_IRQHandler+0xec>
					if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000f9c:	797b      	ldrb	r3, [r7, #5]
 8000f9e:	4a37      	ldr	r2, [pc, #220]	; (800107c <EXTI9_5_IRQHandler+0x158>)
 8000fa0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fa4:	797b      	ldrb	r3, [r7, #5]
 8000fa6:	4936      	ldr	r1, [pc, #216]	; (8001080 <EXTI9_5_IRQHandler+0x15c>)
 8000fa8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4610      	mov	r0, r2
 8000fb0:	f001 f87c 	bl	80020ac <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d12a      	bne.n	8001010 <EXTI9_5_IRQHandler+0xec>
						key |= 1<<c;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <EXTI9_5_IRQHandler+0x14c>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <EXTI9_5_IRQHandler+0x14c>)
 8000fd2:	801a      	strh	r2, [r3, #0]
						key |= 1<<(r+8);
 8000fd4:	797b      	ldrb	r3, [r7, #5]
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	2201      	movs	r2, #1
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	4b23      	ldr	r3, [pc, #140]	; (8001070 <EXTI9_5_IRQHandler+0x14c>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <EXTI9_5_IRQHandler+0x14c>)
 8000fee:	801a      	strh	r2, [r3, #0]
						while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000ff0:	bf00      	nop
 8000ff2:	797b      	ldrb	r3, [r7, #5]
 8000ff4:	4a21      	ldr	r2, [pc, #132]	; (800107c <EXTI9_5_IRQHandler+0x158>)
 8000ff6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ffa:	797b      	ldrb	r3, [r7, #5]
 8000ffc:	4920      	ldr	r1, [pc, #128]	; (8001080 <EXTI9_5_IRQHandler+0x15c>)
 8000ffe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001002:	4619      	mov	r1, r3
 8001004:	4610      	mov	r0, r2
 8001006:	f001 f851 	bl	80020ac <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <EXTI9_5_IRQHandler+0xce>
			for(uint8_t r=0 ; r<4 ; r++){
 8001010:	797b      	ldrb	r3, [r7, #5]
 8001012:	3301      	adds	r3, #1
 8001014:	717b      	strb	r3, [r7, #5]
 8001016:	797b      	ldrb	r3, [r7, #5]
 8001018:	2b03      	cmp	r3, #3
 800101a:	d9b0      	bls.n	8000f7e <EXTI9_5_IRQHandler+0x5a>
		for(uint8_t c=0 ; c<4 ; c++){
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	3301      	adds	r3, #1
 8001020:	71fb      	strb	r3, [r7, #7]
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b03      	cmp	r3, #3
 8001026:	d986      	bls.n	8000f36 <EXTI9_5_IRQHandler+0x12>
					}
				}
			}
		}

		keyChar = KeyPadGetChar(key);
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <EXTI9_5_IRQHandler+0x14c>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f85f 	bl	80010f0 <KeyPadGetChar>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <EXTI9_5_IRQHandler+0x160>)
 8001038:	701a      	strb	r2, [r3, #0]
		key = 0;
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <EXTI9_5_IRQHandler+0x14c>)
 800103c:	2200      	movs	r2, #0
 800103e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f64a 0102 	movw	r1, #43010	; 0xa802
 8001046:	4810      	ldr	r0, [pc, #64]	; (8001088 <EXTI9_5_IRQHandler+0x164>)
 8001048:	f001 f848 	bl	80020dc <HAL_GPIO_WritePin>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800104c:	2020      	movs	r0, #32
 800104e:	f001 f85f 	bl	8002110 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001052:	2040      	movs	r0, #64	; 0x40
 8001054:	f001 f85c 	bl	8002110 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001058:	2080      	movs	r0, #128	; 0x80
 800105a:	f001 f859 	bl	8002110 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800105e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001062:	f001 f855 	bl	8002110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000332 	.word	0x20000332
 8001074:	20000000 	.word	0x20000000
 8001078:	0800b214 	.word	0x0800b214
 800107c:	20000010 	.word	0x20000010
 8001080:	0800b21c 	.word	0x0800b21c
 8001084:	20000330 	.word	0x20000330
 8001088:	40020400 	.word	0x40020400

0800108c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <SPI1_IRQHandler+0x10>)
 8001092:	f003 fdfd 	bl	8004c90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000198 	.word	0x20000198

080010a0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80010a6:	f004 f8e6 	bl	8005276 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000025c 	.word	0x2000025c

080010b4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <DMA2_Stream3_IRQHandler+0x10>)
 80010ba:	f000 fc0f 	bl	80018dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200001fc 	.word	0x200001fc

080010c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <OTG_FS_IRQHandler+0x10>)
 80010ce:	f001 f988 	bl	80023e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20001c0c 	.word	0x20001c0c

080010dc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <USART6_IRQHandler+0x10>)
 80010e2:	f004 fbed 	bl	80058c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200002a8 	.word	0x200002a8

080010f0 <KeyPadGetChar>:

/* USER CODE BEGIN 1 */
char KeyPadGetChar(uint16_t	key)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
  switch(key)
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	f640 0208 	movw	r2, #2056	; 0x808
 8001100:	4293      	cmp	r3, r2
 8001102:	f300 809f 	bgt.w	8001244 <KeyPadGetChar+0x154>
 8001106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800110a:	dc1a      	bgt.n	8001142 <KeyPadGetChar+0x52>
 800110c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8001110:	f300 8098 	bgt.w	8001244 <KeyPadGetChar+0x154>
 8001114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001118:	dc2a      	bgt.n	8001170 <KeyPadGetChar+0x80>
 800111a:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800111e:	f300 8091 	bgt.w	8001244 <KeyPadGetChar+0x154>
 8001122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001126:	dc3b      	bgt.n	80011a0 <KeyPadGetChar+0xb0>
 8001128:	2b00      	cmp	r3, #0
 800112a:	d069      	beq.n	8001200 <KeyPadGetChar+0x110>
 800112c:	2b00      	cmp	r3, #0
 800112e:	f2c0 8089 	blt.w	8001244 <KeyPadGetChar+0x154>
 8001132:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8001136:	f300 8085 	bgt.w	8001244 <KeyPadGetChar+0x154>
 800113a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800113e:	dc47      	bgt.n	80011d0 <KeyPadGetChar+0xe0>
 8001140:	e080      	b.n	8001244 <KeyPadGetChar+0x154>
 8001142:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 8001146:	2b07      	cmp	r3, #7
 8001148:	d87c      	bhi.n	8001244 <KeyPadGetChar+0x154>
 800114a:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <KeyPadGetChar+0x60>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	08001211 	.word	0x08001211
 8001154:	08001221 	.word	0x08001221
 8001158:	08001245 	.word	0x08001245
 800115c:	08001231 	.word	0x08001231
 8001160:	08001245 	.word	0x08001245
 8001164:	08001245 	.word	0x08001245
 8001168:	08001245 	.word	0x08001245
 800116c:	08001241 	.word	0x08001241
 8001170:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8001174:	2b07      	cmp	r3, #7
 8001176:	d865      	bhi.n	8001244 <KeyPadGetChar+0x154>
 8001178:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <KeyPadGetChar+0x90>)
 800117a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117e:	bf00      	nop
 8001180:	0800120d 	.word	0x0800120d
 8001184:	0800121d 	.word	0x0800121d
 8001188:	08001245 	.word	0x08001245
 800118c:	0800122d 	.word	0x0800122d
 8001190:	08001245 	.word	0x08001245
 8001194:	08001245 	.word	0x08001245
 8001198:	08001245 	.word	0x08001245
 800119c:	0800123d 	.word	0x0800123d
 80011a0:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80011a4:	2b07      	cmp	r3, #7
 80011a6:	d84d      	bhi.n	8001244 <KeyPadGetChar+0x154>
 80011a8:	a201      	add	r2, pc, #4	; (adr r2, 80011b0 <KeyPadGetChar+0xc0>)
 80011aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ae:	bf00      	nop
 80011b0:	08001209 	.word	0x08001209
 80011b4:	08001219 	.word	0x08001219
 80011b8:	08001245 	.word	0x08001245
 80011bc:	08001229 	.word	0x08001229
 80011c0:	08001245 	.word	0x08001245
 80011c4:	08001245 	.word	0x08001245
 80011c8:	08001245 	.word	0x08001245
 80011cc:	08001239 	.word	0x08001239
 80011d0:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	d835      	bhi.n	8001244 <KeyPadGetChar+0x154>
 80011d8:	a201      	add	r2, pc, #4	; (adr r2, 80011e0 <KeyPadGetChar+0xf0>)
 80011da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011de:	bf00      	nop
 80011e0:	08001205 	.word	0x08001205
 80011e4:	08001215 	.word	0x08001215
 80011e8:	08001245 	.word	0x08001245
 80011ec:	08001225 	.word	0x08001225
 80011f0:	08001245 	.word	0x08001245
 80011f4:	08001245 	.word	0x08001245
 80011f8:	08001245 	.word	0x08001245
 80011fc:	08001235 	.word	0x08001235
  {
    case 0x0000:
      return 0;
 8001200:	2300      	movs	r3, #0
 8001202:	e020      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0101:
			return '1';
 8001204:	2331      	movs	r3, #49	; 0x31
 8001206:	e01e      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0201:
			return '2';
 8001208:	2332      	movs	r3, #50	; 0x32
 800120a:	e01c      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0401:
			return '3';
 800120c:	2333      	movs	r3, #51	; 0x33
 800120e:	e01a      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0801:
			return 'A';
 8001210:	2341      	movs	r3, #65	; 0x41
 8001212:	e018      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0102:
			return '4';
 8001214:	2334      	movs	r3, #52	; 0x34
 8001216:	e016      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0202:
			return '5';
 8001218:	2335      	movs	r3, #53	; 0x35
 800121a:	e014      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0402:
			return '6';
 800121c:	2336      	movs	r3, #54	; 0x36
 800121e:	e012      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0802:
			return 'B';
 8001220:	2342      	movs	r3, #66	; 0x42
 8001222:	e010      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0104:
			return '7';
 8001224:	2337      	movs	r3, #55	; 0x37
 8001226:	e00e      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0204:
			return '8';
 8001228:	2338      	movs	r3, #56	; 0x38
 800122a:	e00c      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0404:
			return '9';
 800122c:	2339      	movs	r3, #57	; 0x39
 800122e:	e00a      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0804:
			return 'C';
 8001230:	2343      	movs	r3, #67	; 0x43
 8001232:	e008      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0108:
			return '*';
 8001234:	232a      	movs	r3, #42	; 0x2a
 8001236:	e006      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0208:
			return '0';
 8001238:	2330      	movs	r3, #48	; 0x30
 800123a:	e004      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0408:
			return '#';
 800123c:	2323      	movs	r3, #35	; 0x23
 800123e:	e002      	b.n	8001246 <KeyPadGetChar+0x156>
		case 0x0808:
			return 'D';
 8001240:	2344      	movs	r3, #68	; 0x44
 8001242:	e000      	b.n	8001246 <KeyPadGetChar+0x156>
		default:
			return 0;
 8001244:	2300      	movs	r3, #0
	}
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop

08001254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <_sbrk+0x5c>)
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <_sbrk+0x60>)
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d102      	bne.n	8001276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <_sbrk+0x64>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <_sbrk+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	429a      	cmp	r2, r3
 8001282:	d207      	bcs.n	8001294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001284:	f009 ff1e 	bl	800b0c4 <__errno>
 8001288:	4603      	mov	r3, r0
 800128a:	220c      	movs	r2, #12
 800128c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	e009      	b.n	80012a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <_sbrk+0x64>)
 80012a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20050000 	.word	0x20050000
 80012b4:	00000400 	.word	0x00000400
 80012b8:	20000724 	.word	0x20000724
 80012bc:	20002260 	.word	0x20002260

080012c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <SystemInit+0x20>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <SystemInit+0x20>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800131c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ea:	490e      	ldr	r1, [pc, #56]	; (8001324 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0b      	ldr	r2, [pc, #44]	; (800132c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001300:	4c0b      	ldr	r4, [pc, #44]	; (8001330 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800130e:	f7ff ffd7 	bl	80012c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001312:	f009 fedd 	bl	800b0d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001316:	f7ff fa49 	bl	80007ac <main>
  bx  lr    
 800131a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800131c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001324:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001328:	0800b254 	.word	0x0800b254
  ldr r2, =_sbss
 800132c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001330:	2000225c 	.word	0x2000225c

08001334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC_IRQHandler>

08001336 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133a:	2003      	movs	r0, #3
 800133c:	f000 f94c 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001340:	2000      	movs	r0, #0
 8001342:	f000 f805 	bl	8001350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001346:	f7ff fc85 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x54>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_InitTick+0x58>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	fbb3 f3f1 	udiv	r3, r3, r1
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f967 	bl	8001642 <HAL_SYSTICK_Config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00e      	b.n	800139c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d80a      	bhi.n	800139a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001384:	2200      	movs	r2, #0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f000 f92f 	bl	80015ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4a06      	ldr	r2, [pc, #24]	; (80013ac <HAL_InitTick+0x5c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000020 	.word	0x20000020
 80013a8:	20000028 	.word	0x20000028
 80013ac:	20000024 	.word	0x20000024

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000028 	.word	0x20000028
 80013d4:	20000728 	.word	0x20000728

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000728 	.word	0x20000728

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff ffee 	bl	80013d8 <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001416:	bf00      	nop
 8001418:	f7ff ffde 	bl	80013d8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000028 	.word	0x20000028

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <__NVIC_SetPriorityGrouping+0x40>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	4313      	orrs	r3, r2
 8001464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001466:	4a04      	ldr	r2, [pc, #16]	; (8001478 <__NVIC_SetPriorityGrouping+0x40>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	60d3      	str	r3, [r2, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00
 800147c:	05fa0000 	.word	0x05fa0000

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f7ff ff8e 	bl	80014d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff29 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff3e 	bl	8001480 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff8e 	bl	800152c <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5d 	bl	80014d8 <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff31 	bl	800149c <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa2 	bl	8001594 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff feb6 	bl	80013d8 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e099      	b.n	80017ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2202      	movs	r2, #2
 800167c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0201 	bic.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001698:	e00f      	b.n	80016ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800169a:	f7ff fe9d 	bl	80013d8 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b05      	cmp	r3, #5
 80016a6:	d908      	bls.n	80016ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2220      	movs	r2, #32
 80016ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2203      	movs	r2, #3
 80016b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e078      	b.n	80017ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1e8      	bne.n	800169a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <HAL_DMA_Init+0x158>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	4313      	orrs	r3, r2
 800170a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	2b04      	cmp	r3, #4
 8001712:	d107      	bne.n	8001724 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	4313      	orrs	r3, r2
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4313      	orrs	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f023 0307 	bic.w	r3, r3, #7
 800173a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	4313      	orrs	r3, r2
 8001744:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	2b04      	cmp	r3, #4
 800174c:	d117      	bne.n	800177e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4313      	orrs	r3, r2
 8001756:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00e      	beq.n	800177e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 fa7b 	bl	8001c5c <DMA_CheckFifoParam>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d008      	beq.n	800177e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2240      	movs	r2, #64	; 0x40
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800177a:	2301      	movs	r3, #1
 800177c:	e016      	b.n	80017ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fa32 	bl	8001bf0 <DMA_CalcBaseAndBitshift>
 800178c:	4603      	mov	r3, r0
 800178e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001794:	223f      	movs	r2, #63	; 0x3f
 8001796:	409a      	lsls	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	f010803f 	.word	0xf010803f

080017b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017c6:	f7ff fe07 	bl	80013d8 <HAL_GetTick>
 80017ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d008      	beq.n	80017ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e052      	b.n	8001890 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0216 	bic.w	r2, r2, #22
 80017f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001808:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	2b00      	cmp	r3, #0
 8001810:	d103      	bne.n	800181a <HAL_DMA_Abort+0x62>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001816:	2b00      	cmp	r3, #0
 8001818:	d007      	beq.n	800182a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0208 	bic.w	r2, r2, #8
 8001828:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800183a:	e013      	b.n	8001864 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800183c:	f7ff fdcc 	bl	80013d8 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b05      	cmp	r3, #5
 8001848:	d90c      	bls.n	8001864 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2220      	movs	r2, #32
 800184e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2203      	movs	r2, #3
 8001854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e015      	b.n	8001890 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1e4      	bne.n	800183c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001876:	223f      	movs	r2, #63	; 0x3f
 8001878:	409a      	lsls	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d004      	beq.n	80018b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2280      	movs	r2, #128	; 0x80
 80018b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00c      	b.n	80018d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2205      	movs	r2, #5
 80018ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0201 	bic.w	r2, r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80018e8:	4b8e      	ldr	r3, [pc, #568]	; (8001b24 <HAL_DMA_IRQHandler+0x248>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a8e      	ldr	r2, [pc, #568]	; (8001b28 <HAL_DMA_IRQHandler+0x24c>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	0a9b      	lsrs	r3, r3, #10
 80018f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	2208      	movs	r2, #8
 8001908:	409a      	lsls	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4013      	ands	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d01a      	beq.n	8001948 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0204 	bic.w	r2, r2, #4
 800192e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001934:	2208      	movs	r2, #8
 8001936:	409a      	lsls	r2, r3
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194c:	2201      	movs	r2, #1
 800194e:	409a      	lsls	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d012      	beq.n	800197e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196a:	2201      	movs	r2, #1
 800196c:	409a      	lsls	r2, r3
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001976:	f043 0202 	orr.w	r2, r3, #2
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001982:	2204      	movs	r2, #4
 8001984:	409a      	lsls	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4013      	ands	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d012      	beq.n	80019b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00b      	beq.n	80019b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a0:	2204      	movs	r2, #4
 80019a2:	409a      	lsls	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ac:	f043 0204 	orr.w	r2, r3, #4
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b8:	2210      	movs	r2, #16
 80019ba:	409a      	lsls	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d043      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d03c      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d6:	2210      	movs	r2, #16
 80019d8:	409a      	lsls	r2, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d018      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d108      	bne.n	8001a0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d024      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
 8001a0a:	e01f      	b.n	8001a4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01b      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	4798      	blx	r3
 8001a1c:	e016      	b.n	8001a4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d107      	bne.n	8001a3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0208 	bic.w	r2, r2, #8
 8001a3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a50:	2220      	movs	r2, #32
 8001a52:	409a      	lsls	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 808f 	beq.w	8001b7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 8087 	beq.w	8001b7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	2220      	movs	r2, #32
 8001a74:	409a      	lsls	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d136      	bne.n	8001af4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0216 	bic.w	r2, r2, #22
 8001a94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	695a      	ldr	r2, [r3, #20]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aa4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d103      	bne.n	8001ab6 <HAL_DMA_IRQHandler+0x1da>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0208 	bic.w	r2, r2, #8
 8001ac4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	223f      	movs	r2, #63	; 0x3f
 8001acc:	409a      	lsls	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d07e      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	4798      	blx	r3
        }
        return;
 8001af2:	e079      	b.n	8001be8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d01d      	beq.n	8001b3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10d      	bne.n	8001b2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d031      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4798      	blx	r3
 8001b20:	e02c      	b.n	8001b7c <HAL_DMA_IRQHandler+0x2a0>
 8001b22:	bf00      	nop
 8001b24:	20000020 	.word	0x20000020
 8001b28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d023      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
 8001b3c:	e01e      	b.n	8001b7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10f      	bne.n	8001b6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0210 	bic.w	r2, r2, #16
 8001b5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d032      	beq.n	8001bea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d022      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2205      	movs	r2, #5
 8001b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	3301      	adds	r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d307      	bcc.n	8001bc4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f2      	bne.n	8001ba8 <HAL_DMA_IRQHandler+0x2cc>
 8001bc2:	e000      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bc4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	4798      	blx	r3
 8001be6:	e000      	b.n	8001bea <HAL_DMA_IRQHandler+0x30e>
        return;
 8001be8:	bf00      	nop
    }
  }
}
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	3b10      	subs	r3, #16
 8001c00:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <DMA_CalcBaseAndBitshift+0x60>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <DMA_CalcBaseAndBitshift+0x64>)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d908      	bls.n	8001c30 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <DMA_CalcBaseAndBitshift+0x68>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	1d1a      	adds	r2, r3, #4
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	659a      	str	r2, [r3, #88]	; 0x58
 8001c2e:	e006      	b.n	8001c3e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <DMA_CalcBaseAndBitshift+0x68>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	aaaaaaab 	.word	0xaaaaaaab
 8001c54:	0800b23c 	.word	0x0800b23c
 8001c58:	fffffc00 	.word	0xfffffc00

08001c5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d11f      	bne.n	8001cb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d856      	bhi.n	8001d2a <DMA_CheckFifoParam+0xce>
 8001c7c:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <DMA_CheckFifoParam+0x28>)
 8001c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c82:	bf00      	nop
 8001c84:	08001c95 	.word	0x08001c95
 8001c88:	08001ca7 	.word	0x08001ca7
 8001c8c:	08001c95 	.word	0x08001c95
 8001c90:	08001d2b 	.word	0x08001d2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d046      	beq.n	8001d2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ca4:	e043      	b.n	8001d2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cae:	d140      	bne.n	8001d32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cb4:	e03d      	b.n	8001d32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cbe:	d121      	bne.n	8001d04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d837      	bhi.n	8001d36 <DMA_CheckFifoParam+0xda>
 8001cc6:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <DMA_CheckFifoParam+0x70>)
 8001cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ccc:	08001cdd 	.word	0x08001cdd
 8001cd0:	08001ce3 	.word	0x08001ce3
 8001cd4:	08001cdd 	.word	0x08001cdd
 8001cd8:	08001cf5 	.word	0x08001cf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
      break;
 8001ce0:	e030      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d025      	beq.n	8001d3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cf2:	e022      	b.n	8001d3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cfc:	d11f      	bne.n	8001d3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d02:	e01c      	b.n	8001d3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d903      	bls.n	8001d12 <DMA_CheckFifoParam+0xb6>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d003      	beq.n	8001d18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d10:	e018      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
      break;
 8001d16:	e015      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00e      	beq.n	8001d42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
      break;
 8001d28:	e00b      	b.n	8001d42 <DMA_CheckFifoParam+0xe6>
      break;
 8001d2a:	bf00      	nop
 8001d2c:	e00a      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      break;
 8001d2e:	bf00      	nop
 8001d30:	e008      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      break;
 8001d32:	bf00      	nop
 8001d34:	e006      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      break;
 8001d36:	bf00      	nop
 8001d38:	e004      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      break;
 8001d3a:	bf00      	nop
 8001d3c:	e002      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d3e:	bf00      	nop
 8001d40:	e000      	b.n	8001d44 <DMA_CheckFifoParam+0xe8>
      break;
 8001d42:	bf00      	nop
    }
  } 
  
  return status; 
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	e175      	b.n	8002060 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d74:	2201      	movs	r2, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	f040 8164 	bne.w	800205a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d005      	beq.n	8001daa <HAL_GPIO_Init+0x56>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d130      	bne.n	8001e0c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de0:	2201      	movs	r2, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	f003 0201 	and.w	r2, r3, #1
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d017      	beq.n	8001e48 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d123      	bne.n	8001e9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	08da      	lsrs	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3208      	adds	r2, #8
 8001e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	08da      	lsrs	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3208      	adds	r2, #8
 8001e96:	69b9      	ldr	r1, [r7, #24]
 8001e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0203 	and.w	r2, r3, #3
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80be 	beq.w	800205a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	4b66      	ldr	r3, [pc, #408]	; (8002078 <HAL_GPIO_Init+0x324>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a65      	ldr	r2, [pc, #404]	; (8002078 <HAL_GPIO_Init+0x324>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b63      	ldr	r3, [pc, #396]	; (8002078 <HAL_GPIO_Init+0x324>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ef6:	4a61      	ldr	r2, [pc, #388]	; (800207c <HAL_GPIO_Init+0x328>)
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a58      	ldr	r2, [pc, #352]	; (8002080 <HAL_GPIO_Init+0x32c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d037      	beq.n	8001f92 <HAL_GPIO_Init+0x23e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a57      	ldr	r2, [pc, #348]	; (8002084 <HAL_GPIO_Init+0x330>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d031      	beq.n	8001f8e <HAL_GPIO_Init+0x23a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a56      	ldr	r2, [pc, #344]	; (8002088 <HAL_GPIO_Init+0x334>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d02b      	beq.n	8001f8a <HAL_GPIO_Init+0x236>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a55      	ldr	r2, [pc, #340]	; (800208c <HAL_GPIO_Init+0x338>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d025      	beq.n	8001f86 <HAL_GPIO_Init+0x232>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a54      	ldr	r2, [pc, #336]	; (8002090 <HAL_GPIO_Init+0x33c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01f      	beq.n	8001f82 <HAL_GPIO_Init+0x22e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a53      	ldr	r2, [pc, #332]	; (8002094 <HAL_GPIO_Init+0x340>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x22a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a52      	ldr	r2, [pc, #328]	; (8002098 <HAL_GPIO_Init+0x344>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0x226>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a51      	ldr	r2, [pc, #324]	; (800209c <HAL_GPIO_Init+0x348>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_GPIO_Init+0x222>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a50      	ldr	r2, [pc, #320]	; (80020a0 <HAL_GPIO_Init+0x34c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x21e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4f      	ldr	r2, [pc, #316]	; (80020a4 <HAL_GPIO_Init+0x350>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_GPIO_Init+0x21a>
 8001f6a:	2309      	movs	r3, #9
 8001f6c:	e012      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f6e:	230a      	movs	r3, #10
 8001f70:	e010      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f72:	2308      	movs	r3, #8
 8001f74:	e00e      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f76:	2307      	movs	r3, #7
 8001f78:	e00c      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f7a:	2306      	movs	r3, #6
 8001f7c:	e00a      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f7e:	2305      	movs	r3, #5
 8001f80:	e008      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f82:	2304      	movs	r3, #4
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f86:	2303      	movs	r3, #3
 8001f88:	e004      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e002      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f92:	2300      	movs	r3, #0
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	f002 0203 	and.w	r2, r2, #3
 8001f9a:	0092      	lsls	r2, r2, #2
 8001f9c:	4093      	lsls	r3, r2
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001fa4:	4935      	ldr	r1, [pc, #212]	; (800207c <HAL_GPIO_Init+0x328>)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	3302      	adds	r3, #2
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <HAL_GPIO_Init+0x354>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fd6:	4a34      	ldr	r2, [pc, #208]	; (80020a8 <HAL_GPIO_Init+0x354>)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fdc:	4b32      	ldr	r3, [pc, #200]	; (80020a8 <HAL_GPIO_Init+0x354>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002000:	4a29      	ldr	r2, [pc, #164]	; (80020a8 <HAL_GPIO_Init+0x354>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002006:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_GPIO_Init+0x354>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800202a:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <HAL_GPIO_Init+0x354>)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_GPIO_Init+0x354>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002054:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <HAL_GPIO_Init+0x354>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3301      	adds	r3, #1
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	2b0f      	cmp	r3, #15
 8002064:	f67f ae86 	bls.w	8001d74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	40013800 	.word	0x40013800
 8002080:	40020000 	.word	0x40020000
 8002084:	40020400 	.word	0x40020400
 8002088:	40020800 	.word	0x40020800
 800208c:	40020c00 	.word	0x40020c00
 8002090:	40021000 	.word	0x40021000
 8002094:	40021400 	.word	0x40021400
 8002098:	40021800 	.word	0x40021800
 800209c:	40021c00 	.word	0x40021c00
 80020a0:	40022000 	.word	0x40022000
 80020a4:	40022400 	.word	0x40022400
 80020a8:	40013c00 	.word	0x40013c00

080020ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	e001      	b.n	80020ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020f8:	e003      	b.n	8002102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	619a      	str	r2, [r3, #24]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	4013      	ands	r3, r2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002126:	4a05      	ldr	r2, [pc, #20]	; (800213c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	4618      	mov	r0, r3
 8002130:	f000 f806 	bl	8002140 <HAL_GPIO_EXTI_Callback>
  }
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40013c00 	.word	0x40013c00

08002140 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002156:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002158:	b08f      	sub	sp, #60	; 0x3c
 800215a:	af0a      	add	r7, sp, #40	; 0x28
 800215c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e116      	b.n	8002396 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f008 fb4c 	bl	800a820 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2203      	movs	r2, #3
 800218c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d102      	bne.n	80021a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 fe5b 	bl	8006e62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	687e      	ldr	r6, [r7, #4]
 80021b4:	466d      	mov	r5, sp
 80021b6:	f106 0410 	add.w	r4, r6, #16
 80021ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ca:	1d33      	adds	r3, r6, #4
 80021cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ce:	6838      	ldr	r0, [r7, #0]
 80021d0:	f004 fd3c 	bl	8006c4c <USB_CoreInit>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2202      	movs	r2, #2
 80021de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0d7      	b.n	8002396 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 fe49 	bl	8006e84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	e04a      	b.n	800228e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	333d      	adds	r3, #61	; 0x3d
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	333c      	adds	r3, #60	; 0x3c
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	b298      	uxth	r0, r3
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	3344      	adds	r3, #68	; 0x44
 8002234:	4602      	mov	r2, r0
 8002236:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	3340      	adds	r3, #64	; 0x40
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	3348      	adds	r3, #72	; 0x48
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	334c      	adds	r3, #76	; 0x4c
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	3354      	adds	r3, #84	; 0x54
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	3301      	adds	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	d3af      	bcc.n	80021f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e044      	b.n	8002328 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	3301      	adds	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	d3b5      	bcc.n	800229e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	687e      	ldr	r6, [r7, #4]
 800233a:	466d      	mov	r5, sp
 800233c:	f106 0410 	add.w	r4, r6, #16
 8002340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002348:	e894 0003 	ldmia.w	r4, {r0, r1}
 800234c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002350:	1d33      	adds	r3, r6, #4
 8002352:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002354:	6838      	ldr	r0, [r7, #0]
 8002356:	f004 fde1 	bl	8006f1c <USB_DevInit>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e014      	b.n	8002396 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	2b01      	cmp	r3, #1
 8002382:	d102      	bne.n	800238a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f001 f97b 	bl	8003680 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f005 ff2f 	bl	80081f2 <USB_DevDisconnect>

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800239e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_PCD_Start+0x16>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e012      	b.n	80023da <HAL_PCD_Start+0x3c>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f004 fd3d 	bl	8006e40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f005 fef0 	bl	80081b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023e2:	b590      	push	{r4, r7, lr}
 80023e4:	b08d      	sub	sp, #52	; 0x34
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f005 ffae 	bl	800835a <USB_GetMode>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 84b7 	bne.w	8002d74 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f005 ff12 	bl	8008234 <USB_ReadInterrupts>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 84ad 	beq.w	8002d72 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f005 feff 	bl	8008234 <USB_ReadInterrupts>
 8002436:	4603      	mov	r3, r0
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b02      	cmp	r3, #2
 800243e:	d107      	bne.n	8002450 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f002 0202 	and.w	r2, r2, #2
 800244e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f005 feed 	bl	8008234 <USB_ReadInterrupts>
 800245a:	4603      	mov	r3, r0
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b10      	cmp	r3, #16
 8002462:	d161      	bne.n	8002528 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0210 	bic.w	r2, r2, #16
 8002472:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f003 020f 	and.w	r2, r3, #15
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	0c5b      	lsrs	r3, r3, #17
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	2b02      	cmp	r3, #2
 800249e:	d124      	bne.n	80024ea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d035      	beq.n	8002518 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	6a38      	ldr	r0, [r7, #32]
 80024c0:	f005 fd24 	bl	8007f0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024d0:	441a      	add	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	6a1a      	ldr	r2, [r3, #32]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024e2:	441a      	add	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	621a      	str	r2, [r3, #32]
 80024e8:	e016      	b.n	8002518 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	0c5b      	lsrs	r3, r3, #17
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d110      	bne.n	8002518 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024fc:	2208      	movs	r2, #8
 80024fe:	4619      	mov	r1, r3
 8002500:	6a38      	ldr	r0, [r7, #32]
 8002502:	f005 fd03 	bl	8007f0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	6a1a      	ldr	r2, [r3, #32]
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002512:	441a      	add	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0210 	orr.w	r2, r2, #16
 8002526:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f005 fe81 	bl	8008234 <USB_ReadInterrupts>
 8002532:	4603      	mov	r3, r0
 8002534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002538:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800253c:	f040 80a7 	bne.w	800268e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f005 fe86 	bl	800825a <USB_ReadDevAllOutEpInterrupt>
 800254e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002550:	e099      	b.n	8002686 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 808e 	beq.w	800267a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f005 feaa 	bl	80082c2 <USB_ReadDevOutEPInterrupt>
 800256e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00c      	beq.n	8002594 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002586:	461a      	mov	r2, r3
 8002588:	2301      	movs	r3, #1
 800258a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800258c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fef0 	bl	8003374 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00c      	beq.n	80025b8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025aa:	461a      	mov	r2, r3
 80025ac:	2308      	movs	r3, #8
 80025ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80025b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 ffc6 	bl	8003544 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ce:	461a      	mov	r2, r3
 80025d0:	2310      	movs	r3, #16
 80025d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d030      	beq.n	8002640 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e6:	2b80      	cmp	r3, #128	; 0x80
 80025e8:	d109      	bne.n	80025fe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025fc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80025fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	3304      	adds	r3, #4
 8002612:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	78db      	ldrb	r3, [r3, #3]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d108      	bne.n	800262e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2200      	movs	r2, #0
 8002620:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	b2db      	uxtb	r3, r3
 8002626:	4619      	mov	r1, r3
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f008 fa2d 	bl	800aa88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800263a:	461a      	mov	r2, r3
 800263c:	2302      	movs	r3, #2
 800263e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002656:	461a      	mov	r2, r3
 8002658:	2320      	movs	r3, #32
 800265a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d009      	beq.n	800267a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002672:	461a      	mov	r2, r3
 8002674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002678:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	3301      	adds	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	085b      	lsrs	r3, r3, #1
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f af62 	bne.w	8002552 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f005 fdce 	bl	8008234 <USB_ReadInterrupts>
 8002698:	4603      	mov	r3, r0
 800269a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026a2:	f040 80db 	bne.w	800285c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f005 fdef 	bl	800828e <USB_ReadDevAllInEpInterrupt>
 80026b0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026b6:	e0cd      	b.n	8002854 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 80c2 	beq.w	8002848 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f005 fe15 	bl	80082fe <USB_ReadDevInEPInterrupt>
 80026d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d057      	beq.n	8002790 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	2201      	movs	r2, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69f9      	ldr	r1, [r7, #28]
 80026fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002700:	4013      	ands	r3, r2
 8002702:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	4413      	add	r3, r2
 800270c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002710:	461a      	mov	r2, r3
 8002712:	2301      	movs	r3, #1
 8002714:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d132      	bne.n	8002784 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	334c      	adds	r3, #76	; 0x4c
 800272e:	6819      	ldr	r1, [r3, #0]
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4403      	add	r3, r0
 800273e:	3348      	adds	r3, #72	; 0x48
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4419      	add	r1, r3
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4403      	add	r3, r0
 8002752:	334c      	adds	r3, #76	; 0x4c
 8002754:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d113      	bne.n	8002784 <HAL_PCD_IRQHandler+0x3a2>
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3354      	adds	r3, #84	; 0x54
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800277c:	461a      	mov	r2, r3
 800277e:	2101      	movs	r1, #1
 8002780:	f005 fe1e 	bl	80083c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	b2db      	uxtb	r3, r3
 8002788:	4619      	mov	r1, r3
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f008 f8f7 	bl	800a97e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a6:	461a      	mov	r2, r3
 80027a8:	2308      	movs	r3, #8
 80027aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c2:	461a      	mov	r2, r3
 80027c4:	2310      	movs	r3, #16
 80027c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027de:	461a      	mov	r2, r3
 80027e0:	2340      	movs	r3, #64	; 0x40
 80027e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d023      	beq.n	8002836 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80027ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f0:	6a38      	ldr	r0, [r7, #32]
 80027f2:	f004 fcf1 	bl	80071d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80027f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	3338      	adds	r3, #56	; 0x38
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	3304      	adds	r3, #4
 8002808:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	78db      	ldrb	r3, [r3, #3]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d108      	bne.n	8002824 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2200      	movs	r2, #0
 8002816:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	b2db      	uxtb	r3, r3
 800281c:	4619      	mov	r1, r3
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f008 f944 	bl	800aaac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	4413      	add	r3, r2
 800282c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002830:	461a      	mov	r2, r3
 8002832:	2302      	movs	r3, #2
 8002834:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fd08 	bl	8003258 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	3301      	adds	r3, #1
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	2b00      	cmp	r3, #0
 8002858:	f47f af2e 	bne.w	80026b8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f005 fce7 	bl	8008234 <USB_ReadInterrupts>
 8002866:	4603      	mov	r3, r0
 8002868:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800286c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002870:	d122      	bne.n	80028b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800288c:	2b01      	cmp	r3, #1
 800288e:	d108      	bne.n	80028a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002898:	2100      	movs	r1, #0
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f008 fabe 	bl	800ae1c <HAL_PCDEx_LPM_Callback>
 80028a0:	e002      	b.n	80028a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f008 f8e2 	bl	800aa6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f005 fcb9 	bl	8008234 <USB_ReadInterrupts>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028cc:	d112      	bne.n	80028f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f008 f89e 	bl	800aa20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f005 fc9b 	bl	8008234 <USB_ReadInterrupts>
 80028fe:	4603      	mov	r3, r0
 8002900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002908:	d121      	bne.n	800294e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002918:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d111      	bne.n	8002948 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	f003 020f 	and.w	r2, r3, #15
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800293e:	2101      	movs	r1, #1
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f008 fa6b 	bl	800ae1c <HAL_PCDEx_LPM_Callback>
 8002946:	e002      	b.n	800294e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f008 f869 	bl	800aa20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f005 fc6e 	bl	8008234 <USB_ReadInterrupts>
 8002958:	4603      	mov	r3, r0
 800295a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800295e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002962:	f040 80b7 	bne.w	8002ad4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2110      	movs	r1, #16
 8002980:	4618      	mov	r0, r3
 8002982:	f004 fc29 	bl	80071d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002986:	2300      	movs	r3, #0
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800298a:	e046      	b.n	8002a1a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	4413      	add	r3, r2
 8002994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002998:	461a      	mov	r2, r3
 800299a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800299e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b0:	0151      	lsls	r1, r2, #5
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	440a      	add	r2, r1
 80029b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029cc:	461a      	mov	r2, r3
 80029ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e4:	0151      	lsls	r1, r2, #5
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	440a      	add	r2, r1
 80029ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a04:	0151      	lsls	r1, r2, #5
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	440a      	add	r2, r1
 8002a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a12:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	3301      	adds	r3, #1
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d3b3      	bcc.n	800298c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a32:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a36:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d016      	beq.n	8002a6e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a50:	f043 030b 	orr.w	r3, r3, #11
 8002a54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a66:	f043 030b 	orr.w	r3, r3, #11
 8002a6a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6c:	e015      	b.n	8002a9a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f242 032b 	movw	r3, #8235	; 0x202b
 8002a82:	4313      	orrs	r3, r2
 8002a84:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a94:	f043 030b 	orr.w	r3, r3, #11
 8002a98:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002aac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f005 fc7e 	bl	80083c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ad2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f005 fbab 	bl	8008234 <USB_ReadInterrupts>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae8:	d124      	bne.n	8002b34 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f005 fc42 	bl	8008378 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f004 fbea 	bl	80072d2 <USB_GetDevSpeed>
 8002afe:	4603      	mov	r3, r0
 8002b00:	461a      	mov	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681c      	ldr	r4, [r3, #0]
 8002b0a:	f001 fa83 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8002b0e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f004 f8ef 	bl	8006cfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f007 ff55 	bl	800a9ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f005 fb7b 	bl	8008234 <USB_ReadInterrupts>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d10a      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f007 ff32 	bl	800a9b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f002 0208 	and.w	r2, r2, #8
 8002b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f005 fb66 	bl	8008234 <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6e:	2b80      	cmp	r3, #128	; 0x80
 8002b70:	d122      	bne.n	8002bb8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b7e:	2301      	movs	r3, #1
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
 8002b82:	e014      	b.n	8002bae <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fb27 	bl	80031f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	3301      	adds	r3, #1
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d3e5      	bcc.n	8002b84 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f005 fb39 	bl	8008234 <USB_ReadInterrupts>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bcc:	d13b      	bne.n	8002c46 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bce:	2301      	movs	r3, #1
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd2:	e02b      	b.n	8002c2c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3340      	adds	r3, #64	; 0x40
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d115      	bne.n	8002c26 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002bfa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	da12      	bge.n	8002c26 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	333f      	adds	r3, #63	; 0x3f
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fae8 	bl	80031f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	3301      	adds	r3, #1
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d3ce      	bcc.n	8002bd4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f005 faf2 	bl	8008234 <USB_ReadInterrupts>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c5a:	d155      	bne.n	8002d08 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c60:	e045      	b.n	8002cee <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d12e      	bne.n	8002ce8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	da2b      	bge.n	8002ce8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002c9c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d121      	bne.n	8002ce8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10a      	bne.n	8002ce8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ce0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ce4:	6053      	str	r3, [r2, #4]
            break;
 8002ce6:	e007      	b.n	8002cf8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	3301      	adds	r3, #1
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d3b4      	bcc.n	8002c62 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f005 fa91 	bl	8008234 <USB_ReadInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1c:	d10a      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f007 fed6 	bl	800aad0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f005 fa7b 	bl	8008234 <USB_ReadInterrupts>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d115      	bne.n	8002d74 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f007 fec6 	bl	800aaec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6859      	ldr	r1, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	e000      	b.n	8002d74 <HAL_PCD_IRQHandler+0x992>
      return;
 8002d72:	bf00      	nop
    }
  }
}
 8002d74:	3734      	adds	r7, #52	; 0x34
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd90      	pop	{r4, r7, pc}

08002d7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	460b      	mov	r3, r1
 8002d84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_PCD_SetAddress+0x1a>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e013      	b.n	8002dbc <HAL_PCD_SetAddress+0x42>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f005 f9d9 	bl	8008164 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	70fb      	strb	r3, [r7, #3]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	803b      	strh	r3, [r7, #0]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	da0f      	bge.n	8002e0a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	f003 020f 	and.w	r2, r3, #15
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	3338      	adds	r3, #56	; 0x38
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3304      	adds	r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	705a      	strb	r2, [r3, #1]
 8002e08:	e00f      	b.n	8002e2a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	f003 020f 	and.w	r2, r3, #15
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	3304      	adds	r3, #4
 8002e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e36:	883a      	ldrh	r2, [r7, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	78ba      	ldrb	r2, [r7, #2]
 8002e40:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	785b      	ldrb	r3, [r3, #1]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e54:	78bb      	ldrb	r3, [r7, #2]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d102      	bne.n	8002e60 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_PCD_EP_Open+0xaa>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e00e      	b.n	8002e8c <HAL_PCD_EP_Open+0xc8>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68f9      	ldr	r1, [r7, #12]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f004 fa4d 	bl	800731c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002e8a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	da0f      	bge.n	8002ec8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	f003 020f 	and.w	r2, r3, #15
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	3338      	adds	r3, #56	; 0x38
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4413      	add	r3, r2
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	705a      	strb	r2, [r3, #1]
 8002ec6:	e00f      	b.n	8002ee8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	f003 020f 	and.w	r2, r3, #15
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	3304      	adds	r3, #4
 8002ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_PCD_EP_Close+0x6e>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e00e      	b.n	8002f20 <HAL_PCD_EP_Close+0x8c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68f9      	ldr	r1, [r7, #12]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f004 fa8b 	bl	800742c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	460b      	mov	r3, r1
 8002f36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f38:	7afb      	ldrb	r3, [r7, #11]
 8002f3a:	f003 020f 	and.w	r2, r3, #15
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3304      	adds	r3, #4
 8002f50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2200      	movs	r2, #0
 8002f62:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2200      	movs	r2, #0
 8002f68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f6a:	7afb      	ldrb	r3, [r7, #11]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d102      	bne.n	8002f84 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f84:	7afb      	ldrb	r3, [r7, #11]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	6979      	ldr	r1, [r7, #20]
 8002f9c:	f004 fd72 	bl	8007a84 <USB_EP0StartXfer>
 8002fa0:	e008      	b.n	8002fb4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	6979      	ldr	r1, [r7, #20]
 8002fb0:	f004 fb18 	bl	80075e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	f003 020f 	and.w	r2, r3, #15
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002fe0:	681b      	ldr	r3, [r3, #0]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ffe:	7afb      	ldrb	r3, [r7, #11]
 8003000:	f003 020f 	and.w	r2, r3, #15
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	3338      	adds	r3, #56	; 0x38
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4413      	add	r3, r2
 8003012:	3304      	adds	r3, #4
 8003014:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2200      	movs	r2, #0
 8003026:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2201      	movs	r2, #1
 800302c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800302e:	7afb      	ldrb	r3, [r7, #11]
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	b2da      	uxtb	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d102      	bne.n	8003048 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003048:	7afb      	ldrb	r3, [r7, #11]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	6979      	ldr	r1, [r7, #20]
 8003060:	f004 fd10 	bl	8007a84 <USB_EP0StartXfer>
 8003064:	e008      	b.n	8003078 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	6979      	ldr	r1, [r7, #20]
 8003074:	f004 fab6 	bl	80075e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	f003 020f 	and.w	r2, r3, #15
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	429a      	cmp	r2, r3
 800309a:	d901      	bls.n	80030a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e050      	b.n	8003142 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	da0f      	bge.n	80030c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	f003 020f 	and.w	r2, r3, #15
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	3338      	adds	r3, #56	; 0x38
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4413      	add	r3, r2
 80030bc:	3304      	adds	r3, #4
 80030be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	705a      	strb	r2, [r3, #1]
 80030c6:	e00d      	b.n	80030e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	3304      	adds	r3, #4
 80030dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_PCD_EP_SetStall+0x82>
 8003100:	2302      	movs	r3, #2
 8003102:	e01e      	b.n	8003142 <HAL_PCD_EP_SetStall+0xc0>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68f9      	ldr	r1, [r7, #12]
 8003112:	4618      	mov	r0, r3
 8003114:	f004 ff52 	bl	8007fbc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10a      	bne.n	8003138 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	b2d9      	uxtb	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003132:	461a      	mov	r2, r3
 8003134:	f005 f944 	bl	80083c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	f003 020f 	and.w	r2, r3, #15
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	429a      	cmp	r2, r3
 8003162:	d901      	bls.n	8003168 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e042      	b.n	80031ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800316c:	2b00      	cmp	r3, #0
 800316e:	da0f      	bge.n	8003190 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	f003 020f 	and.w	r2, r3, #15
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	3338      	adds	r3, #56	; 0x38
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	4413      	add	r3, r2
 8003184:	3304      	adds	r3, #4
 8003186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	705a      	strb	r2, [r3, #1]
 800318e:	e00f      	b.n	80031b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	f003 020f 	and.w	r2, r3, #15
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	3304      	adds	r3, #4
 80031a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_PCD_EP_ClrStall+0x86>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e00e      	b.n	80031ee <HAL_PCD_EP_ClrStall+0xa4>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68f9      	ldr	r1, [r7, #12]
 80031de:	4618      	mov	r0, r3
 80031e0:	f004 ff5a 	bl	8008098 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003202:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003206:	2b00      	cmp	r3, #0
 8003208:	da0c      	bge.n	8003224 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	f003 020f 	and.w	r2, r3, #15
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	3338      	adds	r3, #56	; 0x38
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4413      	add	r3, r2
 800321e:	3304      	adds	r3, #4
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e00c      	b.n	800323e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 020f 	and.w	r2, r3, #15
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	3304      	adds	r3, #4
 800323c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68f9      	ldr	r1, [r7, #12]
 8003244:	4618      	mov	r0, r3
 8003246:	f004 fd79 	bl	8007d3c <USB_EPStopXfer>
 800324a:	4603      	mov	r3, r0
 800324c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800324e:	7afb      	ldrb	r3, [r7, #11]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	; 0x28
 800325c:	af02      	add	r7, sp, #8
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	3338      	adds	r3, #56	; 0x38
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	3304      	adds	r3, #4
 800327e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a1a      	ldr	r2, [r3, #32]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	429a      	cmp	r2, r3
 800328a:	d901      	bls.n	8003290 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e06c      	b.n	800336a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d902      	bls.n	80032ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	3303      	adds	r3, #3
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032b4:	e02b      	b.n	800330e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d902      	bls.n	80032d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3303      	adds	r3, #3
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6919      	ldr	r1, [r3, #16]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	4603      	mov	r3, r0
 80032f0:	6978      	ldr	r0, [r7, #20]
 80032f2:	f004 fdcd 	bl	8007e90 <USB_WritePacket>

    ep->xfer_buff  += len;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	441a      	add	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1a      	ldr	r2, [r3, #32]
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	441a      	add	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	429a      	cmp	r2, r3
 8003322:	d809      	bhi.n	8003338 <PCD_WriteEmptyTxFifo+0xe0>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a1a      	ldr	r2, [r3, #32]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800332c:	429a      	cmp	r2, r3
 800332e:	d203      	bcs.n	8003338 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1be      	bne.n	80032b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	699a      	ldr	r2, [r3, #24]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	429a      	cmp	r2, r3
 8003342:	d811      	bhi.n	8003368 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	2201      	movs	r2, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	43db      	mvns	r3, r3
 800335e:	6939      	ldr	r1, [r7, #16]
 8003360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003364:	4013      	ands	r3, r2
 8003366:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	333c      	adds	r3, #60	; 0x3c
 800338c:	3304      	adds	r3, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d17b      	bne.n	80034a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	4a61      	ldr	r2, [pc, #388]	; (800353c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	f240 80b9 	bls.w	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80b3 	beq.w	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d6:	461a      	mov	r2, r3
 80033d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033dc:	6093      	str	r3, [r2, #8]
 80033de:	e0a7      	b.n	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f6:	461a      	mov	r2, r3
 80033f8:	2320      	movs	r3, #32
 80033fa:	6093      	str	r3, [r2, #8]
 80033fc:	e098      	b.n	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 8093 	bne.w	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	4a4b      	ldr	r2, [pc, #300]	; (800353c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d90f      	bls.n	8003432 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003428:	461a      	mov	r2, r3
 800342a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342e:	6093      	str	r3, [r2, #8]
 8003430:	e07e      	b.n	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4413      	add	r3, r2
 8003444:	3304      	adds	r3, #4
 8003446:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	0159      	lsls	r1, r3, #5
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	440b      	add	r3, r1
 8003454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345e:	1ad2      	subs	r2, r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d114      	bne.n	8003494 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800347c:	461a      	mov	r2, r3
 800347e:	2101      	movs	r1, #1
 8003480:	f004 ff9e 	bl	80083c0 <USB_EP0_OutStart>
 8003484:	e006      	b.n	8003494 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	441a      	add	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	4619      	mov	r1, r3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f007 fa54 	bl	800a948 <HAL_PCD_DataOutStageCallback>
 80034a0:	e046      	b.n	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	4a26      	ldr	r2, [pc, #152]	; (8003540 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d124      	bne.n	80034f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c0:	461a      	mov	r2, r3
 80034c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c6:	6093      	str	r3, [r2, #8]
 80034c8:	e032      	b.n	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e0:	461a      	mov	r2, r3
 80034e2:	2320      	movs	r3, #32
 80034e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f007 fa2b 	bl	800a948 <HAL_PCD_DataOutStageCallback>
 80034f2:	e01d      	b.n	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d114      	bne.n	8003524 <PCD_EP_OutXfrComplete_int+0x1b0>
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d108      	bne.n	8003524 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800351c:	461a      	mov	r2, r3
 800351e:	2100      	movs	r1, #0
 8003520:	f004 ff4e 	bl	80083c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f007 fa0c 	bl	800a948 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	4f54300a 	.word	0x4f54300a
 8003540:	4f54310a 	.word	0x4f54310a

08003544 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	333c      	adds	r3, #60	; 0x3c
 800355c:	3304      	adds	r3, #4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4a15      	ldr	r2, [pc, #84]	; (80035cc <PCD_EP_OutSetupPacket_int+0x88>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d90e      	bls.n	8003598 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003590:	461a      	mov	r2, r3
 8003592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003596:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f007 f9c3 	bl	800a924 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <PCD_EP_OutSetupPacket_int+0x88>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d90c      	bls.n	80035c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d108      	bne.n	80035c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035b8:	461a      	mov	r2, r3
 80035ba:	2101      	movs	r1, #1
 80035bc:	f004 ff00 	bl	80083c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	4f54300a 	.word	0x4f54300a

080035d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	70fb      	strb	r3, [r7, #3]
 80035dc:	4613      	mov	r3, r2
 80035de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d107      	bne.n	80035fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035ee:	883b      	ldrh	r3, [r7, #0]
 80035f0:	0419      	lsls	r1, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28
 80035fc:	e028      	b.n	8003650 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4413      	add	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800360c:	2300      	movs	r3, #0
 800360e:	73fb      	strb	r3, [r7, #15]
 8003610:	e00d      	b.n	800362e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	3340      	adds	r3, #64	; 0x40
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	0c1b      	lsrs	r3, r3, #16
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	4413      	add	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	3301      	adds	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	3b01      	subs	r3, #1
 8003634:	429a      	cmp	r2, r3
 8003636:	d3ec      	bcc.n	8003612 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003638:	883b      	ldrh	r3, [r7, #0]
 800363a:	0418      	lsls	r0, r3, #16
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6819      	ldr	r1, [r3, #0]
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	3b01      	subs	r3, #1
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	4302      	orrs	r2, r0
 8003648:	3340      	adds	r3, #64	; 0x40
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	887a      	ldrh	r2, [r7, #2]
 8003670:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	10000003 	.word	0x10000003

080036c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d6:	6013      	str	r3, [r2, #0]
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40007000 	.word	0x40007000

080036e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036f0:	2300      	movs	r3, #0
 80036f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e291      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8087 	beq.w	800381a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800370c:	4b96      	ldr	r3, [pc, #600]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b04      	cmp	r3, #4
 8003716:	d00c      	beq.n	8003732 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003718:	4b93      	ldr	r3, [pc, #588]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b08      	cmp	r3, #8
 8003722:	d112      	bne.n	800374a <HAL_RCC_OscConfig+0x62>
 8003724:	4b90      	ldr	r3, [pc, #576]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003730:	d10b      	bne.n	800374a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003732:	4b8d      	ldr	r3, [pc, #564]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d06c      	beq.n	8003818 <HAL_RCC_OscConfig+0x130>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d168      	bne.n	8003818 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e26b      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x7a>
 8003754:	4b84      	ldr	r3, [pc, #528]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a83      	ldr	r2, [pc, #524]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800375a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	e02e      	b.n	80037c0 <HAL_RCC_OscConfig+0xd8>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10c      	bne.n	8003784 <HAL_RCC_OscConfig+0x9c>
 800376a:	4b7f      	ldr	r3, [pc, #508]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a7e      	ldr	r2, [pc, #504]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	4b7c      	ldr	r3, [pc, #496]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a7b      	ldr	r2, [pc, #492]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800377c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e01d      	b.n	80037c0 <HAL_RCC_OscConfig+0xd8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0xc0>
 800378e:	4b76      	ldr	r3, [pc, #472]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a75      	ldr	r2, [pc, #468]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b73      	ldr	r3, [pc, #460]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a72      	ldr	r2, [pc, #456]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e00b      	b.n	80037c0 <HAL_RCC_OscConfig+0xd8>
 80037a8:	4b6f      	ldr	r3, [pc, #444]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a6e      	ldr	r2, [pc, #440]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	4b6c      	ldr	r3, [pc, #432]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a6b      	ldr	r2, [pc, #428]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80037ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fd fe06 	bl	80013d8 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fd fe02 	bl	80013d8 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e21f      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	4b61      	ldr	r3, [pc, #388]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0xe8>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fd fdf2 	bl	80013d8 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f8:	f7fd fdee 	bl	80013d8 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e20b      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380a:	4b57      	ldr	r3, [pc, #348]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x110>
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d069      	beq.n	80038fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003826:	4b50      	ldr	r3, [pc, #320]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003832:	4b4d      	ldr	r3, [pc, #308]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b08      	cmp	r3, #8
 800383c:	d11c      	bne.n	8003878 <HAL_RCC_OscConfig+0x190>
 800383e:	4b4a      	ldr	r3, [pc, #296]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d116      	bne.n	8003878 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384a:	4b47      	ldr	r3, [pc, #284]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_RCC_OscConfig+0x17a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e1df      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003862:	4b41      	ldr	r3, [pc, #260]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	493d      	ldr	r1, [pc, #244]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003876:	e040      	b.n	80038fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d023      	beq.n	80038c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003880:	4b39      	ldr	r3, [pc, #228]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a38      	ldr	r2, [pc, #224]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fd fda4 	bl	80013d8 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003894:	f7fd fda0 	bl	80013d8 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e1bd      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a6:	4b30      	ldr	r3, [pc, #192]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b2:	4b2d      	ldr	r3, [pc, #180]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4929      	ldr	r1, [pc, #164]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
 80038c6:	e018      	b.n	80038fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c8:	4b27      	ldr	r3, [pc, #156]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a26      	ldr	r2, [pc, #152]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fd fd80 	bl	80013d8 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038dc:	f7fd fd7c 	bl	80013d8 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e199      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ee:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d038      	beq.n	8003978 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d019      	beq.n	8003942 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390e:	4b16      	ldr	r3, [pc, #88]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003912:	4a15      	ldr	r2, [pc, #84]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391a:	f7fd fd5d 	bl	80013d8 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003922:	f7fd fd59 	bl	80013d8 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e176      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x23a>
 8003940:	e01a      	b.n	8003978 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003942:	4b09      	ldr	r3, [pc, #36]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003946:	4a08      	ldr	r2, [pc, #32]	; (8003968 <HAL_RCC_OscConfig+0x280>)
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394e:	f7fd fd43 	bl	80013d8 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003954:	e00a      	b.n	800396c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003956:	f7fd fd3f 	bl	80013d8 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d903      	bls.n	800396c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e15c      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
 8003968:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396c:	4b91      	ldr	r3, [pc, #580]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 800396e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1ee      	bne.n	8003956 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80a4 	beq.w	8003ace <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003986:	4b8b      	ldr	r3, [pc, #556]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10d      	bne.n	80039ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003992:	4b88      	ldr	r3, [pc, #544]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a87      	ldr	r2, [pc, #540]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b85      	ldr	r3, [pc, #532]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ae:	4b82      	ldr	r3, [pc, #520]	; (8003bb8 <HAL_RCC_OscConfig+0x4d0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d118      	bne.n	80039ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039ba:	4b7f      	ldr	r3, [pc, #508]	; (8003bb8 <HAL_RCC_OscConfig+0x4d0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a7e      	ldr	r2, [pc, #504]	; (8003bb8 <HAL_RCC_OscConfig+0x4d0>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c6:	f7fd fd07 	bl	80013d8 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ce:	f7fd fd03 	bl	80013d8 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b64      	cmp	r3, #100	; 0x64
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e120      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e0:	4b75      	ldr	r3, [pc, #468]	; (8003bb8 <HAL_RCC_OscConfig+0x4d0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_OscConfig+0x31a>
 80039f4:	4b6f      	ldr	r3, [pc, #444]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a6e      	ldr	r2, [pc, #440]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	e02d      	b.n	8003a5e <HAL_RCC_OscConfig+0x376>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x33c>
 8003a0a:	4b6a      	ldr	r3, [pc, #424]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	4a69      	ldr	r2, [pc, #420]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a10:	f023 0301 	bic.w	r3, r3, #1
 8003a14:	6713      	str	r3, [r2, #112]	; 0x70
 8003a16:	4b67      	ldr	r3, [pc, #412]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1a:	4a66      	ldr	r2, [pc, #408]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a1c:	f023 0304 	bic.w	r3, r3, #4
 8003a20:	6713      	str	r3, [r2, #112]	; 0x70
 8003a22:	e01c      	b.n	8003a5e <HAL_RCC_OscConfig+0x376>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d10c      	bne.n	8003a46 <HAL_RCC_OscConfig+0x35e>
 8003a2c:	4b61      	ldr	r3, [pc, #388]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	4a60      	ldr	r2, [pc, #384]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a32:	f043 0304 	orr.w	r3, r3, #4
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70
 8003a38:	4b5e      	ldr	r3, [pc, #376]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	4a5d      	ldr	r2, [pc, #372]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6713      	str	r3, [r2, #112]	; 0x70
 8003a44:	e00b      	b.n	8003a5e <HAL_RCC_OscConfig+0x376>
 8003a46:	4b5b      	ldr	r3, [pc, #364]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a5a      	ldr	r2, [pc, #360]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70
 8003a52:	4b58      	ldr	r3, [pc, #352]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a57      	ldr	r2, [pc, #348]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d015      	beq.n	8003a92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a66:	f7fd fcb7 	bl	80013d8 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	e00a      	b.n	8003a84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6e:	f7fd fcb3 	bl	80013d8 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e0ce      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	4b4b      	ldr	r3, [pc, #300]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ee      	beq.n	8003a6e <HAL_RCC_OscConfig+0x386>
 8003a90:	e014      	b.n	8003abc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7fd fca1 	bl	80013d8 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fd fc9d 	bl	80013d8 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e0b8      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab0:	4b40      	ldr	r3, [pc, #256]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1ee      	bne.n	8003a9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d105      	bne.n	8003ace <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac2:	4b3c      	ldr	r3, [pc, #240]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	4a3b      	ldr	r2, [pc, #236]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003acc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80a4 	beq.w	8003c20 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ad8:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d06b      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d149      	bne.n	8003b80 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aec:	4b31      	ldr	r3, [pc, #196]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a30      	ldr	r2, [pc, #192]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7fd fc6e 	bl	80013d8 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b00:	f7fd fc6a 	bl	80013d8 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e087      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b12:	4b28      	ldr	r3, [pc, #160]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	019b      	lsls	r3, r3, #6
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	085b      	lsrs	r3, r3, #1
 8003b36:	3b01      	subs	r3, #1
 8003b38:	041b      	lsls	r3, r3, #16
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	4313      	orrs	r3, r2
 8003b44:	4a1b      	ldr	r2, [pc, #108]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b4a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b4c:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a18      	ldr	r2, [pc, #96]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd fc3e 	bl	80013d8 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fd fc3a 	bl	80013d8 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e057      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x478>
 8003b7e:	e04f      	b.n	8003c20 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0b      	ldr	r2, [pc, #44]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fd fc24 	bl	80013d8 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fd fc20 	bl	80013d8 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e03d      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4ac>
 8003bb2:	e035      	b.n	8003c20 <HAL_RCC_OscConfig+0x538>
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <HAL_RCC_OscConfig+0x544>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d028      	beq.n	8003c1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d121      	bne.n	8003c1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d11a      	bne.n	8003c1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bec:	4013      	ands	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bf2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d111      	bne.n	8003c1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	3b01      	subs	r3, #1
 8003c06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d107      	bne.n	8003c1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d001      	beq.n	8003c20 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800

08003c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0d0      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c48:	4b6a      	ldr	r3, [pc, #424]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d910      	bls.n	8003c78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	4b67      	ldr	r3, [pc, #412]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 020f 	bic.w	r2, r3, #15
 8003c5e:	4965      	ldr	r1, [pc, #404]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b63      	ldr	r3, [pc, #396]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0b8      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d020      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c90:	4b59      	ldr	r3, [pc, #356]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4a58      	ldr	r2, [pc, #352]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ca8:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4a52      	ldr	r2, [pc, #328]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb4:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	494d      	ldr	r1, [pc, #308]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d040      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d115      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e07f      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d107      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf2:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e073      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d02:	4b3d      	ldr	r3, [pc, #244]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e06b      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d12:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f023 0203 	bic.w	r2, r3, #3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4936      	ldr	r1, [pc, #216]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d24:	f7fd fb58 	bl	80013d8 <HAL_GetTick>
 8003d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d2c:	f7fd fb54 	bl	80013d8 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e053      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d42:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 020c 	and.w	r2, r3, #12
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d1eb      	bne.n	8003d2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d210      	bcs.n	8003d84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 020f 	bic.w	r2, r3, #15
 8003d6a:	4922      	ldr	r1, [pc, #136]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e032      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d90:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4916      	ldr	r1, [pc, #88]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	490e      	ldr	r1, [pc, #56]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dc2:	f000 f821 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	490a      	ldr	r1, [pc, #40]	; (8003dfc <HAL_RCC_ClockConfig+0x1cc>)
 8003dd4:	5ccb      	ldrb	r3, [r1, r3]
 8003dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dda:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <HAL_RCC_ClockConfig+0x1d0>)
 8003ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <HAL_RCC_ClockConfig+0x1d4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd fab4 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023c00 	.word	0x40023c00
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	0800b224 	.word	0x0800b224
 8003e00:	20000020 	.word	0x20000020
 8003e04:	20000024 	.word	0x20000024

08003e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e0c:	b094      	sub	sp, #80	; 0x50
 8003e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	647b      	str	r3, [r7, #68]	; 0x44
 8003e14:	2300      	movs	r3, #0
 8003e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e18:	2300      	movs	r3, #0
 8003e1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e20:	4b79      	ldr	r3, [pc, #484]	; (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d00d      	beq.n	8003e48 <HAL_RCC_GetSysClockFreq+0x40>
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	f200 80e1 	bhi.w	8003ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x34>
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d003      	beq.n	8003e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e3a:	e0db      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e3c:	4b73      	ldr	r3, [pc, #460]	; (800400c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e40:	e0db      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e42:	4b73      	ldr	r3, [pc, #460]	; (8004010 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e46:	e0d8      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e48:	4b6f      	ldr	r3, [pc, #444]	; (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e50:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e52:	4b6d      	ldr	r3, [pc, #436]	; (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d063      	beq.n	8003f26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5e:	4b6a      	ldr	r3, [pc, #424]	; (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	099b      	lsrs	r3, r3, #6
 8003e64:	2200      	movs	r2, #0
 8003e66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e70:	633b      	str	r3, [r7, #48]	; 0x30
 8003e72:	2300      	movs	r3, #0
 8003e74:	637b      	str	r3, [r7, #52]	; 0x34
 8003e76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e7a:	4622      	mov	r2, r4
 8003e7c:	462b      	mov	r3, r5
 8003e7e:	f04f 0000 	mov.w	r0, #0
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	0159      	lsls	r1, r3, #5
 8003e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e8c:	0150      	lsls	r0, r2, #5
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4621      	mov	r1, r4
 8003e94:	1a51      	subs	r1, r2, r1
 8003e96:	6139      	str	r1, [r7, #16]
 8003e98:	4629      	mov	r1, r5
 8003e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eac:	4659      	mov	r1, fp
 8003eae:	018b      	lsls	r3, r1, #6
 8003eb0:	4651      	mov	r1, sl
 8003eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eb6:	4651      	mov	r1, sl
 8003eb8:	018a      	lsls	r2, r1, #6
 8003eba:	4651      	mov	r1, sl
 8003ebc:	ebb2 0801 	subs.w	r8, r2, r1
 8003ec0:	4659      	mov	r1, fp
 8003ec2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eda:	4690      	mov	r8, r2
 8003edc:	4699      	mov	r9, r3
 8003ede:	4623      	mov	r3, r4
 8003ee0:	eb18 0303 	adds.w	r3, r8, r3
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	462b      	mov	r3, r5
 8003ee8:	eb49 0303 	adc.w	r3, r9, r3
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003efa:	4629      	mov	r1, r5
 8003efc:	024b      	lsls	r3, r1, #9
 8003efe:	4621      	mov	r1, r4
 8003f00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f04:	4621      	mov	r1, r4
 8003f06:	024a      	lsls	r2, r1, #9
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f0e:	2200      	movs	r2, #0
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f18:	f7fc f97e 	bl	8000218 <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4613      	mov	r3, r2
 8003f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f24:	e058      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f26:	4b38      	ldr	r3, [pc, #224]	; (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	099b      	lsrs	r3, r3, #6
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	4611      	mov	r1, r2
 8003f32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f36:	623b      	str	r3, [r7, #32]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f40:	4642      	mov	r2, r8
 8003f42:	464b      	mov	r3, r9
 8003f44:	f04f 0000 	mov.w	r0, #0
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	0159      	lsls	r1, r3, #5
 8003f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f52:	0150      	lsls	r0, r2, #5
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4641      	mov	r1, r8
 8003f5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f5e:	4649      	mov	r1, r9
 8003f60:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f78:	ebb2 040a 	subs.w	r4, r2, sl
 8003f7c:	eb63 050b 	sbc.w	r5, r3, fp
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	00eb      	lsls	r3, r5, #3
 8003f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f8e:	00e2      	lsls	r2, r4, #3
 8003f90:	4614      	mov	r4, r2
 8003f92:	461d      	mov	r5, r3
 8003f94:	4643      	mov	r3, r8
 8003f96:	18e3      	adds	r3, r4, r3
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	eb45 0303 	adc.w	r3, r5, r3
 8003fa0:	607b      	str	r3, [r7, #4]
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fae:	4629      	mov	r1, r5
 8003fb0:	028b      	lsls	r3, r1, #10
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fb8:	4621      	mov	r1, r4
 8003fba:	028a      	lsls	r2, r1, #10
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	61fa      	str	r2, [r7, #28]
 8003fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fcc:	f7fc f924 	bl	8000218 <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003fe8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ff2:	e002      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCC_GetSysClockFreq+0x204>)
 8003ff6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3750      	adds	r7, #80	; 0x50
 8004000:	46bd      	mov	sp, r7
 8004002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	00f42400 	.word	0x00f42400
 8004010:	007a1200 	.word	0x007a1200

08004014 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_RCC_GetHCLKFreq+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000020 	.word	0x20000020

0800402c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004030:	f7ff fff0 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0a9b      	lsrs	r3, r3, #10
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4903      	ldr	r1, [pc, #12]	; (8004050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40023800 	.word	0x40023800
 8004050:	0800b234 	.word	0x0800b234

08004054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004058:	f7ff ffdc 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 800405c:	4602      	mov	r2, r0
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	0b5b      	lsrs	r3, r3, #13
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	4903      	ldr	r1, [pc, #12]	; (8004078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800406a:	5ccb      	ldrb	r3, [r1, r3]
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004070:	4618      	mov	r0, r3
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40023800 	.word	0x40023800
 8004078:	0800b234 	.word	0x0800b234

0800407c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d012      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040a4:	4b69      	ldr	r3, [pc, #420]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4a68      	ldr	r2, [pc, #416]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040ae:	6093      	str	r3, [r2, #8]
 80040b0:	4b66      	ldr	r3, [pc, #408]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b8:	4964      	ldr	r1, [pc, #400]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80040c6:	2301      	movs	r3, #1
 80040c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d017      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040d6:	4b5d      	ldr	r3, [pc, #372]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e4:	4959      	ldr	r1, [pc, #356]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f4:	d101      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80040f6:	2301      	movs	r3, #1
 80040f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004102:	2301      	movs	r3, #1
 8004104:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d017      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004112:	4b4e      	ldr	r3, [pc, #312]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004118:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	494a      	ldr	r1, [pc, #296]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004130:	d101      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004132:	2301      	movs	r3, #1
 8004134:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800413e:	2301      	movs	r3, #1
 8004140:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800414e:	2301      	movs	r3, #1
 8004150:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 808b 	beq.w	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004160:	4b3a      	ldr	r3, [pc, #232]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	4a39      	ldr	r2, [pc, #228]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416a:	6413      	str	r3, [r2, #64]	; 0x40
 800416c:	4b37      	ldr	r3, [pc, #220]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004178:	4b35      	ldr	r3, [pc, #212]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a34      	ldr	r2, [pc, #208]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800417e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004184:	f7fd f928 	bl	80013d8 <HAL_GetTick>
 8004188:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418c:	f7fd f924 	bl	80013d8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	; 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e357      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800419e:	4b2c      	ldr	r3, [pc, #176]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041aa:	4b28      	ldr	r3, [pc, #160]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d035      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d02e      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041c8:	4b20      	ldr	r3, [pc, #128]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041d2:	4b1e      	ldr	r3, [pc, #120]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	4a1d      	ldr	r2, [pc, #116]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041de:	4b1b      	ldr	r3, [pc, #108]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	4a1a      	ldr	r2, [pc, #104]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80041ea:	4a18      	ldr	r2, [pc, #96]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041f0:	4b16      	ldr	r3, [pc, #88]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d114      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fd f8ec 	bl	80013d8 <HAL_GetTick>
 8004200:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004202:	e00a      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fd f8e8 	bl	80013d8 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e319      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421a:	4b0c      	ldr	r3, [pc, #48]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0ee      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004232:	d111      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004240:	4b04      	ldr	r3, [pc, #16]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004242:	400b      	ands	r3, r1
 8004244:	4901      	ldr	r1, [pc, #4]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
 800424a:	e00b      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800424c:	40023800 	.word	0x40023800
 8004250:	40007000 	.word	0x40007000
 8004254:	0ffffcff 	.word	0x0ffffcff
 8004258:	4baa      	ldr	r3, [pc, #680]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4aa9      	ldr	r2, [pc, #676]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800425e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004262:	6093      	str	r3, [r2, #8]
 8004264:	4ba7      	ldr	r3, [pc, #668]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004266:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004270:	49a4      	ldr	r1, [pc, #656]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004272:	4313      	orrs	r3, r2
 8004274:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b00      	cmp	r3, #0
 8004280:	d010      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004282:	4ba0      	ldr	r3, [pc, #640]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004288:	4a9e      	ldr	r2, [pc, #632]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800428a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800428e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004292:	4b9c      	ldr	r3, [pc, #624]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004294:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	4999      	ldr	r1, [pc, #612]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042b0:	4b94      	ldr	r3, [pc, #592]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042be:	4991      	ldr	r1, [pc, #580]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042d2:	4b8c      	ldr	r3, [pc, #560]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e0:	4988      	ldr	r1, [pc, #544]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042f4:	4b83      	ldr	r3, [pc, #524]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004302:	4980      	ldr	r1, [pc, #512]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004316:	4b7b      	ldr	r3, [pc, #492]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	4977      	ldr	r1, [pc, #476]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004338:	4b72      	ldr	r3, [pc, #456]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	f023 0203 	bic.w	r2, r3, #3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	496f      	ldr	r1, [pc, #444]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800435a:	4b6a      	ldr	r3, [pc, #424]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004360:	f023 020c 	bic.w	r2, r3, #12
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004368:	4966      	ldr	r1, [pc, #408]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800437c:	4b61      	ldr	r3, [pc, #388]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438a:	495e      	ldr	r1, [pc, #376]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800439e:	4b59      	ldr	r3, [pc, #356]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ac:	4955      	ldr	r1, [pc, #340]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043c0:	4b50      	ldr	r3, [pc, #320]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	494d      	ldr	r1, [pc, #308]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80043e2:	4b48      	ldr	r3, [pc, #288]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	4944      	ldr	r1, [pc, #272]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004404:	4b3f      	ldr	r3, [pc, #252]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004412:	493c      	ldr	r1, [pc, #240]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004426:	4b37      	ldr	r3, [pc, #220]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004434:	4933      	ldr	r1, [pc, #204]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004448:	4b2e      	ldr	r3, [pc, #184]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004456:	492b      	ldr	r1, [pc, #172]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d011      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800446a:	4b26      	ldr	r3, [pc, #152]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004470:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004478:	4922      	ldr	r1, [pc, #136]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004488:	d101      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800448a:	2301      	movs	r3, #1
 800448c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800449a:	2301      	movs	r3, #1
 800449c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044aa:	4b16      	ldr	r3, [pc, #88]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b8:	4912      	ldr	r1, [pc, #72]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044cc:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044dc:	4909      	ldr	r1, [pc, #36]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d006      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80d9 	beq.w	80046aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044f8:	4b02      	ldr	r3, [pc, #8]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a01      	ldr	r2, [pc, #4]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004502:	e001      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004504:	40023800 	.word	0x40023800
 8004508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450a:	f7fc ff65 	bl	80013d8 <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004510:	e008      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004512:	f7fc ff61 	bl	80013d8 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b64      	cmp	r3, #100	; 0x64
 800451e:	d901      	bls.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e194      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004524:	4b6c      	ldr	r3, [pc, #432]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f0      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d021      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	2b00      	cmp	r3, #0
 8004542:	d11d      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004544:	4b64      	ldr	r3, [pc, #400]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454a:	0c1b      	lsrs	r3, r3, #16
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004552:	4b61      	ldr	r3, [pc, #388]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004558:	0e1b      	lsrs	r3, r3, #24
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	019a      	lsls	r2, r3, #6
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	041b      	lsls	r3, r3, #16
 800456a:	431a      	orrs	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	061b      	lsls	r3, r3, #24
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	071b      	lsls	r3, r3, #28
 8004578:	4957      	ldr	r1, [pc, #348]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d02e      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045aa:	d129      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045ac:	4b4a      	ldr	r3, [pc, #296]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b2:	0c1b      	lsrs	r3, r3, #16
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045ba:	4b47      	ldr	r3, [pc, #284]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c0:	0f1b      	lsrs	r3, r3, #28
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	019a      	lsls	r2, r3, #6
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	041b      	lsls	r3, r3, #16
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	431a      	orrs	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	071b      	lsls	r3, r3, #28
 80045e0:	493d      	ldr	r1, [pc, #244]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045e8:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ee:	f023 021f 	bic.w	r2, r3, #31
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	3b01      	subs	r3, #1
 80045f8:	4937      	ldr	r1, [pc, #220]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01d      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800460c:	4b32      	ldr	r3, [pc, #200]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800460e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004612:	0e1b      	lsrs	r3, r3, #24
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800461a:	4b2f      	ldr	r3, [pc, #188]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800461c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004620:	0f1b      	lsrs	r3, r3, #28
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	019a      	lsls	r2, r3, #6
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	431a      	orrs	r2, r3
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	431a      	orrs	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	071b      	lsls	r3, r3, #28
 8004640:	4925      	ldr	r1, [pc, #148]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d011      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	019a      	lsls	r2, r3, #6
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	041b      	lsls	r3, r3, #16
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	061b      	lsls	r3, r3, #24
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	071b      	lsls	r3, r3, #28
 8004670:	4919      	ldr	r1, [pc, #100]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004678:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800467e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004684:	f7fc fea8 	bl	80013d8 <HAL_GetTick>
 8004688:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800468c:	f7fc fea4 	bl	80013d8 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e0d7      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800469e:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	f040 80cd 	bne.w	800484c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046b2:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046be:	f7fc fe8b 	bl	80013d8 <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046c4:	e00a      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046c6:	f7fc fe87 	bl	80013d8 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b64      	cmp	r3, #100	; 0x64
 80046d2:	d903      	bls.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e0ba      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80046d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046dc:	4b5e      	ldr	r3, [pc, #376]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e8:	d0ed      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x682>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d009      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004706:	2b00      	cmp	r3, #0
 8004708:	d02e      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d12a      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004712:	4b51      	ldr	r3, [pc, #324]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004720:	4b4d      	ldr	r3, [pc, #308]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004726:	0f1b      	lsrs	r3, r3, #28
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	019a      	lsls	r2, r3, #6
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	061b      	lsls	r3, r3, #24
 8004740:	431a      	orrs	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	071b      	lsls	r3, r3, #28
 8004746:	4944      	ldr	r1, [pc, #272]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800474e:	4b42      	ldr	r3, [pc, #264]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004754:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	3b01      	subs	r3, #1
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	493d      	ldr	r1, [pc, #244]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d022      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004778:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800477c:	d11d      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800477e:	4b36      	ldr	r3, [pc, #216]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004784:	0e1b      	lsrs	r3, r3, #24
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800478c:	4b32      	ldr	r3, [pc, #200]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	0f1b      	lsrs	r3, r3, #28
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	019a      	lsls	r2, r3, #6
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	041b      	lsls	r3, r3, #16
 80047a6:	431a      	orrs	r2, r3
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	061b      	lsls	r3, r3, #24
 80047ac:	431a      	orrs	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	071b      	lsls	r3, r3, #28
 80047b2:	4929      	ldr	r1, [pc, #164]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d028      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047c6:	4b24      	ldr	r3, [pc, #144]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	0e1b      	lsrs	r3, r3, #24
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047d4:	4b20      	ldr	r3, [pc, #128]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	0c1b      	lsrs	r3, r3, #16
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	019a      	lsls	r2, r3, #6
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	041b      	lsls	r3, r3, #16
 80047ec:	431a      	orrs	r2, r3
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	061b      	lsls	r3, r3, #24
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	071b      	lsls	r3, r3, #28
 80047fa:	4917      	ldr	r1, [pc, #92]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004802:	4b15      	ldr	r3, [pc, #84]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004808:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	4911      	ldr	r1, [pc, #68]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004818:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a0e      	ldr	r2, [pc, #56]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800481e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004824:	f7fc fdd8 	bl	80013d8 <HAL_GetTick>
 8004828:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800482a:	e008      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800482c:	f7fc fdd4 	bl	80013d8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b64      	cmp	r3, #100	; 0x64
 8004838:	d901      	bls.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e007      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800483e:	4b06      	ldr	r3, [pc, #24]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800484a:	d1ef      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40023800 	.word	0x40023800

0800485c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e09d      	b.n	80049aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	2b00      	cmp	r3, #0
 8004874:	d108      	bne.n	8004888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800487e:	d009      	beq.n	8004894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	61da      	str	r2, [r3, #28]
 8004886:	e005      	b.n	8004894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fc f9f4 	bl	8000c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048d4:	d902      	bls.n	80048dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e002      	b.n	80048e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048ea:	d007      	beq.n	80048fc <HAL_SPI_Init+0xa0>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048f4:	d002      	beq.n	80048fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493e:	ea42 0103 	orr.w	r1, r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	f003 0204 	and.w	r2, r3, #4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004978:	ea42 0103 	orr.w	r1, r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004998:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b088      	sub	sp, #32
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	603b      	str	r3, [r7, #0]
 80049be:	4613      	mov	r3, r2
 80049c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_SPI_Transmit+0x22>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e158      	b.n	8004c86 <HAL_SPI_Transmit+0x2d4>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049dc:	f7fc fcfc 	bl	80013d8 <HAL_GetTick>
 80049e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d002      	beq.n	80049f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049f2:	2302      	movs	r3, #2
 80049f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049f6:	e13d      	b.n	8004c74 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_SPI_Transmit+0x52>
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a08:	e134      	b.n	8004c74 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	88fa      	ldrh	r2, [r7, #6]
 8004a22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	88fa      	ldrh	r2, [r7, #6]
 8004a28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a54:	d10f      	bne.n	8004a76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a80:	2b40      	cmp	r3, #64	; 0x40
 8004a82:	d007      	beq.n	8004a94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a9c:	d94b      	bls.n	8004b36 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_SPI_Transmit+0xfa>
 8004aa6:	8afb      	ldrh	r3, [r7, #22]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d13e      	bne.n	8004b2a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	881a      	ldrh	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	1c9a      	adds	r2, r3, #2
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ad0:	e02b      	b.n	8004b2a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d112      	bne.n	8004b06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	881a      	ldrh	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	1c9a      	adds	r2, r3, #2
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b04:	e011      	b.n	8004b2a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b06:	f7fc fc67 	bl	80013d8 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d803      	bhi.n	8004b1e <HAL_SPI_Transmit+0x16c>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1c:	d102      	bne.n	8004b24 <HAL_SPI_Transmit+0x172>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d102      	bne.n	8004b2a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b28:	e0a4      	b.n	8004c74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1ce      	bne.n	8004ad2 <HAL_SPI_Transmit+0x120>
 8004b34:	e07c      	b.n	8004c30 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_SPI_Transmit+0x192>
 8004b3e:	8afb      	ldrh	r3, [r7, #22]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d170      	bne.n	8004c26 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d912      	bls.n	8004b74 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	881a      	ldrh	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	1c9a      	adds	r2, r3, #2
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b02      	subs	r3, #2
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b72:	e058      	b.n	8004c26 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	7812      	ldrb	r2, [r2, #0]
 8004b80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b9a:	e044      	b.n	8004c26 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d12b      	bne.n	8004c02 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d912      	bls.n	8004bda <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	881a      	ldrh	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	1c9a      	adds	r2, r3, #2
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b02      	subs	r3, #2
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bd8:	e025      	b.n	8004c26 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	330c      	adds	r3, #12
 8004be4:	7812      	ldrb	r2, [r2, #0]
 8004be6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c00:	e011      	b.n	8004c26 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c02:	f7fc fbe9 	bl	80013d8 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d803      	bhi.n	8004c1a <HAL_SPI_Transmit+0x268>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d102      	bne.n	8004c20 <HAL_SPI_Transmit+0x26e>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d102      	bne.n	8004c26 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c24:	e026      	b.n	8004c74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1b5      	bne.n	8004b9c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	6839      	ldr	r1, [r7, #0]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fa5d 	bl	80050f4 <SPI_EndRxTxTransaction>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e000      	b.n	8004c74 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004c72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c84:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10e      	bne.n	8004cd0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d009      	beq.n	8004cd0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d004      	beq.n	8004cd0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	4798      	blx	r3
    return;
 8004cce:	e0ce      	b.n	8004e6e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <HAL_SPI_IRQHandler+0x5e>
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d004      	beq.n	8004cee <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
    return;
 8004cec:	e0bf      	b.n	8004e6e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <HAL_SPI_IRQHandler+0x7e>
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d105      	bne.n	8004d0e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80b0 	beq.w	8004e6e <HAL_SPI_IRQHandler+0x1de>
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80aa 	beq.w	8004e6e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d023      	beq.n	8004d6c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d011      	beq.n	8004d54 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d34:	f043 0204 	orr.w	r2, r3, #4
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	e00b      	b.n	8004d6c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	693b      	ldr	r3, [r7, #16]
        return;
 8004d6a:	e080      	b.n	8004e6e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d014      	beq.n	8004da0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7a:	f043 0201 	orr.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00c      	beq.n	8004dc4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dae:	f043 0208 	orr.w	r2, r3, #8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004db6:	2300      	movs	r3, #0
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d04f      	beq.n	8004e6c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004dda:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d104      	bne.n	8004df8 <HAL_SPI_IRQHandler+0x168>
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d034      	beq.n	8004e62 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0203 	bic.w	r2, r2, #3
 8004e06:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d011      	beq.n	8004e34 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <HAL_SPI_IRQHandler+0x1e4>)
 8004e16:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fc fd3b 	bl	8001898 <HAL_DMA_Abort_IT>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d016      	beq.n	8004e6a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e40:	4a0c      	ldr	r2, [pc, #48]	; (8004e74 <HAL_SPI_IRQHandler+0x1e4>)
 8004e42:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fc fd25 	bl	8001898 <HAL_DMA_Abort_IT>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004e60:	e003      	b.n	8004e6a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f808 	bl	8004e78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e68:	e000      	b.n	8004e6c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004e6a:	bf00      	nop
    return;
 8004e6c:	bf00      	nop
  }
}
 8004e6e:	3720      	adds	r7, #32
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	08004e8d 	.word	0x08004e8d

08004e78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7ff ffe5 	bl	8004e78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004eae:	bf00      	nop
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ec8:	f7fc fa86 	bl	80013d8 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	1a9b      	subs	r3, r3, r2
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ed8:	f7fc fa7e 	bl	80013d8 <HAL_GetTick>
 8004edc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ede:	4b39      	ldr	r3, [pc, #228]	; (8004fc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	015b      	lsls	r3, r3, #5
 8004ee4:	0d1b      	lsrs	r3, r3, #20
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	fb02 f303 	mul.w	r3, r2, r3
 8004eec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eee:	e054      	b.n	8004f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d050      	beq.n	8004f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ef8:	f7fc fa6e 	bl	80013d8 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d902      	bls.n	8004f0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d13d      	bne.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f26:	d111      	bne.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f30:	d004      	beq.n	8004f3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3a:	d107      	bne.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f54:	d10f      	bne.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e017      	b.n	8004fba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	bf0c      	ite	eq
 8004faa:	2301      	moveq	r3, #1
 8004fac:	2300      	movne	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d19b      	bne.n	8004ef0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000020 	.word	0x20000020

08004fc8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fda:	f7fc f9fd 	bl	80013d8 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004fea:	f7fc f9f5 	bl	80013d8 <HAL_GetTick>
 8004fee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	330c      	adds	r3, #12
 8004ff6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ff8:	4b3d      	ldr	r3, [pc, #244]	; (80050f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	00da      	lsls	r2, r3, #3
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	0d1b      	lsrs	r3, r3, #20
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005010:	e060      	b.n	80050d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005018:	d107      	bne.n	800502a <SPI_WaitFifoStateUntilTimeout+0x62>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d104      	bne.n	800502a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005028:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005030:	d050      	beq.n	80050d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005032:	f7fc f9d1 	bl	80013d8 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503e:	429a      	cmp	r2, r3
 8005040:	d902      	bls.n	8005048 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	2b00      	cmp	r3, #0
 8005046:	d13d      	bne.n	80050c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005056:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005060:	d111      	bne.n	8005086 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800506a:	d004      	beq.n	8005076 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005074:	d107      	bne.n	8005086 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005084:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800508e:	d10f      	bne.n	80050b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e010      	b.n	80050e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4013      	ands	r3, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d196      	bne.n	8005012 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3728      	adds	r7, #40	; 0x28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000020 	.word	0x20000020

080050f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2200      	movs	r2, #0
 8005108:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff ff5b 	bl	8004fc8 <SPI_WaitFifoStateUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511c:	f043 0220 	orr.w	r2, r3, #32
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e046      	b.n	80051b6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005128:	4b25      	ldr	r3, [pc, #148]	; (80051c0 <SPI_EndRxTxTransaction+0xcc>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a25      	ldr	r2, [pc, #148]	; (80051c4 <SPI_EndRxTxTransaction+0xd0>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	0d5b      	lsrs	r3, r3, #21
 8005134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005138:	fb02 f303 	mul.w	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005146:	d112      	bne.n	800516e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2200      	movs	r2, #0
 8005150:	2180      	movs	r1, #128	; 0x80
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f7ff feb0 	bl	8004eb8 <SPI_WaitFlagStateUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d016      	beq.n	800518c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005162:	f043 0220 	orr.w	r2, r3, #32
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e023      	b.n	80051b6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	3b01      	subs	r3, #1
 8005178:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b80      	cmp	r3, #128	; 0x80
 8005186:	d0f2      	beq.n	800516e <SPI_EndRxTxTransaction+0x7a>
 8005188:	e000      	b.n	800518c <SPI_EndRxTxTransaction+0x98>
        break;
 800518a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2200      	movs	r2, #0
 8005194:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f7ff ff15 	bl	8004fc8 <SPI_WaitFifoStateUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a8:	f043 0220 	orr.w	r2, r3, #32
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e000      	b.n	80051b6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000020 	.word	0x20000020
 80051c4:	165e9f81 	.word	0x165e9f81

080051c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e049      	b.n	800526e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fb fddc 	bl	8000dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f000 f986 	bl	8005518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b02      	cmp	r3, #2
 800528a:	d122      	bne.n	80052d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b02      	cmp	r3, #2
 8005298:	d11b      	bne.n	80052d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f06f 0202 	mvn.w	r2, #2
 80052a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f003 0303 	and.w	r3, r3, #3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f90f 	bl	80054dc <HAL_TIM_IC_CaptureCallback>
 80052be:	e005      	b.n	80052cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f901 	bl	80054c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f912 	bl	80054f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d122      	bne.n	8005326 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d11b      	bne.n	8005326 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f06f 0204 	mvn.w	r2, #4
 80052f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f8e5 	bl	80054dc <HAL_TIM_IC_CaptureCallback>
 8005312:	e005      	b.n	8005320 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f8d7 	bl	80054c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f8e8 	bl	80054f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b08      	cmp	r3, #8
 8005332:	d122      	bne.n	800537a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b08      	cmp	r3, #8
 8005340:	d11b      	bne.n	800537a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f06f 0208 	mvn.w	r2, #8
 800534a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2204      	movs	r2, #4
 8005350:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f8bb 	bl	80054dc <HAL_TIM_IC_CaptureCallback>
 8005366:	e005      	b.n	8005374 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8ad 	bl	80054c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f8be 	bl	80054f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b10      	cmp	r3, #16
 8005386:	d122      	bne.n	80053ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f003 0310 	and.w	r3, r3, #16
 8005392:	2b10      	cmp	r3, #16
 8005394:	d11b      	bne.n	80053ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f06f 0210 	mvn.w	r2, #16
 800539e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2208      	movs	r2, #8
 80053a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f891 	bl	80054dc <HAL_TIM_IC_CaptureCallback>
 80053ba:	e005      	b.n	80053c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f883 	bl	80054c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f894 	bl	80054f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d10e      	bne.n	80053fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d107      	bne.n	80053fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f06f 0201 	mvn.w	r2, #1
 80053f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f85d 	bl	80054b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005404:	2b80      	cmp	r3, #128	; 0x80
 8005406:	d10e      	bne.n	8005426 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005412:	2b80      	cmp	r3, #128	; 0x80
 8005414:	d107      	bne.n	8005426 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800541e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f923 	bl	800566c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005434:	d10e      	bne.n	8005454 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005440:	2b80      	cmp	r3, #128	; 0x80
 8005442:	d107      	bne.n	8005454 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800544c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f916 	bl	8005680 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d10e      	bne.n	8005480 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546c:	2b40      	cmp	r3, #64	; 0x40
 800546e:	d107      	bne.n	8005480 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f842 	bl	8005504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b20      	cmp	r3, #32
 800548c:	d10e      	bne.n	80054ac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b20      	cmp	r3, #32
 800549a:	d107      	bne.n	80054ac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0220 	mvn.w	r2, #32
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f8d6 	bl	8005658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a40      	ldr	r2, [pc, #256]	; (800562c <TIM_Base_SetConfig+0x114>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d013      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005536:	d00f      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a3d      	ldr	r2, [pc, #244]	; (8005630 <TIM_Base_SetConfig+0x118>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00b      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a3c      	ldr	r2, [pc, #240]	; (8005634 <TIM_Base_SetConfig+0x11c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d007      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a3b      	ldr	r2, [pc, #236]	; (8005638 <TIM_Base_SetConfig+0x120>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a3a      	ldr	r2, [pc, #232]	; (800563c <TIM_Base_SetConfig+0x124>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d108      	bne.n	800556a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2f      	ldr	r2, [pc, #188]	; (800562c <TIM_Base_SetConfig+0x114>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d02b      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005578:	d027      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a2c      	ldr	r2, [pc, #176]	; (8005630 <TIM_Base_SetConfig+0x118>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d023      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a2b      	ldr	r2, [pc, #172]	; (8005634 <TIM_Base_SetConfig+0x11c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01f      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2a      	ldr	r2, [pc, #168]	; (8005638 <TIM_Base_SetConfig+0x120>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01b      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a29      	ldr	r2, [pc, #164]	; (800563c <TIM_Base_SetConfig+0x124>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d017      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a28      	ldr	r2, [pc, #160]	; (8005640 <TIM_Base_SetConfig+0x128>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d013      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a27      	ldr	r2, [pc, #156]	; (8005644 <TIM_Base_SetConfig+0x12c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00f      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a26      	ldr	r2, [pc, #152]	; (8005648 <TIM_Base_SetConfig+0x130>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00b      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a25      	ldr	r2, [pc, #148]	; (800564c <TIM_Base_SetConfig+0x134>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d007      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a24      	ldr	r2, [pc, #144]	; (8005650 <TIM_Base_SetConfig+0x138>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a23      	ldr	r2, [pc, #140]	; (8005654 <TIM_Base_SetConfig+0x13c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d108      	bne.n	80055dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a0a      	ldr	r2, [pc, #40]	; (800562c <TIM_Base_SetConfig+0x114>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_Base_SetConfig+0xf8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a0c      	ldr	r2, [pc, #48]	; (800563c <TIM_Base_SetConfig+0x124>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d103      	bne.n	8005618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	615a      	str	r2, [r3, #20]
}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40010000 	.word	0x40010000
 8005630:	40000400 	.word	0x40000400
 8005634:	40000800 	.word	0x40000800
 8005638:	40000c00 	.word	0x40000c00
 800563c:	40010400 	.word	0x40010400
 8005640:	40014000 	.word	0x40014000
 8005644:	40014400 	.word	0x40014400
 8005648:	40014800 	.word	0x40014800
 800564c:	40001800 	.word	0x40001800
 8005650:	40001c00 	.word	0x40001c00
 8005654:	40002000 	.word	0x40002000

08005658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e040      	b.n	8005728 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7fb fb9e 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2224      	movs	r2, #36	; 0x24
 80056c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0201 	bic.w	r2, r2, #1
 80056d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fbe6 	bl	8005ea4 <UART_SetConfig>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e022      	b.n	8005728 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fe3e 	bl	800636c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800570e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fec5 	bl	80064b0 <UART_CheckIdleState>
 8005726:	4603      	mov	r3, r0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08a      	sub	sp, #40	; 0x28
 8005734:	af02      	add	r7, sp, #8
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	4613      	mov	r3, r2
 800573e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005744:	2b20      	cmp	r3, #32
 8005746:	d171      	bne.n	800582c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <HAL_UART_Transmit+0x24>
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e06a      	b.n	800582e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2221      	movs	r2, #33	; 0x21
 8005764:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005766:	f7fb fe37 	bl	80013d8 <HAL_GetTick>
 800576a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	88fa      	ldrh	r2, [r7, #6]
 8005770:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	88fa      	ldrh	r2, [r7, #6]
 8005778:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005784:	d108      	bne.n	8005798 <HAL_UART_Transmit+0x68>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800578e:	2300      	movs	r3, #0
 8005790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	e003      	b.n	80057a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057a0:	e02c      	b.n	80057fc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2200      	movs	r2, #0
 80057aa:	2180      	movs	r1, #128	; 0x80
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 feb6 	bl	800651e <UART_WaitOnFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e038      	b.n	800582e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10b      	bne.n	80057da <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	3302      	adds	r3, #2
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	e007      	b.n	80057ea <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	781a      	ldrb	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	3301      	adds	r3, #1
 80057e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1cc      	bne.n	80057a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2200      	movs	r2, #0
 8005810:	2140      	movs	r1, #64	; 0x40
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 fe83 	bl	800651e <UART_WaitOnFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e005      	b.n	800582e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2220      	movs	r2, #32
 8005826:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	e000      	b.n	800582e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800582c:	2302      	movs	r3, #2
  }
}
 800582e:	4618      	mov	r0, r3
 8005830:	3720      	adds	r7, #32
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b08a      	sub	sp, #40	; 0x28
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	4613      	mov	r3, r2
 8005842:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800584a:	2b20      	cmp	r3, #32
 800584c:	d132      	bne.n	80058b4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <HAL_UART_Receive_IT+0x24>
 8005854:	88fb      	ldrh	r3, [r7, #6]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e02b      	b.n	80058b6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d018      	beq.n	80058a4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	613b      	str	r3, [r7, #16]
   return(result);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	623b      	str	r3, [r7, #32]
 8005892:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	69f9      	ldr	r1, [r7, #28]
 8005896:	6a3a      	ldr	r2, [r7, #32]
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	61bb      	str	r3, [r7, #24]
   return(result);
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e6      	bne.n	8005872 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058a4:	88fb      	ldrh	r3, [r7, #6]
 80058a6:	461a      	mov	r2, r3
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 fefe 	bl	80066ac <UART_Start_Receive_IT>
 80058b0:	4603      	mov	r3, r0
 80058b2:	e000      	b.n	80058b6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80058b4:	2302      	movs	r3, #2
  }
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3728      	adds	r7, #40	; 0x28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b0ba      	sub	sp, #232	; 0xe8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80058ee:	4013      	ands	r3, r2
 80058f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d115      	bne.n	8005928 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00f      	beq.n	8005928 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d009      	beq.n	8005928 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8297 	beq.w	8005e4c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
      }
      return;
 8005926:	e291      	b.n	8005e4c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8117 	beq.w	8005b60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800593e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005942:	4b85      	ldr	r3, [pc, #532]	; (8005b58 <HAL_UART_IRQHandler+0x298>)
 8005944:	4013      	ands	r3, r2
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 810a 	beq.w	8005b60 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800594c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d011      	beq.n	800597c <HAL_UART_IRQHandler+0xbc>
 8005958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800595c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00b      	beq.n	800597c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2201      	movs	r2, #1
 800596a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005972:	f043 0201 	orr.w	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800597c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d011      	beq.n	80059ac <HAL_UART_IRQHandler+0xec>
 8005988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00b      	beq.n	80059ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2202      	movs	r2, #2
 800599a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059a2:	f043 0204 	orr.w	r2, r3, #4
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d011      	beq.n	80059dc <HAL_UART_IRQHandler+0x11c>
 80059b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00b      	beq.n	80059dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2204      	movs	r2, #4
 80059ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d2:	f043 0202 	orr.w	r2, r3, #2
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d017      	beq.n	8005a18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d105      	bne.n	8005a00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00b      	beq.n	8005a18 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2208      	movs	r2, #8
 8005a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a0e:	f043 0208 	orr.w	r2, r3, #8
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d012      	beq.n	8005a4a <HAL_UART_IRQHandler+0x18a>
 8005a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00c      	beq.n	8005a4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a40:	f043 0220 	orr.w	r2, r3, #32
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 81fd 	beq.w	8005e50 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00d      	beq.n	8005a7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d007      	beq.n	8005a7e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b40      	cmp	r3, #64	; 0x40
 8005a94:	d005      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d04f      	beq.n	8005b42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fec8 	bl	8006838 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d141      	bne.n	8005b3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3308      	adds	r3, #8
 8005abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3308      	adds	r3, #8
 8005ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1d9      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d013      	beq.n	8005b32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b0e:	4a13      	ldr	r2, [pc, #76]	; (8005b5c <HAL_UART_IRQHandler+0x29c>)
 8005b10:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fb febe 	bl	8001898 <HAL_DMA_Abort_IT>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d017      	beq.n	8005b52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	e00f      	b.n	8005b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f9a0 	bl	8005e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b38:	e00b      	b.n	8005b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f99c 	bl	8005e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	e007      	b.n	8005b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f998 	bl	8005e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005b50:	e17e      	b.n	8005e50 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b52:	bf00      	nop
    return;
 8005b54:	e17c      	b.n	8005e50 <HAL_UART_IRQHandler+0x590>
 8005b56:	bf00      	nop
 8005b58:	04000120 	.word	0x04000120
 8005b5c:	08006901 	.word	0x08006901

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	f040 814c 	bne.w	8005e02 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6e:	f003 0310 	and.w	r3, r3, #16
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 8145 	beq.w	8005e02 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 813e 	beq.w	8005e02 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2210      	movs	r2, #16
 8005b8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b98:	2b40      	cmp	r3, #64	; 0x40
 8005b9a:	f040 80b6 	bne.w	8005d0a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005baa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 8150 	beq.w	8005e54 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	f080 8148 	bcs.w	8005e54 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd8:	f000 8086 	beq.w	8005ce8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1da      	bne.n	8005bdc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c38:	f023 0301 	bic.w	r3, r3, #1
 8005c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3308      	adds	r3, #8
 8005c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e1      	bne.n	8005c26 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3308      	adds	r3, #8
 8005c68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3308      	adds	r3, #8
 8005c82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e3      	bne.n	8005c62 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb8:	f023 0310 	bic.w	r3, r3, #16
 8005cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cca:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ccc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e4      	bne.n	8005ca8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fb fd68 	bl	80017b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f8c2 	bl	8005e8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d08:	e0a4      	b.n	8005e54 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 8096 	beq.w	8005e58 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005d2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 8091 	beq.w	8005e58 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d58:	647b      	str	r3, [r7, #68]	; 0x44
 8005d5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d60:	e841 2300 	strex	r3, r2, [r1]
 8005d64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1e4      	bne.n	8005d36 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3308      	adds	r3, #8
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	e853 3f00 	ldrex	r3, [r3]
 8005d7a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	f023 0301 	bic.w	r3, r3, #1
 8005d82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d90:	633a      	str	r2, [r7, #48]	; 0x30
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d98:	e841 2300 	strex	r3, r2, [r1]
 8005d9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e3      	bne.n	8005d6c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f023 0310 	bic.w	r3, r3, #16
 8005dcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	69b9      	ldr	r1, [r7, #24]
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	617b      	str	r3, [r7, #20]
   return(result);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e4      	bne.n	8005db8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2202      	movs	r2, #2
 8005df2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005df4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f846 	bl	8005e8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e00:	e02a      	b.n	8005e58 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00e      	beq.n	8005e2c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d008      	beq.n	8005e2c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01c      	beq.n	8005e5c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	4798      	blx	r3
    }
    return;
 8005e2a:	e017      	b.n	8005e5c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d012      	beq.n	8005e5e <HAL_UART_IRQHandler+0x59e>
 8005e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00c      	beq.n	8005e5e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fd71 	bl	800692c <UART_EndTransmit_IT>
    return;
 8005e4a:	e008      	b.n	8005e5e <HAL_UART_IRQHandler+0x59e>
      return;
 8005e4c:	bf00      	nop
 8005e4e:	e006      	b.n	8005e5e <HAL_UART_IRQHandler+0x59e>
    return;
 8005e50:	bf00      	nop
 8005e52:	e004      	b.n	8005e5e <HAL_UART_IRQHandler+0x59e>
      return;
 8005e54:	bf00      	nop
 8005e56:	e002      	b.n	8005e5e <HAL_UART_IRQHandler+0x59e>
      return;
 8005e58:	bf00      	nop
 8005e5a:	e000      	b.n	8005e5e <HAL_UART_IRQHandler+0x59e>
    return;
 8005e5c:	bf00      	nop
  }

}
 8005e5e:	37e8      	adds	r7, #232	; 0xe8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4ba6      	ldr	r3, [pc, #664]	; (8006168 <UART_SetConfig+0x2c4>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	6979      	ldr	r1, [r7, #20]
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a94      	ldr	r2, [pc, #592]	; (800616c <UART_SetConfig+0x2c8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d120      	bne.n	8005f62 <UART_SetConfig+0xbe>
 8005f20:	4b93      	ldr	r3, [pc, #588]	; (8006170 <UART_SetConfig+0x2cc>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d816      	bhi.n	8005f5c <UART_SetConfig+0xb8>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <UART_SetConfig+0x90>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f51 	.word	0x08005f51
 8005f3c:	08005f4b 	.word	0x08005f4b
 8005f40:	08005f57 	.word	0x08005f57
 8005f44:	2301      	movs	r3, #1
 8005f46:	77fb      	strb	r3, [r7, #31]
 8005f48:	e150      	b.n	80061ec <UART_SetConfig+0x348>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	77fb      	strb	r3, [r7, #31]
 8005f4e:	e14d      	b.n	80061ec <UART_SetConfig+0x348>
 8005f50:	2304      	movs	r3, #4
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e14a      	b.n	80061ec <UART_SetConfig+0x348>
 8005f56:	2308      	movs	r3, #8
 8005f58:	77fb      	strb	r3, [r7, #31]
 8005f5a:	e147      	b.n	80061ec <UART_SetConfig+0x348>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e144      	b.n	80061ec <UART_SetConfig+0x348>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a83      	ldr	r2, [pc, #524]	; (8006174 <UART_SetConfig+0x2d0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d132      	bne.n	8005fd2 <UART_SetConfig+0x12e>
 8005f6c:	4b80      	ldr	r3, [pc, #512]	; (8006170 <UART_SetConfig+0x2cc>)
 8005f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	2b0c      	cmp	r3, #12
 8005f78:	d828      	bhi.n	8005fcc <UART_SetConfig+0x128>
 8005f7a:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <UART_SetConfig+0xdc>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005fb5 	.word	0x08005fb5
 8005f84:	08005fcd 	.word	0x08005fcd
 8005f88:	08005fcd 	.word	0x08005fcd
 8005f8c:	08005fcd 	.word	0x08005fcd
 8005f90:	08005fc1 	.word	0x08005fc1
 8005f94:	08005fcd 	.word	0x08005fcd
 8005f98:	08005fcd 	.word	0x08005fcd
 8005f9c:	08005fcd 	.word	0x08005fcd
 8005fa0:	08005fbb 	.word	0x08005fbb
 8005fa4:	08005fcd 	.word	0x08005fcd
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fcd 	.word	0x08005fcd
 8005fb0:	08005fc7 	.word	0x08005fc7
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e118      	b.n	80061ec <UART_SetConfig+0x348>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	77fb      	strb	r3, [r7, #31]
 8005fbe:	e115      	b.n	80061ec <UART_SetConfig+0x348>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e112      	b.n	80061ec <UART_SetConfig+0x348>
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	77fb      	strb	r3, [r7, #31]
 8005fca:	e10f      	b.n	80061ec <UART_SetConfig+0x348>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e10c      	b.n	80061ec <UART_SetConfig+0x348>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a68      	ldr	r2, [pc, #416]	; (8006178 <UART_SetConfig+0x2d4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d120      	bne.n	800601e <UART_SetConfig+0x17a>
 8005fdc:	4b64      	ldr	r3, [pc, #400]	; (8006170 <UART_SetConfig+0x2cc>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fe6:	2b30      	cmp	r3, #48	; 0x30
 8005fe8:	d013      	beq.n	8006012 <UART_SetConfig+0x16e>
 8005fea:	2b30      	cmp	r3, #48	; 0x30
 8005fec:	d814      	bhi.n	8006018 <UART_SetConfig+0x174>
 8005fee:	2b20      	cmp	r3, #32
 8005ff0:	d009      	beq.n	8006006 <UART_SetConfig+0x162>
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d810      	bhi.n	8006018 <UART_SetConfig+0x174>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <UART_SetConfig+0x15c>
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d006      	beq.n	800600c <UART_SetConfig+0x168>
 8005ffe:	e00b      	b.n	8006018 <UART_SetConfig+0x174>
 8006000:	2300      	movs	r3, #0
 8006002:	77fb      	strb	r3, [r7, #31]
 8006004:	e0f2      	b.n	80061ec <UART_SetConfig+0x348>
 8006006:	2302      	movs	r3, #2
 8006008:	77fb      	strb	r3, [r7, #31]
 800600a:	e0ef      	b.n	80061ec <UART_SetConfig+0x348>
 800600c:	2304      	movs	r3, #4
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e0ec      	b.n	80061ec <UART_SetConfig+0x348>
 8006012:	2308      	movs	r3, #8
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e0e9      	b.n	80061ec <UART_SetConfig+0x348>
 8006018:	2310      	movs	r3, #16
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e0e6      	b.n	80061ec <UART_SetConfig+0x348>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a56      	ldr	r2, [pc, #344]	; (800617c <UART_SetConfig+0x2d8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d120      	bne.n	800606a <UART_SetConfig+0x1c6>
 8006028:	4b51      	ldr	r3, [pc, #324]	; (8006170 <UART_SetConfig+0x2cc>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006032:	2bc0      	cmp	r3, #192	; 0xc0
 8006034:	d013      	beq.n	800605e <UART_SetConfig+0x1ba>
 8006036:	2bc0      	cmp	r3, #192	; 0xc0
 8006038:	d814      	bhi.n	8006064 <UART_SetConfig+0x1c0>
 800603a:	2b80      	cmp	r3, #128	; 0x80
 800603c:	d009      	beq.n	8006052 <UART_SetConfig+0x1ae>
 800603e:	2b80      	cmp	r3, #128	; 0x80
 8006040:	d810      	bhi.n	8006064 <UART_SetConfig+0x1c0>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <UART_SetConfig+0x1a8>
 8006046:	2b40      	cmp	r3, #64	; 0x40
 8006048:	d006      	beq.n	8006058 <UART_SetConfig+0x1b4>
 800604a:	e00b      	b.n	8006064 <UART_SetConfig+0x1c0>
 800604c:	2300      	movs	r3, #0
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e0cc      	b.n	80061ec <UART_SetConfig+0x348>
 8006052:	2302      	movs	r3, #2
 8006054:	77fb      	strb	r3, [r7, #31]
 8006056:	e0c9      	b.n	80061ec <UART_SetConfig+0x348>
 8006058:	2304      	movs	r3, #4
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	e0c6      	b.n	80061ec <UART_SetConfig+0x348>
 800605e:	2308      	movs	r3, #8
 8006060:	77fb      	strb	r3, [r7, #31]
 8006062:	e0c3      	b.n	80061ec <UART_SetConfig+0x348>
 8006064:	2310      	movs	r3, #16
 8006066:	77fb      	strb	r3, [r7, #31]
 8006068:	e0c0      	b.n	80061ec <UART_SetConfig+0x348>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a44      	ldr	r2, [pc, #272]	; (8006180 <UART_SetConfig+0x2dc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d125      	bne.n	80060c0 <UART_SetConfig+0x21c>
 8006074:	4b3e      	ldr	r3, [pc, #248]	; (8006170 <UART_SetConfig+0x2cc>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006082:	d017      	beq.n	80060b4 <UART_SetConfig+0x210>
 8006084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006088:	d817      	bhi.n	80060ba <UART_SetConfig+0x216>
 800608a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800608e:	d00b      	beq.n	80060a8 <UART_SetConfig+0x204>
 8006090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006094:	d811      	bhi.n	80060ba <UART_SetConfig+0x216>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <UART_SetConfig+0x1fe>
 800609a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609e:	d006      	beq.n	80060ae <UART_SetConfig+0x20a>
 80060a0:	e00b      	b.n	80060ba <UART_SetConfig+0x216>
 80060a2:	2300      	movs	r3, #0
 80060a4:	77fb      	strb	r3, [r7, #31]
 80060a6:	e0a1      	b.n	80061ec <UART_SetConfig+0x348>
 80060a8:	2302      	movs	r3, #2
 80060aa:	77fb      	strb	r3, [r7, #31]
 80060ac:	e09e      	b.n	80061ec <UART_SetConfig+0x348>
 80060ae:	2304      	movs	r3, #4
 80060b0:	77fb      	strb	r3, [r7, #31]
 80060b2:	e09b      	b.n	80061ec <UART_SetConfig+0x348>
 80060b4:	2308      	movs	r3, #8
 80060b6:	77fb      	strb	r3, [r7, #31]
 80060b8:	e098      	b.n	80061ec <UART_SetConfig+0x348>
 80060ba:	2310      	movs	r3, #16
 80060bc:	77fb      	strb	r3, [r7, #31]
 80060be:	e095      	b.n	80061ec <UART_SetConfig+0x348>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a2f      	ldr	r2, [pc, #188]	; (8006184 <UART_SetConfig+0x2e0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d125      	bne.n	8006116 <UART_SetConfig+0x272>
 80060ca:	4b29      	ldr	r3, [pc, #164]	; (8006170 <UART_SetConfig+0x2cc>)
 80060cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060d8:	d017      	beq.n	800610a <UART_SetConfig+0x266>
 80060da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060de:	d817      	bhi.n	8006110 <UART_SetConfig+0x26c>
 80060e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e4:	d00b      	beq.n	80060fe <UART_SetConfig+0x25a>
 80060e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ea:	d811      	bhi.n	8006110 <UART_SetConfig+0x26c>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d003      	beq.n	80060f8 <UART_SetConfig+0x254>
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f4:	d006      	beq.n	8006104 <UART_SetConfig+0x260>
 80060f6:	e00b      	b.n	8006110 <UART_SetConfig+0x26c>
 80060f8:	2301      	movs	r3, #1
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	e076      	b.n	80061ec <UART_SetConfig+0x348>
 80060fe:	2302      	movs	r3, #2
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e073      	b.n	80061ec <UART_SetConfig+0x348>
 8006104:	2304      	movs	r3, #4
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e070      	b.n	80061ec <UART_SetConfig+0x348>
 800610a:	2308      	movs	r3, #8
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e06d      	b.n	80061ec <UART_SetConfig+0x348>
 8006110:	2310      	movs	r3, #16
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e06a      	b.n	80061ec <UART_SetConfig+0x348>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1b      	ldr	r2, [pc, #108]	; (8006188 <UART_SetConfig+0x2e4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d138      	bne.n	8006192 <UART_SetConfig+0x2ee>
 8006120:	4b13      	ldr	r3, [pc, #76]	; (8006170 <UART_SetConfig+0x2cc>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006126:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800612a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800612e:	d017      	beq.n	8006160 <UART_SetConfig+0x2bc>
 8006130:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006134:	d82a      	bhi.n	800618c <UART_SetConfig+0x2e8>
 8006136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800613a:	d00b      	beq.n	8006154 <UART_SetConfig+0x2b0>
 800613c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006140:	d824      	bhi.n	800618c <UART_SetConfig+0x2e8>
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <UART_SetConfig+0x2aa>
 8006146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614a:	d006      	beq.n	800615a <UART_SetConfig+0x2b6>
 800614c:	e01e      	b.n	800618c <UART_SetConfig+0x2e8>
 800614e:	2300      	movs	r3, #0
 8006150:	77fb      	strb	r3, [r7, #31]
 8006152:	e04b      	b.n	80061ec <UART_SetConfig+0x348>
 8006154:	2302      	movs	r3, #2
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e048      	b.n	80061ec <UART_SetConfig+0x348>
 800615a:	2304      	movs	r3, #4
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	e045      	b.n	80061ec <UART_SetConfig+0x348>
 8006160:	2308      	movs	r3, #8
 8006162:	77fb      	strb	r3, [r7, #31]
 8006164:	e042      	b.n	80061ec <UART_SetConfig+0x348>
 8006166:	bf00      	nop
 8006168:	efff69f3 	.word	0xefff69f3
 800616c:	40011000 	.word	0x40011000
 8006170:	40023800 	.word	0x40023800
 8006174:	40004400 	.word	0x40004400
 8006178:	40004800 	.word	0x40004800
 800617c:	40004c00 	.word	0x40004c00
 8006180:	40005000 	.word	0x40005000
 8006184:	40011400 	.word	0x40011400
 8006188:	40007800 	.word	0x40007800
 800618c:	2310      	movs	r3, #16
 800618e:	77fb      	strb	r3, [r7, #31]
 8006190:	e02c      	b.n	80061ec <UART_SetConfig+0x348>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a72      	ldr	r2, [pc, #456]	; (8006360 <UART_SetConfig+0x4bc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d125      	bne.n	80061e8 <UART_SetConfig+0x344>
 800619c:	4b71      	ldr	r3, [pc, #452]	; (8006364 <UART_SetConfig+0x4c0>)
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061aa:	d017      	beq.n	80061dc <UART_SetConfig+0x338>
 80061ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061b0:	d817      	bhi.n	80061e2 <UART_SetConfig+0x33e>
 80061b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b6:	d00b      	beq.n	80061d0 <UART_SetConfig+0x32c>
 80061b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061bc:	d811      	bhi.n	80061e2 <UART_SetConfig+0x33e>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <UART_SetConfig+0x326>
 80061c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061c6:	d006      	beq.n	80061d6 <UART_SetConfig+0x332>
 80061c8:	e00b      	b.n	80061e2 <UART_SetConfig+0x33e>
 80061ca:	2300      	movs	r3, #0
 80061cc:	77fb      	strb	r3, [r7, #31]
 80061ce:	e00d      	b.n	80061ec <UART_SetConfig+0x348>
 80061d0:	2302      	movs	r3, #2
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e00a      	b.n	80061ec <UART_SetConfig+0x348>
 80061d6:	2304      	movs	r3, #4
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e007      	b.n	80061ec <UART_SetConfig+0x348>
 80061dc:	2308      	movs	r3, #8
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e004      	b.n	80061ec <UART_SetConfig+0x348>
 80061e2:	2310      	movs	r3, #16
 80061e4:	77fb      	strb	r3, [r7, #31]
 80061e6:	e001      	b.n	80061ec <UART_SetConfig+0x348>
 80061e8:	2310      	movs	r3, #16
 80061ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f4:	d15b      	bne.n	80062ae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80061f6:	7ffb      	ldrb	r3, [r7, #31]
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d828      	bhi.n	800624e <UART_SetConfig+0x3aa>
 80061fc:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <UART_SetConfig+0x360>)
 80061fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006202:	bf00      	nop
 8006204:	08006229 	.word	0x08006229
 8006208:	08006231 	.word	0x08006231
 800620c:	08006239 	.word	0x08006239
 8006210:	0800624f 	.word	0x0800624f
 8006214:	0800623f 	.word	0x0800623f
 8006218:	0800624f 	.word	0x0800624f
 800621c:	0800624f 	.word	0x0800624f
 8006220:	0800624f 	.word	0x0800624f
 8006224:	08006247 	.word	0x08006247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006228:	f7fd ff00 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 800622c:	61b8      	str	r0, [r7, #24]
        break;
 800622e:	e013      	b.n	8006258 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006230:	f7fd ff10 	bl	8004054 <HAL_RCC_GetPCLK2Freq>
 8006234:	61b8      	str	r0, [r7, #24]
        break;
 8006236:	e00f      	b.n	8006258 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006238:	4b4b      	ldr	r3, [pc, #300]	; (8006368 <UART_SetConfig+0x4c4>)
 800623a:	61bb      	str	r3, [r7, #24]
        break;
 800623c:	e00c      	b.n	8006258 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800623e:	f7fd fde3 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8006242:	61b8      	str	r0, [r7, #24]
        break;
 8006244:	e008      	b.n	8006258 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800624a:	61bb      	str	r3, [r7, #24]
        break;
 800624c:	e004      	b.n	8006258 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	77bb      	strb	r3, [r7, #30]
        break;
 8006256:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d074      	beq.n	8006348 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	005a      	lsls	r2, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	085b      	lsrs	r3, r3, #1
 8006268:	441a      	add	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006272:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b0f      	cmp	r3, #15
 8006278:	d916      	bls.n	80062a8 <UART_SetConfig+0x404>
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006280:	d212      	bcs.n	80062a8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	b29b      	uxth	r3, r3
 8006286:	f023 030f 	bic.w	r3, r3, #15
 800628a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	085b      	lsrs	r3, r3, #1
 8006290:	b29b      	uxth	r3, r3
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	b29a      	uxth	r2, r3
 8006298:	89fb      	ldrh	r3, [r7, #14]
 800629a:	4313      	orrs	r3, r2
 800629c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	89fa      	ldrh	r2, [r7, #14]
 80062a4:	60da      	str	r2, [r3, #12]
 80062a6:	e04f      	b.n	8006348 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	77bb      	strb	r3, [r7, #30]
 80062ac:	e04c      	b.n	8006348 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062ae:	7ffb      	ldrb	r3, [r7, #31]
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d828      	bhi.n	8006306 <UART_SetConfig+0x462>
 80062b4:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <UART_SetConfig+0x418>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062e9 	.word	0x080062e9
 80062c4:	080062f1 	.word	0x080062f1
 80062c8:	08006307 	.word	0x08006307
 80062cc:	080062f7 	.word	0x080062f7
 80062d0:	08006307 	.word	0x08006307
 80062d4:	08006307 	.word	0x08006307
 80062d8:	08006307 	.word	0x08006307
 80062dc:	080062ff 	.word	0x080062ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e0:	f7fd fea4 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 80062e4:	61b8      	str	r0, [r7, #24]
        break;
 80062e6:	e013      	b.n	8006310 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062e8:	f7fd feb4 	bl	8004054 <HAL_RCC_GetPCLK2Freq>
 80062ec:	61b8      	str	r0, [r7, #24]
        break;
 80062ee:	e00f      	b.n	8006310 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062f0:	4b1d      	ldr	r3, [pc, #116]	; (8006368 <UART_SetConfig+0x4c4>)
 80062f2:	61bb      	str	r3, [r7, #24]
        break;
 80062f4:	e00c      	b.n	8006310 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062f6:	f7fd fd87 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 80062fa:	61b8      	str	r0, [r7, #24]
        break;
 80062fc:	e008      	b.n	8006310 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006302:	61bb      	str	r3, [r7, #24]
        break;
 8006304:	e004      	b.n	8006310 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	77bb      	strb	r3, [r7, #30]
        break;
 800630e:	bf00      	nop
    }

    if (pclk != 0U)
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d018      	beq.n	8006348 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	085a      	lsrs	r2, r3, #1
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	441a      	add	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	fbb2 f3f3 	udiv	r3, r2, r3
 8006328:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b0f      	cmp	r3, #15
 800632e:	d909      	bls.n	8006344 <UART_SetConfig+0x4a0>
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006336:	d205      	bcs.n	8006344 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	b29a      	uxth	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	60da      	str	r2, [r3, #12]
 8006342:	e001      	b.n	8006348 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006354:	7fbb      	ldrb	r3, [r7, #30]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3720      	adds	r7, #32
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	40007c00 	.word	0x40007c00
 8006364:	40023800 	.word	0x40023800
 8006368:	00f42400 	.word	0x00f42400

0800636c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01a      	beq.n	8006482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800646a:	d10a      	bne.n	8006482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	605a      	str	r2, [r3, #4]
  }
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064c0:	f7fa ff8a 	bl	80013d8 <HAL_GetTick>
 80064c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d10e      	bne.n	80064f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f81b 	bl	800651e <UART_WaitOnFlagUntilTimeout>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e011      	b.n	8006516 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b09c      	sub	sp, #112	; 0x70
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	4613      	mov	r3, r2
 800652c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800652e:	e0a7      	b.n	8006680 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	f000 80a3 	beq.w	8006680 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653a:	f7fa ff4d 	bl	80013d8 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006546:	429a      	cmp	r2, r3
 8006548:	d302      	bcc.n	8006550 <UART_WaitOnFlagUntilTimeout+0x32>
 800654a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800654c:	2b00      	cmp	r3, #0
 800654e:	d13f      	bne.n	80065d0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800655e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006560:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006564:	667b      	str	r3, [r7, #100]	; 0x64
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	461a      	mov	r2, r3
 800656c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800656e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006570:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006572:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006574:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006576:	e841 2300 	strex	r3, r2, [r1]
 800657a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800657c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1e6      	bne.n	8006550 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3308      	adds	r3, #8
 8006588:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006594:	f023 0301 	bic.w	r3, r3, #1
 8006598:	663b      	str	r3, [r7, #96]	; 0x60
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3308      	adds	r3, #8
 80065a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80065a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e5      	bne.n	8006582 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2220      	movs	r2, #32
 80065ba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e068      	b.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d050      	beq.n	8006680 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ec:	d148      	bne.n	8006680 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065f6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800660c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006616:	637b      	str	r3, [r7, #52]	; 0x34
 8006618:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800661c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e6      	bne.n	80065f8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3308      	adds	r3, #8
 8006630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	613b      	str	r3, [r7, #16]
   return(result);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f023 0301 	bic.w	r3, r3, #1
 8006640:	66bb      	str	r3, [r7, #104]	; 0x68
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3308      	adds	r3, #8
 8006648:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800664a:	623a      	str	r2, [r7, #32]
 800664c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	69f9      	ldr	r1, [r7, #28]
 8006650:	6a3a      	ldr	r2, [r7, #32]
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	61bb      	str	r3, [r7, #24]
   return(result);
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e5      	bne.n	800662a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2220      	movs	r2, #32
 8006668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2220      	movs	r2, #32
 8006670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e010      	b.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	69da      	ldr	r2, [r3, #28]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4013      	ands	r3, r2
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	429a      	cmp	r2, r3
 800668e:	bf0c      	ite	eq
 8006690:	2301      	moveq	r3, #1
 8006692:	2300      	movne	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	461a      	mov	r2, r3
 8006698:	79fb      	ldrb	r3, [r7, #7]
 800669a:	429a      	cmp	r2, r3
 800669c:	f43f af48 	beq.w	8006530 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3770      	adds	r7, #112	; 0x70
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b097      	sub	sp, #92	; 0x5c
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	4613      	mov	r3, r2
 80066b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	88fa      	ldrh	r2, [r7, #6]
 80066c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	88fa      	ldrh	r2, [r7, #6]
 80066cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066de:	d10e      	bne.n	80066fe <UART_Start_Receive_IT+0x52>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d105      	bne.n	80066f4 <UART_Start_Receive_IT+0x48>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066f2:	e02d      	b.n	8006750 <UART_Start_Receive_IT+0xa4>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	22ff      	movs	r2, #255	; 0xff
 80066f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066fc:	e028      	b.n	8006750 <UART_Start_Receive_IT+0xa4>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10d      	bne.n	8006722 <UART_Start_Receive_IT+0x76>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d104      	bne.n	8006718 <UART_Start_Receive_IT+0x6c>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	22ff      	movs	r2, #255	; 0xff
 8006712:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006716:	e01b      	b.n	8006750 <UART_Start_Receive_IT+0xa4>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	227f      	movs	r2, #127	; 0x7f
 800671c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006720:	e016      	b.n	8006750 <UART_Start_Receive_IT+0xa4>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800672a:	d10d      	bne.n	8006748 <UART_Start_Receive_IT+0x9c>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <UART_Start_Receive_IT+0x92>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	227f      	movs	r2, #127	; 0x7f
 8006738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800673c:	e008      	b.n	8006750 <UART_Start_Receive_IT+0xa4>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	223f      	movs	r2, #63	; 0x3f
 8006742:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006746:	e003      	b.n	8006750 <UART_Start_Receive_IT+0xa4>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2222      	movs	r2, #34	; 0x22
 800675c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3308      	adds	r3, #8
 8006766:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006772:	f043 0301 	orr.w	r3, r3, #1
 8006776:	657b      	str	r3, [r7, #84]	; 0x54
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3308      	adds	r3, #8
 800677e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006780:	64ba      	str	r2, [r7, #72]	; 0x48
 8006782:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006788:	e841 2300 	strex	r3, r2, [r1]
 800678c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800678e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e5      	bne.n	8006760 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679c:	d107      	bne.n	80067ae <UART_Start_Receive_IT+0x102>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d103      	bne.n	80067ae <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4a21      	ldr	r2, [pc, #132]	; (8006830 <UART_Start_Receive_IT+0x184>)
 80067aa:	669a      	str	r2, [r3, #104]	; 0x68
 80067ac:	e002      	b.n	80067b4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4a20      	ldr	r2, [pc, #128]	; (8006834 <UART_Start_Receive_IT+0x188>)
 80067b2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d019      	beq.n	80067f0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80067d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067da:	637b      	str	r3, [r7, #52]	; 0x34
 80067dc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e6      	bne.n	80067bc <UART_Start_Receive_IT+0x110>
 80067ee:	e018      	b.n	8006822 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	613b      	str	r3, [r7, #16]
   return(result);
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f043 0320 	orr.w	r3, r3, #32
 8006804:	653b      	str	r3, [r7, #80]	; 0x50
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800680e:	623b      	str	r3, [r7, #32]
 8006810:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	69f9      	ldr	r1, [r7, #28]
 8006814:	6a3a      	ldr	r2, [r7, #32]
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	61bb      	str	r3, [r7, #24]
   return(result);
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e6      	bne.n	80067f0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	375c      	adds	r7, #92	; 0x5c
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	08006ae7 	.word	0x08006ae7
 8006834:	08006981 	.word	0x08006981

08006838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006838:	b480      	push	{r7}
 800683a:	b095      	sub	sp, #84	; 0x54
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006854:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800685e:	643b      	str	r3, [r7, #64]	; 0x40
 8006860:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006864:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e6      	bne.n	8006840 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3308      	adds	r3, #8
 8006878:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	61fb      	str	r3, [r7, #28]
   return(result);
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	f023 0301 	bic.w	r3, r3, #1
 8006888:	64bb      	str	r3, [r7, #72]	; 0x48
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006892:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006894:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e5      	bne.n	8006872 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d118      	bne.n	80068e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f023 0310 	bic.w	r3, r3, #16
 80068c2:	647b      	str	r3, [r7, #68]	; 0x44
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068cc:	61bb      	str	r3, [r7, #24]
 80068ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	6979      	ldr	r1, [r7, #20]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	613b      	str	r3, [r7, #16]
   return(result);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e6      	bne.n	80068ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80068f4:	bf00      	nop
 80068f6:	3754      	adds	r7, #84	; 0x54
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7ff faaa 	bl	8005e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006924:	bf00      	nop
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	60bb      	str	r3, [r7, #8]
   return(result);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	61bb      	str	r3, [r7, #24]
 8006954:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6979      	ldr	r1, [r7, #20]
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	613b      	str	r3, [r7, #16]
   return(result);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e6      	bne.n	8006934 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff fa76 	bl	8005e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006978:	bf00      	nop
 800697a:	3720      	adds	r7, #32
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b096      	sub	sp, #88	; 0x58
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800698e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006998:	2b22      	cmp	r3, #34	; 0x22
 800699a:	f040 8098 	bne.w	8006ace <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069a8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80069ac:	b2d9      	uxtb	r1, r3
 80069ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b8:	400a      	ands	r2, r1
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d17b      	bne.n	8006ade <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069fa:	653b      	str	r3, [r7, #80]	; 0x50
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a04:	647b      	str	r3, [r7, #68]	; 0x44
 8006a06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e6      	bne.n	80069e6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	623b      	str	r3, [r7, #32]
   return(result);
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
 8006a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3308      	adds	r3, #8
 8006a36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a38:	633a      	str	r2, [r7, #48]	; 0x30
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e5      	bne.n	8006a18 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d12e      	bne.n	8006ac6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 0310 	bic.w	r3, r3, #16
 8006a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a8c:	61fb      	str	r3, [r7, #28]
 8006a8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	69b9      	ldr	r1, [r7, #24]
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	617b      	str	r3, [r7, #20]
   return(result);
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e6      	bne.n	8006a6e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	f003 0310 	and.w	r3, r3, #16
 8006aaa:	2b10      	cmp	r3, #16
 8006aac:	d103      	bne.n	8006ab6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2210      	movs	r2, #16
 8006ab4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff f9e4 	bl	8005e8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ac4:	e00b      	b.n	8006ade <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fa f878 	bl	8000bbc <HAL_UART_RxCpltCallback>
}
 8006acc:	e007      	b.n	8006ade <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	699a      	ldr	r2, [r3, #24]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f042 0208 	orr.w	r2, r2, #8
 8006adc:	619a      	str	r2, [r3, #24]
}
 8006ade:	bf00      	nop
 8006ae0:	3758      	adds	r7, #88	; 0x58
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b096      	sub	sp, #88	; 0x58
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006af4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006afe:	2b22      	cmp	r3, #34	; 0x22
 8006b00:	f040 8098 	bne.w	8006c34 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b12:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b14:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006b18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b22:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b28:	1c9a      	adds	r2, r3, #2
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	3b01      	subs	r3, #1
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d17b      	bne.n	8006c44 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e6      	bne.n	8006b4c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3308      	adds	r3, #8
 8006b84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	f023 0301 	bic.w	r3, r3, #1
 8006b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e5      	bne.n	8006b7e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d12e      	bne.n	8006c2c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f023 0310 	bic.w	r3, r3, #16
 8006be8:	647b      	str	r3, [r7, #68]	; 0x44
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	6979      	ldr	r1, [r7, #20]
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e6      	bne.n	8006bd4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d103      	bne.n	8006c1c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2210      	movs	r2, #16
 8006c1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff f931 	bl	8005e8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c2a:	e00b      	b.n	8006c44 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7f9 ffc5 	bl	8000bbc <HAL_UART_RxCpltCallback>
}
 8006c32:	e007      	b.n	8006c44 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699a      	ldr	r2, [r3, #24]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0208 	orr.w	r2, r2, #8
 8006c42:	619a      	str	r2, [r3, #24]
}
 8006c44:	bf00      	nop
 8006c46:	3758      	adds	r7, #88	; 0x58
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	f107 001c 	add.w	r0, r7, #28
 8006c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d120      	bne.n	8006ca6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	4b20      	ldr	r3, [pc, #128]	; (8006cf8 <USB_CoreInit+0xac>)
 8006c76:	4013      	ands	r3, r2
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d105      	bne.n	8006c9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 fbee 	bl	800847c <USB_CoreReset>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	73fb      	strb	r3, [r7, #15]
 8006ca4:	e010      	b.n	8006cc8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 fbe2 	bl	800847c <USB_CoreReset>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d10b      	bne.n	8006ce6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f043 0206 	orr.w	r2, r3, #6
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f043 0220 	orr.w	r2, r3, #32
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cf2:	b004      	add	sp, #16
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	ffbdffbf 	.word	0xffbdffbf

08006cfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d165      	bne.n	8006ddc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4a41      	ldr	r2, [pc, #260]	; (8006e18 <USB_SetTurnaroundTime+0x11c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d906      	bls.n	8006d26 <USB_SetTurnaroundTime+0x2a>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4a40      	ldr	r2, [pc, #256]	; (8006e1c <USB_SetTurnaroundTime+0x120>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d202      	bcs.n	8006d26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d20:	230f      	movs	r3, #15
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	e062      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	4a3c      	ldr	r2, [pc, #240]	; (8006e1c <USB_SetTurnaroundTime+0x120>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d306      	bcc.n	8006d3c <USB_SetTurnaroundTime+0x40>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4a3b      	ldr	r2, [pc, #236]	; (8006e20 <USB_SetTurnaroundTime+0x124>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d202      	bcs.n	8006d3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d36:	230e      	movs	r3, #14
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	e057      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4a38      	ldr	r2, [pc, #224]	; (8006e20 <USB_SetTurnaroundTime+0x124>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d306      	bcc.n	8006d52 <USB_SetTurnaroundTime+0x56>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4a37      	ldr	r2, [pc, #220]	; (8006e24 <USB_SetTurnaroundTime+0x128>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d202      	bcs.n	8006d52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d4c:	230d      	movs	r3, #13
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	e04c      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	4a33      	ldr	r2, [pc, #204]	; (8006e24 <USB_SetTurnaroundTime+0x128>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d306      	bcc.n	8006d68 <USB_SetTurnaroundTime+0x6c>
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	4a32      	ldr	r2, [pc, #200]	; (8006e28 <USB_SetTurnaroundTime+0x12c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d802      	bhi.n	8006d68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d62:	230c      	movs	r3, #12
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	e041      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4a2f      	ldr	r2, [pc, #188]	; (8006e28 <USB_SetTurnaroundTime+0x12c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d906      	bls.n	8006d7e <USB_SetTurnaroundTime+0x82>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	4a2e      	ldr	r2, [pc, #184]	; (8006e2c <USB_SetTurnaroundTime+0x130>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d802      	bhi.n	8006d7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d78:	230b      	movs	r3, #11
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e036      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	4a2a      	ldr	r2, [pc, #168]	; (8006e2c <USB_SetTurnaroundTime+0x130>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d906      	bls.n	8006d94 <USB_SetTurnaroundTime+0x98>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	4a29      	ldr	r2, [pc, #164]	; (8006e30 <USB_SetTurnaroundTime+0x134>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d802      	bhi.n	8006d94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d8e:	230a      	movs	r3, #10
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	e02b      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	4a26      	ldr	r2, [pc, #152]	; (8006e30 <USB_SetTurnaroundTime+0x134>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d906      	bls.n	8006daa <USB_SetTurnaroundTime+0xae>
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	4a25      	ldr	r2, [pc, #148]	; (8006e34 <USB_SetTurnaroundTime+0x138>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d202      	bcs.n	8006daa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006da4:	2309      	movs	r3, #9
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	e020      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	4a21      	ldr	r2, [pc, #132]	; (8006e34 <USB_SetTurnaroundTime+0x138>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d306      	bcc.n	8006dc0 <USB_SetTurnaroundTime+0xc4>
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	4a20      	ldr	r2, [pc, #128]	; (8006e38 <USB_SetTurnaroundTime+0x13c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d802      	bhi.n	8006dc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006dba:	2308      	movs	r3, #8
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	e015      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4a1d      	ldr	r2, [pc, #116]	; (8006e38 <USB_SetTurnaroundTime+0x13c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d906      	bls.n	8006dd6 <USB_SetTurnaroundTime+0xda>
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4a1c      	ldr	r2, [pc, #112]	; (8006e3c <USB_SetTurnaroundTime+0x140>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d202      	bcs.n	8006dd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006dd0:	2307      	movs	r3, #7
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	e00a      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006dd6:	2306      	movs	r3, #6
 8006dd8:	617b      	str	r3, [r7, #20]
 8006dda:	e007      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d102      	bne.n	8006de8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006de2:	2309      	movs	r3, #9
 8006de4:	617b      	str	r3, [r7, #20]
 8006de6:	e001      	b.n	8006dec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006de8:	2309      	movs	r3, #9
 8006dea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	029b      	lsls	r3, r3, #10
 8006e00:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006e04:	431a      	orrs	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	00d8acbf 	.word	0x00d8acbf
 8006e1c:	00e4e1c0 	.word	0x00e4e1c0
 8006e20:	00f42400 	.word	0x00f42400
 8006e24:	01067380 	.word	0x01067380
 8006e28:	011a499f 	.word	0x011a499f
 8006e2c:	01312cff 	.word	0x01312cff
 8006e30:	014ca43f 	.word	0x014ca43f
 8006e34:	016e3600 	.word	0x016e3600
 8006e38:	01a6ab1f 	.word	0x01a6ab1f
 8006e3c:	01e84800 	.word	0x01e84800

08006e40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f043 0201 	orr.w	r2, r3, #1
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f023 0201 	bic.w	r2, r3, #1
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d115      	bne.n	8006ed2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	f7fa fa9c 	bl	80013f0 <HAL_Delay>
      ms++;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 fa4b 	bl	800835a <USB_GetMode>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d01e      	beq.n	8006f08 <USB_SetCurrentMode+0x84>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b31      	cmp	r3, #49	; 0x31
 8006ece:	d9f0      	bls.n	8006eb2 <USB_SetCurrentMode+0x2e>
 8006ed0:	e01a      	b.n	8006f08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ed2:	78fb      	ldrb	r3, [r7, #3]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d115      	bne.n	8006f04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ee4:	2001      	movs	r0, #1
 8006ee6:	f7fa fa83 	bl	80013f0 <HAL_Delay>
      ms++;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3301      	adds	r3, #1
 8006eee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 fa32 	bl	800835a <USB_GetMode>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <USB_SetCurrentMode+0x84>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b31      	cmp	r3, #49	; 0x31
 8006f00:	d9f0      	bls.n	8006ee4 <USB_SetCurrentMode+0x60>
 8006f02:	e001      	b.n	8006f08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e005      	b.n	8006f14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b32      	cmp	r3, #50	; 0x32
 8006f0c:	d101      	bne.n	8006f12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e000      	b.n	8006f14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b086      	sub	sp, #24
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f36:	2300      	movs	r3, #0
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	e009      	b.n	8006f50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	3340      	adds	r3, #64	; 0x40
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	2200      	movs	r2, #0
 8006f48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b0e      	cmp	r3, #14
 8006f54:	d9f2      	bls.n	8006f3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d11c      	bne.n	8006f96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f6a:	f043 0302 	orr.w	r3, r3, #2
 8006f6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	e005      	b.n	8006fa2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fa8:	461a      	mov	r2, r3
 8006faa:	2300      	movs	r3, #0
 8006fac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	680b      	ldr	r3, [r1, #0]
 8006fc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d10c      	bne.n	8006fe2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d104      	bne.n	8006fd8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fce:	2100      	movs	r1, #0
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f965 	bl	80072a0 <USB_SetDevSpeed>
 8006fd6:	e008      	b.n	8006fea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fd8:	2101      	movs	r1, #1
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f960 	bl	80072a0 <USB_SetDevSpeed>
 8006fe0:	e003      	b.n	8006fea <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fe2:	2103      	movs	r1, #3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f95b 	bl	80072a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fea:	2110      	movs	r1, #16
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f8f3 	bl	80071d8 <USB_FlushTxFifo>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f91f 	bl	8007240 <USB_FlushRxFifo>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007012:	461a      	mov	r2, r3
 8007014:	2300      	movs	r3, #0
 8007016:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701e:	461a      	mov	r2, r3
 8007020:	2300      	movs	r3, #0
 8007022:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702a:	461a      	mov	r2, r3
 800702c:	2300      	movs	r3, #0
 800702e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007030:	2300      	movs	r3, #0
 8007032:	613b      	str	r3, [r7, #16]
 8007034:	e043      	b.n	80070be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800704c:	d118      	bne.n	8007080 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	461a      	mov	r2, r3
 8007062:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	e013      	b.n	8007092 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007076:	461a      	mov	r2, r3
 8007078:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	e008      	b.n	8007092 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708c:	461a      	mov	r2, r3
 800708e:	2300      	movs	r3, #0
 8007090:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709e:	461a      	mov	r2, r3
 80070a0:	2300      	movs	r3, #0
 80070a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b0:	461a      	mov	r2, r3
 80070b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	3301      	adds	r3, #1
 80070bc:	613b      	str	r3, [r7, #16]
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d3b7      	bcc.n	8007036 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070c6:	2300      	movs	r3, #0
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	e043      	b.n	8007154 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070e2:	d118      	bne.n	8007116 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10a      	bne.n	8007100 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f6:	461a      	mov	r2, r3
 80070f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	e013      	b.n	8007128 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	461a      	mov	r2, r3
 800710e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	e008      	b.n	8007128 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007122:	461a      	mov	r2, r3
 8007124:	2300      	movs	r3, #0
 8007126:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007134:	461a      	mov	r2, r3
 8007136:	2300      	movs	r3, #0
 8007138:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007146:	461a      	mov	r2, r3
 8007148:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800714c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	3301      	adds	r3, #1
 8007152:	613b      	str	r3, [r7, #16]
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	429a      	cmp	r2, r3
 800715a:	d3b7      	bcc.n	80070cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800716a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800716e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800717c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	2b00      	cmp	r3, #0
 8007182:	d105      	bne.n	8007190 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	f043 0210 	orr.w	r2, r3, #16
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	699a      	ldr	r2, [r3, #24]
 8007194:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <USB_DevInit+0x2b4>)
 8007196:	4313      	orrs	r3, r2
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800719c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	f043 0208 	orr.w	r2, r3, #8
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d105      	bne.n	80071c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	699a      	ldr	r2, [r3, #24]
 80071b8:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <USB_DevInit+0x2b8>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071cc:	b004      	add	sp, #16
 80071ce:	4770      	bx	lr
 80071d0:	803c3800 	.word	0x803c3800
 80071d4:	40000004 	.word	0x40000004

080071d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3301      	adds	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4a13      	ldr	r2, [pc, #76]	; (800723c <USB_FlushTxFifo+0x64>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d901      	bls.n	80071f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e01b      	b.n	8007230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	daf2      	bge.n	80071e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	019b      	lsls	r3, r3, #6
 8007208:	f043 0220 	orr.w	r2, r3, #32
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3301      	adds	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	4a08      	ldr	r2, [pc, #32]	; (800723c <USB_FlushTxFifo+0x64>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d901      	bls.n	8007222 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e006      	b.n	8007230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b20      	cmp	r3, #32
 800722c:	d0f0      	beq.n	8007210 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	00030d40 	.word	0x00030d40

08007240 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3301      	adds	r3, #1
 8007250:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4a11      	ldr	r2, [pc, #68]	; (800729c <USB_FlushRxFifo+0x5c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d901      	bls.n	800725e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e018      	b.n	8007290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	daf2      	bge.n	800724c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2210      	movs	r2, #16
 800726e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3301      	adds	r3, #1
 8007274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4a08      	ldr	r2, [pc, #32]	; (800729c <USB_FlushRxFifo+0x5c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d901      	bls.n	8007282 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e006      	b.n	8007290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f003 0310 	and.w	r3, r3, #16
 800728a:	2b10      	cmp	r3, #16
 800728c:	d0f0      	beq.n	8007270 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	00030d40 	.word	0x00030d40

080072a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	78fb      	ldrb	r3, [r7, #3]
 80072ba:	68f9      	ldr	r1, [r7, #12]
 80072bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c0:	4313      	orrs	r3, r2
 80072c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b087      	sub	sp, #28
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f003 0306 	and.w	r3, r3, #6
 80072ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]
 80072f6:	e00a      	b.n	800730e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d002      	beq.n	8007304 <USB_GetDevSpeed+0x32>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b06      	cmp	r3, #6
 8007302:	d102      	bne.n	800730a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007304:	2302      	movs	r3, #2
 8007306:	75fb      	strb	r3, [r7, #23]
 8007308:	e001      	b.n	800730e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800730a:	230f      	movs	r3, #15
 800730c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800730e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007310:	4618      	mov	r0, r3
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	785b      	ldrb	r3, [r3, #1]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d139      	bne.n	80073ac <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733e:	69da      	ldr	r2, [r3, #28]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	2101      	movs	r1, #1
 800734a:	fa01 f303 	lsl.w	r3, r1, r3
 800734e:	b29b      	uxth	r3, r3
 8007350:	68f9      	ldr	r1, [r7, #12]
 8007352:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007356:	4313      	orrs	r3, r2
 8007358:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d153      	bne.n	8007418 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	791b      	ldrb	r3, [r3, #4]
 800738a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800738c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	059b      	lsls	r3, r3, #22
 8007392:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007394:	431a      	orrs	r2, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	0159      	lsls	r1, r3, #5
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	440b      	add	r3, r1
 800739e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a2:	4619      	mov	r1, r3
 80073a4:	4b20      	ldr	r3, [pc, #128]	; (8007428 <USB_ActivateEndpoint+0x10c>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	600b      	str	r3, [r1, #0]
 80073aa:	e035      	b.n	8007418 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b2:	69da      	ldr	r2, [r3, #28]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	f003 030f 	and.w	r3, r3, #15
 80073bc:	2101      	movs	r1, #1
 80073be:	fa01 f303 	lsl.w	r3, r1, r3
 80073c2:	041b      	lsls	r3, r3, #16
 80073c4:	68f9      	ldr	r1, [r7, #12]
 80073c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073ca:	4313      	orrs	r3, r2
 80073cc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d119      	bne.n	8007418 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	791b      	ldrb	r3, [r3, #4]
 80073fe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007400:	430b      	orrs	r3, r1
 8007402:	431a      	orrs	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	0159      	lsls	r1, r3, #5
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	440b      	add	r3, r1
 800740c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007410:	4619      	mov	r1, r3
 8007412:	4b05      	ldr	r3, [pc, #20]	; (8007428 <USB_ActivateEndpoint+0x10c>)
 8007414:	4313      	orrs	r3, r2
 8007416:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	10008000 	.word	0x10008000

0800742c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	785b      	ldrb	r3, [r3, #1]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d161      	bne.n	800750c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800745a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800745e:	d11f      	bne.n	80074a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	0151      	lsls	r1, r2, #5
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	440a      	add	r2, r1
 8007476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800747a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800747e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	440a      	add	r2, r1
 8007496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800749a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800749e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	f003 030f 	and.w	r3, r3, #15
 80074b0:	2101      	movs	r1, #1
 80074b2:	fa01 f303 	lsl.w	r3, r1, r3
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	43db      	mvns	r3, r3
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074c0:	4013      	ands	r3, r2
 80074c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ca:	69da      	ldr	r2, [r3, #28]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	2101      	movs	r1, #1
 80074d6:	fa01 f303 	lsl.w	r3, r1, r3
 80074da:	b29b      	uxth	r3, r3
 80074dc:	43db      	mvns	r3, r3
 80074de:	68f9      	ldr	r1, [r7, #12]
 80074e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074e4:	4013      	ands	r3, r2
 80074e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	0159      	lsls	r1, r3, #5
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	440b      	add	r3, r1
 80074fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007502:	4619      	mov	r1, r3
 8007504:	4b35      	ldr	r3, [pc, #212]	; (80075dc <USB_DeactivateEndpoint+0x1b0>)
 8007506:	4013      	ands	r3, r2
 8007508:	600b      	str	r3, [r1, #0]
 800750a:	e060      	b.n	80075ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800751e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007522:	d11f      	bne.n	8007564 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	440a      	add	r2, r1
 800753a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800753e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007542:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4413      	add	r3, r2
 800754c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	0151      	lsls	r1, r2, #5
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	440a      	add	r2, r1
 800755a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800755e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007562:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	f003 030f 	and.w	r3, r3, #15
 8007574:	2101      	movs	r1, #1
 8007576:	fa01 f303 	lsl.w	r3, r1, r3
 800757a:	041b      	lsls	r3, r3, #16
 800757c:	43db      	mvns	r3, r3
 800757e:	68f9      	ldr	r1, [r7, #12]
 8007580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007584:	4013      	ands	r3, r2
 8007586:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758e:	69da      	ldr	r2, [r3, #28]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	f003 030f 	and.w	r3, r3, #15
 8007598:	2101      	movs	r1, #1
 800759a:	fa01 f303 	lsl.w	r3, r1, r3
 800759e:	041b      	lsls	r3, r3, #16
 80075a0:	43db      	mvns	r3, r3
 80075a2:	68f9      	ldr	r1, [r7, #12]
 80075a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075a8:	4013      	ands	r3, r2
 80075aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	0159      	lsls	r1, r3, #5
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	440b      	add	r3, r1
 80075c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c6:	4619      	mov	r1, r3
 80075c8:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <USB_DeactivateEndpoint+0x1b4>)
 80075ca:	4013      	ands	r3, r2
 80075cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	ec337800 	.word	0xec337800
 80075e0:	eff37800 	.word	0xeff37800

080075e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08a      	sub	sp, #40	; 0x28
 80075e8:	af02      	add	r7, sp, #8
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	4613      	mov	r3, r2
 80075f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	785b      	ldrb	r3, [r3, #1]
 8007600:	2b01      	cmp	r3, #1
 8007602:	f040 8163 	bne.w	80078cc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d132      	bne.n	8007674 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	0159      	lsls	r1, r3, #5
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	440b      	add	r3, r1
 8007624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007628:	4619      	mov	r1, r3
 800762a:	4ba5      	ldr	r3, [pc, #660]	; (80078c0 <USB_EPStartXfer+0x2dc>)
 800762c:	4013      	ands	r3, r2
 800762e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	440a      	add	r2, r1
 8007646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800764a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800764e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765c:	691a      	ldr	r2, [r3, #16]
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	0159      	lsls	r1, r3, #5
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	440b      	add	r3, r1
 8007666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766a:	4619      	mov	r1, r3
 800766c:	4b95      	ldr	r3, [pc, #596]	; (80078c4 <USB_EPStartXfer+0x2e0>)
 800766e:	4013      	ands	r3, r2
 8007670:	610b      	str	r3, [r1, #16]
 8007672:	e074      	b.n	800775e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007680:	691a      	ldr	r2, [r3, #16]
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	0159      	lsls	r1, r3, #5
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	440b      	add	r3, r1
 800768a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768e:	4619      	mov	r1, r3
 8007690:	4b8c      	ldr	r3, [pc, #560]	; (80078c4 <USB_EPStartXfer+0x2e0>)
 8007692:	4013      	ands	r3, r2
 8007694:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a2:	691a      	ldr	r2, [r3, #16]
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	0159      	lsls	r1, r3, #5
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	440b      	add	r3, r1
 80076ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b0:	4619      	mov	r1, r3
 80076b2:	4b83      	ldr	r3, [pc, #524]	; (80078c0 <USB_EPStartXfer+0x2dc>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	6999      	ldr	r1, [r3, #24]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	440b      	add	r3, r1
 80076d0:	1e59      	subs	r1, r3, #1
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80076da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80076dc:	4b7a      	ldr	r3, [pc, #488]	; (80078c8 <USB_EPStartXfer+0x2e4>)
 80076de:	400b      	ands	r3, r1
 80076e0:	69b9      	ldr	r1, [r7, #24]
 80076e2:	0148      	lsls	r0, r1, #5
 80076e4:	69f9      	ldr	r1, [r7, #28]
 80076e6:	4401      	add	r1, r0
 80076e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076ec:	4313      	orrs	r3, r2
 80076ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fc:	691a      	ldr	r2, [r3, #16]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007706:	69b9      	ldr	r1, [r7, #24]
 8007708:	0148      	lsls	r0, r1, #5
 800770a:	69f9      	ldr	r1, [r7, #28]
 800770c:	4401      	add	r1, r0
 800770e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007712:	4313      	orrs	r3, r2
 8007714:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	791b      	ldrb	r3, [r3, #4]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d11f      	bne.n	800775e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	0151      	lsls	r1, r2, #5
 8007730:	69fa      	ldr	r2, [r7, #28]
 8007732:	440a      	add	r2, r1
 8007734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007738:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800773c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	4413      	add	r3, r2
 8007746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	0151      	lsls	r1, r2, #5
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	440a      	add	r2, r1
 8007754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007758:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800775c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d14b      	bne.n	80077fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d009      	beq.n	8007780 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007778:	461a      	mov	r2, r3
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	791b      	ldrb	r3, [r3, #4]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d128      	bne.n	80077da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d110      	bne.n	80077ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	0151      	lsls	r1, r2, #5
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	440a      	add	r2, r1
 80077ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	e00f      	b.n	80077da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	0151      	lsls	r1, r2, #5
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	440a      	add	r2, r1
 80077d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	0151      	lsls	r1, r2, #5
 80077ec:	69fa      	ldr	r2, [r7, #28]
 80077ee:	440a      	add	r2, r1
 80077f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	e137      	b.n	8007a6c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	4413      	add	r3, r2
 8007804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69ba      	ldr	r2, [r7, #24]
 800780c:	0151      	lsls	r1, r2, #5
 800780e:	69fa      	ldr	r2, [r7, #28]
 8007810:	440a      	add	r2, r1
 8007812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007816:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800781a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	791b      	ldrb	r3, [r3, #4]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d015      	beq.n	8007850 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 811f 	beq.w	8007a6c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	2101      	movs	r1, #1
 8007840:	fa01 f303 	lsl.w	r3, r1, r3
 8007844:	69f9      	ldr	r1, [r7, #28]
 8007846:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800784a:	4313      	orrs	r3, r2
 800784c:	634b      	str	r3, [r1, #52]	; 0x34
 800784e:	e10d      	b.n	8007a6c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785c:	2b00      	cmp	r3, #0
 800785e:	d110      	bne.n	8007882 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	0151      	lsls	r1, r2, #5
 8007872:	69fa      	ldr	r2, [r7, #28]
 8007874:	440a      	add	r2, r1
 8007876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800787a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	e00f      	b.n	80078a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	4413      	add	r3, r2
 800788a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	0151      	lsls	r1, r2, #5
 8007894:	69fa      	ldr	r2, [r7, #28]
 8007896:	440a      	add	r2, r1
 8007898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800789c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	6919      	ldr	r1, [r3, #16]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	781a      	ldrb	r2, [r3, #0]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	b298      	uxth	r0, r3
 80078b0:	79fb      	ldrb	r3, [r7, #7]
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	4603      	mov	r3, r0
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 faea 	bl	8007e90 <USB_WritePacket>
 80078bc:	e0d6      	b.n	8007a6c <USB_EPStartXfer+0x488>
 80078be:	bf00      	nop
 80078c0:	e007ffff 	.word	0xe007ffff
 80078c4:	fff80000 	.word	0xfff80000
 80078c8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d8:	691a      	ldr	r2, [r3, #16]
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	0159      	lsls	r1, r3, #5
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	440b      	add	r3, r1
 80078e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e6:	4619      	mov	r1, r3
 80078e8:	4b63      	ldr	r3, [pc, #396]	; (8007a78 <USB_EPStartXfer+0x494>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fa:	691a      	ldr	r2, [r3, #16]
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	0159      	lsls	r1, r3, #5
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	440b      	add	r3, r1
 8007904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007908:	4619      	mov	r1, r3
 800790a:	4b5c      	ldr	r3, [pc, #368]	; (8007a7c <USB_EPStartXfer+0x498>)
 800790c:	4013      	ands	r3, r2
 800790e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d123      	bne.n	8007960 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007924:	691a      	ldr	r2, [r3, #16]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800792e:	69b9      	ldr	r1, [r7, #24]
 8007930:	0148      	lsls	r0, r1, #5
 8007932:	69f9      	ldr	r1, [r7, #28]
 8007934:	4401      	add	r1, r0
 8007936:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800793a:	4313      	orrs	r3, r2
 800793c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	4413      	add	r3, r2
 8007946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	0151      	lsls	r1, r2, #5
 8007950:	69fa      	ldr	r2, [r7, #28]
 8007952:	440a      	add	r2, r1
 8007954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007958:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800795c:	6113      	str	r3, [r2, #16]
 800795e:	e037      	b.n	80079d0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	699a      	ldr	r2, [r3, #24]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	4413      	add	r3, r2
 800796a:	1e5a      	subs	r2, r3, #1
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	fbb2 f3f3 	udiv	r3, r2, r3
 8007974:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	8afa      	ldrh	r2, [r7, #22]
 800797c:	fb03 f202 	mul.w	r2, r3, r2
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007990:	691a      	ldr	r2, [r3, #16]
 8007992:	8afb      	ldrh	r3, [r7, #22]
 8007994:	04d9      	lsls	r1, r3, #19
 8007996:	4b3a      	ldr	r3, [pc, #232]	; (8007a80 <USB_EPStartXfer+0x49c>)
 8007998:	400b      	ands	r3, r1
 800799a:	69b9      	ldr	r1, [r7, #24]
 800799c:	0148      	lsls	r0, r1, #5
 800799e:	69f9      	ldr	r1, [r7, #28]
 80079a0:	4401      	add	r1, r0
 80079a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079a6:	4313      	orrs	r3, r2
 80079a8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079c0:	69b9      	ldr	r1, [r7, #24]
 80079c2:	0148      	lsls	r0, r1, #5
 80079c4:	69f9      	ldr	r1, [r7, #28]
 80079c6:	4401      	add	r1, r0
 80079c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079cc:	4313      	orrs	r3, r2
 80079ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d10d      	bne.n	80079f2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	6919      	ldr	r1, [r3, #16]
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ee:	460a      	mov	r2, r1
 80079f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	791b      	ldrb	r3, [r3, #4]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d128      	bne.n	8007a4c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d110      	bne.n	8007a2c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	0151      	lsls	r1, r2, #5
 8007a1c:	69fa      	ldr	r2, [r7, #28]
 8007a1e:	440a      	add	r2, r1
 8007a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	e00f      	b.n	8007a4c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	0151      	lsls	r1, r2, #5
 8007a3e:	69fa      	ldr	r2, [r7, #28]
 8007a40:	440a      	add	r2, r1
 8007a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	0151      	lsls	r1, r2, #5
 8007a5e:	69fa      	ldr	r2, [r7, #28]
 8007a60:	440a      	add	r2, r1
 8007a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3720      	adds	r7, #32
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	fff80000 	.word	0xfff80000
 8007a7c:	e007ffff 	.word	0xe007ffff
 8007a80:	1ff80000 	.word	0x1ff80000

08007a84 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	785b      	ldrb	r3, [r3, #1]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	f040 80ce 	bne.w	8007c42 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d132      	bne.n	8007b14 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	0159      	lsls	r1, r3, #5
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	440b      	add	r3, r1
 8007ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac8:	4619      	mov	r1, r3
 8007aca:	4b9a      	ldr	r3, [pc, #616]	; (8007d34 <USB_EP0StartXfer+0x2b0>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	0151      	lsls	r1, r2, #5
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007afc:	691a      	ldr	r2, [r3, #16]
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	0159      	lsls	r1, r3, #5
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	440b      	add	r3, r1
 8007b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	4b8a      	ldr	r3, [pc, #552]	; (8007d38 <USB_EP0StartXfer+0x2b4>)
 8007b0e:	4013      	ands	r3, r2
 8007b10:	610b      	str	r3, [r1, #16]
 8007b12:	e04e      	b.n	8007bb2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b20:	691a      	ldr	r2, [r3, #16]
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	0159      	lsls	r1, r3, #5
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	440b      	add	r3, r1
 8007b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4b81      	ldr	r3, [pc, #516]	; (8007d38 <USB_EP0StartXfer+0x2b4>)
 8007b32:	4013      	ands	r3, r2
 8007b34:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	0159      	lsls	r1, r3, #5
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	440b      	add	r3, r1
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b50:	4619      	mov	r1, r3
 8007b52:	4b78      	ldr	r3, [pc, #480]	; (8007d34 <USB_EP0StartXfer+0x2b0>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	699a      	ldr	r2, [r3, #24]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d903      	bls.n	8007b6c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	0151      	lsls	r1, r2, #5
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	440a      	add	r2, r1
 8007b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b98:	691a      	ldr	r2, [r3, #16]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ba2:	6939      	ldr	r1, [r7, #16]
 8007ba4:	0148      	lsls	r0, r1, #5
 8007ba6:	6979      	ldr	r1, [r7, #20]
 8007ba8:	4401      	add	r1, r0
 8007baa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d11e      	bne.n	8007bf6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d009      	beq.n	8007bd4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bcc:	461a      	mov	r2, r3
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	e097      	b.n	8007d26 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	0151      	lsls	r1, r2, #5
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	440a      	add	r2, r1
 8007c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 8083 	beq.w	8007d26 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	f003 030f 	and.w	r3, r3, #15
 8007c30:	2101      	movs	r1, #1
 8007c32:	fa01 f303 	lsl.w	r3, r1, r3
 8007c36:	6979      	ldr	r1, [r7, #20]
 8007c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	634b      	str	r3, [r1, #52]	; 0x34
 8007c40:	e071      	b.n	8007d26 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4e:	691a      	ldr	r2, [r3, #16]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	0159      	lsls	r1, r3, #5
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	440b      	add	r3, r1
 8007c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4b36      	ldr	r3, [pc, #216]	; (8007d38 <USB_EP0StartXfer+0x2b4>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c70:	691a      	ldr	r2, [r3, #16]
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	0159      	lsls	r1, r3, #5
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	440b      	add	r3, r1
 8007c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4b2c      	ldr	r3, [pc, #176]	; (8007d34 <USB_EP0StartXfer+0x2b0>)
 8007c82:	4013      	ands	r3, r2
 8007c84:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	0151      	lsls	r1, r2, #5
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	440a      	add	r2, r1
 8007cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cca:	691a      	ldr	r2, [r3, #16]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cd4:	6939      	ldr	r1, [r7, #16]
 8007cd6:	0148      	lsls	r0, r1, #5
 8007cd8:	6979      	ldr	r1, [r7, #20]
 8007cda:	4401      	add	r1, r0
 8007cdc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d10d      	bne.n	8007d06 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d009      	beq.n	8007d06 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	6919      	ldr	r1, [r3, #16]
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d02:	460a      	mov	r2, r1
 8007d04:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	0151      	lsls	r1, r2, #5
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	440a      	add	r2, r1
 8007d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	e007ffff 	.word	0xe007ffff
 8007d38:	fff80000 	.word	0xfff80000

08007d3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	785b      	ldrb	r3, [r3, #1]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d14a      	bne.n	8007df0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d72:	f040 8086 	bne.w	8007e82 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	7812      	ldrb	r2, [r2, #0]
 8007d8a:	0151      	lsls	r1, r2, #5
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	440a      	add	r2, r1
 8007d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	7812      	ldrb	r2, [r2, #0]
 8007dae:	0151      	lsls	r1, r2, #5
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	440a      	add	r2, r1
 8007db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007db8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d902      	bls.n	8007dd4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	75fb      	strb	r3, [r7, #23]
          break;
 8007dd2:	e056      	b.n	8007e82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dec:	d0e7      	beq.n	8007dbe <USB_EPStopXfer+0x82>
 8007dee:	e048      	b.n	8007e82 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e08:	d13b      	bne.n	8007e82 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	7812      	ldrb	r2, [r2, #0]
 8007e1e:	0151      	lsls	r1, r2, #5
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	440a      	add	r2, r1
 8007e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e2c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	7812      	ldrb	r2, [r2, #0]
 8007e42:	0151      	lsls	r1, r2, #5
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	440a      	add	r2, r1
 8007e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3301      	adds	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d902      	bls.n	8007e68 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	75fb      	strb	r3, [r7, #23]
          break;
 8007e66:	e00c      	b.n	8007e82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e80:	d0e7      	beq.n	8007e52 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	371c      	adds	r7, #28
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b089      	sub	sp, #36	; 0x24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	71fb      	strb	r3, [r7, #7]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007eae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d123      	bne.n	8007efe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007eb6:	88bb      	ldrh	r3, [r7, #4]
 8007eb8:	3303      	adds	r3, #3
 8007eba:	089b      	lsrs	r3, r3, #2
 8007ebc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	61bb      	str	r3, [r7, #24]
 8007ec2:	e018      	b.n	8007ef6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	031a      	lsls	r2, r3, #12
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	3301      	adds	r3, #1
 8007edc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	3301      	adds	r3, #1
 8007eee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	61bb      	str	r3, [r7, #24]
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d3e2      	bcc.n	8007ec4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3724      	adds	r7, #36	; 0x24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b08b      	sub	sp, #44	; 0x2c
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	4613      	mov	r3, r2
 8007f18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f22:	88fb      	ldrh	r3, [r7, #6]
 8007f24:	089b      	lsrs	r3, r3, #2
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f2a:	88fb      	ldrh	r3, [r7, #6]
 8007f2c:	f003 0303 	and.w	r3, r3, #3
 8007f30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f32:	2300      	movs	r3, #0
 8007f34:	623b      	str	r3, [r7, #32]
 8007f36:	e014      	b.n	8007f62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	3301      	adds	r3, #1
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	3301      	adds	r3, #1
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	3301      	adds	r3, #1
 8007f5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	623b      	str	r3, [r7, #32]
 8007f62:	6a3a      	ldr	r2, [r7, #32]
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d3e6      	bcc.n	8007f38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f6a:	8bfb      	ldrh	r3, [r7, #30]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01e      	beq.n	8007fae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f107 0310 	add.w	r3, r7, #16
 8007f80:	6812      	ldr	r2, [r2, #0]
 8007f82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	701a      	strb	r2, [r3, #0]
      i++;
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007fa2:	8bfb      	ldrh	r3, [r7, #30]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007fa8:	8bfb      	ldrh	r3, [r7, #30]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1ea      	bne.n	8007f84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	372c      	adds	r7, #44	; 0x2c
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	785b      	ldrb	r3, [r3, #1]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d12c      	bne.n	8008032 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	db12      	blt.n	8008010 <USB_EPSetStall+0x54>
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00f      	beq.n	8008010 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	0151      	lsls	r1, r2, #5
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	440a      	add	r2, r1
 8008006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800800a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800800e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	0151      	lsls	r1, r2, #5
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	440a      	add	r2, r1
 8008026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800802a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	e02b      	b.n	800808a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	4413      	add	r3, r2
 800803a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	db12      	blt.n	800806a <USB_EPSetStall+0xae>
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00f      	beq.n	800806a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4413      	add	r3, r2
 8008052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	0151      	lsls	r1, r2, #5
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	440a      	add	r2, r1
 8008060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008064:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008068:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	0151      	lsls	r1, r2, #5
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	440a      	add	r2, r1
 8008080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008084:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008088:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	785b      	ldrb	r3, [r3, #1]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d128      	bne.n	8008106 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	0151      	lsls	r1, r2, #5
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	440a      	add	r2, r1
 80080ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	791b      	ldrb	r3, [r3, #4]
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d003      	beq.n	80080e4 <USB_EPClearStall+0x4c>
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	791b      	ldrb	r3, [r3, #4]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d138      	bne.n	8008156 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	0151      	lsls	r1, r2, #5
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	440a      	add	r2, r1
 80080fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	e027      	b.n	8008156 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	0151      	lsls	r1, r2, #5
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	440a      	add	r2, r1
 800811c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008120:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008124:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	791b      	ldrb	r3, [r3, #4]
 800812a:	2b03      	cmp	r3, #3
 800812c:	d003      	beq.n	8008136 <USB_EPClearStall+0x9e>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	791b      	ldrb	r3, [r3, #4]
 8008132:	2b02      	cmp	r3, #2
 8008134:	d10f      	bne.n	8008156 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4413      	add	r3, r2
 800813e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	0151      	lsls	r1, r2, #5
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	440a      	add	r2, r1
 800814c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008154:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	460b      	mov	r3, r1
 800816e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008182:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008186:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008198:	68f9      	ldr	r1, [r7, #12]
 800819a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800819e:	4313      	orrs	r3, r2
 80081a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081ca:	f023 0303 	bic.w	r3, r3, #3
 80081ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081de:	f023 0302 	bic.w	r3, r3, #2
 80081e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b085      	sub	sp, #20
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800820c:	f023 0303 	bic.w	r3, r3, #3
 8008210:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008220:	f043 0302 	orr.w	r3, r3, #2
 8008224:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	695b      	ldr	r3, [r3, #20]
 8008240:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	4013      	ands	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800824c:	68fb      	ldr	r3, [r7, #12]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800825a:	b480      	push	{r7}
 800825c:	b085      	sub	sp, #20
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	4013      	ands	r3, r2
 800827c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	0c1b      	lsrs	r3, r3, #16
}
 8008282:	4618      	mov	r0, r3
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800828e:	b480      	push	{r7}
 8008290:	b085      	sub	sp, #20
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	4013      	ands	r3, r2
 80082b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	b29b      	uxth	r3, r3
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b085      	sub	sp, #20
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	460b      	mov	r3, r1
 80082cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80082d2:	78fb      	ldrb	r3, [r7, #3]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	4013      	ands	r3, r2
 80082ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082f0:	68bb      	ldr	r3, [r7, #8]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082fe:	b480      	push	{r7}
 8008300:	b087      	sub	sp, #28
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	460b      	mov	r3, r1
 8008308:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800831e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008320:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	f003 030f 	and.w	r3, r3, #15
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	fa22 f303 	lsr.w	r3, r2, r3
 800832e:	01db      	lsls	r3, r3, #7
 8008330:	b2db      	uxtb	r3, r3
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	4313      	orrs	r3, r2
 8008336:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4013      	ands	r3, r2
 800834a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800834c:	68bb      	ldr	r3, [r7, #8]
}
 800834e:	4618      	mov	r0, r3
 8008350:	371c      	adds	r7, #28
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800835a:	b480      	push	{r7}
 800835c:	b083      	sub	sp, #12
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	f003 0301 	and.w	r3, r3, #1
}
 800836a:	4618      	mov	r0, r3
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
	...

08008378 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008392:	4619      	mov	r1, r3
 8008394:	4b09      	ldr	r3, [pc, #36]	; (80083bc <USB_ActivateSetup+0x44>)
 8008396:	4013      	ands	r3, r2
 8008398:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3714      	adds	r7, #20
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	fffff800 	.word	0xfffff800

080083c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	460b      	mov	r3, r1
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	333c      	adds	r3, #60	; 0x3c
 80083d6:	3304      	adds	r3, #4
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	4a26      	ldr	r2, [pc, #152]	; (8008478 <USB_EP0_OutStart+0xb8>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d90a      	bls.n	80083fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083f4:	d101      	bne.n	80083fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	e037      	b.n	800846a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008400:	461a      	mov	r2, r3
 8008402:	2300      	movs	r3, #0
 8008404:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008414:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008418:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008428:	f043 0318 	orr.w	r3, r3, #24
 800842c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800843c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008440:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008442:	7afb      	ldrb	r3, [r7, #11]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d10f      	bne.n	8008468 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844e:	461a      	mov	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008462:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008466:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	4f54300a 	.word	0x4f54300a

0800847c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008484:	2300      	movs	r3, #0
 8008486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3301      	adds	r3, #1
 800848c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4a13      	ldr	r2, [pc, #76]	; (80084e0 <USB_CoreReset+0x64>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d901      	bls.n	800849a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e01b      	b.n	80084d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	daf2      	bge.n	8008488 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80084a2:	2300      	movs	r3, #0
 80084a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	f043 0201 	orr.w	r2, r3, #1
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3301      	adds	r3, #1
 80084b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4a09      	ldr	r2, [pc, #36]	; (80084e0 <USB_CoreReset+0x64>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d901      	bls.n	80084c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e006      	b.n	80084d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d0f0      	beq.n	80084b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	00030d40 	.word	0x00030d40

080084e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	460b      	mov	r3, r1
 80084ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80084f4:	f002 fd12 	bl	800af1c <malloc>
 80084f8:	4603      	mov	r3, r0
 80084fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d109      	bne.n	8008516 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	32b0      	adds	r2, #176	; 0xb0
 800850c:	2100      	movs	r1, #0
 800850e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008512:	2302      	movs	r3, #2
 8008514:	e0d4      	b.n	80086c0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008516:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800851a:	2100      	movs	r1, #0
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f002 fdb9 	bl	800b094 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	32b0      	adds	r2, #176	; 0xb0
 800852c:	68f9      	ldr	r1, [r7, #12]
 800852e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	32b0      	adds	r2, #176	; 0xb0
 800853c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	7c1b      	ldrb	r3, [r3, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d138      	bne.n	80085c0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800854e:	4b5e      	ldr	r3, [pc, #376]	; (80086c8 <USBD_CDC_Init+0x1e4>)
 8008550:	7819      	ldrb	r1, [r3, #0]
 8008552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008556:	2202      	movs	r2, #2
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f002 fb3c 	bl	800abd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800855e:	4b5a      	ldr	r3, [pc, #360]	; (80086c8 <USBD_CDC_Init+0x1e4>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	f003 020f 	and.w	r2, r3, #15
 8008566:	6879      	ldr	r1, [r7, #4]
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	440b      	add	r3, r1
 8008572:	3324      	adds	r3, #36	; 0x24
 8008574:	2201      	movs	r2, #1
 8008576:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008578:	4b54      	ldr	r3, [pc, #336]	; (80086cc <USBD_CDC_Init+0x1e8>)
 800857a:	7819      	ldrb	r1, [r3, #0]
 800857c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008580:	2202      	movs	r2, #2
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f002 fb27 	bl	800abd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008588:	4b50      	ldr	r3, [pc, #320]	; (80086cc <USBD_CDC_Init+0x1e8>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	f003 020f 	and.w	r2, r3, #15
 8008590:	6879      	ldr	r1, [r7, #4]
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085a0:	2201      	movs	r2, #1
 80085a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80085a4:	4b4a      	ldr	r3, [pc, #296]	; (80086d0 <USBD_CDC_Init+0x1ec>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	f003 020f 	and.w	r2, r3, #15
 80085ac:	6879      	ldr	r1, [r7, #4]
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	440b      	add	r3, r1
 80085b8:	3326      	adds	r3, #38	; 0x26
 80085ba:	2210      	movs	r2, #16
 80085bc:	801a      	strh	r2, [r3, #0]
 80085be:	e035      	b.n	800862c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80085c0:	4b41      	ldr	r3, [pc, #260]	; (80086c8 <USBD_CDC_Init+0x1e4>)
 80085c2:	7819      	ldrb	r1, [r3, #0]
 80085c4:	2340      	movs	r3, #64	; 0x40
 80085c6:	2202      	movs	r2, #2
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f002 fb04 	bl	800abd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80085ce:	4b3e      	ldr	r3, [pc, #248]	; (80086c8 <USBD_CDC_Init+0x1e4>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	f003 020f 	and.w	r2, r3, #15
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4613      	mov	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	3324      	adds	r3, #36	; 0x24
 80085e4:	2201      	movs	r2, #1
 80085e6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80085e8:	4b38      	ldr	r3, [pc, #224]	; (80086cc <USBD_CDC_Init+0x1e8>)
 80085ea:	7819      	ldrb	r1, [r3, #0]
 80085ec:	2340      	movs	r3, #64	; 0x40
 80085ee:	2202      	movs	r2, #2
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f002 faf0 	bl	800abd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80085f6:	4b35      	ldr	r3, [pc, #212]	; (80086cc <USBD_CDC_Init+0x1e8>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	f003 020f 	and.w	r2, r3, #15
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	4613      	mov	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	440b      	add	r3, r1
 800860a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800860e:	2201      	movs	r2, #1
 8008610:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008612:	4b2f      	ldr	r3, [pc, #188]	; (80086d0 <USBD_CDC_Init+0x1ec>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	f003 020f 	and.w	r2, r3, #15
 800861a:	6879      	ldr	r1, [r7, #4]
 800861c:	4613      	mov	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	440b      	add	r3, r1
 8008626:	3326      	adds	r3, #38	; 0x26
 8008628:	2210      	movs	r2, #16
 800862a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800862c:	4b28      	ldr	r3, [pc, #160]	; (80086d0 <USBD_CDC_Init+0x1ec>)
 800862e:	7819      	ldrb	r1, [r3, #0]
 8008630:	2308      	movs	r3, #8
 8008632:	2203      	movs	r2, #3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f002 face 	bl	800abd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800863a:	4b25      	ldr	r3, [pc, #148]	; (80086d0 <USBD_CDC_Init+0x1ec>)
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	f003 020f 	and.w	r2, r3, #15
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	4613      	mov	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	440b      	add	r3, r1
 800864e:	3324      	adds	r3, #36	; 0x24
 8008650:	2201      	movs	r2, #1
 8008652:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	33b0      	adds	r3, #176	; 0xb0
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800868a:	2302      	movs	r3, #2
 800868c:	e018      	b.n	80086c0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	7c1b      	ldrb	r3, [r3, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10a      	bne.n	80086ac <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008696:	4b0d      	ldr	r3, [pc, #52]	; (80086cc <USBD_CDC_Init+0x1e8>)
 8008698:	7819      	ldrb	r1, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f002 fb85 	bl	800adb4 <USBD_LL_PrepareReceive>
 80086aa:	e008      	b.n	80086be <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086ac:	4b07      	ldr	r3, [pc, #28]	; (80086cc <USBD_CDC_Init+0x1e8>)
 80086ae:	7819      	ldrb	r1, [r3, #0]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086b6:	2340      	movs	r3, #64	; 0x40
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f002 fb7b 	bl	800adb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	200000b3 	.word	0x200000b3
 80086cc:	200000b4 	.word	0x200000b4
 80086d0:	200000b5 	.word	0x200000b5

080086d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80086e0:	4b3a      	ldr	r3, [pc, #232]	; (80087cc <USBD_CDC_DeInit+0xf8>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f002 fa9b 	bl	800ac22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80086ec:	4b37      	ldr	r3, [pc, #220]	; (80087cc <USBD_CDC_DeInit+0xf8>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	f003 020f 	and.w	r2, r3, #15
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	440b      	add	r3, r1
 8008700:	3324      	adds	r3, #36	; 0x24
 8008702:	2200      	movs	r2, #0
 8008704:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008706:	4b32      	ldr	r3, [pc, #200]	; (80087d0 <USBD_CDC_DeInit+0xfc>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f002 fa88 	bl	800ac22 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008712:	4b2f      	ldr	r3, [pc, #188]	; (80087d0 <USBD_CDC_DeInit+0xfc>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	f003 020f 	and.w	r2, r3, #15
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	4613      	mov	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	440b      	add	r3, r1
 8008726:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800872a:	2200      	movs	r2, #0
 800872c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800872e:	4b29      	ldr	r3, [pc, #164]	; (80087d4 <USBD_CDC_DeInit+0x100>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f002 fa74 	bl	800ac22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800873a:	4b26      	ldr	r3, [pc, #152]	; (80087d4 <USBD_CDC_DeInit+0x100>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	f003 020f 	and.w	r2, r3, #15
 8008742:	6879      	ldr	r1, [r7, #4]
 8008744:	4613      	mov	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	440b      	add	r3, r1
 800874e:	3324      	adds	r3, #36	; 0x24
 8008750:	2200      	movs	r2, #0
 8008752:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008754:	4b1f      	ldr	r3, [pc, #124]	; (80087d4 <USBD_CDC_DeInit+0x100>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	f003 020f 	and.w	r2, r3, #15
 800875c:	6879      	ldr	r1, [r7, #4]
 800875e:	4613      	mov	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	440b      	add	r3, r1
 8008768:	3326      	adds	r3, #38	; 0x26
 800876a:	2200      	movs	r2, #0
 800876c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	32b0      	adds	r2, #176	; 0xb0
 8008778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d01f      	beq.n	80087c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	33b0      	adds	r3, #176	; 0xb0
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	32b0      	adds	r2, #176	; 0xb0
 800879e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f002 fbc2 	bl	800af2c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	32b0      	adds	r2, #176	; 0xb0
 80087b2:	2100      	movs	r1, #0
 80087b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	200000b3 	.word	0x200000b3
 80087d0:	200000b4 	.word	0x200000b4
 80087d4:	200000b5 	.word	0x200000b5

080087d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	32b0      	adds	r2, #176	; 0xb0
 80087ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008804:	2303      	movs	r3, #3
 8008806:	e0bf      	b.n	8008988 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008810:	2b00      	cmp	r3, #0
 8008812:	d050      	beq.n	80088b6 <USBD_CDC_Setup+0xde>
 8008814:	2b20      	cmp	r3, #32
 8008816:	f040 80af 	bne.w	8008978 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	88db      	ldrh	r3, [r3, #6]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d03a      	beq.n	8008898 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	b25b      	sxtb	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	da1b      	bge.n	8008864 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	33b0      	adds	r3, #176	; 0xb0
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008842:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	88d2      	ldrh	r2, [r2, #6]
 8008848:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	88db      	ldrh	r3, [r3, #6]
 800884e:	2b07      	cmp	r3, #7
 8008850:	bf28      	it	cs
 8008852:	2307      	movcs	r3, #7
 8008854:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	89fa      	ldrh	r2, [r7, #14]
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 fd6d 	bl	800a33c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008862:	e090      	b.n	8008986 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	785a      	ldrb	r2, [r3, #1]
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	88db      	ldrh	r3, [r3, #6]
 8008872:	2b3f      	cmp	r3, #63	; 0x3f
 8008874:	d803      	bhi.n	800887e <USBD_CDC_Setup+0xa6>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	88db      	ldrh	r3, [r3, #6]
 800887a:	b2da      	uxtb	r2, r3
 800887c:	e000      	b.n	8008880 <USBD_CDC_Setup+0xa8>
 800887e:	2240      	movs	r2, #64	; 0x40
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008886:	6939      	ldr	r1, [r7, #16]
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800888e:	461a      	mov	r2, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f001 fd7f 	bl	800a394 <USBD_CtlPrepareRx>
      break;
 8008896:	e076      	b.n	8008986 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	33b0      	adds	r3, #176	; 0xb0
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	7850      	ldrb	r0, [r2, #1]
 80088ae:	2200      	movs	r2, #0
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	4798      	blx	r3
      break;
 80088b4:	e067      	b.n	8008986 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	785b      	ldrb	r3, [r3, #1]
 80088ba:	2b0b      	cmp	r3, #11
 80088bc:	d851      	bhi.n	8008962 <USBD_CDC_Setup+0x18a>
 80088be:	a201      	add	r2, pc, #4	; (adr r2, 80088c4 <USBD_CDC_Setup+0xec>)
 80088c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c4:	080088f5 	.word	0x080088f5
 80088c8:	08008971 	.word	0x08008971
 80088cc:	08008963 	.word	0x08008963
 80088d0:	08008963 	.word	0x08008963
 80088d4:	08008963 	.word	0x08008963
 80088d8:	08008963 	.word	0x08008963
 80088dc:	08008963 	.word	0x08008963
 80088e0:	08008963 	.word	0x08008963
 80088e4:	08008963 	.word	0x08008963
 80088e8:	08008963 	.word	0x08008963
 80088ec:	0800891f 	.word	0x0800891f
 80088f0:	08008949 	.word	0x08008949
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d107      	bne.n	8008910 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008900:	f107 030a 	add.w	r3, r7, #10
 8008904:	2202      	movs	r2, #2
 8008906:	4619      	mov	r1, r3
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f001 fd17 	bl	800a33c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800890e:	e032      	b.n	8008976 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f001 fca1 	bl	800a25a <USBD_CtlError>
            ret = USBD_FAIL;
 8008918:	2303      	movs	r3, #3
 800891a:	75fb      	strb	r3, [r7, #23]
          break;
 800891c:	e02b      	b.n	8008976 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b03      	cmp	r3, #3
 8008928:	d107      	bne.n	800893a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800892a:	f107 030d 	add.w	r3, r7, #13
 800892e:	2201      	movs	r2, #1
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f001 fd02 	bl	800a33c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008938:	e01d      	b.n	8008976 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 fc8c 	bl	800a25a <USBD_CtlError>
            ret = USBD_FAIL;
 8008942:	2303      	movs	r3, #3
 8008944:	75fb      	strb	r3, [r7, #23]
          break;
 8008946:	e016      	b.n	8008976 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b03      	cmp	r3, #3
 8008952:	d00f      	beq.n	8008974 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 fc7f 	bl	800a25a <USBD_CtlError>
            ret = USBD_FAIL;
 800895c:	2303      	movs	r3, #3
 800895e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008960:	e008      	b.n	8008974 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f001 fc78 	bl	800a25a <USBD_CtlError>
          ret = USBD_FAIL;
 800896a:	2303      	movs	r3, #3
 800896c:	75fb      	strb	r3, [r7, #23]
          break;
 800896e:	e002      	b.n	8008976 <USBD_CDC_Setup+0x19e>
          break;
 8008970:	bf00      	nop
 8008972:	e008      	b.n	8008986 <USBD_CDC_Setup+0x1ae>
          break;
 8008974:	bf00      	nop
      }
      break;
 8008976:	e006      	b.n	8008986 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 fc6d 	bl	800a25a <USBD_CtlError>
      ret = USBD_FAIL;
 8008980:	2303      	movs	r3, #3
 8008982:	75fb      	strb	r3, [r7, #23]
      break;
 8008984:	bf00      	nop
  }

  return (uint8_t)ret;
 8008986:	7dfb      	ldrb	r3, [r7, #23]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	32b0      	adds	r2, #176	; 0xb0
 80089ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e065      	b.n	8008a86 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	32b0      	adds	r2, #176	; 0xb0
 80089c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80089ca:	78fb      	ldrb	r3, [r7, #3]
 80089cc:	f003 020f 	and.w	r2, r3, #15
 80089d0:	6879      	ldr	r1, [r7, #4]
 80089d2:	4613      	mov	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	440b      	add	r3, r1
 80089dc:	3318      	adds	r3, #24
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d02f      	beq.n	8008a44 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80089e4:	78fb      	ldrb	r3, [r7, #3]
 80089e6:	f003 020f 	and.w	r2, r3, #15
 80089ea:	6879      	ldr	r1, [r7, #4]
 80089ec:	4613      	mov	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	440b      	add	r3, r1
 80089f6:	3318      	adds	r3, #24
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	78fb      	ldrb	r3, [r7, #3]
 80089fc:	f003 010f 	and.w	r1, r3, #15
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	460b      	mov	r3, r1
 8008a04:	00db      	lsls	r3, r3, #3
 8008a06:	440b      	add	r3, r1
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4403      	add	r3, r0
 8008a0c:	3348      	adds	r3, #72	; 0x48
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a14:	fb01 f303 	mul.w	r3, r1, r3
 8008a18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d112      	bne.n	8008a44 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008a1e:	78fb      	ldrb	r3, [r7, #3]
 8008a20:	f003 020f 	and.w	r2, r3, #15
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	440b      	add	r3, r1
 8008a30:	3318      	adds	r3, #24
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a36:	78f9      	ldrb	r1, [r7, #3]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f002 f998 	bl	800ad72 <USBD_LL_Transmit>
 8008a42:	e01f      	b.n	8008a84 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	33b0      	adds	r3, #176	; 0xb0
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d010      	beq.n	8008a84 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	33b0      	adds	r3, #176	; 0xb0
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008a80:	78fa      	ldrb	r2, [r7, #3]
 8008a82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	460b      	mov	r3, r1
 8008a98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	32b0      	adds	r2, #176	; 0xb0
 8008aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	32b0      	adds	r2, #176	; 0xb0
 8008ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e01a      	b.n	8008af6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f002 f996 	bl	800adf6 <USBD_LL_GetRxDataSize>
 8008aca:	4602      	mov	r2, r0
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	33b0      	adds	r3, #176	; 0xb0
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008af0:	4611      	mov	r1, r2
 8008af2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	32b0      	adds	r2, #176	; 0xb0
 8008b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e025      	b.n	8008b6c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	33b0      	adds	r3, #176	; 0xb0
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d01a      	beq.n	8008b6a <USBD_CDC_EP0_RxReady+0x6c>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008b3a:	2bff      	cmp	r3, #255	; 0xff
 8008b3c:	d015      	beq.n	8008b6a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	33b0      	adds	r3, #176	; 0xb0
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008b56:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b5e:	b292      	uxth	r2, r2
 8008b60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	22ff      	movs	r2, #255	; 0xff
 8008b66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b7c:	2182      	movs	r1, #130	; 0x82
 8008b7e:	4818      	ldr	r0, [pc, #96]	; (8008be0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b80:	f000 fd09 	bl	8009596 <USBD_GetEpDesc>
 8008b84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b86:	2101      	movs	r1, #1
 8008b88:	4815      	ldr	r0, [pc, #84]	; (8008be0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b8a:	f000 fd04 	bl	8009596 <USBD_GetEpDesc>
 8008b8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b90:	2181      	movs	r1, #129	; 0x81
 8008b92:	4813      	ldr	r0, [pc, #76]	; (8008be0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b94:	f000 fcff 	bl	8009596 <USBD_GetEpDesc>
 8008b98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	2210      	movs	r2, #16
 8008ba4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d006      	beq.n	8008bba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb4:	711a      	strb	r2, [r3, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d006      	beq.n	8008bce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bc8:	711a      	strb	r2, [r3, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2243      	movs	r2, #67	; 0x43
 8008bd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008bd4:	4b02      	ldr	r3, [pc, #8]	; (8008be0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20000070 	.word	0x20000070

08008be4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008bec:	2182      	movs	r1, #130	; 0x82
 8008bee:	4818      	ldr	r0, [pc, #96]	; (8008c50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bf0:	f000 fcd1 	bl	8009596 <USBD_GetEpDesc>
 8008bf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008bf6:	2101      	movs	r1, #1
 8008bf8:	4815      	ldr	r0, [pc, #84]	; (8008c50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bfa:	f000 fccc 	bl	8009596 <USBD_GetEpDesc>
 8008bfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c00:	2181      	movs	r1, #129	; 0x81
 8008c02:	4813      	ldr	r0, [pc, #76]	; (8008c50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c04:	f000 fcc7 	bl	8009596 <USBD_GetEpDesc>
 8008c08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	2210      	movs	r2, #16
 8008c14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d006      	beq.n	8008c2a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	711a      	strb	r2, [r3, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f042 0202 	orr.w	r2, r2, #2
 8008c28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d006      	beq.n	8008c3e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	711a      	strb	r2, [r3, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f042 0202 	orr.w	r2, r2, #2
 8008c3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2243      	movs	r2, #67	; 0x43
 8008c42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c44:	4b02      	ldr	r3, [pc, #8]	; (8008c50 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	20000070 	.word	0x20000070

08008c54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c5c:	2182      	movs	r1, #130	; 0x82
 8008c5e:	4818      	ldr	r0, [pc, #96]	; (8008cc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c60:	f000 fc99 	bl	8009596 <USBD_GetEpDesc>
 8008c64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c66:	2101      	movs	r1, #1
 8008c68:	4815      	ldr	r0, [pc, #84]	; (8008cc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c6a:	f000 fc94 	bl	8009596 <USBD_GetEpDesc>
 8008c6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c70:	2181      	movs	r1, #129	; 0x81
 8008c72:	4813      	ldr	r0, [pc, #76]	; (8008cc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c74:	f000 fc8f 	bl	8009596 <USBD_GetEpDesc>
 8008c78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	2210      	movs	r2, #16
 8008c84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d006      	beq.n	8008c9a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c94:	711a      	strb	r2, [r3, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d006      	beq.n	8008cae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ca8:	711a      	strb	r2, [r3, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2243      	movs	r2, #67	; 0x43
 8008cb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008cb4:	4b02      	ldr	r3, [pc, #8]	; (8008cc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000070 	.word	0x20000070

08008cc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	220a      	movs	r2, #10
 8008cd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008cd2:	4b03      	ldr	r3, [pc, #12]	; (8008ce0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	2000002c 	.word	0x2000002c

08008ce4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e009      	b.n	8008d0c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	33b0      	adds	r3, #176	; 0xb0
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b087      	sub	sp, #28
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	32b0      	adds	r2, #176	; 0xb0
 8008d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d32:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e008      	b.n	8008d50 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	371c      	adds	r7, #28
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	32b0      	adds	r2, #176	; 0xb0
 8008d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e004      	b.n	8008d8a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
	...

08008d98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	32b0      	adds	r2, #176	; 0xb0
 8008daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	32b0      	adds	r2, #176	; 0xb0
 8008dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e018      	b.n	8008df8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	7c1b      	ldrb	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008dce:	4b0c      	ldr	r3, [pc, #48]	; (8008e00 <USBD_CDC_ReceivePacket+0x68>)
 8008dd0:	7819      	ldrb	r1, [r3, #0]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 ffe9 	bl	800adb4 <USBD_LL_PrepareReceive>
 8008de2:	e008      	b.n	8008df6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008de4:	4b06      	ldr	r3, [pc, #24]	; (8008e00 <USBD_CDC_ReceivePacket+0x68>)
 8008de6:	7819      	ldrb	r1, [r3, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dee:	2340      	movs	r3, #64	; 0x40
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f001 ffdf 	bl	800adb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	200000b4 	.word	0x200000b4

08008e04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e01f      	b.n	8008e5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	79fa      	ldrb	r2, [r7, #7]
 8008e4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f001 fe59 	bl	800ab08 <USBD_LL_Init>
 8008e56:	4603      	mov	r3, r0
 8008e58:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3718      	adds	r7, #24
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e025      	b.n	8008ec8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	32ae      	adds	r2, #174	; 0xae
 8008e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00f      	beq.n	8008eb8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	32ae      	adds	r2, #174	; 0xae
 8008ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea8:	f107 020e 	add.w	r2, r7, #14
 8008eac:	4610      	mov	r0, r2
 8008eae:	4798      	blx	r3
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008ebe:	1c5a      	adds	r2, r3, #1
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 fe61 	bl	800aba0 <USBD_LL_Start>
 8008ede:	4603      	mov	r3, r0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ef0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	460b      	mov	r3, r1
 8008f08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d009      	beq.n	8008f2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	78fa      	ldrb	r2, [r7, #3]
 8008f22:	4611      	mov	r1, r2
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	4798      	blx	r3
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	78fa      	ldrb	r2, [r7, #3]
 8008f50:	4611      	mov	r1, r2
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	4798      	blx	r3
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f001 f932 	bl	800a1e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2201      	movs	r2, #1
 8008f86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008f90:	461a      	mov	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008f9e:	f003 031f 	and.w	r3, r3, #31
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d01a      	beq.n	8008fdc <USBD_LL_SetupStage+0x72>
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d822      	bhi.n	8008ff0 <USBD_LL_SetupStage+0x86>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d002      	beq.n	8008fb4 <USBD_LL_SetupStage+0x4a>
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d00a      	beq.n	8008fc8 <USBD_LL_SetupStage+0x5e>
 8008fb2:	e01d      	b.n	8008ff0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fb5f 	bl	8009680 <USBD_StdDevReq>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8008fc6:	e020      	b.n	800900a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fce:	4619      	mov	r1, r3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fbc7 	bl	8009764 <USBD_StdItfReq>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8008fda:	e016      	b.n	800900a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fc29 	bl	800983c <USBD_StdEPReq>
 8008fea:	4603      	mov	r3, r0
 8008fec:	73fb      	strb	r3, [r7, #15]
      break;
 8008fee:	e00c      	b.n	800900a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ff6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f001 fe2e 	bl	800ac60 <USBD_LL_StallEP>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]
      break;
 8009008:	bf00      	nop
  }

  return ret;
 800900a:	7bfb      	ldrb	r3, [r7, #15]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	460b      	mov	r3, r1
 800901e:	607a      	str	r2, [r7, #4]
 8009020:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009026:	7afb      	ldrb	r3, [r7, #11]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d16e      	bne.n	800910a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009032:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800903a:	2b03      	cmp	r3, #3
 800903c:	f040 8098 	bne.w	8009170 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	689a      	ldr	r2, [r3, #8]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	429a      	cmp	r2, r3
 800904a:	d913      	bls.n	8009074 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	1ad2      	subs	r2, r2, r3
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	68da      	ldr	r2, [r3, #12]
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	4293      	cmp	r3, r2
 8009064:	bf28      	it	cs
 8009066:	4613      	movcs	r3, r2
 8009068:	461a      	mov	r2, r3
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f001 f9ae 	bl	800a3ce <USBD_CtlContinueRx>
 8009072:	e07d      	b.n	8009170 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800907a:	f003 031f 	and.w	r3, r3, #31
 800907e:	2b02      	cmp	r3, #2
 8009080:	d014      	beq.n	80090ac <USBD_LL_DataOutStage+0x98>
 8009082:	2b02      	cmp	r3, #2
 8009084:	d81d      	bhi.n	80090c2 <USBD_LL_DataOutStage+0xae>
 8009086:	2b00      	cmp	r3, #0
 8009088:	d002      	beq.n	8009090 <USBD_LL_DataOutStage+0x7c>
 800908a:	2b01      	cmp	r3, #1
 800908c:	d003      	beq.n	8009096 <USBD_LL_DataOutStage+0x82>
 800908e:	e018      	b.n	80090c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009090:	2300      	movs	r3, #0
 8009092:	75bb      	strb	r3, [r7, #22]
            break;
 8009094:	e018      	b.n	80090c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800909c:	b2db      	uxtb	r3, r3
 800909e:	4619      	mov	r1, r3
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 fa5e 	bl	8009562 <USBD_CoreFindIF>
 80090a6:	4603      	mov	r3, r0
 80090a8:	75bb      	strb	r3, [r7, #22]
            break;
 80090aa:	e00d      	b.n	80090c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	4619      	mov	r1, r3
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 fa60 	bl	800957c <USBD_CoreFindEP>
 80090bc:	4603      	mov	r3, r0
 80090be:	75bb      	strb	r3, [r7, #22]
            break;
 80090c0:	e002      	b.n	80090c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	75bb      	strb	r3, [r7, #22]
            break;
 80090c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80090c8:	7dbb      	ldrb	r3, [r7, #22]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d119      	bne.n	8009102 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d113      	bne.n	8009102 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80090da:	7dba      	ldrb	r2, [r7, #22]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	32ae      	adds	r2, #174	; 0xae
 80090e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00b      	beq.n	8009102 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80090ea:	7dba      	ldrb	r2, [r7, #22]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80090f2:	7dba      	ldrb	r2, [r7, #22]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	32ae      	adds	r2, #174	; 0xae
 80090f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f001 f974 	bl	800a3f0 <USBD_CtlSendStatus>
 8009108:	e032      	b.n	8009170 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800910a:	7afb      	ldrb	r3, [r7, #11]
 800910c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009110:	b2db      	uxtb	r3, r3
 8009112:	4619      	mov	r1, r3
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 fa31 	bl	800957c <USBD_CoreFindEP>
 800911a:	4603      	mov	r3, r0
 800911c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800911e:	7dbb      	ldrb	r3, [r7, #22]
 8009120:	2bff      	cmp	r3, #255	; 0xff
 8009122:	d025      	beq.n	8009170 <USBD_LL_DataOutStage+0x15c>
 8009124:	7dbb      	ldrb	r3, [r7, #22]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d122      	bne.n	8009170 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b03      	cmp	r3, #3
 8009134:	d117      	bne.n	8009166 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009136:	7dba      	ldrb	r2, [r7, #22]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	32ae      	adds	r2, #174	; 0xae
 800913c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00f      	beq.n	8009166 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009146:	7dba      	ldrb	r2, [r7, #22]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800914e:	7dba      	ldrb	r2, [r7, #22]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	32ae      	adds	r2, #174	; 0xae
 8009154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	7afa      	ldrb	r2, [r7, #11]
 800915c:	4611      	mov	r1, r2
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	4798      	blx	r3
 8009162:	4603      	mov	r3, r0
 8009164:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009166:	7dfb      	ldrb	r3, [r7, #23]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800916c:	7dfb      	ldrb	r3, [r7, #23]
 800916e:	e000      	b.n	8009172 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b086      	sub	sp, #24
 800917e:	af00      	add	r7, sp, #0
 8009180:	60f8      	str	r0, [r7, #12]
 8009182:	460b      	mov	r3, r1
 8009184:	607a      	str	r2, [r7, #4]
 8009186:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009188:	7afb      	ldrb	r3, [r7, #11]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d16f      	bne.n	800926e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3314      	adds	r3, #20
 8009192:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800919a:	2b02      	cmp	r3, #2
 800919c:	d15a      	bne.n	8009254 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d914      	bls.n	80091d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	689a      	ldr	r2, [r3, #8]
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	1ad2      	subs	r2, r2, r3
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	461a      	mov	r2, r3
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f001 f8d6 	bl	800a372 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091c6:	2300      	movs	r3, #0
 80091c8:	2200      	movs	r2, #0
 80091ca:	2100      	movs	r1, #0
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f001 fdf1 	bl	800adb4 <USBD_LL_PrepareReceive>
 80091d2:	e03f      	b.n	8009254 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	68da      	ldr	r2, [r3, #12]
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d11c      	bne.n	800921a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d316      	bcc.n	800921a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d20f      	bcs.n	800921a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091fa:	2200      	movs	r2, #0
 80091fc:	2100      	movs	r1, #0
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f001 f8b7 	bl	800a372 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800920c:	2300      	movs	r3, #0
 800920e:	2200      	movs	r2, #0
 8009210:	2100      	movs	r1, #0
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f001 fdce 	bl	800adb4 <USBD_LL_PrepareReceive>
 8009218:	e01c      	b.n	8009254 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b03      	cmp	r3, #3
 8009224:	d10f      	bne.n	8009246 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d009      	beq.n	8009246 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009246:	2180      	movs	r1, #128	; 0x80
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f001 fd09 	bl	800ac60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f001 f8e1 	bl	800a416 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d03a      	beq.n	80092d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f7ff fe42 	bl	8008ee8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800926c:	e032      	b.n	80092d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800926e:	7afb      	ldrb	r3, [r7, #11]
 8009270:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009274:	b2db      	uxtb	r3, r3
 8009276:	4619      	mov	r1, r3
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 f97f 	bl	800957c <USBD_CoreFindEP>
 800927e:	4603      	mov	r3, r0
 8009280:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009282:	7dfb      	ldrb	r3, [r7, #23]
 8009284:	2bff      	cmp	r3, #255	; 0xff
 8009286:	d025      	beq.n	80092d4 <USBD_LL_DataInStage+0x15a>
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d122      	bne.n	80092d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b03      	cmp	r3, #3
 8009298:	d11c      	bne.n	80092d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800929a:	7dfa      	ldrb	r2, [r7, #23]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	32ae      	adds	r2, #174	; 0xae
 80092a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d014      	beq.n	80092d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80092aa:	7dfa      	ldrb	r2, [r7, #23]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80092b2:	7dfa      	ldrb	r2, [r7, #23]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	32ae      	adds	r2, #174	; 0xae
 80092b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	7afa      	ldrb	r2, [r7, #11]
 80092c0:	4611      	mov	r1, r2
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	4798      	blx	r3
 80092c6:	4603      	mov	r3, r0
 80092c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80092ca:	7dbb      	ldrb	r3, [r7, #22]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80092d0:	7dbb      	ldrb	r3, [r7, #22]
 80092d2:	e000      	b.n	80092d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009316:	2b00      	cmp	r3, #0
 8009318:	d014      	beq.n	8009344 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00e      	beq.n	8009344 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	6852      	ldr	r2, [r2, #4]
 8009332:	b2d2      	uxtb	r2, r2
 8009334:	4611      	mov	r1, r2
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	4798      	blx	r3
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009340:	2303      	movs	r3, #3
 8009342:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009344:	2340      	movs	r3, #64	; 0x40
 8009346:	2200      	movs	r2, #0
 8009348:	2100      	movs	r1, #0
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f001 fc43 	bl	800abd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2240      	movs	r2, #64	; 0x40
 800935c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009360:	2340      	movs	r3, #64	; 0x40
 8009362:	2200      	movs	r2, #0
 8009364:	2180      	movs	r1, #128	; 0x80
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 fc35 	bl	800abd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2240      	movs	r2, #64	; 0x40
 8009376:	621a      	str	r2, [r3, #32]

  return ret;
 8009378:	7bfb      	ldrb	r3, [r7, #15]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	78fa      	ldrb	r2, [r7, #3]
 8009392:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2204      	movs	r2, #4
 80093bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d106      	bne.n	80093f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b03      	cmp	r3, #3
 8009410:	d110      	bne.n	8009434 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00b      	beq.n	8009434 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d005      	beq.n	8009434 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	460b      	mov	r3, r1
 8009448:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	32ae      	adds	r2, #174	; 0xae
 8009454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d101      	bne.n	8009460 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800945c:	2303      	movs	r3, #3
 800945e:	e01c      	b.n	800949a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b03      	cmp	r3, #3
 800946a:	d115      	bne.n	8009498 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	32ae      	adds	r2, #174	; 0xae
 8009476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947a:	6a1b      	ldr	r3, [r3, #32]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00b      	beq.n	8009498 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	32ae      	adds	r2, #174	; 0xae
 800948a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800948e:	6a1b      	ldr	r3, [r3, #32]
 8009490:	78fa      	ldrb	r2, [r7, #3]
 8009492:	4611      	mov	r1, r2
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b082      	sub	sp, #8
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	460b      	mov	r3, r1
 80094ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	32ae      	adds	r2, #174	; 0xae
 80094b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e01c      	b.n	80094fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	2b03      	cmp	r3, #3
 80094ce:	d115      	bne.n	80094fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	32ae      	adds	r2, #174	; 0xae
 80094da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00b      	beq.n	80094fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	32ae      	adds	r2, #174	; 0xae
 80094ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	78fa      	ldrb	r2, [r7, #3]
 80094f6:	4611      	mov	r1, r2
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00e      	beq.n	8009558 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	6852      	ldr	r2, [r2, #4]
 8009546:	b2d2      	uxtb	r2, r2
 8009548:	4611      	mov	r1, r2
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	4798      	blx	r3
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009554:	2303      	movs	r3, #3
 8009556:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009558:	7bfb      	ldrb	r3, [r7, #15]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009562:	b480      	push	{r7}
 8009564:	b083      	sub	sp, #12
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	460b      	mov	r3, r1
 800956c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800956e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009570:	4618      	mov	r0, r3
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	460b      	mov	r3, r1
 8009586:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009588:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800958a:	4618      	mov	r0, r3
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b086      	sub	sp, #24
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	460b      	mov	r3, r1
 80095a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	885b      	ldrh	r3, [r3, #2]
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d920      	bls.n	8009600 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80095c6:	e013      	b.n	80095f0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80095c8:	f107 030a 	add.w	r3, r7, #10
 80095cc:	4619      	mov	r1, r3
 80095ce:	6978      	ldr	r0, [r7, #20]
 80095d0:	f000 f81b 	bl	800960a <USBD_GetNextDesc>
 80095d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	785b      	ldrb	r3, [r3, #1]
 80095da:	2b05      	cmp	r3, #5
 80095dc:	d108      	bne.n	80095f0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	789b      	ldrb	r3, [r3, #2]
 80095e6:	78fa      	ldrb	r2, [r7, #3]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d008      	beq.n	80095fe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80095ec:	2300      	movs	r3, #0
 80095ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	885b      	ldrh	r3, [r3, #2]
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	897b      	ldrh	r3, [r7, #10]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d8e5      	bhi.n	80095c8 <USBD_GetEpDesc+0x32>
 80095fc:	e000      	b.n	8009600 <USBD_GetEpDesc+0x6a>
          break;
 80095fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009600:	693b      	ldr	r3, [r7, #16]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3718      	adds	r7, #24
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800960a:	b480      	push	{r7}
 800960c:	b085      	sub	sp, #20
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	881a      	ldrh	r2, [r3, #0]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	b29b      	uxth	r3, r3
 8009622:	4413      	add	r3, r2
 8009624:	b29a      	uxth	r2, r3
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	461a      	mov	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4413      	add	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009636:	68fb      	ldr	r3, [r7, #12]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	3301      	adds	r3, #1
 800965a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009662:	8a3b      	ldrh	r3, [r7, #16]
 8009664:	021b      	lsls	r3, r3, #8
 8009666:	b21a      	sxth	r2, r3
 8009668:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800966c:	4313      	orrs	r3, r2
 800966e:	b21b      	sxth	r3, r3
 8009670:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009672:	89fb      	ldrh	r3, [r7, #14]
}
 8009674:	4618      	mov	r0, r3
 8009676:	371c      	adds	r7, #28
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009696:	2b40      	cmp	r3, #64	; 0x40
 8009698:	d005      	beq.n	80096a6 <USBD_StdDevReq+0x26>
 800969a:	2b40      	cmp	r3, #64	; 0x40
 800969c:	d857      	bhi.n	800974e <USBD_StdDevReq+0xce>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00f      	beq.n	80096c2 <USBD_StdDevReq+0x42>
 80096a2:	2b20      	cmp	r3, #32
 80096a4:	d153      	bne.n	800974e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	32ae      	adds	r2, #174	; 0xae
 80096b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	4798      	blx	r3
 80096bc:	4603      	mov	r3, r0
 80096be:	73fb      	strb	r3, [r7, #15]
      break;
 80096c0:	e04a      	b.n	8009758 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	785b      	ldrb	r3, [r3, #1]
 80096c6:	2b09      	cmp	r3, #9
 80096c8:	d83b      	bhi.n	8009742 <USBD_StdDevReq+0xc2>
 80096ca:	a201      	add	r2, pc, #4	; (adr r2, 80096d0 <USBD_StdDevReq+0x50>)
 80096cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d0:	08009725 	.word	0x08009725
 80096d4:	08009739 	.word	0x08009739
 80096d8:	08009743 	.word	0x08009743
 80096dc:	0800972f 	.word	0x0800972f
 80096e0:	08009743 	.word	0x08009743
 80096e4:	08009703 	.word	0x08009703
 80096e8:	080096f9 	.word	0x080096f9
 80096ec:	08009743 	.word	0x08009743
 80096f0:	0800971b 	.word	0x0800971b
 80096f4:	0800970d 	.word	0x0800970d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fa3c 	bl	8009b78 <USBD_GetDescriptor>
          break;
 8009700:	e024      	b.n	800974c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fbcb 	bl	8009ea0 <USBD_SetAddress>
          break;
 800970a:	e01f      	b.n	800974c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fc0a 	bl	8009f28 <USBD_SetConfig>
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]
          break;
 8009718:	e018      	b.n	800974c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fcad 	bl	800a07c <USBD_GetConfig>
          break;
 8009722:	e013      	b.n	800974c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fcde 	bl	800a0e8 <USBD_GetStatus>
          break;
 800972c:	e00e      	b.n	800974c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fd0d 	bl	800a150 <USBD_SetFeature>
          break;
 8009736:	e009      	b.n	800974c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fd31 	bl	800a1a2 <USBD_ClrFeature>
          break;
 8009740:	e004      	b.n	800974c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fd88 	bl	800a25a <USBD_CtlError>
          break;
 800974a:	bf00      	nop
      }
      break;
 800974c:	e004      	b.n	8009758 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fd82 	bl	800a25a <USBD_CtlError>
      break;
 8009756:	bf00      	nop
  }

  return ret;
 8009758:	7bfb      	ldrb	r3, [r7, #15]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop

08009764 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800977a:	2b40      	cmp	r3, #64	; 0x40
 800977c:	d005      	beq.n	800978a <USBD_StdItfReq+0x26>
 800977e:	2b40      	cmp	r3, #64	; 0x40
 8009780:	d852      	bhi.n	8009828 <USBD_StdItfReq+0xc4>
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <USBD_StdItfReq+0x26>
 8009786:	2b20      	cmp	r3, #32
 8009788:	d14e      	bne.n	8009828 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009790:	b2db      	uxtb	r3, r3
 8009792:	3b01      	subs	r3, #1
 8009794:	2b02      	cmp	r3, #2
 8009796:	d840      	bhi.n	800981a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	889b      	ldrh	r3, [r3, #4]
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d836      	bhi.n	8009810 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	889b      	ldrh	r3, [r3, #4]
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff fed9 	bl	8009562 <USBD_CoreFindIF>
 80097b0:	4603      	mov	r3, r0
 80097b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
 80097b6:	2bff      	cmp	r3, #255	; 0xff
 80097b8:	d01d      	beq.n	80097f6 <USBD_StdItfReq+0x92>
 80097ba:	7bbb      	ldrb	r3, [r7, #14]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d11a      	bne.n	80097f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80097c0:	7bba      	ldrb	r2, [r7, #14]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	32ae      	adds	r2, #174	; 0xae
 80097c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00f      	beq.n	80097f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80097d0:	7bba      	ldrb	r2, [r7, #14]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097d8:	7bba      	ldrb	r2, [r7, #14]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	32ae      	adds	r2, #174	; 0xae
 80097de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	4798      	blx	r3
 80097ea:	4603      	mov	r3, r0
 80097ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097ee:	e004      	b.n	80097fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80097f0:	2303      	movs	r3, #3
 80097f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097f4:	e001      	b.n	80097fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80097f6:	2303      	movs	r3, #3
 80097f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	88db      	ldrh	r3, [r3, #6]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d110      	bne.n	8009824 <USBD_StdItfReq+0xc0>
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10d      	bne.n	8009824 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fdf1 	bl	800a3f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800980e:	e009      	b.n	8009824 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fd21 	bl	800a25a <USBD_CtlError>
          break;
 8009818:	e004      	b.n	8009824 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fd1c 	bl	800a25a <USBD_CtlError>
          break;
 8009822:	e000      	b.n	8009826 <USBD_StdItfReq+0xc2>
          break;
 8009824:	bf00      	nop
      }
      break;
 8009826:	e004      	b.n	8009832 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fd15 	bl	800a25a <USBD_CtlError>
      break;
 8009830:	bf00      	nop
  }

  return ret;
 8009832:	7bfb      	ldrb	r3, [r7, #15]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	889b      	ldrh	r3, [r3, #4]
 800984e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009858:	2b40      	cmp	r3, #64	; 0x40
 800985a:	d007      	beq.n	800986c <USBD_StdEPReq+0x30>
 800985c:	2b40      	cmp	r3, #64	; 0x40
 800985e:	f200 817f 	bhi.w	8009b60 <USBD_StdEPReq+0x324>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d02a      	beq.n	80098bc <USBD_StdEPReq+0x80>
 8009866:	2b20      	cmp	r3, #32
 8009868:	f040 817a 	bne.w	8009b60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800986c:	7bbb      	ldrb	r3, [r7, #14]
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fe83 	bl	800957c <USBD_CoreFindEP>
 8009876:	4603      	mov	r3, r0
 8009878:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800987a:	7b7b      	ldrb	r3, [r7, #13]
 800987c:	2bff      	cmp	r3, #255	; 0xff
 800987e:	f000 8174 	beq.w	8009b6a <USBD_StdEPReq+0x32e>
 8009882:	7b7b      	ldrb	r3, [r7, #13]
 8009884:	2b00      	cmp	r3, #0
 8009886:	f040 8170 	bne.w	8009b6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800988a:	7b7a      	ldrb	r2, [r7, #13]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009892:	7b7a      	ldrb	r2, [r7, #13]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	32ae      	adds	r2, #174	; 0xae
 8009898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 8163 	beq.w	8009b6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80098a4:	7b7a      	ldrb	r2, [r7, #13]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	32ae      	adds	r2, #174	; 0xae
 80098aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	4798      	blx	r3
 80098b6:	4603      	mov	r3, r0
 80098b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098ba:	e156      	b.n	8009b6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	785b      	ldrb	r3, [r3, #1]
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d008      	beq.n	80098d6 <USBD_StdEPReq+0x9a>
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	f300 8145 	bgt.w	8009b54 <USBD_StdEPReq+0x318>
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 809b 	beq.w	8009a06 <USBD_StdEPReq+0x1ca>
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d03c      	beq.n	800994e <USBD_StdEPReq+0x112>
 80098d4:	e13e      	b.n	8009b54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d002      	beq.n	80098e8 <USBD_StdEPReq+0xac>
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	d016      	beq.n	8009914 <USBD_StdEPReq+0xd8>
 80098e6:	e02c      	b.n	8009942 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098e8:	7bbb      	ldrb	r3, [r7, #14]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00d      	beq.n	800990a <USBD_StdEPReq+0xce>
 80098ee:	7bbb      	ldrb	r3, [r7, #14]
 80098f0:	2b80      	cmp	r3, #128	; 0x80
 80098f2:	d00a      	beq.n	800990a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098f4:	7bbb      	ldrb	r3, [r7, #14]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f001 f9b1 	bl	800ac60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098fe:	2180      	movs	r1, #128	; 0x80
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f001 f9ad 	bl	800ac60 <USBD_LL_StallEP>
 8009906:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009908:	e020      	b.n	800994c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fca4 	bl	800a25a <USBD_CtlError>
              break;
 8009912:	e01b      	b.n	800994c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	885b      	ldrh	r3, [r3, #2]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10e      	bne.n	800993a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00b      	beq.n	800993a <USBD_StdEPReq+0xfe>
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	2b80      	cmp	r3, #128	; 0x80
 8009926:	d008      	beq.n	800993a <USBD_StdEPReq+0xfe>
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	88db      	ldrh	r3, [r3, #6]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d104      	bne.n	800993a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f001 f993 	bl	800ac60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fd58 	bl	800a3f0 <USBD_CtlSendStatus>

              break;
 8009940:	e004      	b.n	800994c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 fc88 	bl	800a25a <USBD_CtlError>
              break;
 800994a:	bf00      	nop
          }
          break;
 800994c:	e107      	b.n	8009b5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b02      	cmp	r3, #2
 8009958:	d002      	beq.n	8009960 <USBD_StdEPReq+0x124>
 800995a:	2b03      	cmp	r3, #3
 800995c:	d016      	beq.n	800998c <USBD_StdEPReq+0x150>
 800995e:	e04b      	b.n	80099f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00d      	beq.n	8009982 <USBD_StdEPReq+0x146>
 8009966:	7bbb      	ldrb	r3, [r7, #14]
 8009968:	2b80      	cmp	r3, #128	; 0x80
 800996a:	d00a      	beq.n	8009982 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800996c:	7bbb      	ldrb	r3, [r7, #14]
 800996e:	4619      	mov	r1, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f001 f975 	bl	800ac60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009976:	2180      	movs	r1, #128	; 0x80
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f001 f971 	bl	800ac60 <USBD_LL_StallEP>
 800997e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009980:	e040      	b.n	8009a04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fc68 	bl	800a25a <USBD_CtlError>
              break;
 800998a:	e03b      	b.n	8009a04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	885b      	ldrh	r3, [r3, #2]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d136      	bne.n	8009a02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009994:	7bbb      	ldrb	r3, [r7, #14]
 8009996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800999a:	2b00      	cmp	r3, #0
 800999c:	d004      	beq.n	80099a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800999e:	7bbb      	ldrb	r3, [r7, #14]
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f001 f97b 	bl	800ac9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fd21 	bl	800a3f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7ff fde2 	bl	800957c <USBD_CoreFindEP>
 80099b8:	4603      	mov	r3, r0
 80099ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099bc:	7b7b      	ldrb	r3, [r7, #13]
 80099be:	2bff      	cmp	r3, #255	; 0xff
 80099c0:	d01f      	beq.n	8009a02 <USBD_StdEPReq+0x1c6>
 80099c2:	7b7b      	ldrb	r3, [r7, #13]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d11c      	bne.n	8009a02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80099c8:	7b7a      	ldrb	r2, [r7, #13]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80099d0:	7b7a      	ldrb	r2, [r7, #13]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	32ae      	adds	r2, #174	; 0xae
 80099d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d010      	beq.n	8009a02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80099e0:	7b7a      	ldrb	r2, [r7, #13]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	32ae      	adds	r2, #174	; 0xae
 80099e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	4798      	blx	r3
 80099f2:	4603      	mov	r3, r0
 80099f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80099f6:	e004      	b.n	8009a02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fc2d 	bl	800a25a <USBD_CtlError>
              break;
 8009a00:	e000      	b.n	8009a04 <USBD_StdEPReq+0x1c8>
              break;
 8009a02:	bf00      	nop
          }
          break;
 8009a04:	e0ab      	b.n	8009b5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d002      	beq.n	8009a18 <USBD_StdEPReq+0x1dc>
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d032      	beq.n	8009a7c <USBD_StdEPReq+0x240>
 8009a16:	e097      	b.n	8009b48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d007      	beq.n	8009a2e <USBD_StdEPReq+0x1f2>
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	2b80      	cmp	r3, #128	; 0x80
 8009a22:	d004      	beq.n	8009a2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fc17 	bl	800a25a <USBD_CtlError>
                break;
 8009a2c:	e091      	b.n	8009b52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	da0b      	bge.n	8009a4e <USBD_StdEPReq+0x212>
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	3310      	adds	r3, #16
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	4413      	add	r3, r2
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	e00b      	b.n	8009a66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a4e:	7bbb      	ldrb	r3, [r7, #14]
 8009a50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a54:	4613      	mov	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	4413      	add	r3, r2
 8009a64:	3304      	adds	r3, #4
 8009a66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	2202      	movs	r2, #2
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fc61 	bl	800a33c <USBD_CtlSendData>
              break;
 8009a7a:	e06a      	b.n	8009b52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	da11      	bge.n	8009aa8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	f003 020f 	and.w	r2, r3, #15
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	440b      	add	r3, r1
 8009a96:	3324      	adds	r3, #36	; 0x24
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d117      	bne.n	8009ace <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fbda 	bl	800a25a <USBD_CtlError>
                  break;
 8009aa6:	e054      	b.n	8009b52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	f003 020f 	and.w	r2, r3, #15
 8009aae:	6879      	ldr	r1, [r7, #4]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	440b      	add	r3, r1
 8009aba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009abe:	881b      	ldrh	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d104      	bne.n	8009ace <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fbc7 	bl	800a25a <USBD_CtlError>
                  break;
 8009acc:	e041      	b.n	8009b52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ace:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	da0b      	bge.n	8009aee <USBD_StdEPReq+0x2b2>
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
 8009ad8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	3310      	adds	r3, #16
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	4413      	add	r3, r2
 8009aea:	3304      	adds	r3, #4
 8009aec:	e00b      	b.n	8009b06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009aee:	7bbb      	ldrb	r3, [r7, #14]
 8009af0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009af4:	4613      	mov	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	4413      	add	r3, r2
 8009b04:	3304      	adds	r3, #4
 8009b06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d002      	beq.n	8009b14 <USBD_StdEPReq+0x2d8>
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
 8009b10:	2b80      	cmp	r3, #128	; 0x80
 8009b12:	d103      	bne.n	8009b1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2200      	movs	r2, #0
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	e00e      	b.n	8009b3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f001 f8db 	bl	800acdc <USBD_LL_IsStallEP>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d003      	beq.n	8009b34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	e002      	b.n	8009b3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	2200      	movs	r2, #0
 8009b38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fbfb 	bl	800a33c <USBD_CtlSendData>
              break;
 8009b46:	e004      	b.n	8009b52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fb85 	bl	800a25a <USBD_CtlError>
              break;
 8009b50:	bf00      	nop
          }
          break;
 8009b52:	e004      	b.n	8009b5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fb7f 	bl	800a25a <USBD_CtlError>
          break;
 8009b5c:	bf00      	nop
      }
      break;
 8009b5e:	e005      	b.n	8009b6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fb79 	bl	800a25a <USBD_CtlError>
      break;
 8009b68:	e000      	b.n	8009b6c <USBD_StdEPReq+0x330>
      break;
 8009b6a:	bf00      	nop
  }

  return ret;
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
	...

08009b78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b82:	2300      	movs	r3, #0
 8009b84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	885b      	ldrh	r3, [r3, #2]
 8009b92:	0a1b      	lsrs	r3, r3, #8
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	3b01      	subs	r3, #1
 8009b98:	2b0e      	cmp	r3, #14
 8009b9a:	f200 8152 	bhi.w	8009e42 <USBD_GetDescriptor+0x2ca>
 8009b9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ba4 <USBD_GetDescriptor+0x2c>)
 8009ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba4:	08009c15 	.word	0x08009c15
 8009ba8:	08009c2d 	.word	0x08009c2d
 8009bac:	08009c6d 	.word	0x08009c6d
 8009bb0:	08009e43 	.word	0x08009e43
 8009bb4:	08009e43 	.word	0x08009e43
 8009bb8:	08009de3 	.word	0x08009de3
 8009bbc:	08009e0f 	.word	0x08009e0f
 8009bc0:	08009e43 	.word	0x08009e43
 8009bc4:	08009e43 	.word	0x08009e43
 8009bc8:	08009e43 	.word	0x08009e43
 8009bcc:	08009e43 	.word	0x08009e43
 8009bd0:	08009e43 	.word	0x08009e43
 8009bd4:	08009e43 	.word	0x08009e43
 8009bd8:	08009e43 	.word	0x08009e43
 8009bdc:	08009be1 	.word	0x08009be1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be6:	69db      	ldr	r3, [r3, #28]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00b      	beq.n	8009c04 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bf2:	69db      	ldr	r3, [r3, #28]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	7c12      	ldrb	r2, [r2, #16]
 8009bf8:	f107 0108 	add.w	r1, r7, #8
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	4798      	blx	r3
 8009c00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c02:	e126      	b.n	8009e52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fb27 	bl	800a25a <USBD_CtlError>
        err++;
 8009c0c:	7afb      	ldrb	r3, [r7, #11]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	72fb      	strb	r3, [r7, #11]
      break;
 8009c12:	e11e      	b.n	8009e52 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	7c12      	ldrb	r2, [r2, #16]
 8009c20:	f107 0108 	add.w	r1, r7, #8
 8009c24:	4610      	mov	r0, r2
 8009c26:	4798      	blx	r3
 8009c28:	60f8      	str	r0, [r7, #12]
      break;
 8009c2a:	e112      	b.n	8009e52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	7c1b      	ldrb	r3, [r3, #16]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10d      	bne.n	8009c50 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3c:	f107 0208 	add.w	r2, r7, #8
 8009c40:	4610      	mov	r0, r2
 8009c42:	4798      	blx	r3
 8009c44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c4e:	e100      	b.n	8009e52 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	f107 0208 	add.w	r2, r7, #8
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	4798      	blx	r3
 8009c60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3301      	adds	r3, #1
 8009c66:	2202      	movs	r2, #2
 8009c68:	701a      	strb	r2, [r3, #0]
      break;
 8009c6a:	e0f2      	b.n	8009e52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	885b      	ldrh	r3, [r3, #2]
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	2b05      	cmp	r3, #5
 8009c74:	f200 80ac 	bhi.w	8009dd0 <USBD_GetDescriptor+0x258>
 8009c78:	a201      	add	r2, pc, #4	; (adr r2, 8009c80 <USBD_GetDescriptor+0x108>)
 8009c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7e:	bf00      	nop
 8009c80:	08009c99 	.word	0x08009c99
 8009c84:	08009ccd 	.word	0x08009ccd
 8009c88:	08009d01 	.word	0x08009d01
 8009c8c:	08009d35 	.word	0x08009d35
 8009c90:	08009d69 	.word	0x08009d69
 8009c94:	08009d9d 	.word	0x08009d9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	7c12      	ldrb	r2, [r2, #16]
 8009cb0:	f107 0108 	add.w	r1, r7, #8
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	4798      	blx	r3
 8009cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cba:	e091      	b.n	8009de0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 facb 	bl	800a25a <USBD_CtlError>
            err++;
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cca:	e089      	b.n	8009de0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00b      	beq.n	8009cf0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	7c12      	ldrb	r2, [r2, #16]
 8009ce4:	f107 0108 	add.w	r1, r7, #8
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4798      	blx	r3
 8009cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cee:	e077      	b.n	8009de0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fab1 	bl	800a25a <USBD_CtlError>
            err++;
 8009cf8:	7afb      	ldrb	r3, [r7, #11]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cfe:	e06f      	b.n	8009de0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	7c12      	ldrb	r2, [r2, #16]
 8009d18:	f107 0108 	add.w	r1, r7, #8
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4798      	blx	r3
 8009d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d22:	e05d      	b.n	8009de0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fa97 	bl	800a25a <USBD_CtlError>
            err++;
 8009d2c:	7afb      	ldrb	r3, [r7, #11]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	72fb      	strb	r3, [r7, #11]
          break;
 8009d32:	e055      	b.n	8009de0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d3a:	691b      	ldr	r3, [r3, #16]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00b      	beq.n	8009d58 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	7c12      	ldrb	r2, [r2, #16]
 8009d4c:	f107 0108 	add.w	r1, r7, #8
 8009d50:	4610      	mov	r0, r2
 8009d52:	4798      	blx	r3
 8009d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d56:	e043      	b.n	8009de0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fa7d 	bl	800a25a <USBD_CtlError>
            err++;
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	3301      	adds	r3, #1
 8009d64:	72fb      	strb	r3, [r7, #11]
          break;
 8009d66:	e03b      	b.n	8009de0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00b      	beq.n	8009d8c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	7c12      	ldrb	r2, [r2, #16]
 8009d80:	f107 0108 	add.w	r1, r7, #8
 8009d84:	4610      	mov	r0, r2
 8009d86:	4798      	blx	r3
 8009d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d8a:	e029      	b.n	8009de0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fa63 	bl	800a25a <USBD_CtlError>
            err++;
 8009d94:	7afb      	ldrb	r3, [r7, #11]
 8009d96:	3301      	adds	r3, #1
 8009d98:	72fb      	strb	r3, [r7, #11]
          break;
 8009d9a:	e021      	b.n	8009de0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00b      	beq.n	8009dc0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	7c12      	ldrb	r2, [r2, #16]
 8009db4:	f107 0108 	add.w	r1, r7, #8
 8009db8:	4610      	mov	r0, r2
 8009dba:	4798      	blx	r3
 8009dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dbe:	e00f      	b.n	8009de0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009dc0:	6839      	ldr	r1, [r7, #0]
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fa49 	bl	800a25a <USBD_CtlError>
            err++;
 8009dc8:	7afb      	ldrb	r3, [r7, #11]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8009dce:	e007      	b.n	8009de0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009dd0:	6839      	ldr	r1, [r7, #0]
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fa41 	bl	800a25a <USBD_CtlError>
          err++;
 8009dd8:	7afb      	ldrb	r3, [r7, #11]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009dde:	bf00      	nop
      }
      break;
 8009de0:	e037      	b.n	8009e52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	7c1b      	ldrb	r3, [r3, #16]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d109      	bne.n	8009dfe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df2:	f107 0208 	add.w	r2, r7, #8
 8009df6:	4610      	mov	r0, r2
 8009df8:	4798      	blx	r3
 8009dfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dfc:	e029      	b.n	8009e52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fa2a 	bl	800a25a <USBD_CtlError>
        err++;
 8009e06:	7afb      	ldrb	r3, [r7, #11]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e0c:	e021      	b.n	8009e52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	7c1b      	ldrb	r3, [r3, #16]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10d      	bne.n	8009e32 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1e:	f107 0208 	add.w	r2, r7, #8
 8009e22:	4610      	mov	r0, r2
 8009e24:	4798      	blx	r3
 8009e26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	2207      	movs	r2, #7
 8009e2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e30:	e00f      	b.n	8009e52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fa10 	bl	800a25a <USBD_CtlError>
        err++;
 8009e3a:	7afb      	ldrb	r3, [r7, #11]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	72fb      	strb	r3, [r7, #11]
      break;
 8009e40:	e007      	b.n	8009e52 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fa08 	bl	800a25a <USBD_CtlError>
      err++;
 8009e4a:	7afb      	ldrb	r3, [r7, #11]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	72fb      	strb	r3, [r7, #11]
      break;
 8009e50:	bf00      	nop
  }

  if (err != 0U)
 8009e52:	7afb      	ldrb	r3, [r7, #11]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d11e      	bne.n	8009e96 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	88db      	ldrh	r3, [r3, #6]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d016      	beq.n	8009e8e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009e60:	893b      	ldrh	r3, [r7, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00e      	beq.n	8009e84 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	88da      	ldrh	r2, [r3, #6]
 8009e6a:	893b      	ldrh	r3, [r7, #8]
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	bf28      	it	cs
 8009e70:	4613      	movcs	r3, r2
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e76:	893b      	ldrh	r3, [r7, #8]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	68f9      	ldr	r1, [r7, #12]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fa5d 	bl	800a33c <USBD_CtlSendData>
 8009e82:	e009      	b.n	8009e98 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f9e7 	bl	800a25a <USBD_CtlError>
 8009e8c:	e004      	b.n	8009e98 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 faae 	bl	800a3f0 <USBD_CtlSendStatus>
 8009e94:	e000      	b.n	8009e98 <USBD_GetDescriptor+0x320>
    return;
 8009e96:	bf00      	nop
  }
}
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop

08009ea0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	889b      	ldrh	r3, [r3, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d131      	bne.n	8009f16 <USBD_SetAddress+0x76>
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	88db      	ldrh	r3, [r3, #6]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d12d      	bne.n	8009f16 <USBD_SetAddress+0x76>
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	885b      	ldrh	r3, [r3, #2]
 8009ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8009ec0:	d829      	bhi.n	8009f16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	885b      	ldrh	r3, [r3, #2]
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ecc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b03      	cmp	r3, #3
 8009ed8:	d104      	bne.n	8009ee4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f9bc 	bl	800a25a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee2:	e01d      	b.n	8009f20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	7bfa      	ldrb	r2, [r7, #15]
 8009ee8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009eec:	7bfb      	ldrb	r3, [r7, #15]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 ff1f 	bl	800ad34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fa7a 	bl	800a3f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d004      	beq.n	8009f0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2202      	movs	r2, #2
 8009f06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f0a:	e009      	b.n	8009f20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f14:	e004      	b.n	8009f20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f99e 	bl	800a25a <USBD_CtlError>
  }
}
 8009f1e:	bf00      	nop
 8009f20:	bf00      	nop
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	885b      	ldrh	r3, [r3, #2]
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	4b4e      	ldr	r3, [pc, #312]	; (800a078 <USBD_SetConfig+0x150>)
 8009f3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f40:	4b4d      	ldr	r3, [pc, #308]	; (800a078 <USBD_SetConfig+0x150>)
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d905      	bls.n	8009f54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f985 	bl	800a25a <USBD_CtlError>
    return USBD_FAIL;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e08c      	b.n	800a06e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d002      	beq.n	8009f66 <USBD_SetConfig+0x3e>
 8009f60:	2b03      	cmp	r3, #3
 8009f62:	d029      	beq.n	8009fb8 <USBD_SetConfig+0x90>
 8009f64:	e075      	b.n	800a052 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009f66:	4b44      	ldr	r3, [pc, #272]	; (800a078 <USBD_SetConfig+0x150>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d020      	beq.n	8009fb0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009f6e:	4b42      	ldr	r3, [pc, #264]	; (800a078 <USBD_SetConfig+0x150>)
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f78:	4b3f      	ldr	r3, [pc, #252]	; (800a078 <USBD_SetConfig+0x150>)
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f7fe ffbd 	bl	8008efe <USBD_SetClassConfig>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d008      	beq.n	8009fa0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f962 	bl	800a25a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2202      	movs	r2, #2
 8009f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f9e:	e065      	b.n	800a06c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 fa25 	bl	800a3f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2203      	movs	r2, #3
 8009faa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009fae:	e05d      	b.n	800a06c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 fa1d 	bl	800a3f0 <USBD_CtlSendStatus>
      break;
 8009fb6:	e059      	b.n	800a06c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009fb8:	4b2f      	ldr	r3, [pc, #188]	; (800a078 <USBD_SetConfig+0x150>)
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d112      	bne.n	8009fe6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009fc8:	4b2b      	ldr	r3, [pc, #172]	; (800a078 <USBD_SetConfig+0x150>)
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	461a      	mov	r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009fd2:	4b29      	ldr	r3, [pc, #164]	; (800a078 <USBD_SetConfig+0x150>)
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7fe ffac 	bl	8008f36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 fa06 	bl	800a3f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fe4:	e042      	b.n	800a06c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009fe6:	4b24      	ldr	r3, [pc, #144]	; (800a078 <USBD_SetConfig+0x150>)
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	461a      	mov	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d02a      	beq.n	800a04a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7fe ff9a 	bl	8008f36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a002:	4b1d      	ldr	r3, [pc, #116]	; (800a078 <USBD_SetConfig+0x150>)
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	461a      	mov	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a00c:	4b1a      	ldr	r3, [pc, #104]	; (800a078 <USBD_SetConfig+0x150>)
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7fe ff73 	bl	8008efe <USBD_SetClassConfig>
 800a018:	4603      	mov	r3, r0
 800a01a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00f      	beq.n	800a042 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 f918 	bl	800a25a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	4619      	mov	r1, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7fe ff7f 	bl	8008f36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2202      	movs	r2, #2
 800a03c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a040:	e014      	b.n	800a06c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f9d4 	bl	800a3f0 <USBD_CtlSendStatus>
      break;
 800a048:	e010      	b.n	800a06c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f9d0 	bl	800a3f0 <USBD_CtlSendStatus>
      break;
 800a050:	e00c      	b.n	800a06c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a052:	6839      	ldr	r1, [r7, #0]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f900 	bl	800a25a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a05a:	4b07      	ldr	r3, [pc, #28]	; (800a078 <USBD_SetConfig+0x150>)
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	4619      	mov	r1, r3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7fe ff68 	bl	8008f36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a066:	2303      	movs	r3, #3
 800a068:	73fb      	strb	r3, [r7, #15]
      break;
 800a06a:	bf00      	nop
  }

  return ret;
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	2000072c 	.word	0x2000072c

0800a07c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	88db      	ldrh	r3, [r3, #6]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d004      	beq.n	800a098 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f8e2 	bl	800a25a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a096:	e023      	b.n	800a0e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	dc02      	bgt.n	800a0aa <USBD_GetConfig+0x2e>
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	dc03      	bgt.n	800a0b0 <USBD_GetConfig+0x34>
 800a0a8:	e015      	b.n	800a0d6 <USBD_GetConfig+0x5a>
 800a0aa:	2b03      	cmp	r3, #3
 800a0ac:	d00b      	beq.n	800a0c6 <USBD_GetConfig+0x4a>
 800a0ae:	e012      	b.n	800a0d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	3308      	adds	r3, #8
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	4619      	mov	r1, r3
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f93c 	bl	800a33c <USBD_CtlSendData>
        break;
 800a0c4:	e00c      	b.n	800a0e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f934 	bl	800a33c <USBD_CtlSendData>
        break;
 800a0d4:	e004      	b.n	800a0e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f8be 	bl	800a25a <USBD_CtlError>
        break;
 800a0de:	bf00      	nop
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d81e      	bhi.n	800a13e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	88db      	ldrh	r3, [r3, #6]
 800a104:	2b02      	cmp	r3, #2
 800a106:	d004      	beq.n	800a112 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f8a5 	bl	800a25a <USBD_CtlError>
        break;
 800a110:	e01a      	b.n	800a148 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d005      	beq.n	800a12e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	f043 0202 	orr.w	r2, r3, #2
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	330c      	adds	r3, #12
 800a132:	2202      	movs	r2, #2
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f900 	bl	800a33c <USBD_CtlSendData>
      break;
 800a13c:	e004      	b.n	800a148 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f88a 	bl	800a25a <USBD_CtlError>
      break;
 800a146:	bf00      	nop
  }
}
 800a148:	bf00      	nop
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	885b      	ldrh	r3, [r3, #2]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d107      	bne.n	800a172 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f940 	bl	800a3f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a170:	e013      	b.n	800a19a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	885b      	ldrh	r3, [r3, #2]
 800a176:	2b02      	cmp	r3, #2
 800a178:	d10b      	bne.n	800a192 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	889b      	ldrh	r3, [r3, #4]
 800a17e:	0a1b      	lsrs	r3, r3, #8
 800a180:	b29b      	uxth	r3, r3
 800a182:	b2da      	uxtb	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f930 	bl	800a3f0 <USBD_CtlSendStatus>
}
 800a190:	e003      	b.n	800a19a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a192:	6839      	ldr	r1, [r7, #0]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 f860 	bl	800a25a <USBD_CtlError>
}
 800a19a:	bf00      	nop
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b082      	sub	sp, #8
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d80b      	bhi.n	800a1d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	885b      	ldrh	r3, [r3, #2]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d10c      	bne.n	800a1dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 f910 	bl	800a3f0 <USBD_CtlSendStatus>
      }
      break;
 800a1d0:	e004      	b.n	800a1dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f840 	bl	800a25a <USBD_CtlError>
      break;
 800a1da:	e000      	b.n	800a1de <USBD_ClrFeature+0x3c>
      break;
 800a1dc:	bf00      	nop
  }
}
 800a1de:	bf00      	nop
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	781a      	ldrb	r2, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	3301      	adds	r3, #1
 800a200:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	781a      	ldrb	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3301      	adds	r3, #1
 800a20e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f7ff fa17 	bl	8009644 <SWAPBYTE>
 800a216:	4603      	mov	r3, r0
 800a218:	461a      	mov	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3301      	adds	r3, #1
 800a222:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	3301      	adds	r3, #1
 800a228:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f7ff fa0a 	bl	8009644 <SWAPBYTE>
 800a230:	4603      	mov	r3, r0
 800a232:	461a      	mov	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	3301      	adds	r3, #1
 800a23c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3301      	adds	r3, #1
 800a242:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f7ff f9fd 	bl	8009644 <SWAPBYTE>
 800a24a:	4603      	mov	r3, r0
 800a24c:	461a      	mov	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	80da      	strh	r2, [r3, #6]
}
 800a252:	bf00      	nop
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b082      	sub	sp, #8
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a264:	2180      	movs	r1, #128	; 0x80
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fcfa 	bl	800ac60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a26c:	2100      	movs	r1, #0
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 fcf6 	bl	800ac60 <USBD_LL_StallEP>
}
 800a274:	bf00      	nop
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a288:	2300      	movs	r3, #0
 800a28a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d036      	beq.n	800a300 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a296:	6938      	ldr	r0, [r7, #16]
 800a298:	f000 f836 	bl	800a308 <USBD_GetLen>
 800a29c:	4603      	mov	r3, r0
 800a29e:	3301      	adds	r3, #1
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	005b      	lsls	r3, r3, #1
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a2aa:	7dfb      	ldrb	r3, [r7, #23]
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	7812      	ldrb	r2, [r2, #0]
 800a2b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a2b6:	7dfb      	ldrb	r3, [r7, #23]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	2203      	movs	r2, #3
 800a2c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a2c6:	7dfb      	ldrb	r3, [r7, #23]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a2cc:	e013      	b.n	800a2f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a2ce:	7dfb      	ldrb	r3, [r7, #23]
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	7812      	ldrb	r2, [r2, #0]
 800a2d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	613b      	str	r3, [r7, #16]
    idx++;
 800a2e0:	7dfb      	ldrb	r3, [r7, #23]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a2e6:	7dfb      	ldrb	r3, [r7, #23]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	701a      	strb	r2, [r3, #0]
    idx++;
 800a2f0:	7dfb      	ldrb	r3, [r7, #23]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1e7      	bne.n	800a2ce <USBD_GetString+0x52>
 800a2fe:	e000      	b.n	800a302 <USBD_GetString+0x86>
    return;
 800a300:	bf00      	nop
  }
}
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a310:	2300      	movs	r3, #0
 800a312:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a318:	e005      	b.n	800a326 <USBD_GetLen+0x1e>
  {
    len++;
 800a31a:	7bfb      	ldrb	r3, [r7, #15]
 800a31c:	3301      	adds	r3, #1
 800a31e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	3301      	adds	r3, #1
 800a324:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1f5      	bne.n	800a31a <USBD_GetLen+0x12>
  }

  return len;
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2202      	movs	r2, #2
 800a34c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	2100      	movs	r1, #0
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f000 fd05 	bl	800ad72 <USBD_LL_Transmit>

  return USBD_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	60f8      	str	r0, [r7, #12]
 800a37a:	60b9      	str	r1, [r7, #8]
 800a37c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	2100      	movs	r1, #0
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 fcf4 	bl	800ad72 <USBD_LL_Transmit>

  return USBD_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2203      	movs	r2, #3
 800a3a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	2100      	movs	r1, #0
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 fcf8 	bl	800adb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	60f8      	str	r0, [r7, #12]
 800a3d6:	60b9      	str	r1, [r7, #8]
 800a3d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	2100      	movs	r1, #0
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f000 fce7 	bl	800adb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2204      	movs	r2, #4
 800a3fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a400:	2300      	movs	r3, #0
 800a402:	2200      	movs	r2, #0
 800a404:	2100      	movs	r1, #0
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fcb3 	bl	800ad72 <USBD_LL_Transmit>

  return USBD_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b082      	sub	sp, #8
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2205      	movs	r2, #5
 800a422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a426:	2300      	movs	r3, #0
 800a428:	2200      	movs	r2, #0
 800a42a:	2100      	movs	r1, #0
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 fcc1 	bl	800adb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a440:	2200      	movs	r2, #0
 800a442:	4912      	ldr	r1, [pc, #72]	; (800a48c <MX_USB_DEVICE_Init+0x50>)
 800a444:	4812      	ldr	r0, [pc, #72]	; (800a490 <MX_USB_DEVICE_Init+0x54>)
 800a446:	f7fe fcdd 	bl	8008e04 <USBD_Init>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a450:	f7f6 fbfa 	bl	8000c48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a454:	490f      	ldr	r1, [pc, #60]	; (800a494 <MX_USB_DEVICE_Init+0x58>)
 800a456:	480e      	ldr	r0, [pc, #56]	; (800a490 <MX_USB_DEVICE_Init+0x54>)
 800a458:	f7fe fd04 	bl	8008e64 <USBD_RegisterClass>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a462:	f7f6 fbf1 	bl	8000c48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a466:	490c      	ldr	r1, [pc, #48]	; (800a498 <MX_USB_DEVICE_Init+0x5c>)
 800a468:	4809      	ldr	r0, [pc, #36]	; (800a490 <MX_USB_DEVICE_Init+0x54>)
 800a46a:	f7fe fc3b 	bl	8008ce4 <USBD_CDC_RegisterInterface>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a474:	f7f6 fbe8 	bl	8000c48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a478:	4805      	ldr	r0, [pc, #20]	; (800a490 <MX_USB_DEVICE_Init+0x54>)
 800a47a:	f7fe fd29 	bl	8008ed0 <USBD_Start>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d001      	beq.n	800a488 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a484:	f7f6 fbe0 	bl	8000c48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a488:	bf00      	nop
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	200000cc 	.word	0x200000cc
 800a490:	20000730 	.word	0x20000730
 800a494:	20000038 	.word	0x20000038
 800a498:	200000b8 	.word	0x200000b8

0800a49c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	4905      	ldr	r1, [pc, #20]	; (800a4b8 <CDC_Init_FS+0x1c>)
 800a4a4:	4805      	ldr	r0, [pc, #20]	; (800a4bc <CDC_Init_FS+0x20>)
 800a4a6:	f7fe fc37 	bl	8008d18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a4aa:	4905      	ldr	r1, [pc, #20]	; (800a4c0 <CDC_Init_FS+0x24>)
 800a4ac:	4803      	ldr	r0, [pc, #12]	; (800a4bc <CDC_Init_FS+0x20>)
 800a4ae:	f7fe fc55 	bl	8008d5c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a4b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	2000120c 	.word	0x2000120c
 800a4bc:	20000730 	.word	0x20000730
 800a4c0:	20000a0c 	.word	0x20000a0c

0800a4c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a4c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	4603      	mov	r3, r0
 800a4dc:	6039      	str	r1, [r7, #0]
 800a4de:	71fb      	strb	r3, [r7, #7]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a4e4:	79fb      	ldrb	r3, [r7, #7]
 800a4e6:	2b23      	cmp	r3, #35	; 0x23
 800a4e8:	d84a      	bhi.n	800a580 <CDC_Control_FS+0xac>
 800a4ea:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <CDC_Control_FS+0x1c>)
 800a4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f0:	0800a581 	.word	0x0800a581
 800a4f4:	0800a581 	.word	0x0800a581
 800a4f8:	0800a581 	.word	0x0800a581
 800a4fc:	0800a581 	.word	0x0800a581
 800a500:	0800a581 	.word	0x0800a581
 800a504:	0800a581 	.word	0x0800a581
 800a508:	0800a581 	.word	0x0800a581
 800a50c:	0800a581 	.word	0x0800a581
 800a510:	0800a581 	.word	0x0800a581
 800a514:	0800a581 	.word	0x0800a581
 800a518:	0800a581 	.word	0x0800a581
 800a51c:	0800a581 	.word	0x0800a581
 800a520:	0800a581 	.word	0x0800a581
 800a524:	0800a581 	.word	0x0800a581
 800a528:	0800a581 	.word	0x0800a581
 800a52c:	0800a581 	.word	0x0800a581
 800a530:	0800a581 	.word	0x0800a581
 800a534:	0800a581 	.word	0x0800a581
 800a538:	0800a581 	.word	0x0800a581
 800a53c:	0800a581 	.word	0x0800a581
 800a540:	0800a581 	.word	0x0800a581
 800a544:	0800a581 	.word	0x0800a581
 800a548:	0800a581 	.word	0x0800a581
 800a54c:	0800a581 	.word	0x0800a581
 800a550:	0800a581 	.word	0x0800a581
 800a554:	0800a581 	.word	0x0800a581
 800a558:	0800a581 	.word	0x0800a581
 800a55c:	0800a581 	.word	0x0800a581
 800a560:	0800a581 	.word	0x0800a581
 800a564:	0800a581 	.word	0x0800a581
 800a568:	0800a581 	.word	0x0800a581
 800a56c:	0800a581 	.word	0x0800a581
 800a570:	0800a581 	.word	0x0800a581
 800a574:	0800a581 	.word	0x0800a581
 800a578:	0800a581 	.word	0x0800a581
 800a57c:	0800a581 	.word	0x0800a581
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a580:	bf00      	nop
  }

  return (USBD_OK);
 800a582:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a59a:	6879      	ldr	r1, [r7, #4]
 800a59c:	4805      	ldr	r0, [pc, #20]	; (800a5b4 <CDC_Receive_FS+0x24>)
 800a59e:	f7fe fbdd 	bl	8008d5c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a5a2:	4804      	ldr	r0, [pc, #16]	; (800a5b4 <CDC_Receive_FS+0x24>)
 800a5a4:	f7fe fbf8 	bl	8008d98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a5a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20000730 	.word	0x20000730

0800a5b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b087      	sub	sp, #28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a5ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	371c      	adds	r7, #28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
	...

0800a5dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	6039      	str	r1, [r7, #0]
 800a5e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	2212      	movs	r2, #18
 800a5ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a5ee:	4b03      	ldr	r3, [pc, #12]	; (800a5fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	200000ec 	.word	0x200000ec

0800a600 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	4603      	mov	r3, r0
 800a608:	6039      	str	r1, [r7, #0]
 800a60a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	2204      	movs	r2, #4
 800a610:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a612:	4b03      	ldr	r3, [pc, #12]	; (800a620 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a614:	4618      	mov	r0, r3
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr
 800a620:	2000010c 	.word	0x2000010c

0800a624 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	4603      	mov	r3, r0
 800a62c:	6039      	str	r1, [r7, #0]
 800a62e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d105      	bne.n	800a642 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	4907      	ldr	r1, [pc, #28]	; (800a658 <USBD_FS_ProductStrDescriptor+0x34>)
 800a63a:	4808      	ldr	r0, [pc, #32]	; (800a65c <USBD_FS_ProductStrDescriptor+0x38>)
 800a63c:	f7ff fe1e 	bl	800a27c <USBD_GetString>
 800a640:	e004      	b.n	800a64c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	4904      	ldr	r1, [pc, #16]	; (800a658 <USBD_FS_ProductStrDescriptor+0x34>)
 800a646:	4805      	ldr	r0, [pc, #20]	; (800a65c <USBD_FS_ProductStrDescriptor+0x38>)
 800a648:	f7ff fe18 	bl	800a27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a64c:	4b02      	ldr	r3, [pc, #8]	; (800a658 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20001a0c 	.word	0x20001a0c
 800a65c:	0800b1cc 	.word	0x0800b1cc

0800a660 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	4603      	mov	r3, r0
 800a668:	6039      	str	r1, [r7, #0]
 800a66a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	4904      	ldr	r1, [pc, #16]	; (800a680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a670:	4804      	ldr	r0, [pc, #16]	; (800a684 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a672:	f7ff fe03 	bl	800a27c <USBD_GetString>
  return USBD_StrDesc;
 800a676:	4b02      	ldr	r3, [pc, #8]	; (800a680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	20001a0c 	.word	0x20001a0c
 800a684:	0800b1e4 	.word	0x0800b1e4

0800a688 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	4603      	mov	r3, r0
 800a690:	6039      	str	r1, [r7, #0]
 800a692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	221a      	movs	r2, #26
 800a698:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a69a:	f000 f855 	bl	800a748 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a69e:	4b02      	ldr	r3, [pc, #8]	; (800a6a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	20000110 	.word	0x20000110

0800a6ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	6039      	str	r1, [r7, #0]
 800a6b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a6b8:	79fb      	ldrb	r3, [r7, #7]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d105      	bne.n	800a6ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	4907      	ldr	r1, [pc, #28]	; (800a6e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6c2:	4808      	ldr	r0, [pc, #32]	; (800a6e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6c4:	f7ff fdda 	bl	800a27c <USBD_GetString>
 800a6c8:	e004      	b.n	800a6d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	4904      	ldr	r1, [pc, #16]	; (800a6e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6ce:	4805      	ldr	r0, [pc, #20]	; (800a6e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6d0:	f7ff fdd4 	bl	800a27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6d4:	4b02      	ldr	r3, [pc, #8]	; (800a6e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	20001a0c 	.word	0x20001a0c
 800a6e4:	0800b1f8 	.word	0x0800b1f8

0800a6e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	6039      	str	r1, [r7, #0]
 800a6f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6f4:	79fb      	ldrb	r3, [r7, #7]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d105      	bne.n	800a706 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	4907      	ldr	r1, [pc, #28]	; (800a71c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6fe:	4808      	ldr	r0, [pc, #32]	; (800a720 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a700:	f7ff fdbc 	bl	800a27c <USBD_GetString>
 800a704:	e004      	b.n	800a710 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	4904      	ldr	r1, [pc, #16]	; (800a71c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a70a:	4805      	ldr	r0, [pc, #20]	; (800a720 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a70c:	f7ff fdb6 	bl	800a27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a710:	4b02      	ldr	r3, [pc, #8]	; (800a71c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a712:	4618      	mov	r0, r3
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20001a0c 	.word	0x20001a0c
 800a720:	0800b204 	.word	0x0800b204

0800a724 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	6039      	str	r1, [r7, #0]
 800a72e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	220c      	movs	r2, #12
 800a734:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a736:	4b03      	ldr	r3, [pc, #12]	; (800a744 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a738:	4618      	mov	r0, r3
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr
 800a744:	20000100 	.word	0x20000100

0800a748 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a74e:	4b0f      	ldr	r3, [pc, #60]	; (800a78c <Get_SerialNum+0x44>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a754:	4b0e      	ldr	r3, [pc, #56]	; (800a790 <Get_SerialNum+0x48>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a75a:	4b0e      	ldr	r3, [pc, #56]	; (800a794 <Get_SerialNum+0x4c>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4413      	add	r3, r2
 800a766:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d009      	beq.n	800a782 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a76e:	2208      	movs	r2, #8
 800a770:	4909      	ldr	r1, [pc, #36]	; (800a798 <Get_SerialNum+0x50>)
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 f814 	bl	800a7a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a778:	2204      	movs	r2, #4
 800a77a:	4908      	ldr	r1, [pc, #32]	; (800a79c <Get_SerialNum+0x54>)
 800a77c:	68b8      	ldr	r0, [r7, #8]
 800a77e:	f000 f80f 	bl	800a7a0 <IntToUnicode>
  }
}
 800a782:	bf00      	nop
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	1ff0f420 	.word	0x1ff0f420
 800a790:	1ff0f424 	.word	0x1ff0f424
 800a794:	1ff0f428 	.word	0x1ff0f428
 800a798:	20000112 	.word	0x20000112
 800a79c:	20000122 	.word	0x20000122

0800a7a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b087      	sub	sp, #28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	75fb      	strb	r3, [r7, #23]
 800a7b6:	e027      	b.n	800a808 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	0f1b      	lsrs	r3, r3, #28
 800a7bc:	2b09      	cmp	r3, #9
 800a7be:	d80b      	bhi.n	800a7d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	0f1b      	lsrs	r3, r3, #28
 800a7c4:	b2da      	uxtb	r2, r3
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
 800a7c8:	005b      	lsls	r3, r3, #1
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	440b      	add	r3, r1
 800a7d0:	3230      	adds	r2, #48	; 0x30
 800a7d2:	b2d2      	uxtb	r2, r2
 800a7d4:	701a      	strb	r2, [r3, #0]
 800a7d6:	e00a      	b.n	800a7ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	0f1b      	lsrs	r3, r3, #28
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
 800a7e0:	005b      	lsls	r3, r3, #1
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	440b      	add	r3, r1
 800a7e8:	3237      	adds	r2, #55	; 0x37
 800a7ea:	b2d2      	uxtb	r2, r2
 800a7ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	011b      	lsls	r3, r3, #4
 800a7f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a7f4:	7dfb      	ldrb	r3, [r7, #23]
 800a7f6:	005b      	lsls	r3, r3, #1
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	2200      	movs	r2, #0
 800a800:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a802:	7dfb      	ldrb	r3, [r7, #23]
 800a804:	3301      	adds	r3, #1
 800a806:	75fb      	strb	r3, [r7, #23]
 800a808:	7dfa      	ldrb	r2, [r7, #23]
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d3d3      	bcc.n	800a7b8 <IntToUnicode+0x18>
  }
}
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	371c      	adds	r7, #28
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
	...

0800a820 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b0ac      	sub	sp, #176	; 0xb0
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a828:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a82c:	2200      	movs	r2, #0
 800a82e:	601a      	str	r2, [r3, #0]
 800a830:	605a      	str	r2, [r3, #4]
 800a832:	609a      	str	r2, [r3, #8]
 800a834:	60da      	str	r2, [r3, #12]
 800a836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a838:	f107 0318 	add.w	r3, r7, #24
 800a83c:	2284      	movs	r2, #132	; 0x84
 800a83e:	2100      	movs	r1, #0
 800a840:	4618      	mov	r0, r3
 800a842:	f000 fc27 	bl	800b094 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a84e:	d161      	bne.n	800a914 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a850:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a854:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a856:	2300      	movs	r3, #0
 800a858:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a85c:	f107 0318 	add.w	r3, r7, #24
 800a860:	4618      	mov	r0, r3
 800a862:	f7f9 fc0b 	bl	800407c <HAL_RCCEx_PeriphCLKConfig>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a86c:	f7f6 f9ec 	bl	8000c48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a870:	4b2a      	ldr	r3, [pc, #168]	; (800a91c <HAL_PCD_MspInit+0xfc>)
 800a872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a874:	4a29      	ldr	r2, [pc, #164]	; (800a91c <HAL_PCD_MspInit+0xfc>)
 800a876:	f043 0301 	orr.w	r3, r3, #1
 800a87a:	6313      	str	r3, [r2, #48]	; 0x30
 800a87c:	4b27      	ldr	r3, [pc, #156]	; (800a91c <HAL_PCD_MspInit+0xfc>)
 800a87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	617b      	str	r3, [r7, #20]
 800a886:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a888:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a88c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a890:	2302      	movs	r3, #2
 800a892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a896:	2300      	movs	r3, #0
 800a898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a89c:	2303      	movs	r3, #3
 800a89e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a8a2:	230a      	movs	r3, #10
 800a8a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	481c      	ldr	r0, [pc, #112]	; (800a920 <HAL_PCD_MspInit+0x100>)
 800a8b0:	f7f7 fa50 	bl	8001d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a8b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a8c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	4814      	ldr	r0, [pc, #80]	; (800a920 <HAL_PCD_MspInit+0x100>)
 800a8d0:	f7f7 fa40 	bl	8001d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a8d4:	4b11      	ldr	r3, [pc, #68]	; (800a91c <HAL_PCD_MspInit+0xfc>)
 800a8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d8:	4a10      	ldr	r2, [pc, #64]	; (800a91c <HAL_PCD_MspInit+0xfc>)
 800a8da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8de:	6353      	str	r3, [r2, #52]	; 0x34
 800a8e0:	4b0e      	ldr	r3, [pc, #56]	; (800a91c <HAL_PCD_MspInit+0xfc>)
 800a8e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8e8:	613b      	str	r3, [r7, #16]
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	4b0b      	ldr	r3, [pc, #44]	; (800a91c <HAL_PCD_MspInit+0xfc>)
 800a8ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f0:	4a0a      	ldr	r2, [pc, #40]	; (800a91c <HAL_PCD_MspInit+0xfc>)
 800a8f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8f6:	6453      	str	r3, [r2, #68]	; 0x44
 800a8f8:	4b08      	ldr	r3, [pc, #32]	; (800a91c <HAL_PCD_MspInit+0xfc>)
 800a8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a900:	60fb      	str	r3, [r7, #12]
 800a902:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a904:	2200      	movs	r2, #0
 800a906:	2100      	movs	r1, #0
 800a908:	2043      	movs	r0, #67	; 0x43
 800a90a:	f7f6 fe70 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a90e:	2043      	movs	r0, #67	; 0x43
 800a910:	f7f6 fe89 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a914:	bf00      	nop
 800a916:	37b0      	adds	r7, #176	; 0xb0
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	40023800 	.word	0x40023800
 800a920:	40020000 	.word	0x40020000

0800a924 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a938:	4619      	mov	r1, r3
 800a93a:	4610      	mov	r0, r2
 800a93c:	f7fe fb15 	bl	8008f6a <USBD_LL_SetupStage>
}
 800a940:	bf00      	nop
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	460b      	mov	r3, r1
 800a952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800a95a:	78fa      	ldrb	r2, [r7, #3]
 800a95c:	6879      	ldr	r1, [r7, #4]
 800a95e:	4613      	mov	r3, r2
 800a960:	00db      	lsls	r3, r3, #3
 800a962:	4413      	add	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	440b      	add	r3, r1
 800a968:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	78fb      	ldrb	r3, [r7, #3]
 800a970:	4619      	mov	r1, r3
 800a972:	f7fe fb4f 	bl	8009014 <USBD_LL_DataOutStage>
}
 800a976:	bf00      	nop
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b082      	sub	sp, #8
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	460b      	mov	r3, r1
 800a988:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800a990:	78fa      	ldrb	r2, [r7, #3]
 800a992:	6879      	ldr	r1, [r7, #4]
 800a994:	4613      	mov	r3, r2
 800a996:	00db      	lsls	r3, r3, #3
 800a998:	4413      	add	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	440b      	add	r3, r1
 800a99e:	334c      	adds	r3, #76	; 0x4c
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	78fb      	ldrb	r3, [r7, #3]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	f7fe fbe8 	bl	800917a <USBD_LL_DataInStage>
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b082      	sub	sp, #8
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fe fd1c 	bl	80093fe <USBD_LL_SOF>
}
 800a9c6:	bf00      	nop
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b084      	sub	sp, #16
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d102      	bne.n	800a9e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	73fb      	strb	r3, [r7, #15]
 800a9e6:	e008      	b.n	800a9fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d102      	bne.n	800a9f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	73fb      	strb	r3, [r7, #15]
 800a9f4:	e001      	b.n	800a9fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a9f6:	f7f6 f927 	bl	8000c48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa00:	7bfa      	ldrb	r2, [r7, #15]
 800aa02:	4611      	mov	r1, r2
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fe fcbc 	bl	8009382 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fe fc64 	bl	80092de <USBD_LL_Reset>
}
 800aa16:	bf00      	nop
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fe fcb7 	bl	80093a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	6812      	ldr	r2, [r2, #0]
 800aa42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa46:	f043 0301 	orr.w	r3, r3, #1
 800aa4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d005      	beq.n	800aa60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa54:	4b04      	ldr	r3, [pc, #16]	; (800aa68 <HAL_PCD_SuspendCallback+0x48>)
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	4a03      	ldr	r2, [pc, #12]	; (800aa68 <HAL_PCD_SuspendCallback+0x48>)
 800aa5a:	f043 0306 	orr.w	r3, r3, #6
 800aa5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	e000ed00 	.word	0xe000ed00

0800aa6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fe fca7 	bl	80093ce <USBD_LL_Resume>
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa9a:	78fa      	ldrb	r2, [r7, #3]
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fcff 	bl	80094a2 <USBD_LL_IsoOUTIncomplete>
}
 800aaa4:	bf00      	nop
 800aaa6:	3708      	adds	r7, #8
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aabe:	78fa      	ldrb	r2, [r7, #3]
 800aac0:	4611      	mov	r1, r2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe fcbb 	bl	800943e <USBD_LL_IsoINIncomplete>
}
 800aac8:	bf00      	nop
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fe fd11 	bl	8009506 <USBD_LL_DevConnected>
}
 800aae4:	bf00      	nop
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fe fd0e 	bl	800951c <USBD_LL_DevDisconnected>
}
 800ab00:	bf00      	nop
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d13c      	bne.n	800ab92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ab18:	4a20      	ldr	r2, [pc, #128]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a1e      	ldr	r2, [pc, #120]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab24:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab28:	4b1c      	ldr	r3, [pc, #112]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ab30:	4b1a      	ldr	r3, [pc, #104]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab32:	2206      	movs	r2, #6
 800ab34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ab36:	4b19      	ldr	r3, [pc, #100]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab38:	2202      	movs	r2, #2
 800ab3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ab3c:	4b17      	ldr	r3, [pc, #92]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab42:	4b16      	ldr	r3, [pc, #88]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab44:	2202      	movs	r2, #2
 800ab46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ab48:	4b14      	ldr	r3, [pc, #80]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ab4e:	4b13      	ldr	r3, [pc, #76]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ab54:	4b11      	ldr	r3, [pc, #68]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab56:	2200      	movs	r2, #0
 800ab58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ab5a:	4b10      	ldr	r3, [pc, #64]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ab60:	4b0e      	ldr	r3, [pc, #56]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ab66:	480d      	ldr	r0, [pc, #52]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab68:	f7f7 faf5 	bl	8002156 <HAL_PCD_Init>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ab72:	f7f6 f869 	bl	8000c48 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ab76:	2180      	movs	r1, #128	; 0x80
 800ab78:	4808      	ldr	r0, [pc, #32]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab7a:	f7f8 fd70 	bl	800365e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ab7e:	2240      	movs	r2, #64	; 0x40
 800ab80:	2100      	movs	r1, #0
 800ab82:	4806      	ldr	r0, [pc, #24]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab84:	f7f8 fd24 	bl	80035d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ab88:	2280      	movs	r2, #128	; 0x80
 800ab8a:	2101      	movs	r1, #1
 800ab8c:	4803      	ldr	r0, [pc, #12]	; (800ab9c <USBD_LL_Init+0x94>)
 800ab8e:	f7f8 fd1f 	bl	80035d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	20001c0c 	.word	0x20001c0c

0800aba0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7f7 fbf1 	bl	800239e <HAL_PCD_Start>
 800abbc:	4603      	mov	r3, r0
 800abbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 f97e 	bl	800aec4 <USBD_Get_USB_Status>
 800abc8:	4603      	mov	r3, r0
 800abca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b084      	sub	sp, #16
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	4608      	mov	r0, r1
 800abe0:	4611      	mov	r1, r2
 800abe2:	461a      	mov	r2, r3
 800abe4:	4603      	mov	r3, r0
 800abe6:	70fb      	strb	r3, [r7, #3]
 800abe8:	460b      	mov	r3, r1
 800abea:	70bb      	strb	r3, [r7, #2]
 800abec:	4613      	mov	r3, r2
 800abee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abf0:	2300      	movs	r3, #0
 800abf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800abfe:	78bb      	ldrb	r3, [r7, #2]
 800ac00:	883a      	ldrh	r2, [r7, #0]
 800ac02:	78f9      	ldrb	r1, [r7, #3]
 800ac04:	f7f8 f8de 	bl	8002dc4 <HAL_PCD_EP_Open>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 f958 	bl	800aec4 <USBD_Get_USB_Status>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b084      	sub	sp, #16
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac3c:	78fa      	ldrb	r2, [r7, #3]
 800ac3e:	4611      	mov	r1, r2
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7f8 f927 	bl	8002e94 <HAL_PCD_EP_Close>
 800ac46:	4603      	mov	r3, r0
 800ac48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f000 f939 	bl	800aec4 <USBD_Get_USB_Status>
 800ac52:	4603      	mov	r3, r0
 800ac54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	460b      	mov	r3, r1
 800ac6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac7a:	78fa      	ldrb	r2, [r7, #3]
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7f8 f9ff 	bl	8003082 <HAL_PCD_EP_SetStall>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac88:	7bfb      	ldrb	r3, [r7, #15]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f000 f91a 	bl	800aec4 <USBD_Get_USB_Status>
 800ac90:	4603      	mov	r3, r0
 800ac92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b084      	sub	sp, #16
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	460b      	mov	r3, r1
 800aca8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acae:	2300      	movs	r3, #0
 800acb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acb8:	78fa      	ldrb	r2, [r7, #3]
 800acba:	4611      	mov	r1, r2
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7f8 fa44 	bl	800314a <HAL_PCD_EP_ClrStall>
 800acc2:	4603      	mov	r3, r0
 800acc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
 800acc8:	4618      	mov	r0, r3
 800acca:	f000 f8fb 	bl	800aec4 <USBD_Get_USB_Status>
 800acce:	4603      	mov	r3, r0
 800acd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	460b      	mov	r3, r1
 800ace6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800acf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	da0b      	bge.n	800ad10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acfe:	68f9      	ldr	r1, [r7, #12]
 800ad00:	4613      	mov	r3, r2
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	4413      	add	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	440b      	add	r3, r1
 800ad0a:	333e      	adds	r3, #62	; 0x3e
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	e00b      	b.n	800ad28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad10:	78fb      	ldrb	r3, [r7, #3]
 800ad12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad16:	68f9      	ldr	r1, [r7, #12]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	00db      	lsls	r3, r3, #3
 800ad1c:	4413      	add	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	440b      	add	r3, r1
 800ad22:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ad26:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad44:	2300      	movs	r3, #0
 800ad46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad4e:	78fa      	ldrb	r2, [r7, #3]
 800ad50:	4611      	mov	r1, r2
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7f8 f811 	bl	8002d7a <HAL_PCD_SetAddress>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 f8b0 	bl	800aec4 <USBD_Get_USB_Status>
 800ad64:	4603      	mov	r3, r0
 800ad66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b086      	sub	sp, #24
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	60f8      	str	r0, [r7, #12]
 800ad7a:	607a      	str	r2, [r7, #4]
 800ad7c:	603b      	str	r3, [r7, #0]
 800ad7e:	460b      	mov	r3, r1
 800ad80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad82:	2300      	movs	r3, #0
 800ad84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ad90:	7af9      	ldrb	r1, [r7, #11]
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	f7f8 f92a 	bl	8002fee <HAL_PCD_EP_Transmit>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad9e:	7dfb      	ldrb	r3, [r7, #23]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 f88f 	bl	800aec4 <USBD_Get_USB_Status>
 800ada6:	4603      	mov	r3, r0
 800ada8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adaa:	7dbb      	ldrb	r3, [r7, #22]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	607a      	str	r2, [r7, #4]
 800adbe:	603b      	str	r3, [r7, #0]
 800adc0:	460b      	mov	r3, r1
 800adc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800add2:	7af9      	ldrb	r1, [r7, #11]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	f7f8 f8a6 	bl	8002f28 <HAL_PCD_EP_Receive>
 800addc:	4603      	mov	r3, r0
 800adde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ade0:	7dfb      	ldrb	r3, [r7, #23]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 f86e 	bl	800aec4 <USBD_Get_USB_Status>
 800ade8:	4603      	mov	r3, r0
 800adea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adec:	7dbb      	ldrb	r3, [r7, #22]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3718      	adds	r7, #24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b082      	sub	sp, #8
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	460b      	mov	r3, r1
 800ae00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae08:	78fa      	ldrb	r2, [r7, #3]
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7f8 f8d6 	bl	8002fbe <HAL_PCD_EP_GetRxCount>
 800ae12:	4603      	mov	r3, r0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ae28:	78fb      	ldrb	r3, [r7, #3]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <HAL_PCDEx_LPM_Callback+0x18>
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d01f      	beq.n	800ae72 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ae32:	e03b      	b.n	800aeac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6a1b      	ldr	r3, [r3, #32]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d007      	beq.n	800ae4c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ae3c:	f000 f83c 	bl	800aeb8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae40:	4b1c      	ldr	r3, [pc, #112]	; (800aeb4 <HAL_PCDEx_LPM_Callback+0x98>)
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	4a1b      	ldr	r2, [pc, #108]	; (800aeb4 <HAL_PCDEx_LPM_Callback+0x98>)
 800ae46:	f023 0306 	bic.w	r3, r3, #6
 800ae4a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	6812      	ldr	r2, [r2, #0]
 800ae5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae5e:	f023 0301 	bic.w	r3, r3, #1
 800ae62:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fe faaf 	bl	80093ce <USBD_LL_Resume>
    break;
 800ae70:	e01c      	b.n	800aeac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	6812      	ldr	r2, [r2, #0]
 800ae80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae84:	f043 0301 	orr.w	r3, r3, #1
 800ae88:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fe fa86 	bl	80093a2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d005      	beq.n	800aeaa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae9e:	4b05      	ldr	r3, [pc, #20]	; (800aeb4 <HAL_PCDEx_LPM_Callback+0x98>)
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	4a04      	ldr	r2, [pc, #16]	; (800aeb4 <HAL_PCDEx_LPM_Callback+0x98>)
 800aea4:	f043 0306 	orr.w	r3, r3, #6
 800aea8:	6113      	str	r3, [r2, #16]
    break;
 800aeaa:	bf00      	nop
}
 800aeac:	bf00      	nop
 800aeae:	3708      	adds	r7, #8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	e000ed00 	.word	0xe000ed00

0800aeb8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800aebc:	f7f5 fcb2 	bl	8000824 <SystemClock_Config>
}
 800aec0:	bf00      	nop
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	4603      	mov	r3, r0
 800aecc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aece:	2300      	movs	r3, #0
 800aed0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aed2:	79fb      	ldrb	r3, [r7, #7]
 800aed4:	2b03      	cmp	r3, #3
 800aed6:	d817      	bhi.n	800af08 <USBD_Get_USB_Status+0x44>
 800aed8:	a201      	add	r2, pc, #4	; (adr r2, 800aee0 <USBD_Get_USB_Status+0x1c>)
 800aeda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aede:	bf00      	nop
 800aee0:	0800aef1 	.word	0x0800aef1
 800aee4:	0800aef7 	.word	0x0800aef7
 800aee8:	0800aefd 	.word	0x0800aefd
 800aeec:	0800af03 	.word	0x0800af03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aef0:	2300      	movs	r3, #0
 800aef2:	73fb      	strb	r3, [r7, #15]
    break;
 800aef4:	e00b      	b.n	800af0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aef6:	2303      	movs	r3, #3
 800aef8:	73fb      	strb	r3, [r7, #15]
    break;
 800aefa:	e008      	b.n	800af0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aefc:	2301      	movs	r3, #1
 800aefe:	73fb      	strb	r3, [r7, #15]
    break;
 800af00:	e005      	b.n	800af0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af02:	2303      	movs	r3, #3
 800af04:	73fb      	strb	r3, [r7, #15]
    break;
 800af06:	e002      	b.n	800af0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af08:	2303      	movs	r3, #3
 800af0a:	73fb      	strb	r3, [r7, #15]
    break;
 800af0c:	bf00      	nop
  }
  return usb_status;
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3714      	adds	r7, #20
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <malloc>:
 800af1c:	4b02      	ldr	r3, [pc, #8]	; (800af28 <malloc+0xc>)
 800af1e:	4601      	mov	r1, r0
 800af20:	6818      	ldr	r0, [r3, #0]
 800af22:	f000 b82b 	b.w	800af7c <_malloc_r>
 800af26:	bf00      	nop
 800af28:	20000178 	.word	0x20000178

0800af2c <free>:
 800af2c:	4b02      	ldr	r3, [pc, #8]	; (800af38 <free+0xc>)
 800af2e:	4601      	mov	r1, r0
 800af30:	6818      	ldr	r0, [r3, #0]
 800af32:	f000 b8f3 	b.w	800b11c <_free_r>
 800af36:	bf00      	nop
 800af38:	20000178 	.word	0x20000178

0800af3c <sbrk_aligned>:
 800af3c:	b570      	push	{r4, r5, r6, lr}
 800af3e:	4e0e      	ldr	r6, [pc, #56]	; (800af78 <sbrk_aligned+0x3c>)
 800af40:	460c      	mov	r4, r1
 800af42:	6831      	ldr	r1, [r6, #0]
 800af44:	4605      	mov	r5, r0
 800af46:	b911      	cbnz	r1, 800af4e <sbrk_aligned+0x12>
 800af48:	f000 f8ac 	bl	800b0a4 <_sbrk_r>
 800af4c:	6030      	str	r0, [r6, #0]
 800af4e:	4621      	mov	r1, r4
 800af50:	4628      	mov	r0, r5
 800af52:	f000 f8a7 	bl	800b0a4 <_sbrk_r>
 800af56:	1c43      	adds	r3, r0, #1
 800af58:	d00a      	beq.n	800af70 <sbrk_aligned+0x34>
 800af5a:	1cc4      	adds	r4, r0, #3
 800af5c:	f024 0403 	bic.w	r4, r4, #3
 800af60:	42a0      	cmp	r0, r4
 800af62:	d007      	beq.n	800af74 <sbrk_aligned+0x38>
 800af64:	1a21      	subs	r1, r4, r0
 800af66:	4628      	mov	r0, r5
 800af68:	f000 f89c 	bl	800b0a4 <_sbrk_r>
 800af6c:	3001      	adds	r0, #1
 800af6e:	d101      	bne.n	800af74 <sbrk_aligned+0x38>
 800af70:	f04f 34ff 	mov.w	r4, #4294967295
 800af74:	4620      	mov	r0, r4
 800af76:	bd70      	pop	{r4, r5, r6, pc}
 800af78:	20002118 	.word	0x20002118

0800af7c <_malloc_r>:
 800af7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af80:	1ccd      	adds	r5, r1, #3
 800af82:	f025 0503 	bic.w	r5, r5, #3
 800af86:	3508      	adds	r5, #8
 800af88:	2d0c      	cmp	r5, #12
 800af8a:	bf38      	it	cc
 800af8c:	250c      	movcc	r5, #12
 800af8e:	2d00      	cmp	r5, #0
 800af90:	4607      	mov	r7, r0
 800af92:	db01      	blt.n	800af98 <_malloc_r+0x1c>
 800af94:	42a9      	cmp	r1, r5
 800af96:	d905      	bls.n	800afa4 <_malloc_r+0x28>
 800af98:	230c      	movs	r3, #12
 800af9a:	603b      	str	r3, [r7, #0]
 800af9c:	2600      	movs	r6, #0
 800af9e:	4630      	mov	r0, r6
 800afa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afa4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b078 <_malloc_r+0xfc>
 800afa8:	f000 f868 	bl	800b07c <__malloc_lock>
 800afac:	f8d8 3000 	ldr.w	r3, [r8]
 800afb0:	461c      	mov	r4, r3
 800afb2:	bb5c      	cbnz	r4, 800b00c <_malloc_r+0x90>
 800afb4:	4629      	mov	r1, r5
 800afb6:	4638      	mov	r0, r7
 800afb8:	f7ff ffc0 	bl	800af3c <sbrk_aligned>
 800afbc:	1c43      	adds	r3, r0, #1
 800afbe:	4604      	mov	r4, r0
 800afc0:	d155      	bne.n	800b06e <_malloc_r+0xf2>
 800afc2:	f8d8 4000 	ldr.w	r4, [r8]
 800afc6:	4626      	mov	r6, r4
 800afc8:	2e00      	cmp	r6, #0
 800afca:	d145      	bne.n	800b058 <_malloc_r+0xdc>
 800afcc:	2c00      	cmp	r4, #0
 800afce:	d048      	beq.n	800b062 <_malloc_r+0xe6>
 800afd0:	6823      	ldr	r3, [r4, #0]
 800afd2:	4631      	mov	r1, r6
 800afd4:	4638      	mov	r0, r7
 800afd6:	eb04 0903 	add.w	r9, r4, r3
 800afda:	f000 f863 	bl	800b0a4 <_sbrk_r>
 800afde:	4581      	cmp	r9, r0
 800afe0:	d13f      	bne.n	800b062 <_malloc_r+0xe6>
 800afe2:	6821      	ldr	r1, [r4, #0]
 800afe4:	1a6d      	subs	r5, r5, r1
 800afe6:	4629      	mov	r1, r5
 800afe8:	4638      	mov	r0, r7
 800afea:	f7ff ffa7 	bl	800af3c <sbrk_aligned>
 800afee:	3001      	adds	r0, #1
 800aff0:	d037      	beq.n	800b062 <_malloc_r+0xe6>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	442b      	add	r3, r5
 800aff6:	6023      	str	r3, [r4, #0]
 800aff8:	f8d8 3000 	ldr.w	r3, [r8]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d038      	beq.n	800b072 <_malloc_r+0xf6>
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	42a2      	cmp	r2, r4
 800b004:	d12b      	bne.n	800b05e <_malloc_r+0xe2>
 800b006:	2200      	movs	r2, #0
 800b008:	605a      	str	r2, [r3, #4]
 800b00a:	e00f      	b.n	800b02c <_malloc_r+0xb0>
 800b00c:	6822      	ldr	r2, [r4, #0]
 800b00e:	1b52      	subs	r2, r2, r5
 800b010:	d41f      	bmi.n	800b052 <_malloc_r+0xd6>
 800b012:	2a0b      	cmp	r2, #11
 800b014:	d917      	bls.n	800b046 <_malloc_r+0xca>
 800b016:	1961      	adds	r1, r4, r5
 800b018:	42a3      	cmp	r3, r4
 800b01a:	6025      	str	r5, [r4, #0]
 800b01c:	bf18      	it	ne
 800b01e:	6059      	strne	r1, [r3, #4]
 800b020:	6863      	ldr	r3, [r4, #4]
 800b022:	bf08      	it	eq
 800b024:	f8c8 1000 	streq.w	r1, [r8]
 800b028:	5162      	str	r2, [r4, r5]
 800b02a:	604b      	str	r3, [r1, #4]
 800b02c:	4638      	mov	r0, r7
 800b02e:	f104 060b 	add.w	r6, r4, #11
 800b032:	f000 f829 	bl	800b088 <__malloc_unlock>
 800b036:	f026 0607 	bic.w	r6, r6, #7
 800b03a:	1d23      	adds	r3, r4, #4
 800b03c:	1af2      	subs	r2, r6, r3
 800b03e:	d0ae      	beq.n	800af9e <_malloc_r+0x22>
 800b040:	1b9b      	subs	r3, r3, r6
 800b042:	50a3      	str	r3, [r4, r2]
 800b044:	e7ab      	b.n	800af9e <_malloc_r+0x22>
 800b046:	42a3      	cmp	r3, r4
 800b048:	6862      	ldr	r2, [r4, #4]
 800b04a:	d1dd      	bne.n	800b008 <_malloc_r+0x8c>
 800b04c:	f8c8 2000 	str.w	r2, [r8]
 800b050:	e7ec      	b.n	800b02c <_malloc_r+0xb0>
 800b052:	4623      	mov	r3, r4
 800b054:	6864      	ldr	r4, [r4, #4]
 800b056:	e7ac      	b.n	800afb2 <_malloc_r+0x36>
 800b058:	4634      	mov	r4, r6
 800b05a:	6876      	ldr	r6, [r6, #4]
 800b05c:	e7b4      	b.n	800afc8 <_malloc_r+0x4c>
 800b05e:	4613      	mov	r3, r2
 800b060:	e7cc      	b.n	800affc <_malloc_r+0x80>
 800b062:	230c      	movs	r3, #12
 800b064:	603b      	str	r3, [r7, #0]
 800b066:	4638      	mov	r0, r7
 800b068:	f000 f80e 	bl	800b088 <__malloc_unlock>
 800b06c:	e797      	b.n	800af9e <_malloc_r+0x22>
 800b06e:	6025      	str	r5, [r4, #0]
 800b070:	e7dc      	b.n	800b02c <_malloc_r+0xb0>
 800b072:	605b      	str	r3, [r3, #4]
 800b074:	deff      	udf	#255	; 0xff
 800b076:	bf00      	nop
 800b078:	20002114 	.word	0x20002114

0800b07c <__malloc_lock>:
 800b07c:	4801      	ldr	r0, [pc, #4]	; (800b084 <__malloc_lock+0x8>)
 800b07e:	f000 b84b 	b.w	800b118 <__retarget_lock_acquire_recursive>
 800b082:	bf00      	nop
 800b084:	20002258 	.word	0x20002258

0800b088 <__malloc_unlock>:
 800b088:	4801      	ldr	r0, [pc, #4]	; (800b090 <__malloc_unlock+0x8>)
 800b08a:	f000 b846 	b.w	800b11a <__retarget_lock_release_recursive>
 800b08e:	bf00      	nop
 800b090:	20002258 	.word	0x20002258

0800b094 <memset>:
 800b094:	4402      	add	r2, r0
 800b096:	4603      	mov	r3, r0
 800b098:	4293      	cmp	r3, r2
 800b09a:	d100      	bne.n	800b09e <memset+0xa>
 800b09c:	4770      	bx	lr
 800b09e:	f803 1b01 	strb.w	r1, [r3], #1
 800b0a2:	e7f9      	b.n	800b098 <memset+0x4>

0800b0a4 <_sbrk_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4d06      	ldr	r5, [pc, #24]	; (800b0c0 <_sbrk_r+0x1c>)
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	4608      	mov	r0, r1
 800b0ae:	602b      	str	r3, [r5, #0]
 800b0b0:	f7f6 f8d0 	bl	8001254 <_sbrk>
 800b0b4:	1c43      	adds	r3, r0, #1
 800b0b6:	d102      	bne.n	800b0be <_sbrk_r+0x1a>
 800b0b8:	682b      	ldr	r3, [r5, #0]
 800b0ba:	b103      	cbz	r3, 800b0be <_sbrk_r+0x1a>
 800b0bc:	6023      	str	r3, [r4, #0]
 800b0be:	bd38      	pop	{r3, r4, r5, pc}
 800b0c0:	20002254 	.word	0x20002254

0800b0c4 <__errno>:
 800b0c4:	4b01      	ldr	r3, [pc, #4]	; (800b0cc <__errno+0x8>)
 800b0c6:	6818      	ldr	r0, [r3, #0]
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	20000178 	.word	0x20000178

0800b0d0 <__libc_init_array>:
 800b0d0:	b570      	push	{r4, r5, r6, lr}
 800b0d2:	4d0d      	ldr	r5, [pc, #52]	; (800b108 <__libc_init_array+0x38>)
 800b0d4:	4c0d      	ldr	r4, [pc, #52]	; (800b10c <__libc_init_array+0x3c>)
 800b0d6:	1b64      	subs	r4, r4, r5
 800b0d8:	10a4      	asrs	r4, r4, #2
 800b0da:	2600      	movs	r6, #0
 800b0dc:	42a6      	cmp	r6, r4
 800b0de:	d109      	bne.n	800b0f4 <__libc_init_array+0x24>
 800b0e0:	4d0b      	ldr	r5, [pc, #44]	; (800b110 <__libc_init_array+0x40>)
 800b0e2:	4c0c      	ldr	r4, [pc, #48]	; (800b114 <__libc_init_array+0x44>)
 800b0e4:	f000 f866 	bl	800b1b4 <_init>
 800b0e8:	1b64      	subs	r4, r4, r5
 800b0ea:	10a4      	asrs	r4, r4, #2
 800b0ec:	2600      	movs	r6, #0
 800b0ee:	42a6      	cmp	r6, r4
 800b0f0:	d105      	bne.n	800b0fe <__libc_init_array+0x2e>
 800b0f2:	bd70      	pop	{r4, r5, r6, pc}
 800b0f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0f8:	4798      	blx	r3
 800b0fa:	3601      	adds	r6, #1
 800b0fc:	e7ee      	b.n	800b0dc <__libc_init_array+0xc>
 800b0fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b102:	4798      	blx	r3
 800b104:	3601      	adds	r6, #1
 800b106:	e7f2      	b.n	800b0ee <__libc_init_array+0x1e>
 800b108:	0800b24c 	.word	0x0800b24c
 800b10c:	0800b24c 	.word	0x0800b24c
 800b110:	0800b24c 	.word	0x0800b24c
 800b114:	0800b250 	.word	0x0800b250

0800b118 <__retarget_lock_acquire_recursive>:
 800b118:	4770      	bx	lr

0800b11a <__retarget_lock_release_recursive>:
 800b11a:	4770      	bx	lr

0800b11c <_free_r>:
 800b11c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b11e:	2900      	cmp	r1, #0
 800b120:	d044      	beq.n	800b1ac <_free_r+0x90>
 800b122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b126:	9001      	str	r0, [sp, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f1a1 0404 	sub.w	r4, r1, #4
 800b12e:	bfb8      	it	lt
 800b130:	18e4      	addlt	r4, r4, r3
 800b132:	f7ff ffa3 	bl	800b07c <__malloc_lock>
 800b136:	4a1e      	ldr	r2, [pc, #120]	; (800b1b0 <_free_r+0x94>)
 800b138:	9801      	ldr	r0, [sp, #4]
 800b13a:	6813      	ldr	r3, [r2, #0]
 800b13c:	b933      	cbnz	r3, 800b14c <_free_r+0x30>
 800b13e:	6063      	str	r3, [r4, #4]
 800b140:	6014      	str	r4, [r2, #0]
 800b142:	b003      	add	sp, #12
 800b144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b148:	f7ff bf9e 	b.w	800b088 <__malloc_unlock>
 800b14c:	42a3      	cmp	r3, r4
 800b14e:	d908      	bls.n	800b162 <_free_r+0x46>
 800b150:	6825      	ldr	r5, [r4, #0]
 800b152:	1961      	adds	r1, r4, r5
 800b154:	428b      	cmp	r3, r1
 800b156:	bf01      	itttt	eq
 800b158:	6819      	ldreq	r1, [r3, #0]
 800b15a:	685b      	ldreq	r3, [r3, #4]
 800b15c:	1949      	addeq	r1, r1, r5
 800b15e:	6021      	streq	r1, [r4, #0]
 800b160:	e7ed      	b.n	800b13e <_free_r+0x22>
 800b162:	461a      	mov	r2, r3
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	b10b      	cbz	r3, 800b16c <_free_r+0x50>
 800b168:	42a3      	cmp	r3, r4
 800b16a:	d9fa      	bls.n	800b162 <_free_r+0x46>
 800b16c:	6811      	ldr	r1, [r2, #0]
 800b16e:	1855      	adds	r5, r2, r1
 800b170:	42a5      	cmp	r5, r4
 800b172:	d10b      	bne.n	800b18c <_free_r+0x70>
 800b174:	6824      	ldr	r4, [r4, #0]
 800b176:	4421      	add	r1, r4
 800b178:	1854      	adds	r4, r2, r1
 800b17a:	42a3      	cmp	r3, r4
 800b17c:	6011      	str	r1, [r2, #0]
 800b17e:	d1e0      	bne.n	800b142 <_free_r+0x26>
 800b180:	681c      	ldr	r4, [r3, #0]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	6053      	str	r3, [r2, #4]
 800b186:	440c      	add	r4, r1
 800b188:	6014      	str	r4, [r2, #0]
 800b18a:	e7da      	b.n	800b142 <_free_r+0x26>
 800b18c:	d902      	bls.n	800b194 <_free_r+0x78>
 800b18e:	230c      	movs	r3, #12
 800b190:	6003      	str	r3, [r0, #0]
 800b192:	e7d6      	b.n	800b142 <_free_r+0x26>
 800b194:	6825      	ldr	r5, [r4, #0]
 800b196:	1961      	adds	r1, r4, r5
 800b198:	428b      	cmp	r3, r1
 800b19a:	bf04      	itt	eq
 800b19c:	6819      	ldreq	r1, [r3, #0]
 800b19e:	685b      	ldreq	r3, [r3, #4]
 800b1a0:	6063      	str	r3, [r4, #4]
 800b1a2:	bf04      	itt	eq
 800b1a4:	1949      	addeq	r1, r1, r5
 800b1a6:	6021      	streq	r1, [r4, #0]
 800b1a8:	6054      	str	r4, [r2, #4]
 800b1aa:	e7ca      	b.n	800b142 <_free_r+0x26>
 800b1ac:	b003      	add	sp, #12
 800b1ae:	bd30      	pop	{r4, r5, pc}
 800b1b0:	20002114 	.word	0x20002114

0800b1b4 <_init>:
 800b1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b6:	bf00      	nop
 800b1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ba:	bc08      	pop	{r3}
 800b1bc:	469e      	mov	lr, r3
 800b1be:	4770      	bx	lr

0800b1c0 <_fini>:
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c2:	bf00      	nop
 800b1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c6:	bc08      	pop	{r3}
 800b1c8:	469e      	mov	lr, r3
 800b1ca:	4770      	bx	lr
