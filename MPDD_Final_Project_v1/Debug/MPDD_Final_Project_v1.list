
MPDD_Final_Project_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000083c  08006e30  08006e30  00016e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800766c  0800766c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007674  08007674  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007674  08007674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800767c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b688  2000008c  08007708  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b714  08007708  0002b714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0e5  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a6  00000000  00000000  0002e1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  00030590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256ed  00000000  00000000  00031090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5b2  00000000  00000000  0005677d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e934a  00000000  00000000  00065d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000085c  00000000  00000000  0014f079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030c8  00000000  00000000  0014f8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  001529a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006e18 	.word	0x08006e18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	08006e18 	.word	0x08006e18

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005ce:	f002 fd0b 	bl	8002fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005da:	f002 fd05 	bl	8002fe8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 80005de:	1df9      	adds	r1, r7, #7
 80005e0:	2300      	movs	r3, #0
 80005e2:	2201      	movs	r2, #1
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <ILI9163_writeCommand+0x48>)
 80005e6:	f003 feb2 	bl	800434e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005f2:	f002 fcf9 	bl	8002fe8 <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020400 	.word	0x40020400
 8000604:	2000a0e0 	.word	0x2000a0e0

08000608 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <ILI9163_writeData+0x44>)
 800061a:	f002 fce5 	bl	8002fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <ILI9163_writeData+0x44>)
 8000626:	f002 fcdf 	bl	8002fe8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 800062a:	1df9      	adds	r1, r7, #7
 800062c:	2300      	movs	r3, #0
 800062e:	2201      	movs	r2, #1
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <ILI9163_writeData+0x48>)
 8000632:	f003 fe8c 	bl	800434e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <ILI9163_writeData+0x44>)
 800063e:	f002 fcd3 	bl	8002fe8 <HAL_GPIO_WritePin>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40020400 	.word	0x40020400
 8000650:	2000a0e0 	.word	0x2000a0e0

08000654 <ILI9163_writeData16>:

void ILI9163_writeData16(uint16_t word) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	4810      	ldr	r0, [pc, #64]	; (80006a8 <ILI9163_writeData16+0x54>)
 8000666:	f002 fcbf 	bl	8002fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <ILI9163_writeData16+0x54>)
 8000672:	f002 fcb9 	bl	8002fe8 <HAL_GPIO_WritePin>

	uint8_t data [2] = {(word >> 8) & 0x00FF, word & 0x00FF};
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	b29b      	uxth	r3, r3
 800067c:	b2db      	uxtb	r3, r3
 800067e:	733b      	strb	r3, [r7, #12]
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&DISP_SPI, data, 2, 0);
 8000686:	f107 010c 	add.w	r1, r7, #12
 800068a:	2300      	movs	r3, #0
 800068c:	2202      	movs	r2, #2
 800068e:	4807      	ldr	r0, [pc, #28]	; (80006ac <ILI9163_writeData16+0x58>)
 8000690:	f003 fe5d 	bl	800434e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <ILI9163_writeData16+0x54>)
 800069c:	f002 fca4 	bl	8002fe8 <HAL_GPIO_WritePin>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40020400 	.word	0x40020400
 80006ac:	2000a0e0 	.word	0x2000a0e0

080006b0 <ILI9163_setAddress>:

void ILI9163_setAddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4604      	mov	r4, r0
 80006b8:	4608      	mov	r0, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	461a      	mov	r2, r3
 80006be:	4623      	mov	r3, r4
 80006c0:	80fb      	strh	r3, [r7, #6]
 80006c2:	4603      	mov	r3, r0
 80006c4:	80bb      	strh	r3, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	807b      	strh	r3, [r7, #2]
 80006ca:	4613      	mov	r3, r2
 80006cc:	803b      	strh	r3, [r7, #0]
	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 80006ce:	202a      	movs	r0, #42	; 0x2a
 80006d0:	f7ff ff74 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData16(x1);
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffbc 	bl	8000654 <ILI9163_writeData16>
	ILI9163_writeData16(x2);
 80006dc:	887b      	ldrh	r3, [r7, #2]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffb8 	bl	8000654 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80006e4:	202b      	movs	r0, #43	; 0x2b
 80006e6:	f7ff ff69 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData16(y1);
 80006ea:	88bb      	ldrh	r3, [r7, #4]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffb1 	bl	8000654 <ILI9163_writeData16>
	ILI9163_writeData16(y2);
 80006f2:	883b      	ldrh	r3, [r7, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ffad 	bl	8000654 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80006fa:	202c      	movs	r0, #44	; 0x2c
 80006fc:	f7ff ff5e 	bl	80005bc <ILI9163_writeCommand>
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	bd90      	pop	{r4, r7, pc}

08000708 <ILI9163_reset>:

void ILI9163_reset(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000712:	4808      	ldr	r0, [pc, #32]	; (8000734 <ILI9163_reset+0x2c>)
 8000714:	f002 fc68 	bl	8002fe8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000718:	2032      	movs	r0, #50	; 0x32
 800071a:	f001 fd61 	bl	80021e0 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000724:	4803      	ldr	r0, [pc, #12]	; (8000734 <ILI9163_reset+0x2c>)
 8000726:	f002 fc5f 	bl	8002fe8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800072a:	2064      	movs	r0, #100	; 0x64
 800072c:	f001 fd58 	bl	80021e0 <HAL_Delay>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40020c00 	.word	0x40020c00

08000738 <ILI9163_init>:

void ILI9163_init(int rotation) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	486e      	ldr	r0, [pc, #440]	; (8000900 <ILI9163_init+0x1c8>)
 8000748:	f002 fc4e 	bl	8002fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000752:	486c      	ldr	r0, [pc, #432]	; (8000904 <ILI9163_init+0x1cc>)
 8000754:	f002 fc48 	bl	8002fe8 <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 8000758:	f7ff ffd6 	bl	8000708 <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 800075c:	2011      	movs	r0, #17
 800075e:	f7ff ff2d 	bl	80005bc <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 8000762:	2005      	movs	r0, #5
 8000764:	f001 fd3c 	bl	80021e0 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 8000768:	203a      	movs	r0, #58	; 0x3a
 800076a:	f7ff ff27 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 800076e:	2005      	movs	r0, #5
 8000770:	f7ff ff4a 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 8000774:	2026      	movs	r0, #38	; 0x26
 8000776:	f7ff ff21 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 800077a:	2004      	movs	r0, #4
 800077c:	f7ff ff44 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8000780:	20f2      	movs	r0, #242	; 0xf2
 8000782:	f7ff ff1b 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff ff3e 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 800078c:	20e0      	movs	r0, #224	; 0xe0
 800078e:	f7ff ff15 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 8000792:	203f      	movs	r0, #63	; 0x3f
 8000794:	f7ff ff38 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 8000798:	2025      	movs	r0, #37	; 0x25
 800079a:	f7ff ff35 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 800079e:	201c      	movs	r0, #28
 80007a0:	f7ff ff32 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 80007a4:	201e      	movs	r0, #30
 80007a6:	f7ff ff2f 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007aa:	2020      	movs	r0, #32
 80007ac:	f7ff ff2c 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 80007b0:	2012      	movs	r0, #18
 80007b2:	f7ff ff29 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 80007b6:	202a      	movs	r0, #42	; 0x2a
 80007b8:	f7ff ff26 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 80007bc:	2090      	movs	r0, #144	; 0x90
 80007be:	f7ff ff23 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 80007c2:	2024      	movs	r0, #36	; 0x24
 80007c4:	f7ff ff20 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 80007c8:	2011      	movs	r0, #17
 80007ca:	f7ff ff1d 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ff1a 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff ff17 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff14 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ff11 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff ff0e 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 80007ec:	20e1      	movs	r0, #225	; 0xe1
 80007ee:	f7ff fee5 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 80007f2:	2020      	movs	r0, #32
 80007f4:	f7ff ff08 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007f8:	2020      	movs	r0, #32
 80007fa:	f7ff ff05 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007fe:	2020      	movs	r0, #32
 8000800:	f7ff ff02 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8000804:	2020      	movs	r0, #32
 8000806:	f7ff feff 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 800080a:	2005      	movs	r0, #5
 800080c:	f7ff fefc 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fef9 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 8000816:	2015      	movs	r0, #21
 8000818:	f7ff fef6 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 800081c:	20a7      	movs	r0, #167	; 0xa7
 800081e:	f7ff fef3 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 8000822:	203d      	movs	r0, #61	; 0x3d
 8000824:	f7ff fef0 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 8000828:	2018      	movs	r0, #24
 800082a:	f7ff feed 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800082e:	2025      	movs	r0, #37	; 0x25
 8000830:	f7ff feea 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 8000834:	202a      	movs	r0, #42	; 0x2a
 8000836:	f7ff fee7 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 800083a:	202b      	movs	r0, #43	; 0x2b
 800083c:	f7ff fee4 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 8000840:	202b      	movs	r0, #43	; 0x2b
 8000842:	f7ff fee1 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 8000846:	203a      	movs	r0, #58	; 0x3a
 8000848:	f7ff fede 	bl	8000608 <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 800084c:	20b1      	movs	r0, #177	; 0xb1
 800084e:	f7ff feb5 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000852:	2008      	movs	r0, #8
 8000854:	f7ff fed8 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8000858:	2002      	movs	r0, #2
 800085a:	f7ff fed5 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 800085e:	20b2      	movs	r0, #178	; 0xb2
 8000860:	f7ff feac 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000864:	2008      	movs	r0, #8
 8000866:	f7ff fecf 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800086a:	2002      	movs	r0, #2
 800086c:	f7ff fecc 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8000870:	20b3      	movs	r0, #179	; 0xb3
 8000872:	f7ff fea3 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000876:	2008      	movs	r0, #8
 8000878:	f7ff fec6 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800087c:	2002      	movs	r0, #2
 800087e:	f7ff fec3 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8000882:	20b4      	movs	r0, #180	; 0xb4
 8000884:	f7ff fe9a 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8000888:	2007      	movs	r0, #7
 800088a:	f7ff febd 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 800088e:	202a      	movs	r0, #42	; 0x2a
 8000890:	f7ff fe94 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff feb7 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff feb4 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff feb1 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 80008a6:	207f      	movs	r0, #127	; 0x7f
 80008a8:	f7ff feae 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80008ac:	202b      	movs	r0, #43	; 0x2b
 80008ae:	f7ff fe85 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fea8 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff fea5 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff fea2 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 80008c4:	209f      	movs	r0, #159	; 0x9f
 80008c6:	f7ff fe9f 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 80008ca:	2036      	movs	r0, #54	; 0x36
 80008cc:	f7ff fe76 	bl	80005bc <ILI9163_writeCommand>
	if(rotation)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d003      	beq.n	80008de <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 80008d6:	20a8      	movs	r0, #168	; 0xa8
 80008d8:	f7ff fe96 	bl	8000608 <ILI9163_writeData>
 80008dc:	e002      	b.n	80008e4 <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 80008de:	2068      	movs	r0, #104	; 0x68
 80008e0:	f7ff fe92 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 80008e4:	2013      	movs	r0, #19
 80008e6:	f7ff fe69 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 80008ea:	2029      	movs	r0, #41	; 0x29
 80008ec:	f7ff fe66 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80008f0:	202c      	movs	r0, #44	; 0x2c
 80008f2:	f7ff fe63 	bl	80005bc <ILI9163_writeCommand>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400
 8000904:	40020c00 	.word	0x40020c00

08000908 <ILI9163_newFrame>:

void ILI9163_newFrame()
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	e008      	b.n	8000926 <ILI9163_newFrame+0x1e>
		frameBuffer[i] = 0xFFFF;
 8000914:	4a09      	ldr	r2, [pc, #36]	; (800093c <ILI9163_newFrame+0x34>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800091c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800092c:	d3f2      	bcc.n	8000914 <ILI9163_newFrame+0xc>

}
 800092e:	bf00      	nop
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	200000a8 	.word	0x200000a8

08000940 <ILI9163_render>:

void ILI9163_render()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	ILI9163_setAddress(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT);
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	22a0      	movs	r2, #160	; 0xa0
 8000948:	2100      	movs	r1, #0
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff feb0 	bl	80006b0 <ILI9163_setAddress>
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <ILI9163_render+0x4c>)
 8000958:	f002 fb46 	bl	8002fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000962:	480a      	ldr	r0, [pc, #40]	; (800098c <ILI9163_render+0x4c>)
 8000964:	f002 fb40 	bl	8002fe8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&DISP_SPI, (uint8_t*)frameBuffer, BUFSIZE*2);
 8000968:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800096c:	4908      	ldr	r1, [pc, #32]	; (8000990 <ILI9163_render+0x50>)
 800096e:	4809      	ldr	r0, [pc, #36]	; (8000994 <ILI9163_render+0x54>)
 8000970:	f003 fe5c 	bl	800462c <HAL_SPI_Transmit_DMA>

	SPI_DMA_FL=0;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <ILI9163_render+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
while(!SPI_DMA_FL) {} // This can be commented out if your thread sends new frames slower than SPI transmits them. Otherwise, memory havoc. See README.md
 800097a:	bf00      	nop
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <ILI9163_render+0x58>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0fb      	beq.n	800097c <ILI9163_render+0x3c>
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020400 	.word	0x40020400
 8000990:	200000a8 	.word	0x200000a8
 8000994:	2000a0e0 	.word	0x2000a0e0
 8000998:	2000a22c 	.word	0x2000a22c

0800099c <ILI9163_drawPixel>:

void ILI9163_drawPixel(uint8_t x, uint8_t y, uint16_t color) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
 80009a6:	460b      	mov	r3, r1
 80009a8:	71bb      	strb	r3, [r7, #6]
 80009aa:	4613      	mov	r3, r2
 80009ac:	80bb      	strh	r3, [r7, #4]
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b9f      	cmp	r3, #159	; 0x9f
 80009b2:	d80f      	bhi.n	80009d4 <ILI9163_drawPixel+0x38>
 80009b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0b      	blt.n	80009d4 <ILI9163_drawPixel+0x38>
	frameBuffer[((x)+(y*ILI9163_WIDTH))] = color;// >> 8;
 80009bc:	79f9      	ldrb	r1, [r7, #7]
 80009be:	79ba      	ldrb	r2, [r7, #6]
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	015b      	lsls	r3, r3, #5
 80009c8:	440b      	add	r3, r1
 80009ca:	4905      	ldr	r1, [pc, #20]	; (80009e0 <ILI9163_drawPixel+0x44>)
 80009cc:	88ba      	ldrh	r2, [r7, #4]
 80009ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80009d2:	e000      	b.n	80009d6 <ILI9163_drawPixel+0x3a>
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 80009d4:	bf00      	nop
}
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	200000a8 	.word	0x200000a8

080009e4 <ILI9163_drawChar>:

void ILI9163_fillDisplay(uint16_t color) {
	ILI9163_fillRect(0,0, ILI9163_WIDTH, ILI9163_HEIGHT, color);
}

void ILI9163_drawChar(uint8_t x, uint8_t y, char ch, FontDef font, uint16_t color) {
 80009e4:	b082      	sub	sp, #8
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b084      	sub	sp, #16
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	61fb      	str	r3, [r7, #28]
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	460b      	mov	r3, r1
 80009f4:	71bb      	strb	r3, [r7, #6]
 80009f6:	4613      	mov	r3, r2
 80009f8:	717b      	strb	r3, [r7, #5]
	uint16_t i, b, j;
	for(i = 0; i < font.height; i++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	81fb      	strh	r3, [r7, #14]
 80009fe:	e02f      	b.n	8000a60 <ILI9163_drawChar+0x7c>
		b = font.data[(ch - 32) * font.height + i];
 8000a00:	6a3a      	ldr	r2, [r7, #32]
 8000a02:	797b      	ldrb	r3, [r7, #5]
 8000a04:	3b20      	subs	r3, #32
 8000a06:	7f79      	ldrb	r1, [r7, #29]
 8000a08:	fb03 f101 	mul.w	r1, r3, r1
 8000a0c:	89fb      	ldrh	r3, [r7, #14]
 8000a0e:	440b      	add	r3, r1
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	817b      	strh	r3, [r7, #10]
		for(j = 0; j < font.width; j++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	81bb      	strh	r3, [r7, #12]
 8000a1c:	e018      	b.n	8000a50 <ILI9163_drawChar+0x6c>
			if((b << j) & 0x8000)  {
 8000a1e:	897a      	ldrh	r2, [r7, #10]
 8000a20:	89bb      	ldrh	r3, [r7, #12]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00d      	beq.n	8000a4a <ILI9163_drawChar+0x66>
				ILI9163_drawPixel(x + j, y + i, color);
 8000a2e:	89bb      	ldrh	r3, [r7, #12]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4413      	add	r3, r2
 8000a36:	b2d8      	uxtb	r0, r3
 8000a38:	89fb      	ldrh	r3, [r7, #14]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	4413      	add	r3, r2
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	f7ff ffa9 	bl	800099c <ILI9163_drawPixel>
		for(j = 0; j < font.width; j++) {
 8000a4a:	89bb      	ldrh	r3, [r7, #12]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	81bb      	strh	r3, [r7, #12]
 8000a50:	7f3b      	ldrb	r3, [r7, #28]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	89ba      	ldrh	r2, [r7, #12]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d3e1      	bcc.n	8000a1e <ILI9163_drawChar+0x3a>
	for(i = 0; i < font.height; i++) {
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	81fb      	strh	r3, [r7, #14]
 8000a60:	7f7b      	ldrb	r3, [r7, #29]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	89fa      	ldrh	r2, [r7, #14]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d3ca      	bcc.n	8000a00 <ILI9163_drawChar+0x1c>
			}
		}
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a76:	b002      	add	sp, #8
 8000a78:	4770      	bx	lr

08000a7a <ILI9163_drawString>:

void ILI9163_drawString(uint8_t x, uint8_t y, FontDef font, uint16_t color, const char *string) {
 8000a7a:	b590      	push	{r4, r7, lr}
 8000a7c:	b087      	sub	sp, #28
 8000a7e:	af02      	add	r7, sp, #8
 8000a80:	4604      	mov	r4, r0
 8000a82:	4608      	mov	r0, r1
 8000a84:	1d39      	adds	r1, r7, #4
 8000a86:	e881 000c 	stmia.w	r1, {r2, r3}
 8000a8a:	4623      	mov	r3, r4
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	4603      	mov	r3, r0
 8000a90:	73bb      	strb	r3, [r7, #14]
	while(*string) {
 8000a92:	e029      	b.n	8000ae8 <ILI9163_drawString+0x6e>
		if(x + font.width >= ILI9163_WIDTH) {
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	793a      	ldrb	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	2b9f      	cmp	r3, #159	; 0x9f
 8000a9c:	dd12      	ble.n	8000ac4 <ILI9163_drawString+0x4a>
			x = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]
			y += font.height;
 8000aa2:	797a      	ldrb	r2, [r7, #5]
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	73bb      	strb	r3, [r7, #14]
			if(y + font.height >= ILI9163_HEIGHT)
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	797a      	ldrb	r2, [r7, #5]
 8000aae:	4413      	add	r3, r2
 8000ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab2:	dc1e      	bgt.n	8000af2 <ILI9163_drawString+0x78>
				break;

			if(*string == ' ') {
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b20      	cmp	r3, #32
 8000aba:	d103      	bne.n	8000ac4 <ILI9163_drawString+0x4a>
				// skip spaces in the beginning of the new line
				string++;
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	3301      	adds	r3, #1
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8000ac2:	e011      	b.n	8000ae8 <ILI9163_drawString+0x6e>
			}
		}

		ILI9163_drawChar(x, y, *string, font, color);
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	7bb9      	ldrb	r1, [r7, #14]
 8000aca:	7bf8      	ldrb	r0, [r7, #15]
 8000acc:	8c3b      	ldrh	r3, [r7, #32]
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f7ff ff85 	bl	80009e4 <ILI9163_drawChar>

		x += font.width;
 8000ada:	793a      	ldrb	r2, [r7, #4]
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	4413      	add	r3, r2
 8000ae0:	73fb      	strb	r3, [r7, #15]
		string++;
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
	while(*string) {
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1d1      	bne.n	8000a94 <ILI9163_drawString+0x1a>
	}
}
 8000af0:	e000      	b.n	8000af4 <ILI9163_drawString+0x7a>
				break;
 8000af2:	bf00      	nop
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd90      	pop	{r4, r7, pc}

08000afc <ILI9163_drawStringF>:

void ILI9163_drawStringF(uint8_t x, uint8_t y, FontDef font, uint16_t color, char *szFormat, ...) {
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b099      	sub	sp, #100	; 0x64
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	4604      	mov	r4, r0
 8000b04:	4608      	mov	r0, r1
 8000b06:	1d39      	adds	r1, r7, #4
 8000b08:	e881 000c 	stmia.w	r1, {r2, r3}
 8000b0c:	4623      	mov	r3, r4
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	4603      	mov	r3, r0
 8000b12:	73bb      	strb	r3, [r7, #14]
	char szBuffer[64];
	va_list pArgs;
	va_start(pArgs, szFormat);
 8000b14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b18:	617b      	str	r3, [r7, #20]
	vsnprintf(szBuffer, 63, szFormat, pArgs);
 8000b1a:	f107 0018 	add.w	r0, r7, #24
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b22:	213f      	movs	r1, #63	; 0x3f
 8000b24:	f005 fce6 	bl	80064f4 <vsniprintf>
	va_end(pArgs);

	ILI9163_drawString(x, y, font, color, szBuffer);
 8000b28:	7bb9      	ldrb	r1, [r7, #14]
 8000b2a:	7bf8      	ldrb	r0, [r7, #15]
 8000b2c:	f107 0318 	add.w	r3, r7, #24
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	cb0c      	ldmia	r3, {r2, r3}
 8000b3c:	f7ff ff9d 	bl	8000a7a <ILI9163_drawString>
}
 8000b40:	bf00      	nop
 8000b42:	375c      	adds	r7, #92	; 0x5c
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd90      	pop	{r4, r7, pc}

08000b48 <updateScreen>:

char writeString[50] = "";
extern flag;
int counter = 0;
int pos = 5;
void updateScreen(char* writeString) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	6078      	str	r0, [r7, #4]
		ILI9163_newFrame();
 8000b50:	f7ff feda 	bl	8000908 <ILI9163_newFrame>
		ILI9163_drawStringF(5, 10, Font_7x10, BLACK, writeString);
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <updateScreen+0x2c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	ca0c      	ldmia	r2, {r2, r3}
 8000b60:	210a      	movs	r1, #10
 8000b62:	2005      	movs	r0, #5
 8000b64:	f7ff ffca 	bl	8000afc <ILI9163_drawStringF>
		ILI9163_render();
 8000b68:	f7ff feea 	bl	8000940 <ILI9163_render>
	}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000000 	.word	0x20000000

08000b78 <key_pad>:

void key_pad(char keyChar){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	switch(keyChar) {
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	3b23      	subs	r3, #35	; 0x23
 8000b86:	2b34      	cmp	r3, #52	; 0x34
 8000b88:	f200 8506 	bhi.w	8001598 <key_pad+0xa20>
 8000b8c:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <key_pad+0x1c>)
 8000b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b92:	bf00      	nop
 8000b94:	08001505 	.word	0x08001505
 8000b98:	08001599 	.word	0x08001599
 8000b9c:	08001599 	.word	0x08001599
 8000ba0:	08001599 	.word	0x08001599
 8000ba4:	08001599 	.word	0x08001599
 8000ba8:	08001599 	.word	0x08001599
 8000bac:	08001599 	.word	0x08001599
 8000bb0:	08001591 	.word	0x08001591
 8000bb4:	08001599 	.word	0x08001599
 8000bb8:	08001599 	.word	0x08001599
 8000bbc:	08001599 	.word	0x08001599
 8000bc0:	08001599 	.word	0x08001599
 8000bc4:	08001599 	.word	0x08001599
 8000bc8:	08001599 	.word	0x08001599
 8000bcc:	08001599 	.word	0x08001599
 8000bd0:	08001599 	.word	0x08001599
 8000bd4:	08001599 	.word	0x08001599
 8000bd8:	08001599 	.word	0x08001599
 8000bdc:	08001599 	.word	0x08001599
 8000be0:	08001599 	.word	0x08001599
 8000be4:	08001599 	.word	0x08001599
 8000be8:	08001599 	.word	0x08001599
 8000bec:	08001599 	.word	0x08001599
 8000bf0:	08001599 	.word	0x08001599
 8000bf4:	08001599 	.word	0x08001599
 8000bf8:	08001599 	.word	0x08001599
 8000bfc:	08001599 	.word	0x08001599
 8000c00:	08001599 	.word	0x08001599
 8000c04:	08001599 	.word	0x08001599
 8000c08:	08001599 	.word	0x08001599
 8000c0c:	08000c69 	.word	0x08000c69
 8000c10:	08001549 	.word	0x08001549
 8000c14:	08001579 	.word	0x08001579
 8000c18:	08000d5b 	.word	0x08000d5b
 8000c1c:	08001599 	.word	0x08001599
 8000c20:	08001599 	.word	0x08001599
 8000c24:	08000e4b 	.word	0x08000e4b
 8000c28:	08001599 	.word	0x08001599
 8000c2c:	08001599 	.word	0x08001599
 8000c30:	08000f65 	.word	0x08000f65
 8000c34:	08001599 	.word	0x08001599
 8000c38:	08001599 	.word	0x08001599
 8000c3c:	08001055 	.word	0x08001055
 8000c40:	08001599 	.word	0x08001599
 8000c44:	08001599 	.word	0x08001599
 8000c48:	08001145 	.word	0x08001145
 8000c4c:	08001599 	.word	0x08001599
 8000c50:	08001599 	.word	0x08001599
 8000c54:	08001599 	.word	0x08001599
 8000c58:	080012ad 	.word	0x080012ad
 8000c5c:	08001599 	.word	0x08001599
 8000c60:	08001599 	.word	0x08001599
 8000c64:	0800139d 	.word	0x0800139d
				case 'A':
					if(counter == 0){
 8000c68:	4ba0      	ldr	r3, [pc, #640]	; (8000eec <key_pad+0x374>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d123      	bne.n	8000cb8 <key_pad+0x140>
						if(strlen(writeString) > 0) {
 8000c70:	4b9f      	ldr	r3, [pc, #636]	; (8000ef0 <key_pad+0x378>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00a      	beq.n	8000c8e <key_pad+0x116>
							writeString[strlen(writeString) - 1] = '\0';
 8000c78:	489d      	ldr	r0, [pc, #628]	; (8000ef0 <key_pad+0x378>)
 8000c7a:	f7ff fac9 	bl	8000210 <strlen>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	3b01      	subs	r3, #1
 8000c82:	4a9b      	ldr	r2, [pc, #620]	; (8000ef0 <key_pad+0x378>)
 8000c84:	2100      	movs	r1, #0
 8000c86:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000c88:	4899      	ldr	r0, [pc, #612]	; (8000ef0 <key_pad+0x378>)
 8000c8a:	f7ff ff5d 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "A");
 8000c8e:	4898      	ldr	r0, [pc, #608]	; (8000ef0 <key_pad+0x378>)
 8000c90:	f7ff fabe 	bl	8000210 <strlen>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b95      	ldr	r3, [pc, #596]	; (8000ef0 <key_pad+0x378>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4995      	ldr	r1, [pc, #596]	; (8000ef4 <key_pad+0x37c>)
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000ca6:	4892      	ldr	r0, [pc, #584]	; (8000ef0 <key_pad+0x378>)
 8000ca8:	f7ff ff4e 	bl	8000b48 <updateScreen>
						counter ++;
 8000cac:	4b8f      	ldr	r3, [pc, #572]	; (8000eec <key_pad+0x374>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	4a8e      	ldr	r2, [pc, #568]	; (8000eec <key_pad+0x374>)
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	e04c      	b.n	8000d52 <key_pad+0x1da>

					}

					else if(counter == 1){
 8000cb8:	4b8c      	ldr	r3, [pc, #560]	; (8000eec <key_pad+0x374>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d123      	bne.n	8000d08 <key_pad+0x190>
						if(strlen(writeString) > 0) {
 8000cc0:	4b8b      	ldr	r3, [pc, #556]	; (8000ef0 <key_pad+0x378>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d00a      	beq.n	8000cde <key_pad+0x166>
							writeString[strlen(writeString) - 1] = '\0';
 8000cc8:	4889      	ldr	r0, [pc, #548]	; (8000ef0 <key_pad+0x378>)
 8000cca:	f7ff faa1 	bl	8000210 <strlen>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	4a87      	ldr	r2, [pc, #540]	; (8000ef0 <key_pad+0x378>)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000cd8:	4885      	ldr	r0, [pc, #532]	; (8000ef0 <key_pad+0x378>)
 8000cda:	f7ff ff35 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "B");
 8000cde:	4884      	ldr	r0, [pc, #528]	; (8000ef0 <key_pad+0x378>)
 8000ce0:	f7ff fa96 	bl	8000210 <strlen>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b81      	ldr	r3, [pc, #516]	; (8000ef0 <key_pad+0x378>)
 8000cea:	4413      	add	r3, r2
 8000cec:	4982      	ldr	r1, [pc, #520]	; (8000ef8 <key_pad+0x380>)
 8000cee:	461a      	mov	r2, r3
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000cf6:	487e      	ldr	r0, [pc, #504]	; (8000ef0 <key_pad+0x378>)
 8000cf8:	f7ff ff26 	bl	8000b48 <updateScreen>
						counter ++;
 8000cfc:	4b7b      	ldr	r3, [pc, #492]	; (8000eec <key_pad+0x374>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a7a      	ldr	r2, [pc, #488]	; (8000eec <key_pad+0x374>)
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e024      	b.n	8000d52 <key_pad+0x1da>
					}

					else if(counter == 2){
 8000d08:	4b78      	ldr	r3, [pc, #480]	; (8000eec <key_pad+0x374>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d120      	bne.n	8000d52 <key_pad+0x1da>
						if(strlen(writeString) > 0) {
 8000d10:	4b77      	ldr	r3, [pc, #476]	; (8000ef0 <key_pad+0x378>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00a      	beq.n	8000d2e <key_pad+0x1b6>
							writeString[strlen(writeString) - 1] = '\0';
 8000d18:	4875      	ldr	r0, [pc, #468]	; (8000ef0 <key_pad+0x378>)
 8000d1a:	f7ff fa79 	bl	8000210 <strlen>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	3b01      	subs	r3, #1
 8000d22:	4a73      	ldr	r2, [pc, #460]	; (8000ef0 <key_pad+0x378>)
 8000d24:	2100      	movs	r1, #0
 8000d26:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000d28:	4871      	ldr	r0, [pc, #452]	; (8000ef0 <key_pad+0x378>)
 8000d2a:	f7ff ff0d 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "C");
 8000d2e:	4870      	ldr	r0, [pc, #448]	; (8000ef0 <key_pad+0x378>)
 8000d30:	f7ff fa6e 	bl	8000210 <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b6d      	ldr	r3, [pc, #436]	; (8000ef0 <key_pad+0x378>)
 8000d3a:	4413      	add	r3, r2
 8000d3c:	496f      	ldr	r1, [pc, #444]	; (8000efc <key_pad+0x384>)
 8000d3e:	461a      	mov	r2, r3
 8000d40:	460b      	mov	r3, r1
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000d46:	486a      	ldr	r0, [pc, #424]	; (8000ef0 <key_pad+0x378>)
 8000d48:	f7ff fefe 	bl	8000b48 <updateScreen>
						counter = 0;
 8000d4c:	4b67      	ldr	r3, [pc, #412]	; (8000eec <key_pad+0x374>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	71fb      	strb	r3, [r7, #7]
					break;
 8000d56:	f000 bc1f 	b.w	8001598 <key_pad+0xa20>

				case 'D':
					if(counter == 0){
 8000d5a:	4b64      	ldr	r3, [pc, #400]	; (8000eec <key_pad+0x374>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d123      	bne.n	8000daa <key_pad+0x232>
						if(strlen(writeString) > 0) {
 8000d62:	4b63      	ldr	r3, [pc, #396]	; (8000ef0 <key_pad+0x378>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00a      	beq.n	8000d80 <key_pad+0x208>
							writeString[strlen(writeString) - 1] = '\0';
 8000d6a:	4861      	ldr	r0, [pc, #388]	; (8000ef0 <key_pad+0x378>)
 8000d6c:	f7ff fa50 	bl	8000210 <strlen>
 8000d70:	4603      	mov	r3, r0
 8000d72:	3b01      	subs	r3, #1
 8000d74:	4a5e      	ldr	r2, [pc, #376]	; (8000ef0 <key_pad+0x378>)
 8000d76:	2100      	movs	r1, #0
 8000d78:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000d7a:	485d      	ldr	r0, [pc, #372]	; (8000ef0 <key_pad+0x378>)
 8000d7c:	f7ff fee4 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "D");
 8000d80:	485b      	ldr	r0, [pc, #364]	; (8000ef0 <key_pad+0x378>)
 8000d82:	f7ff fa45 	bl	8000210 <strlen>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b59      	ldr	r3, [pc, #356]	; (8000ef0 <key_pad+0x378>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	495c      	ldr	r1, [pc, #368]	; (8000f00 <key_pad+0x388>)
 8000d90:	461a      	mov	r2, r3
 8000d92:	460b      	mov	r3, r1
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000d98:	4855      	ldr	r0, [pc, #340]	; (8000ef0 <key_pad+0x378>)
 8000d9a:	f7ff fed5 	bl	8000b48 <updateScreen>
						counter ++;
 8000d9e:	4b53      	ldr	r3, [pc, #332]	; (8000eec <key_pad+0x374>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a51      	ldr	r2, [pc, #324]	; (8000eec <key_pad+0x374>)
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e04c      	b.n	8000e44 <key_pad+0x2cc>
					}

					else if(counter == 1){
 8000daa:	4b50      	ldr	r3, [pc, #320]	; (8000eec <key_pad+0x374>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d123      	bne.n	8000dfa <key_pad+0x282>
						if(strlen(writeString) > 0) {
 8000db2:	4b4f      	ldr	r3, [pc, #316]	; (8000ef0 <key_pad+0x378>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00a      	beq.n	8000dd0 <key_pad+0x258>
							writeString[strlen(writeString) - 1] = '\0';
 8000dba:	484d      	ldr	r0, [pc, #308]	; (8000ef0 <key_pad+0x378>)
 8000dbc:	f7ff fa28 	bl	8000210 <strlen>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <key_pad+0x378>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000dca:	4849      	ldr	r0, [pc, #292]	; (8000ef0 <key_pad+0x378>)
 8000dcc:	f7ff febc 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "E");
 8000dd0:	4847      	ldr	r0, [pc, #284]	; (8000ef0 <key_pad+0x378>)
 8000dd2:	f7ff fa1d 	bl	8000210 <strlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <key_pad+0x378>)
 8000ddc:	4413      	add	r3, r2
 8000dde:	4949      	ldr	r1, [pc, #292]	; (8000f04 <key_pad+0x38c>)
 8000de0:	461a      	mov	r2, r3
 8000de2:	460b      	mov	r3, r1
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000de8:	4841      	ldr	r0, [pc, #260]	; (8000ef0 <key_pad+0x378>)
 8000dea:	f7ff fead 	bl	8000b48 <updateScreen>
						counter ++;
 8000dee:	4b3f      	ldr	r3, [pc, #252]	; (8000eec <key_pad+0x374>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	4a3d      	ldr	r2, [pc, #244]	; (8000eec <key_pad+0x374>)
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	e024      	b.n	8000e44 <key_pad+0x2cc>
					}

					else if(counter == 2){
 8000dfa:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <key_pad+0x374>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d120      	bne.n	8000e44 <key_pad+0x2cc>
						if(strlen(writeString) > 0) {
 8000e02:	4b3b      	ldr	r3, [pc, #236]	; (8000ef0 <key_pad+0x378>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00a      	beq.n	8000e20 <key_pad+0x2a8>
							writeString[strlen(writeString) - 1] = '\0';
 8000e0a:	4839      	ldr	r0, [pc, #228]	; (8000ef0 <key_pad+0x378>)
 8000e0c:	f7ff fa00 	bl	8000210 <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	3b01      	subs	r3, #1
 8000e14:	4a36      	ldr	r2, [pc, #216]	; (8000ef0 <key_pad+0x378>)
 8000e16:	2100      	movs	r1, #0
 8000e18:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000e1a:	4835      	ldr	r0, [pc, #212]	; (8000ef0 <key_pad+0x378>)
 8000e1c:	f7ff fe94 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "F");
 8000e20:	4833      	ldr	r0, [pc, #204]	; (8000ef0 <key_pad+0x378>)
 8000e22:	f7ff f9f5 	bl	8000210 <strlen>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <key_pad+0x378>)
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4936      	ldr	r1, [pc, #216]	; (8000f08 <key_pad+0x390>)
 8000e30:	461a      	mov	r2, r3
 8000e32:	460b      	mov	r3, r1
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000e38:	482d      	ldr	r0, [pc, #180]	; (8000ef0 <key_pad+0x378>)
 8000e3a:	f7ff fe85 	bl	8000b48 <updateScreen>
						counter = 0;
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <key_pad+0x374>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	71fb      	strb	r3, [r7, #7]
					break;
 8000e48:	e3a6      	b.n	8001598 <key_pad+0xa20>

				case 'G':
					if(counter == 0){
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <key_pad+0x374>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d123      	bne.n	8000e9a <key_pad+0x322>
						if(strlen(writeString) > 0) {
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <key_pad+0x378>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00a      	beq.n	8000e70 <key_pad+0x2f8>
							writeString[strlen(writeString) - 1] = '\0';
 8000e5a:	4825      	ldr	r0, [pc, #148]	; (8000ef0 <key_pad+0x378>)
 8000e5c:	f7ff f9d8 	bl	8000210 <strlen>
 8000e60:	4603      	mov	r3, r0
 8000e62:	3b01      	subs	r3, #1
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <key_pad+0x378>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000e6a:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <key_pad+0x378>)
 8000e6c:	f7ff fe6c 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "G");
 8000e70:	481f      	ldr	r0, [pc, #124]	; (8000ef0 <key_pad+0x378>)
 8000e72:	f7ff f9cd 	bl	8000210 <strlen>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <key_pad+0x378>)
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4923      	ldr	r1, [pc, #140]	; (8000f0c <key_pad+0x394>)
 8000e80:	461a      	mov	r2, r3
 8000e82:	460b      	mov	r3, r1
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000e88:	4819      	ldr	r0, [pc, #100]	; (8000ef0 <key_pad+0x378>)
 8000e8a:	f7ff fe5d 	bl	8000b48 <updateScreen>
						counter ++;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <key_pad+0x374>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	4a15      	ldr	r2, [pc, #84]	; (8000eec <key_pad+0x374>)
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e061      	b.n	8000f5e <key_pad+0x3e6>
					}

					else if(counter == 1){
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <key_pad+0x374>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d138      	bne.n	8000f14 <key_pad+0x39c>
						if(strlen(writeString) > 0) {
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <key_pad+0x378>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00a      	beq.n	8000ec0 <key_pad+0x348>
							writeString[strlen(writeString) - 1] = '\0';
 8000eaa:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <key_pad+0x378>)
 8000eac:	f7ff f9b0 	bl	8000210 <strlen>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <key_pad+0x378>)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <key_pad+0x378>)
 8000ebc:	f7ff fe44 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "H");
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <key_pad+0x378>)
 8000ec2:	f7ff f9a5 	bl	8000210 <strlen>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <key_pad+0x378>)
 8000ecc:	4413      	add	r3, r2
 8000ece:	4910      	ldr	r1, [pc, #64]	; (8000f10 <key_pad+0x398>)
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <key_pad+0x378>)
 8000eda:	f7ff fe35 	bl	8000b48 <updateScreen>
						counter ++;
 8000ede:	4b03      	ldr	r3, [pc, #12]	; (8000eec <key_pad+0x374>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a01      	ldr	r2, [pc, #4]	; (8000eec <key_pad+0x374>)
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	e039      	b.n	8000f5e <key_pad+0x3e6>
 8000eea:	bf00      	nop
 8000eec:	2000a0dc 	.word	0x2000a0dc
 8000ef0:	2000a0a8 	.word	0x2000a0a8
 8000ef4:	08006e30 	.word	0x08006e30
 8000ef8:	08006e34 	.word	0x08006e34
 8000efc:	08006e38 	.word	0x08006e38
 8000f00:	08006e3c 	.word	0x08006e3c
 8000f04:	08006e40 	.word	0x08006e40
 8000f08:	08006e44 	.word	0x08006e44
 8000f0c:	08006e48 	.word	0x08006e48
 8000f10:	08006e4c 	.word	0x08006e4c
					}

					else if(counter == 2){
 8000f14:	4b9f      	ldr	r3, [pc, #636]	; (8001194 <key_pad+0x61c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d120      	bne.n	8000f5e <key_pad+0x3e6>
						if(strlen(writeString) > 0) {
 8000f1c:	4b9e      	ldr	r3, [pc, #632]	; (8001198 <key_pad+0x620>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00a      	beq.n	8000f3a <key_pad+0x3c2>
							writeString[strlen(writeString) - 1] = '\0';
 8000f24:	489c      	ldr	r0, [pc, #624]	; (8001198 <key_pad+0x620>)
 8000f26:	f7ff f973 	bl	8000210 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	4a9a      	ldr	r2, [pc, #616]	; (8001198 <key_pad+0x620>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000f34:	4898      	ldr	r0, [pc, #608]	; (8001198 <key_pad+0x620>)
 8000f36:	f7ff fe07 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "I");
 8000f3a:	4897      	ldr	r0, [pc, #604]	; (8001198 <key_pad+0x620>)
 8000f3c:	f7ff f968 	bl	8000210 <strlen>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b94      	ldr	r3, [pc, #592]	; (8001198 <key_pad+0x620>)
 8000f46:	4413      	add	r3, r2
 8000f48:	4994      	ldr	r1, [pc, #592]	; (800119c <key_pad+0x624>)
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000f52:	4891      	ldr	r0, [pc, #580]	; (8001198 <key_pad+0x620>)
 8000f54:	f7ff fdf8 	bl	8000b48 <updateScreen>
						counter = 0;
 8000f58:	4b8e      	ldr	r3, [pc, #568]	; (8001194 <key_pad+0x61c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	71fb      	strb	r3, [r7, #7]
					break;
 8000f62:	e319      	b.n	8001598 <key_pad+0xa20>

				case 'J':
					if(counter == 0){
 8000f64:	4b8b      	ldr	r3, [pc, #556]	; (8001194 <key_pad+0x61c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d123      	bne.n	8000fb4 <key_pad+0x43c>
						if(strlen(writeString) > 0) {
 8000f6c:	4b8a      	ldr	r3, [pc, #552]	; (8001198 <key_pad+0x620>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00a      	beq.n	8000f8a <key_pad+0x412>
							writeString[strlen(writeString) - 1] = '\0';
 8000f74:	4888      	ldr	r0, [pc, #544]	; (8001198 <key_pad+0x620>)
 8000f76:	f7ff f94b 	bl	8000210 <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	4a86      	ldr	r2, [pc, #536]	; (8001198 <key_pad+0x620>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000f84:	4884      	ldr	r0, [pc, #528]	; (8001198 <key_pad+0x620>)
 8000f86:	f7ff fddf 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "J");
 8000f8a:	4883      	ldr	r0, [pc, #524]	; (8001198 <key_pad+0x620>)
 8000f8c:	f7ff f940 	bl	8000210 <strlen>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b80      	ldr	r3, [pc, #512]	; (8001198 <key_pad+0x620>)
 8000f96:	4413      	add	r3, r2
 8000f98:	4981      	ldr	r1, [pc, #516]	; (80011a0 <key_pad+0x628>)
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000fa2:	487d      	ldr	r0, [pc, #500]	; (8001198 <key_pad+0x620>)
 8000fa4:	f7ff fdd0 	bl	8000b48 <updateScreen>
						counter ++;
 8000fa8:	4b7a      	ldr	r3, [pc, #488]	; (8001194 <key_pad+0x61c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a79      	ldr	r2, [pc, #484]	; (8001194 <key_pad+0x61c>)
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e04c      	b.n	800104e <key_pad+0x4d6>
					}

					else if(counter == 1){
 8000fb4:	4b77      	ldr	r3, [pc, #476]	; (8001194 <key_pad+0x61c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d123      	bne.n	8001004 <key_pad+0x48c>
						if(strlen(writeString) > 0) {
 8000fbc:	4b76      	ldr	r3, [pc, #472]	; (8001198 <key_pad+0x620>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00a      	beq.n	8000fda <key_pad+0x462>
							writeString[strlen(writeString) - 1] = '\0';
 8000fc4:	4874      	ldr	r0, [pc, #464]	; (8001198 <key_pad+0x620>)
 8000fc6:	f7ff f923 	bl	8000210 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	4a72      	ldr	r2, [pc, #456]	; (8001198 <key_pad+0x620>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000fd4:	4870      	ldr	r0, [pc, #448]	; (8001198 <key_pad+0x620>)
 8000fd6:	f7ff fdb7 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "K");
 8000fda:	486f      	ldr	r0, [pc, #444]	; (8001198 <key_pad+0x620>)
 8000fdc:	f7ff f918 	bl	8000210 <strlen>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b6c      	ldr	r3, [pc, #432]	; (8001198 <key_pad+0x620>)
 8000fe6:	4413      	add	r3, r2
 8000fe8:	496e      	ldr	r1, [pc, #440]	; (80011a4 <key_pad+0x62c>)
 8000fea:	461a      	mov	r2, r3
 8000fec:	460b      	mov	r3, r1
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000ff2:	4869      	ldr	r0, [pc, #420]	; (8001198 <key_pad+0x620>)
 8000ff4:	f7ff fda8 	bl	8000b48 <updateScreen>
						counter ++;
 8000ff8:	4b66      	ldr	r3, [pc, #408]	; (8001194 <key_pad+0x61c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a65      	ldr	r2, [pc, #404]	; (8001194 <key_pad+0x61c>)
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e024      	b.n	800104e <key_pad+0x4d6>
					}

					else if(counter == 2){
 8001004:	4b63      	ldr	r3, [pc, #396]	; (8001194 <key_pad+0x61c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d120      	bne.n	800104e <key_pad+0x4d6>
						if(strlen(writeString) > 0) {
 800100c:	4b62      	ldr	r3, [pc, #392]	; (8001198 <key_pad+0x620>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00a      	beq.n	800102a <key_pad+0x4b2>
							writeString[strlen(writeString) - 1] = '\0';
 8001014:	4860      	ldr	r0, [pc, #384]	; (8001198 <key_pad+0x620>)
 8001016:	f7ff f8fb 	bl	8000210 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	3b01      	subs	r3, #1
 800101e:	4a5e      	ldr	r2, [pc, #376]	; (8001198 <key_pad+0x620>)
 8001020:	2100      	movs	r1, #0
 8001022:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001024:	485c      	ldr	r0, [pc, #368]	; (8001198 <key_pad+0x620>)
 8001026:	f7ff fd8f 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "L");
 800102a:	485b      	ldr	r0, [pc, #364]	; (8001198 <key_pad+0x620>)
 800102c:	f7ff f8f0 	bl	8000210 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b58      	ldr	r3, [pc, #352]	; (8001198 <key_pad+0x620>)
 8001036:	4413      	add	r3, r2
 8001038:	495b      	ldr	r1, [pc, #364]	; (80011a8 <key_pad+0x630>)
 800103a:	461a      	mov	r2, r3
 800103c:	460b      	mov	r3, r1
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8001042:	4855      	ldr	r0, [pc, #340]	; (8001198 <key_pad+0x620>)
 8001044:	f7ff fd80 	bl	8000b48 <updateScreen>
						counter = 0;
 8001048:	4b52      	ldr	r3, [pc, #328]	; (8001194 <key_pad+0x61c>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	71fb      	strb	r3, [r7, #7]
					break;
 8001052:	e2a1      	b.n	8001598 <key_pad+0xa20>

				case 'M':
					if(counter == 0){
 8001054:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <key_pad+0x61c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d123      	bne.n	80010a4 <key_pad+0x52c>
						if(strlen(writeString) > 0) {
 800105c:	4b4e      	ldr	r3, [pc, #312]	; (8001198 <key_pad+0x620>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00a      	beq.n	800107a <key_pad+0x502>
							writeString[strlen(writeString) - 1] = '\0';
 8001064:	484c      	ldr	r0, [pc, #304]	; (8001198 <key_pad+0x620>)
 8001066:	f7ff f8d3 	bl	8000210 <strlen>
 800106a:	4603      	mov	r3, r0
 800106c:	3b01      	subs	r3, #1
 800106e:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <key_pad+0x620>)
 8001070:	2100      	movs	r1, #0
 8001072:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001074:	4848      	ldr	r0, [pc, #288]	; (8001198 <key_pad+0x620>)
 8001076:	f7ff fd67 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "M");
 800107a:	4847      	ldr	r0, [pc, #284]	; (8001198 <key_pad+0x620>)
 800107c:	f7ff f8c8 	bl	8000210 <strlen>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b44      	ldr	r3, [pc, #272]	; (8001198 <key_pad+0x620>)
 8001086:	4413      	add	r3, r2
 8001088:	4948      	ldr	r1, [pc, #288]	; (80011ac <key_pad+0x634>)
 800108a:	461a      	mov	r2, r3
 800108c:	460b      	mov	r3, r1
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8001092:	4841      	ldr	r0, [pc, #260]	; (8001198 <key_pad+0x620>)
 8001094:	f7ff fd58 	bl	8000b48 <updateScreen>
						counter ++;
 8001098:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <key_pad+0x61c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	4a3d      	ldr	r2, [pc, #244]	; (8001194 <key_pad+0x61c>)
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e04c      	b.n	800113e <key_pad+0x5c6>
					}

					else if(counter == 1){
 80010a4:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <key_pad+0x61c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d123      	bne.n	80010f4 <key_pad+0x57c>
						if(strlen(writeString) > 0) {
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <key_pad+0x620>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00a      	beq.n	80010ca <key_pad+0x552>
							writeString[strlen(writeString) - 1] = '\0';
 80010b4:	4838      	ldr	r0, [pc, #224]	; (8001198 <key_pad+0x620>)
 80010b6:	f7ff f8ab 	bl	8000210 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	3b01      	subs	r3, #1
 80010be:	4a36      	ldr	r2, [pc, #216]	; (8001198 <key_pad+0x620>)
 80010c0:	2100      	movs	r1, #0
 80010c2:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80010c4:	4834      	ldr	r0, [pc, #208]	; (8001198 <key_pad+0x620>)
 80010c6:	f7ff fd3f 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "N");
 80010ca:	4833      	ldr	r0, [pc, #204]	; (8001198 <key_pad+0x620>)
 80010cc:	f7ff f8a0 	bl	8000210 <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b30      	ldr	r3, [pc, #192]	; (8001198 <key_pad+0x620>)
 80010d6:	4413      	add	r3, r2
 80010d8:	4935      	ldr	r1, [pc, #212]	; (80011b0 <key_pad+0x638>)
 80010da:	461a      	mov	r2, r3
 80010dc:	460b      	mov	r3, r1
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80010e2:	482d      	ldr	r0, [pc, #180]	; (8001198 <key_pad+0x620>)
 80010e4:	f7ff fd30 	bl	8000b48 <updateScreen>
						counter ++;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <key_pad+0x61c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a29      	ldr	r2, [pc, #164]	; (8001194 <key_pad+0x61c>)
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e024      	b.n	800113e <key_pad+0x5c6>
					}

					else if(counter == 2){
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <key_pad+0x61c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d120      	bne.n	800113e <key_pad+0x5c6>
						if(strlen(writeString) > 0) {
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <key_pad+0x620>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00a      	beq.n	800111a <key_pad+0x5a2>
							writeString[strlen(writeString) - 1] = '\0';
 8001104:	4824      	ldr	r0, [pc, #144]	; (8001198 <key_pad+0x620>)
 8001106:	f7ff f883 	bl	8000210 <strlen>
 800110a:	4603      	mov	r3, r0
 800110c:	3b01      	subs	r3, #1
 800110e:	4a22      	ldr	r2, [pc, #136]	; (8001198 <key_pad+0x620>)
 8001110:	2100      	movs	r1, #0
 8001112:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001114:	4820      	ldr	r0, [pc, #128]	; (8001198 <key_pad+0x620>)
 8001116:	f7ff fd17 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "O");
 800111a:	481f      	ldr	r0, [pc, #124]	; (8001198 <key_pad+0x620>)
 800111c:	f7ff f878 	bl	8000210 <strlen>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <key_pad+0x620>)
 8001126:	4413      	add	r3, r2
 8001128:	4922      	ldr	r1, [pc, #136]	; (80011b4 <key_pad+0x63c>)
 800112a:	461a      	mov	r2, r3
 800112c:	460b      	mov	r3, r1
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8001132:	4819      	ldr	r0, [pc, #100]	; (8001198 <key_pad+0x620>)
 8001134:	f7ff fd08 	bl	8000b48 <updateScreen>
						counter = 0;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <key_pad+0x61c>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]
					break;
 8001142:	e229      	b.n	8001598 <key_pad+0xa20>

				case 'P':
					if(counter == 0){
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <key_pad+0x61c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d137      	bne.n	80011bc <key_pad+0x644>
						if(strlen(writeString) > 0) {
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <key_pad+0x620>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00a      	beq.n	800116a <key_pad+0x5f2>
							writeString[strlen(writeString) - 1] = '\0';
 8001154:	4810      	ldr	r0, [pc, #64]	; (8001198 <key_pad+0x620>)
 8001156:	f7ff f85b 	bl	8000210 <strlen>
 800115a:	4603      	mov	r3, r0
 800115c:	3b01      	subs	r3, #1
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <key_pad+0x620>)
 8001160:	2100      	movs	r1, #0
 8001162:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <key_pad+0x620>)
 8001166:	f7ff fcef 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "P");
 800116a:	480b      	ldr	r0, [pc, #44]	; (8001198 <key_pad+0x620>)
 800116c:	f7ff f850 	bl	8000210 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <key_pad+0x620>)
 8001176:	4413      	add	r3, r2
 8001178:	490f      	ldr	r1, [pc, #60]	; (80011b8 <key_pad+0x640>)
 800117a:	461a      	mov	r2, r3
 800117c:	460b      	mov	r3, r1
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <key_pad+0x620>)
 8001184:	f7ff fce0 	bl	8000b48 <updateScreen>
						counter ++;
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <key_pad+0x61c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	4a01      	ldr	r2, [pc, #4]	; (8001194 <key_pad+0x61c>)
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e088      	b.n	80012a6 <key_pad+0x72e>
 8001194:	2000a0dc 	.word	0x2000a0dc
 8001198:	2000a0a8 	.word	0x2000a0a8
 800119c:	08006e50 	.word	0x08006e50
 80011a0:	08006e54 	.word	0x08006e54
 80011a4:	08006e58 	.word	0x08006e58
 80011a8:	08006e5c 	.word	0x08006e5c
 80011ac:	08006e60 	.word	0x08006e60
 80011b0:	08006e64 	.word	0x08006e64
 80011b4:	08006e68 	.word	0x08006e68
 80011b8:	08006e6c 	.word	0x08006e6c
					}

					else if(counter == 1){
 80011bc:	4b9f      	ldr	r3, [pc, #636]	; (800143c <key_pad+0x8c4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d123      	bne.n	800120c <key_pad+0x694>
						if(strlen(writeString) > 0) {
 80011c4:	4b9e      	ldr	r3, [pc, #632]	; (8001440 <key_pad+0x8c8>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00a      	beq.n	80011e2 <key_pad+0x66a>
							writeString[strlen(writeString) - 1] = '\0';
 80011cc:	489c      	ldr	r0, [pc, #624]	; (8001440 <key_pad+0x8c8>)
 80011ce:	f7ff f81f 	bl	8000210 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	3b01      	subs	r3, #1
 80011d6:	4a9a      	ldr	r2, [pc, #616]	; (8001440 <key_pad+0x8c8>)
 80011d8:	2100      	movs	r1, #0
 80011da:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80011dc:	4898      	ldr	r0, [pc, #608]	; (8001440 <key_pad+0x8c8>)
 80011de:	f7ff fcb3 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "Q");
 80011e2:	4897      	ldr	r0, [pc, #604]	; (8001440 <key_pad+0x8c8>)
 80011e4:	f7ff f814 	bl	8000210 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b94      	ldr	r3, [pc, #592]	; (8001440 <key_pad+0x8c8>)
 80011ee:	4413      	add	r3, r2
 80011f0:	4994      	ldr	r1, [pc, #592]	; (8001444 <key_pad+0x8cc>)
 80011f2:	461a      	mov	r2, r3
 80011f4:	460b      	mov	r3, r1
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80011fa:	4891      	ldr	r0, [pc, #580]	; (8001440 <key_pad+0x8c8>)
 80011fc:	f7ff fca4 	bl	8000b48 <updateScreen>
						counter ++;
 8001200:	4b8e      	ldr	r3, [pc, #568]	; (800143c <key_pad+0x8c4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a8d      	ldr	r2, [pc, #564]	; (800143c <key_pad+0x8c4>)
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e04c      	b.n	80012a6 <key_pad+0x72e>
					}

					else if(counter == 2){
 800120c:	4b8b      	ldr	r3, [pc, #556]	; (800143c <key_pad+0x8c4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <key_pad+0x6e4>
						if(strlen(writeString) > 0) {
 8001214:	4b8a      	ldr	r3, [pc, #552]	; (8001440 <key_pad+0x8c8>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00a      	beq.n	8001232 <key_pad+0x6ba>
							writeString[strlen(writeString) - 1] = '\0';
 800121c:	4888      	ldr	r0, [pc, #544]	; (8001440 <key_pad+0x8c8>)
 800121e:	f7fe fff7 	bl	8000210 <strlen>
 8001222:	4603      	mov	r3, r0
 8001224:	3b01      	subs	r3, #1
 8001226:	4a86      	ldr	r2, [pc, #536]	; (8001440 <key_pad+0x8c8>)
 8001228:	2100      	movs	r1, #0
 800122a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800122c:	4884      	ldr	r0, [pc, #528]	; (8001440 <key_pad+0x8c8>)
 800122e:	f7ff fc8b 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "R");
 8001232:	4883      	ldr	r0, [pc, #524]	; (8001440 <key_pad+0x8c8>)
 8001234:	f7fe ffec 	bl	8000210 <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b80      	ldr	r3, [pc, #512]	; (8001440 <key_pad+0x8c8>)
 800123e:	4413      	add	r3, r2
 8001240:	4981      	ldr	r1, [pc, #516]	; (8001448 <key_pad+0x8d0>)
 8001242:	461a      	mov	r2, r3
 8001244:	460b      	mov	r3, r1
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800124a:	487d      	ldr	r0, [pc, #500]	; (8001440 <key_pad+0x8c8>)
 800124c:	f7ff fc7c 	bl	8000b48 <updateScreen>
						counter ++;
 8001250:	4b7a      	ldr	r3, [pc, #488]	; (800143c <key_pad+0x8c4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	4a79      	ldr	r2, [pc, #484]	; (800143c <key_pad+0x8c4>)
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e024      	b.n	80012a6 <key_pad+0x72e>
					}
					else if(counter == 3){
 800125c:	4b77      	ldr	r3, [pc, #476]	; (800143c <key_pad+0x8c4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d120      	bne.n	80012a6 <key_pad+0x72e>
						if(strlen(writeString) > 0) {
 8001264:	4b76      	ldr	r3, [pc, #472]	; (8001440 <key_pad+0x8c8>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00a      	beq.n	8001282 <key_pad+0x70a>
							writeString[strlen(writeString) - 1] = '\0';
 800126c:	4874      	ldr	r0, [pc, #464]	; (8001440 <key_pad+0x8c8>)
 800126e:	f7fe ffcf 	bl	8000210 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	3b01      	subs	r3, #1
 8001276:	4a72      	ldr	r2, [pc, #456]	; (8001440 <key_pad+0x8c8>)
 8001278:	2100      	movs	r1, #0
 800127a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800127c:	4870      	ldr	r0, [pc, #448]	; (8001440 <key_pad+0x8c8>)
 800127e:	f7ff fc63 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "S");
 8001282:	486f      	ldr	r0, [pc, #444]	; (8001440 <key_pad+0x8c8>)
 8001284:	f7fe ffc4 	bl	8000210 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b6c      	ldr	r3, [pc, #432]	; (8001440 <key_pad+0x8c8>)
 800128e:	4413      	add	r3, r2
 8001290:	496e      	ldr	r1, [pc, #440]	; (800144c <key_pad+0x8d4>)
 8001292:	461a      	mov	r2, r3
 8001294:	460b      	mov	r3, r1
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800129a:	4869      	ldr	r0, [pc, #420]	; (8001440 <key_pad+0x8c8>)
 800129c:	f7ff fc54 	bl	8000b48 <updateScreen>
						counter = 0;
 80012a0:	4b66      	ldr	r3, [pc, #408]	; (800143c <key_pad+0x8c4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	71fb      	strb	r3, [r7, #7]
					break;
 80012aa:	e175      	b.n	8001598 <key_pad+0xa20>

				case 'T':
					if(counter == 0){
 80012ac:	4b63      	ldr	r3, [pc, #396]	; (800143c <key_pad+0x8c4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d123      	bne.n	80012fc <key_pad+0x784>
						if(strlen(writeString) > 0) {
 80012b4:	4b62      	ldr	r3, [pc, #392]	; (8001440 <key_pad+0x8c8>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00a      	beq.n	80012d2 <key_pad+0x75a>
							writeString[strlen(writeString) - 1] = '\0';
 80012bc:	4860      	ldr	r0, [pc, #384]	; (8001440 <key_pad+0x8c8>)
 80012be:	f7fe ffa7 	bl	8000210 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	3b01      	subs	r3, #1
 80012c6:	4a5e      	ldr	r2, [pc, #376]	; (8001440 <key_pad+0x8c8>)
 80012c8:	2100      	movs	r1, #0
 80012ca:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80012cc:	485c      	ldr	r0, [pc, #368]	; (8001440 <key_pad+0x8c8>)
 80012ce:	f7ff fc3b 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "T");
 80012d2:	485b      	ldr	r0, [pc, #364]	; (8001440 <key_pad+0x8c8>)
 80012d4:	f7fe ff9c 	bl	8000210 <strlen>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b58      	ldr	r3, [pc, #352]	; (8001440 <key_pad+0x8c8>)
 80012de:	4413      	add	r3, r2
 80012e0:	495b      	ldr	r1, [pc, #364]	; (8001450 <key_pad+0x8d8>)
 80012e2:	461a      	mov	r2, r3
 80012e4:	460b      	mov	r3, r1
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80012ea:	4855      	ldr	r0, [pc, #340]	; (8001440 <key_pad+0x8c8>)
 80012ec:	f7ff fc2c 	bl	8000b48 <updateScreen>
						counter ++;
 80012f0:	4b52      	ldr	r3, [pc, #328]	; (800143c <key_pad+0x8c4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	4a51      	ldr	r2, [pc, #324]	; (800143c <key_pad+0x8c4>)
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e04c      	b.n	8001396 <key_pad+0x81e>
					}

					else if(counter == 1){
 80012fc:	4b4f      	ldr	r3, [pc, #316]	; (800143c <key_pad+0x8c4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d123      	bne.n	800134c <key_pad+0x7d4>
						if(strlen(writeString) > 0) {
 8001304:	4b4e      	ldr	r3, [pc, #312]	; (8001440 <key_pad+0x8c8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00a      	beq.n	8001322 <key_pad+0x7aa>
							writeString[strlen(writeString) - 1] = '\0';
 800130c:	484c      	ldr	r0, [pc, #304]	; (8001440 <key_pad+0x8c8>)
 800130e:	f7fe ff7f 	bl	8000210 <strlen>
 8001312:	4603      	mov	r3, r0
 8001314:	3b01      	subs	r3, #1
 8001316:	4a4a      	ldr	r2, [pc, #296]	; (8001440 <key_pad+0x8c8>)
 8001318:	2100      	movs	r1, #0
 800131a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800131c:	4848      	ldr	r0, [pc, #288]	; (8001440 <key_pad+0x8c8>)
 800131e:	f7ff fc13 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "U");
 8001322:	4847      	ldr	r0, [pc, #284]	; (8001440 <key_pad+0x8c8>)
 8001324:	f7fe ff74 	bl	8000210 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b44      	ldr	r3, [pc, #272]	; (8001440 <key_pad+0x8c8>)
 800132e:	4413      	add	r3, r2
 8001330:	4948      	ldr	r1, [pc, #288]	; (8001454 <key_pad+0x8dc>)
 8001332:	461a      	mov	r2, r3
 8001334:	460b      	mov	r3, r1
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800133a:	4841      	ldr	r0, [pc, #260]	; (8001440 <key_pad+0x8c8>)
 800133c:	f7ff fc04 	bl	8000b48 <updateScreen>
						counter ++;
 8001340:	4b3e      	ldr	r3, [pc, #248]	; (800143c <key_pad+0x8c4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a3d      	ldr	r2, [pc, #244]	; (800143c <key_pad+0x8c4>)
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e024      	b.n	8001396 <key_pad+0x81e>
					}

					else if(counter == 2){
 800134c:	4b3b      	ldr	r3, [pc, #236]	; (800143c <key_pad+0x8c4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d120      	bne.n	8001396 <key_pad+0x81e>
						if(strlen(writeString) > 0) {
 8001354:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <key_pad+0x8c8>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00a      	beq.n	8001372 <key_pad+0x7fa>
							writeString[strlen(writeString) - 1] = '\0';
 800135c:	4838      	ldr	r0, [pc, #224]	; (8001440 <key_pad+0x8c8>)
 800135e:	f7fe ff57 	bl	8000210 <strlen>
 8001362:	4603      	mov	r3, r0
 8001364:	3b01      	subs	r3, #1
 8001366:	4a36      	ldr	r2, [pc, #216]	; (8001440 <key_pad+0x8c8>)
 8001368:	2100      	movs	r1, #0
 800136a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800136c:	4834      	ldr	r0, [pc, #208]	; (8001440 <key_pad+0x8c8>)
 800136e:	f7ff fbeb 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "V");
 8001372:	4833      	ldr	r0, [pc, #204]	; (8001440 <key_pad+0x8c8>)
 8001374:	f7fe ff4c 	bl	8000210 <strlen>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	4b30      	ldr	r3, [pc, #192]	; (8001440 <key_pad+0x8c8>)
 800137e:	4413      	add	r3, r2
 8001380:	4935      	ldr	r1, [pc, #212]	; (8001458 <key_pad+0x8e0>)
 8001382:	461a      	mov	r2, r3
 8001384:	460b      	mov	r3, r1
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800138a:	482d      	ldr	r0, [pc, #180]	; (8001440 <key_pad+0x8c8>)
 800138c:	f7ff fbdc 	bl	8000b48 <updateScreen>
						counter = 0;
 8001390:	4b2a      	ldr	r3, [pc, #168]	; (800143c <key_pad+0x8c4>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	71fb      	strb	r3, [r7, #7]
					break;
 800139a:	e0fd      	b.n	8001598 <key_pad+0xa20>

				case 'W':
					if(counter == 0){
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <key_pad+0x8c4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d123      	bne.n	80013ec <key_pad+0x874>
						if(strlen(writeString) > 0) {
 80013a4:	4b26      	ldr	r3, [pc, #152]	; (8001440 <key_pad+0x8c8>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00a      	beq.n	80013c2 <key_pad+0x84a>
							writeString[strlen(writeString) - 1] = '\0';
 80013ac:	4824      	ldr	r0, [pc, #144]	; (8001440 <key_pad+0x8c8>)
 80013ae:	f7fe ff2f 	bl	8000210 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	3b01      	subs	r3, #1
 80013b6:	4a22      	ldr	r2, [pc, #136]	; (8001440 <key_pad+0x8c8>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80013bc:	4820      	ldr	r0, [pc, #128]	; (8001440 <key_pad+0x8c8>)
 80013be:	f7ff fbc3 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "W");
 80013c2:	481f      	ldr	r0, [pc, #124]	; (8001440 <key_pad+0x8c8>)
 80013c4:	f7fe ff24 	bl	8000210 <strlen>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <key_pad+0x8c8>)
 80013ce:	4413      	add	r3, r2
 80013d0:	4922      	ldr	r1, [pc, #136]	; (800145c <key_pad+0x8e4>)
 80013d2:	461a      	mov	r2, r3
 80013d4:	460b      	mov	r3, r1
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80013da:	4819      	ldr	r0, [pc, #100]	; (8001440 <key_pad+0x8c8>)
 80013dc:	f7ff fbb4 	bl	8000b48 <updateScreen>
						counter ++;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <key_pad+0x8c4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	4a15      	ldr	r2, [pc, #84]	; (800143c <key_pad+0x8c4>)
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e088      	b.n	80014fe <key_pad+0x986>
					}

					else if(counter == 1){
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <key_pad+0x8c4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d137      	bne.n	8001464 <key_pad+0x8ec>
						if(strlen(writeString) > 0) {
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <key_pad+0x8c8>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00a      	beq.n	8001412 <key_pad+0x89a>
							writeString[strlen(writeString) - 1] = '\0';
 80013fc:	4810      	ldr	r0, [pc, #64]	; (8001440 <key_pad+0x8c8>)
 80013fe:	f7fe ff07 	bl	8000210 <strlen>
 8001402:	4603      	mov	r3, r0
 8001404:	3b01      	subs	r3, #1
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <key_pad+0x8c8>)
 8001408:	2100      	movs	r1, #0
 800140a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <key_pad+0x8c8>)
 800140e:	f7ff fb9b 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "X");
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <key_pad+0x8c8>)
 8001414:	f7fe fefc 	bl	8000210 <strlen>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <key_pad+0x8c8>)
 800141e:	4413      	add	r3, r2
 8001420:	490f      	ldr	r1, [pc, #60]	; (8001460 <key_pad+0x8e8>)
 8001422:	461a      	mov	r2, r3
 8001424:	460b      	mov	r3, r1
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <key_pad+0x8c8>)
 800142c:	f7ff fb8c 	bl	8000b48 <updateScreen>
						counter ++;
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <key_pad+0x8c4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	4a01      	ldr	r2, [pc, #4]	; (800143c <key_pad+0x8c4>)
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e060      	b.n	80014fe <key_pad+0x986>
 800143c:	2000a0dc 	.word	0x2000a0dc
 8001440:	2000a0a8 	.word	0x2000a0a8
 8001444:	08006e70 	.word	0x08006e70
 8001448:	08006e74 	.word	0x08006e74
 800144c:	08006e78 	.word	0x08006e78
 8001450:	08006e7c 	.word	0x08006e7c
 8001454:	08006e80 	.word	0x08006e80
 8001458:	08006e84 	.word	0x08006e84
 800145c:	08006e88 	.word	0x08006e88
 8001460:	08006e8c 	.word	0x08006e8c
					}

					else if(counter == 2){
 8001464:	4b4e      	ldr	r3, [pc, #312]	; (80015a0 <key_pad+0xa28>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d123      	bne.n	80014b4 <key_pad+0x93c>
						if(strlen(writeString) > 0) {
 800146c:	4b4d      	ldr	r3, [pc, #308]	; (80015a4 <key_pad+0xa2c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00a      	beq.n	800148a <key_pad+0x912>
							writeString[strlen(writeString) - 1] = '\0';
 8001474:	484b      	ldr	r0, [pc, #300]	; (80015a4 <key_pad+0xa2c>)
 8001476:	f7fe fecb 	bl	8000210 <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	3b01      	subs	r3, #1
 800147e:	4a49      	ldr	r2, [pc, #292]	; (80015a4 <key_pad+0xa2c>)
 8001480:	2100      	movs	r1, #0
 8001482:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001484:	4847      	ldr	r0, [pc, #284]	; (80015a4 <key_pad+0xa2c>)
 8001486:	f7ff fb5f 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "Y");
 800148a:	4846      	ldr	r0, [pc, #280]	; (80015a4 <key_pad+0xa2c>)
 800148c:	f7fe fec0 	bl	8000210 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <key_pad+0xa2c>)
 8001496:	4413      	add	r3, r2
 8001498:	4943      	ldr	r1, [pc, #268]	; (80015a8 <key_pad+0xa30>)
 800149a:	461a      	mov	r2, r3
 800149c:	460b      	mov	r3, r1
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80014a2:	4840      	ldr	r0, [pc, #256]	; (80015a4 <key_pad+0xa2c>)
 80014a4:	f7ff fb50 	bl	8000b48 <updateScreen>
						counter ++;
 80014a8:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <key_pad+0xa28>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a3c      	ldr	r2, [pc, #240]	; (80015a0 <key_pad+0xa28>)
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e024      	b.n	80014fe <key_pad+0x986>
					}

					else if(counter == 3){
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <key_pad+0xa28>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d120      	bne.n	80014fe <key_pad+0x986>
						if(strlen(writeString) > 0) {
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <key_pad+0xa2c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00a      	beq.n	80014da <key_pad+0x962>
							writeString[strlen(writeString) - 1] = '\0';
 80014c4:	4837      	ldr	r0, [pc, #220]	; (80015a4 <key_pad+0xa2c>)
 80014c6:	f7fe fea3 	bl	8000210 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	3b01      	subs	r3, #1
 80014ce:	4a35      	ldr	r2, [pc, #212]	; (80015a4 <key_pad+0xa2c>)
 80014d0:	2100      	movs	r1, #0
 80014d2:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80014d4:	4833      	ldr	r0, [pc, #204]	; (80015a4 <key_pad+0xa2c>)
 80014d6:	f7ff fb37 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "Z");
 80014da:	4832      	ldr	r0, [pc, #200]	; (80015a4 <key_pad+0xa2c>)
 80014dc:	f7fe fe98 	bl	8000210 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <key_pad+0xa2c>)
 80014e6:	4413      	add	r3, r2
 80014e8:	4930      	ldr	r1, [pc, #192]	; (80015ac <key_pad+0xa34>)
 80014ea:	461a      	mov	r2, r3
 80014ec:	460b      	mov	r3, r1
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80014f2:	482c      	ldr	r0, [pc, #176]	; (80015a4 <key_pad+0xa2c>)
 80014f4:	f7ff fb28 	bl	8000b48 <updateScreen>
						counter = 0;
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <key_pad+0xa28>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	71fb      	strb	r3, [r7, #7]
					break;
 8001502:	e049      	b.n	8001598 <key_pad+0xa20>

				case '#':
					strcat(writeString, " ");
 8001504:	4827      	ldr	r0, [pc, #156]	; (80015a4 <key_pad+0xa2c>)
 8001506:	f7fe fe83 	bl	8000210 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <key_pad+0xa2c>)
 8001510:	4413      	add	r3, r2
 8001512:	4927      	ldr	r1, [pc, #156]	; (80015b0 <key_pad+0xa38>)
 8001514:	461a      	mov	r2, r3
 8001516:	460b      	mov	r3, r1
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	8013      	strh	r3, [r2, #0]
					writeString[strlen(writeString) + 1] = '\0';
 800151c:	4821      	ldr	r0, [pc, #132]	; (80015a4 <key_pad+0xa2c>)
 800151e:	f7fe fe77 	bl	8000210 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	3301      	adds	r3, #1
 8001526:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <key_pad+0xa2c>)
 8001528:	2100      	movs	r1, #0
 800152a:	54d1      	strb	r1, [r2, r3]
					updateScreen(writeString);
 800152c:	481d      	ldr	r0, [pc, #116]	; (80015a4 <key_pad+0xa2c>)
 800152e:	f7ff fb0b 	bl	8000b48 <updateScreen>
					counter = 0;
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <key_pad+0xa28>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
					keyChar = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	71fb      	strb	r3, [r7, #7]
					pos += 10;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <key_pad+0xa3c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	330a      	adds	r3, #10
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <key_pad+0xa3c>)
 8001544:	6013      	str	r3, [r2, #0]
					break;
 8001546:	e027      	b.n	8001598 <key_pad+0xa20>

				case 'B':
					if(strlen(writeString) > 0) {
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <key_pad+0xa2c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00d      	beq.n	800156c <key_pad+0x9f4>
						writeString[strlen(writeString) - 1] = '\0';
 8001550:	4814      	ldr	r0, [pc, #80]	; (80015a4 <key_pad+0xa2c>)
 8001552:	f7fe fe5d 	bl	8000210 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	3b01      	subs	r3, #1
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <key_pad+0xa2c>)
 800155c:	2100      	movs	r1, #0
 800155e:	54d1      	strb	r1, [r2, r3]
						updateScreen(writeString);
 8001560:	4810      	ldr	r0, [pc, #64]	; (80015a4 <key_pad+0xa2c>)
 8001562:	f7ff faf1 	bl	8000b48 <updateScreen>
						strcat(writeString, "");
						updateScreen(writeString);
 8001566:	480f      	ldr	r0, [pc, #60]	; (80015a4 <key_pad+0xa2c>)
 8001568:	f7ff faee 	bl	8000b48 <updateScreen>
					}
					counter = 0;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <key_pad+0xa28>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
					keyChar = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	71fb      	strb	r3, [r7, #7]
					break;
 8001576:	e00f      	b.n	8001598 <key_pad+0xa20>

				case 'C':
					writeString[0] = '\0';
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <key_pad+0xa2c>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
					updateScreen(writeString);
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <key_pad+0xa2c>)
 8001580:	f7ff fae2 	bl	8000b48 <updateScreen>
					counter = 0;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <key_pad+0xa28>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
					keyChar = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	71fb      	strb	r3, [r7, #7]
					break;
 800158e:	e003      	b.n	8001598 <key_pad+0xa20>

				case '*':
					flag = 1;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <key_pad+0xa40>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

					break;
 8001596:	bf00      	nop
	}
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000a0dc 	.word	0x2000a0dc
 80015a4:	2000a0a8 	.word	0x2000a0a8
 80015a8:	08006e90 	.word	0x08006e90
 80015ac:	08006e94 	.word	0x08006e94
 80015b0:	08006e98 	.word	0x08006e98
 80015b4:	20000008 	.word	0x20000008
 80015b8:	2000b5c1 	.word	0x2000b5c1

080015bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c2:	f000 fdb0 	bl	8002126 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c6:	f000 f857 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ca:	f000 f949 	bl	8001860 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ce:	f000 f929 	bl	8001824 <MX_DMA_Init>
  MX_SPI1_Init();
 80015d2:	f000 f8b9 	bl	8001748 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80015d6:	f000 f8f5 	bl	80017c4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  ILI9163_init(0);
 80015da:	2000      	movs	r0, #0
 80015dc:	f7ff f8ac 	bl	8000738 <ILI9163_init>

  //HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
   //uint8_t dataToSend[] = "How are you?";
   HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
 80015e0:	2201      	movs	r2, #1
 80015e2:	491d      	ldr	r1, [pc, #116]	; (8001658 <main+0x9c>)
 80015e4:	481d      	ldr	r0, [pc, #116]	; (800165c <main+0xa0>)
 80015e6:	f003 fd4e 	bl	8005086 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(keyChar != 0){
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <main+0xa4>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <main+0x46>
		  key_pad(keyChar);
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <main+0xa4>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fabe 	bl	8000b78 <key_pad>
		  keyChar = 0;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <main+0xa4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
	  }
	  if(flag == 1){
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <main+0xa8>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d10d      	bne.n	8001626 <main+0x6a>
		  HAL_UART_Transmit(&huart6, writeString, strlen(writeString), 1000);
 800160a:	4817      	ldr	r0, [pc, #92]	; (8001668 <main+0xac>)
 800160c:	f7fe fe00 	bl	8000210 <strlen>
 8001610:	4603      	mov	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001618:	4913      	ldr	r1, [pc, #76]	; (8001668 <main+0xac>)
 800161a:	4810      	ldr	r0, [pc, #64]	; (800165c <main+0xa0>)
 800161c:	f003 fcb0 	bl	8004f80 <HAL_UART_Transmit>
		  flag = 0;
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <main+0xa8>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
	  }
	  if (messageReady) {
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <main+0xb0>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0dc      	beq.n	80015ea <main+0x2e>
	     // Process the complete message
	     ILI9163_newFrame();
 8001630:	f7ff f96a 	bl	8000908 <ILI9163_newFrame>
	     ILI9163_drawString(5, 5, Font_7x10, BLUE, receivedData);
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <main+0xb4>)
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <main+0xb8>)
 8001638:	9201      	str	r2, [sp, #4]
 800163a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800163e:	9200      	str	r2, [sp, #0]
 8001640:	cb0c      	ldmia	r3, {r2, r3}
 8001642:	2105      	movs	r1, #5
 8001644:	2005      	movs	r0, #5
 8001646:	f7ff fa18 	bl	8000a7a <ILI9163_drawString>
	     ILI9163_render();
 800164a:	f7ff f979 	bl	8000940 <ILI9163_render>

	     messageReady = 0; // Reset the flag
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <main+0xb0>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
	  if(keyChar != 0){
 8001654:	e7c9      	b.n	80015ea <main+0x2e>
 8001656:	bf00      	nop
 8001658:	2000a234 	.word	0x2000a234
 800165c:	2000a1a4 	.word	0x2000a1a4
 8001660:	2000a22e 	.word	0x2000a22e
 8001664:	2000b5c1 	.word	0x2000b5c1
 8001668:	2000a0a8 	.word	0x2000a0a8
 800166c:	2000a22d 	.word	0x2000a22d
 8001670:	20000000 	.word	0x20000000
 8001674:	2000a238 	.word	0x2000a238

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b094      	sub	sp, #80	; 0x50
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	2230      	movs	r2, #48	; 0x30
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f004 ff42 	bl	8006510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800169c:	f001 fce2 	bl	8003064 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	4b27      	ldr	r3, [pc, #156]	; (8001740 <SystemClock_Config+0xc8>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	4a26      	ldr	r2, [pc, #152]	; (8001740 <SystemClock_Config+0xc8>)
 80016a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016aa:	6413      	str	r3, [r2, #64]	; 0x40
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <SystemClock_Config+0xc8>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <SystemClock_Config+0xcc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016c0:	4a20      	ldr	r2, [pc, #128]	; (8001744 <SystemClock_Config+0xcc>)
 80016c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <SystemClock_Config+0xcc>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016de:	2302      	movs	r3, #2
 80016e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016e8:	2304      	movs	r3, #4
 80016ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016ec:	2348      	movs	r3, #72	; 0x48
 80016ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f0:	2302      	movs	r3, #2
 80016f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016f4:	2303      	movs	r3, #3
 80016f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f8:	f107 0320 	add.w	r3, r7, #32
 80016fc:	4618      	mov	r0, r3
 80016fe:	f001 fcc1 	bl	8003084 <HAL_RCC_OscConfig>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001708:	f000 f9d8 	bl	8001abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170c:	230f      	movs	r3, #15
 800170e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001710:	2302      	movs	r3, #2
 8001712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	2102      	movs	r1, #2
 8001728:	4618      	mov	r0, r3
 800172a:	f001 ff4f 	bl	80035cc <HAL_RCC_ClockConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001734:	f000 f9c2 	bl	8001abc <Error_Handler>
  }
}
 8001738:	bf00      	nop
 800173a:	3750      	adds	r7, #80	; 0x50
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40023800 	.word	0x40023800
 8001744:	40007000 	.word	0x40007000

08001748 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MX_SPI1_Init+0x74>)
 800174e:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <MX_SPI1_Init+0x78>)
 8001750:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_SPI1_Init+0x74>)
 8001754:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001758:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <MX_SPI1_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_SPI1_Init+0x74>)
 8001762:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001766:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_SPI1_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <MX_SPI1_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_SPI1_Init+0x74>)
 8001776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_SPI1_Init+0x74>)
 800177e:	2208      	movs	r2, #8
 8001780:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_SPI1_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_SPI1_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_SPI1_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_SPI1_Init+0x74>)
 8001796:	2207      	movs	r2, #7
 8001798:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_SPI1_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_SPI1_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_SPI1_Init+0x74>)
 80017a8:	f002 fd26 	bl	80041f8 <HAL_SPI_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017b2:	f000 f983 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000a0e0 	.word	0x2000a0e0
 80017c0:	40013000 	.word	0x40013000

080017c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_USART6_UART_Init+0x58>)
 80017ca:	4a15      	ldr	r2, [pc, #84]	; (8001820 <MX_USART6_UART_Init+0x5c>)
 80017cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <MX_USART6_UART_Init+0x58>)
 80017d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_USART6_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_USART6_UART_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_USART6_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_USART6_UART_Init+0x58>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_USART6_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_USART6_UART_Init+0x58>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_USART6_UART_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_USART6_UART_Init+0x58>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_USART6_UART_Init+0x58>)
 8001808:	f003 fb6c 	bl	8004ee4 <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001812:	f000 f953 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000a1a4 	.word	0x2000a1a4
 8001820:	40011400 	.word	0x40011400

08001824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_DMA_Init+0x38>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <MX_DMA_Init+0x38>)
 8001830:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_DMA_Init+0x38>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	203b      	movs	r0, #59	; 0x3b
 8001848:	f000 fdc9 	bl	80023de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800184c:	203b      	movs	r0, #59	; 0x3b
 800184e:	f000 fde2 	bl	8002416 <HAL_NVIC_EnableIRQ>

}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800

08001860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001876:	4b5e      	ldr	r3, [pc, #376]	; (80019f0 <MX_GPIO_Init+0x190>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a5d      	ldr	r2, [pc, #372]	; (80019f0 <MX_GPIO_Init+0x190>)
 800187c:	f043 0310 	orr.w	r3, r3, #16
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b5b      	ldr	r3, [pc, #364]	; (80019f0 <MX_GPIO_Init+0x190>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	4b58      	ldr	r3, [pc, #352]	; (80019f0 <MX_GPIO_Init+0x190>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a57      	ldr	r2, [pc, #348]	; (80019f0 <MX_GPIO_Init+0x190>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b55      	ldr	r3, [pc, #340]	; (80019f0 <MX_GPIO_Init+0x190>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a6:	4b52      	ldr	r3, [pc, #328]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a51      	ldr	r2, [pc, #324]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b4f      	ldr	r3, [pc, #316]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a4b      	ldr	r2, [pc, #300]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a45      	ldr	r2, [pc, #276]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ee:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a3f      	ldr	r2, [pc, #252]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13
 8001906:	2200      	movs	r2, #0
 8001908:	f64a 3103 	movw	r1, #43779	; 0xab03
 800190c:	4839      	ldr	r0, [pc, #228]	; (80019f4 <MX_GPIO_Init+0x194>)
 800190e:	f001 fb6b 	bl	8002fe8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001912:	2320      	movs	r3, #32
 8001914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001916:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800191a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191c:	2301      	movs	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	4834      	ldr	r0, [pc, #208]	; (80019f8 <MX_GPIO_Init+0x198>)
 8001928:	f001 f99a 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 800192c:	f240 3301 	movw	r3, #769	; 0x301
 8001930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	4619      	mov	r1, r3
 8001944:	482b      	ldr	r0, [pc, #172]	; (80019f4 <MX_GPIO_Init+0x194>)
 8001946:	f001 f98b 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB11 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 800194a:	f64a 0302 	movw	r3, #43010	; 0xa802
 800194e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001954:	2302      	movs	r3, #2
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	4824      	ldr	r0, [pc, #144]	; (80019f4 <MX_GPIO_Init+0x194>)
 8001964:	f001 f97c 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ble_state_Pin */
  GPIO_InitStruct.Pin = ble_state_Pin;
 8001968:	2301      	movs	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ble_state_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	4619      	mov	r1, r3
 800197a:	4820      	ldr	r0, [pc, #128]	; (80019fc <MX_GPIO_Init+0x19c>)
 800197c:	f001 f970 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001980:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001986:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800198a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800198c:	2301      	movs	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	4619      	mov	r1, r3
 8001996:	481a      	ldr	r0, [pc, #104]	; (8001a00 <MX_GPIO_Init+0x1a0>)
 8001998:	f001 f962 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800199c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019ae:	230a      	movs	r3, #10
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	4812      	ldr	r0, [pc, #72]	; (8001a04 <MX_GPIO_Init+0x1a4>)
 80019ba:	f001 f951 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	480c      	ldr	r0, [pc, #48]	; (8001a04 <MX_GPIO_Init+0x1a4>)
 80019d4:	f001 f944 	bl	8002c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	2017      	movs	r0, #23
 80019de:	f000 fcfe 	bl	80023de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019e2:	2017      	movs	r0, #23
 80019e4:	f000 fd17 	bl	8002416 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019e8:	bf00      	nop
 80019ea:	3730      	adds	r7, #48	; 0x30
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020400 	.word	0x40020400
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40021800 	.word	0x40021800
 8001a00:	40020800 	.word	0x40020800
 8001a04:	40020000 	.word	0x40020000

08001a08 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) // Your TxCpltCallback
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	SPI_DMA_CNT--;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_SPI_TxCpltCallback+0x34>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_SPI_TxCpltCallback+0x34>)
 8001a18:	6013      	str	r3, [r2, #0]
	if(SPI_DMA_CNT==0)
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_SPI_TxCpltCallback+0x34>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d108      	bne.n	8001a34 <HAL_SPI_TxCpltCallback+0x2c>
	{
		HAL_SPI_DMAStop(&hspi1);
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <HAL_SPI_TxCpltCallback+0x38>)
 8001a24:	f002 fef6 	bl	8004814 <HAL_SPI_DMAStop>
		SPI_DMA_CNT=1;
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <HAL_SPI_TxCpltCallback+0x34>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
		SPI_DMA_FL=1;
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_SPI_TxCpltCallback+0x3c>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
	}
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	2000a0e0 	.word	0x2000a0e0
 8001a44:	2000a22c 	.word	0x2000a22c

08001a48 <HAL_UART_RxCpltCallback>:
	HAL_UART_Transmit(huart, data, size, 1000); // 1000 is timeout duration
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <HAL_UART_RxCpltCallback+0x5c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d120      	bne.n	8001a9c <HAL_UART_RxCpltCallback+0x54>
    if (receiveBuffer[0] != '\n' && receivedDataIndex < sizeof(receivedData) - 1) {
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_UART_RxCpltCallback+0x60>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b0a      	cmp	r3, #10
 8001a60:	d00b      	beq.n	8001a7a <HAL_UART_RxCpltCallback+0x32>
      receivedData[receivedDataIndex++] = receiveBuffer[0];
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_UART_RxCpltCallback+0x64>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	b2d1      	uxtb	r1, r2
 8001a6a:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_UART_RxCpltCallback+0x64>)
 8001a6c:	7011      	strb	r1, [r2, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_UART_RxCpltCallback+0x60>)
 8001a72:	7819      	ldrb	r1, [r3, #0]
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_UART_RxCpltCallback+0x68>)
 8001a76:	5499      	strb	r1, [r3, r2]
 8001a78:	e00b      	b.n	8001a92 <HAL_UART_RxCpltCallback+0x4a>
    } else {
      receivedData[receivedDataIndex] = '\0'; // Null-terminate
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_UART_RxCpltCallback+0x64>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_UART_RxCpltCallback+0x68>)
 8001a82:	2100      	movs	r1, #0
 8001a84:	5499      	strb	r1, [r3, r2]
      messageReady = 1; // Set the flag
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_UART_RxCpltCallback+0x6c>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
      receivedDataIndex = 0;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_UART_RxCpltCallback+0x64>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
      //memset(receivedData, 0, sizeof(receivedData));
    }
    HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
 8001a92:	2201      	movs	r2, #1
 8001a94:	4904      	ldr	r1, [pc, #16]	; (8001aa8 <HAL_UART_RxCpltCallback+0x60>)
 8001a96:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <HAL_UART_RxCpltCallback+0x70>)
 8001a98:	f003 faf5 	bl	8005086 <HAL_UART_Receive_IT>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40011400 	.word	0x40011400
 8001aa8:	2000a234 	.word	0x2000a234
 8001aac:	2000b5c0 	.word	0x2000b5c0
 8001ab0:	2000a238 	.word	0x2000a238
 8001ab4:	2000a22d 	.word	0x2000a22d
 8001ab8:	2000a1a4 	.word	0x2000a1a4

08001abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac0:	b672      	cpsid	i
}
 8001ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <Error_Handler+0x8>
	...

08001ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_MspInit+0x44>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <HAL_MspInit+0x44>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_MspInit+0x44>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_MspInit+0x44>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	4a08      	ldr	r2, [pc, #32]	; (8001b0c <HAL_MspInit+0x44>)
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af0:	6453      	str	r3, [r2, #68]	; 0x44
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_MspInit+0x44>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800

08001b10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a37      	ldr	r2, [pc, #220]	; (8001c0c <HAL_SPI_MspInit+0xfc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d168      	bne.n	8001c04 <HAL_SPI_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b32:	4b37      	ldr	r3, [pc, #220]	; (8001c10 <HAL_SPI_MspInit+0x100>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	4a36      	ldr	r2, [pc, #216]	; (8001c10 <HAL_SPI_MspInit+0x100>)
 8001b38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3e:	4b34      	ldr	r3, [pc, #208]	; (8001c10 <HAL_SPI_MspInit+0x100>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <HAL_SPI_MspInit+0x100>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a30      	ldr	r2, [pc, #192]	; (8001c10 <HAL_SPI_MspInit+0x100>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <HAL_SPI_MspInit+0x100>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b62:	23e0      	movs	r3, #224	; 0xe0
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b72:	2305      	movs	r3, #5
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4825      	ldr	r0, [pc, #148]	; (8001c14 <HAL_SPI_MspInit+0x104>)
 8001b7e:	f001 f86f 	bl	8002c60 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001b84:	4a25      	ldr	r2, [pc, #148]	; (8001c1c <HAL_SPI_MspInit+0x10c>)
 8001b86:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001b88:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001b8a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001b8e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b90:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001b92:	2240      	movs	r2, #64	; 0x40
 8001b94:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001ba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001baa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001bd8:	480f      	ldr	r0, [pc, #60]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001bda:	f000 fc37 	bl	800244c <HAL_DMA_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_SPI_MspInit+0xd8>
    {
      Error_Handler();
 8001be4:	f7ff ff6a 	bl	8001abc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_SPI_MspInit+0x108>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2023      	movs	r0, #35	; 0x23
 8001bfa:	f000 fbf0 	bl	80023de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001bfe:	2023      	movs	r0, #35	; 0x23
 8001c00:	f000 fc09 	bl	8002416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40013000 	.word	0x40013000
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020000 	.word	0x40020000
 8001c18:	2000a144 	.word	0x2000a144
 8001c1c:	40026458 	.word	0x40026458

08001c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0aa      	sub	sp, #168	; 0xa8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	2284      	movs	r2, #132	; 0x84
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f004 fc65 	bl	8006510 <memset>
  if(huart->Instance==USART6)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_UART_MspInit+0xc4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d144      	bne.n	8001cda <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c54:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001c56:	2300      	movs	r3, #0
 8001c58:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5a:	f107 0310 	add.w	r3, r7, #16
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 feda 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c6a:	f7ff ff27 	bl	8001abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_UART_MspInit+0xc8>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <HAL_UART_MspInit+0xc8>)
 8001c74:	f043 0320 	orr.w	r3, r3, #32
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_UART_MspInit+0xc8>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_UART_MspInit+0xc8>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <HAL_UART_MspInit+0xc8>)
 8001c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_UART_MspInit+0xc8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001c9e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cbe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4809      	ldr	r0, [pc, #36]	; (8001cec <HAL_UART_MspInit+0xcc>)
 8001cc6:	f000 ffcb 	bl	8002c60 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2047      	movs	r0, #71	; 0x47
 8001cd0:	f000 fb85 	bl	80023de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001cd4:	2047      	movs	r0, #71	; 0x47
 8001cd6:	f000 fb9e 	bl	8002416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001cda:	bf00      	nop
 8001cdc:	37a8      	adds	r7, #168	; 0xa8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40011400 	.word	0x40011400
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40021800 	.word	0x40021800

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <HardFault_Handler+0x4>

08001d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <MemManage_Handler+0x4>

08001d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d44:	f000 fa2c 	bl	80021a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

		key = 0;
 8001d52:	4b51      	ldr	r3, [pc, #324]	; (8001e98 <EXTI9_5_IRQHandler+0x14c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	801a      	strh	r2, [r3, #0]
		for(uint8_t c=0 ; c<4 ; c++){
 8001d58:	2300      	movs	r3, #0
 8001d5a:	71fb      	strb	r3, [r7, #7]
 8001d5c:	e075      	b.n	8001e4a <EXTI9_5_IRQHandler+0xfe>
			for(uint8_t i=0 ; i<4 ; i++){
 8001d5e:	2300      	movs	r3, #0
 8001d60:	71bb      	strb	r3, [r7, #6]
 8001d62:	e00e      	b.n	8001d82 <EXTI9_5_IRQHandler+0x36>
				HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	4a4d      	ldr	r2, [pc, #308]	; (8001e9c <EXTI9_5_IRQHandler+0x150>)
 8001d68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d6c:	79bb      	ldrb	r3, [r7, #6]
 8001d6e:	4a4c      	ldr	r2, [pc, #304]	; (8001ea0 <EXTI9_5_IRQHandler+0x154>)
 8001d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d74:	2201      	movs	r2, #1
 8001d76:	4619      	mov	r1, r3
 8001d78:	f001 f936 	bl	8002fe8 <HAL_GPIO_WritePin>
			for(uint8_t i=0 ; i<4 ; i++){
 8001d7c:	79bb      	ldrb	r3, [r7, #6]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	71bb      	strb	r3, [r7, #6]
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d9ed      	bls.n	8001d64 <EXTI9_5_IRQHandler+0x18>
			}
			HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	4a44      	ldr	r2, [pc, #272]	; (8001e9c <EXTI9_5_IRQHandler+0x150>)
 8001d8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	4a43      	ldr	r2, [pc, #268]	; (8001ea0 <EXTI9_5_IRQHandler+0x154>)
 8001d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f001 f924 	bl	8002fe8 <HAL_GPIO_WritePin>
			for(uint8_t r=0 ; r<4 ; r++){
 8001da0:	2300      	movs	r3, #0
 8001da2:	717b      	strb	r3, [r7, #5]
 8001da4:	e04b      	b.n	8001e3e <EXTI9_5_IRQHandler+0xf2>
				if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8001da6:	797b      	ldrb	r3, [r7, #5]
 8001da8:	4a3e      	ldr	r2, [pc, #248]	; (8001ea4 <EXTI9_5_IRQHandler+0x158>)
 8001daa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dae:	797b      	ldrb	r3, [r7, #5]
 8001db0:	493d      	ldr	r1, [pc, #244]	; (8001ea8 <EXTI9_5_IRQHandler+0x15c>)
 8001db2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001db6:	4619      	mov	r1, r3
 8001db8:	4610      	mov	r0, r2
 8001dba:	f001 f8fd 	bl	8002fb8 <HAL_GPIO_ReadPin>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d139      	bne.n	8001e38 <EXTI9_5_IRQHandler+0xec>
					if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8001dc4:	797b      	ldrb	r3, [r7, #5]
 8001dc6:	4a37      	ldr	r2, [pc, #220]	; (8001ea4 <EXTI9_5_IRQHandler+0x158>)
 8001dc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dcc:	797b      	ldrb	r3, [r7, #5]
 8001dce:	4936      	ldr	r1, [pc, #216]	; (8001ea8 <EXTI9_5_IRQHandler+0x15c>)
 8001dd0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f001 f8ee 	bl	8002fb8 <HAL_GPIO_ReadPin>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d12a      	bne.n	8001e38 <EXTI9_5_IRQHandler+0xec>
						key |= 1<<c;
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2201      	movs	r2, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <EXTI9_5_IRQHandler+0x14c>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	4313      	orrs	r3, r2
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <EXTI9_5_IRQHandler+0x14c>)
 8001dfa:	801a      	strh	r2, [r3, #0]
						key |= 1<<(r+8);
 8001dfc:	797b      	ldrb	r3, [r7, #5]
 8001dfe:	3308      	adds	r3, #8
 8001e00:	2201      	movs	r2, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <EXTI9_5_IRQHandler+0x14c>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <EXTI9_5_IRQHandler+0x14c>)
 8001e16:	801a      	strh	r2, [r3, #0]
						while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8001e18:	bf00      	nop
 8001e1a:	797b      	ldrb	r3, [r7, #5]
 8001e1c:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <EXTI9_5_IRQHandler+0x158>)
 8001e1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e22:	797b      	ldrb	r3, [r7, #5]
 8001e24:	4920      	ldr	r1, [pc, #128]	; (8001ea8 <EXTI9_5_IRQHandler+0x15c>)
 8001e26:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	f001 f8c3 	bl	8002fb8 <HAL_GPIO_ReadPin>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <EXTI9_5_IRQHandler+0xce>
			for(uint8_t r=0 ; r<4 ; r++){
 8001e38:	797b      	ldrb	r3, [r7, #5]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	717b      	strb	r3, [r7, #5]
 8001e3e:	797b      	ldrb	r3, [r7, #5]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d9b0      	bls.n	8001da6 <EXTI9_5_IRQHandler+0x5a>
		for(uint8_t c=0 ; c<4 ; c++){
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	3301      	adds	r3, #1
 8001e48:	71fb      	strb	r3, [r7, #7]
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d986      	bls.n	8001d5e <EXTI9_5_IRQHandler+0x12>
					}
				}
			}
		}

		keyChar = KeyPadGetChar(key);
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <EXTI9_5_IRQHandler+0x14c>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 f84b 	bl	8001ef0 <KeyPadGetChar>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <EXTI9_5_IRQHandler+0x160>)
 8001e60:	701a      	strb	r2, [r3, #0]
		key = 0;
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <EXTI9_5_IRQHandler+0x14c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f64a 0102 	movw	r1, #43010	; 0xa802
 8001e6e:	4810      	ldr	r0, [pc, #64]	; (8001eb0 <EXTI9_5_IRQHandler+0x164>)
 8001e70:	f001 f8ba 	bl	8002fe8 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001e74:	2020      	movs	r0, #32
 8001e76:	f001 f8d1 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001e7a:	2040      	movs	r0, #64	; 0x40
 8001e7c:	f001 f8ce 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001e80:	2080      	movs	r0, #128	; 0x80
 8001e82:	f001 f8cb 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001e86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e8a:	f001 f8c7 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000a230 	.word	0x2000a230
 8001e9c:	20000010 	.word	0x20000010
 8001ea0:	08007608 	.word	0x08007608
 8001ea4:	20000020 	.word	0x20000020
 8001ea8:	08007610 	.word	0x08007610
 8001eac:	2000a22e 	.word	0x2000a22e
 8001eb0:	40020400 	.word	0x40020400

08001eb4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <SPI1_IRQHandler+0x10>)
 8001eba:	f002 fceb 	bl	8004894 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000a0e0 	.word	0x2000a0e0

08001ec8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <DMA2_Stream3_IRQHandler+0x10>)
 8001ece:	f000 fc5d 	bl	800278c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000a144 	.word	0x2000a144

08001edc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <USART6_IRQHandler+0x10>)
 8001ee2:	f003 f915 	bl	8005110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000a1a4 	.word	0x2000a1a4

08001ef0 <KeyPadGetChar>:

/* USER CODE BEGIN 1 */
char KeyPadGetChar(uint16_t	key)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]
	switch(key)
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	f640 0208 	movw	r2, #2056	; 0x808
 8001f00:	4293      	cmp	r3, r2
 8001f02:	f300 8098 	bgt.w	8002036 <KeyPadGetChar+0x146>
 8001f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f0a:	dc0d      	bgt.n	8001f28 <KeyPadGetChar+0x38>
 8001f0c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8001f10:	f300 8091 	bgt.w	8002036 <KeyPadGetChar+0x146>
 8001f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f18:	dc1e      	bgt.n	8001f58 <KeyPadGetChar+0x68>
 8001f1a:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8001f1e:	dc63      	bgt.n	8001fe8 <KeyPadGetChar+0xf8>
 8001f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f24:	dc48      	bgt.n	8001fb8 <KeyPadGetChar+0xc8>
 8001f26:	e086      	b.n	8002036 <KeyPadGetChar+0x146>
 8001f28:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 8001f2c:	2b07      	cmp	r3, #7
 8001f2e:	f200 8082 	bhi.w	8002036 <KeyPadGetChar+0x146>
 8001f32:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <KeyPadGetChar+0x48>)
 8001f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f38:	0800201f 	.word	0x0800201f
 8001f3c:	08002023 	.word	0x08002023
 8001f40:	08002037 	.word	0x08002037
 8001f44:	08002027 	.word	0x08002027
 8001f48:	08002037 	.word	0x08002037
 8001f4c:	08002037 	.word	0x08002037
 8001f50:	08002037 	.word	0x08002037
 8001f54:	0800202b 	.word	0x0800202b
 8001f58:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8001f5c:	2b07      	cmp	r3, #7
 8001f5e:	d86a      	bhi.n	8002036 <KeyPadGetChar+0x146>
 8001f60:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <KeyPadGetChar+0x78>)
 8001f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f66:	bf00      	nop
 8001f68:	08001fff 	.word	0x08001fff
 8001f6c:	0800200b 	.word	0x0800200b
 8001f70:	08002037 	.word	0x08002037
 8001f74:	08002017 	.word	0x08002017
 8001f78:	08002037 	.word	0x08002037
 8001f7c:	08002037 	.word	0x08002037
 8001f80:	08002037 	.word	0x08002037
 8001f84:	08002033 	.word	0x08002033
 8001f88:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001f8c:	2b07      	cmp	r3, #7
 8001f8e:	d852      	bhi.n	8002036 <KeyPadGetChar+0x146>
 8001f90:	a201      	add	r2, pc, #4	; (adr r2, 8001f98 <KeyPadGetChar+0xa8>)
 8001f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f96:	bf00      	nop
 8001f98:	08001ffb 	.word	0x08001ffb
 8001f9c:	08002007 	.word	0x08002007
 8001fa0:	08002037 	.word	0x08002037
 8001fa4:	08002013 	.word	0x08002013
 8001fa8:	08002037 	.word	0x08002037
 8001fac:	08002037 	.word	0x08002037
 8001fb0:	08002037 	.word	0x08002037
 8001fb4:	0800201b 	.word	0x0800201b
 8001fb8:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8001fbc:	2b07      	cmp	r3, #7
 8001fbe:	d83a      	bhi.n	8002036 <KeyPadGetChar+0x146>
 8001fc0:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <KeyPadGetChar+0xd8>)
 8001fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc6:	bf00      	nop
 8001fc8:	08001ff7 	.word	0x08001ff7
 8001fcc:	08002003 	.word	0x08002003
 8001fd0:	08002037 	.word	0x08002037
 8001fd4:	0800200f 	.word	0x0800200f
 8001fd8:	08002037 	.word	0x08002037
 8001fdc:	08002037 	.word	0x08002037
 8001fe0:	08002037 	.word	0x08002037
 8001fe4:	0800202f 	.word	0x0800202f
 8001fe8:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8001fec:	dc23      	bgt.n	8002036 <KeyPadGetChar+0x146>
 8001fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff2:	dcc9      	bgt.n	8001f88 <KeyPadGetChar+0x98>
 8001ff4:	e01f      	b.n	8002036 <KeyPadGetChar+0x146>
	  {
			case 0x0101:
				return '1';
 8001ff6:	2331      	movs	r3, #49	; 0x31
 8001ff8:	e01d      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0201:
				return 'A';
 8001ffa:	2341      	movs	r3, #65	; 0x41
 8001ffc:	e01b      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0401:
				return 'D';
 8001ffe:	2344      	movs	r3, #68	; 0x44
 8002000:	e019      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0102:
				return 'G';
 8002002:	2347      	movs	r3, #71	; 0x47
 8002004:	e017      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0202:
				return 'J';
 8002006:	234a      	movs	r3, #74	; 0x4a
 8002008:	e015      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0402:
				return 'M';
 800200a:	234d      	movs	r3, #77	; 0x4d
 800200c:	e013      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0104:
				return 'P';
 800200e:	2350      	movs	r3, #80	; 0x50
 8002010:	e011      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0204:
				return 'T';
 8002012:	2354      	movs	r3, #84	; 0x54
 8002014:	e00f      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0404:
				return 'W';
 8002016:	2357      	movs	r3, #87	; 0x57
 8002018:	e00d      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0208:
				return 'O';
 800201a:	234f      	movs	r3, #79	; 0x4f
 800201c:	e00b      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0801:
					return 'A';
 800201e:	2341      	movs	r3, #65	; 0x41
 8002020:	e009      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0802:
					return 'B';
 8002022:	2342      	movs	r3, #66	; 0x42
 8002024:	e007      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0804:
					return 'C';
 8002026:	2343      	movs	r3, #67	; 0x43
 8002028:	e005      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0808:
					return 'D';
 800202a:	2344      	movs	r3, #68	; 0x44
 800202c:	e003      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0108:
					return '*';
 800202e:	232a      	movs	r3, #42	; 0x2a
 8002030:	e001      	b.n	8002036 <KeyPadGetChar+0x146>

			case 0x0408:
				return '#';
 8002032:	2323      	movs	r3, #35	; 0x23
 8002034:	e7ff      	b.n	8002036 <KeyPadGetChar+0x146>
		}
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop

08002044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <_sbrk+0x5c>)
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <_sbrk+0x60>)
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <_sbrk+0x64>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d102      	bne.n	8002066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <_sbrk+0x64>)
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <_sbrk+0x68>)
 8002064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <_sbrk+0x64>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	429a      	cmp	r2, r3
 8002072:	d207      	bcs.n	8002084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002074:	f004 fa54 	bl	8006520 <__errno>
 8002078:	4603      	mov	r3, r0
 800207a:	220c      	movs	r2, #12
 800207c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
 8002082:	e009      	b.n	8002098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <_sbrk+0x64>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <_sbrk+0x64>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <_sbrk+0x64>)
 8002094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002096:	68fb      	ldr	r3, [r7, #12]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20050000 	.word	0x20050000
 80020a4:	00000400 	.word	0x00000400
 80020a8:	2000b5c4 	.word	0x2000b5c4
 80020ac:	2000b718 	.word	0x2000b718

080020b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <SystemInit+0x20>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <SystemInit+0x20>)
 80020bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800210c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d8:	480d      	ldr	r0, [pc, #52]	; (8002110 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020da:	490e      	ldr	r1, [pc, #56]	; (8002114 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020dc:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e0:	e002      	b.n	80020e8 <LoopCopyDataInit>

080020e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e6:	3304      	adds	r3, #4

080020e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ec:	d3f9      	bcc.n	80020e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ee:	4a0b      	ldr	r2, [pc, #44]	; (800211c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020f0:	4c0b      	ldr	r4, [pc, #44]	; (8002120 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f4:	e001      	b.n	80020fa <LoopFillZerobss>

080020f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f8:	3204      	adds	r2, #4

080020fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020fc:	d3fb      	bcc.n	80020f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020fe:	f7ff ffd7 	bl	80020b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002102:	f004 fa13 	bl	800652c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002106:	f7ff fa59 	bl	80015bc <main>
  bx  lr    
 800210a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800210c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002114:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002118:	0800767c 	.word	0x0800767c
  ldr r2, =_sbss
 800211c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002120:	2000b714 	.word	0x2000b714

08002124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002124:	e7fe      	b.n	8002124 <ADC_IRQHandler>

08002126 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800212a:	2003      	movs	r0, #3
 800212c:	f000 f94c 	bl	80023c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002130:	2000      	movs	r0, #0
 8002132:	f000 f805 	bl	8002140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002136:	f7ff fcc7 	bl	8001ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_InitTick+0x54>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_InitTick+0x58>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002156:	fbb3 f3f1 	udiv	r3, r3, r1
 800215a:	fbb2 f3f3 	udiv	r3, r2, r3
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f967 	bl	8002432 <HAL_SYSTICK_Config>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e00e      	b.n	800218c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b0f      	cmp	r3, #15
 8002172:	d80a      	bhi.n	800218a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002174:	2200      	movs	r2, #0
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f000 f92f 	bl	80023de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002180:	4a06      	ldr	r2, [pc, #24]	; (800219c <HAL_InitTick+0x5c>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	e000      	b.n	800218c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000030 	.word	0x20000030
 8002198:	20000038 	.word	0x20000038
 800219c:	20000034 	.word	0x20000034

080021a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_IncTick+0x20>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_IncTick+0x24>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_IncTick+0x24>)
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000038 	.word	0x20000038
 80021c4:	2000b5c8 	.word	0x2000b5c8

080021c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return uwTick;
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <HAL_GetTick+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	2000b5c8 	.word	0x2000b5c8

080021e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff ffee 	bl	80021c8 <HAL_GetTick>
 80021ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d005      	beq.n	8002206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_Delay+0x44>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002206:	bf00      	nop
 8002208:	f7ff ffde 	bl	80021c8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d8f7      	bhi.n	8002208 <HAL_Delay+0x28>
  {
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000038 	.word	0x20000038

08002228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <__NVIC_SetPriorityGrouping+0x40>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002244:	4013      	ands	r3, r2
 8002246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <__NVIC_SetPriorityGrouping+0x44>)
 8002252:	4313      	orrs	r3, r2
 8002254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002256:	4a04      	ldr	r2, [pc, #16]	; (8002268 <__NVIC_SetPriorityGrouping+0x40>)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	60d3      	str	r3, [r2, #12]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00
 800226c:	05fa0000 	.word	0x05fa0000

08002270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <__NVIC_GetPriorityGrouping+0x18>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	f003 0307 	and.w	r3, r3, #7
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	2b00      	cmp	r3, #0
 800229c:	db0b      	blt.n	80022b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4907      	ldr	r1, [pc, #28]	; (80022c4 <__NVIC_EnableIRQ+0x38>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2001      	movs	r0, #1
 80022ae:	fa00 f202 	lsl.w	r2, r0, r2
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000e100 	.word	0xe000e100

080022c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	6039      	str	r1, [r7, #0]
 80022d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	db0a      	blt.n	80022f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	490c      	ldr	r1, [pc, #48]	; (8002314 <__NVIC_SetPriority+0x4c>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	0112      	lsls	r2, r2, #4
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	440b      	add	r3, r1
 80022ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f0:	e00a      	b.n	8002308 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4908      	ldr	r1, [pc, #32]	; (8002318 <__NVIC_SetPriority+0x50>)
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	3b04      	subs	r3, #4
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	440b      	add	r3, r1
 8002306:	761a      	strb	r2, [r3, #24]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000e100 	.word	0xe000e100
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f1c3 0307 	rsb	r3, r3, #7
 8002336:	2b04      	cmp	r3, #4
 8002338:	bf28      	it	cs
 800233a:	2304      	movcs	r3, #4
 800233c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3304      	adds	r3, #4
 8002342:	2b06      	cmp	r3, #6
 8002344:	d902      	bls.n	800234c <NVIC_EncodePriority+0x30>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3b03      	subs	r3, #3
 800234a:	e000      	b.n	800234e <NVIC_EncodePriority+0x32>
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	f04f 32ff 	mov.w	r2, #4294967295
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	401a      	ands	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002364:	f04f 31ff 	mov.w	r1, #4294967295
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	43d9      	mvns	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	4313      	orrs	r3, r2
         );
}
 8002376:	4618      	mov	r0, r3
 8002378:	3724      	adds	r7, #36	; 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002394:	d301      	bcc.n	800239a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002396:	2301      	movs	r3, #1
 8002398:	e00f      	b.n	80023ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <SysTick_Config+0x40>)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a2:	210f      	movs	r1, #15
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295
 80023a8:	f7ff ff8e 	bl	80022c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <SysTick_Config+0x40>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b2:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <SysTick_Config+0x40>)
 80023b4:	2207      	movs	r2, #7
 80023b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	e000e010 	.word	0xe000e010

080023c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ff29 	bl	8002228 <__NVIC_SetPriorityGrouping>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f0:	f7ff ff3e 	bl	8002270 <__NVIC_GetPriorityGrouping>
 80023f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	6978      	ldr	r0, [r7, #20]
 80023fc:	f7ff ff8e 	bl	800231c <NVIC_EncodePriority>
 8002400:	4602      	mov	r2, r0
 8002402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff5d 	bl	80022c8 <__NVIC_SetPriority>
}
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff31 	bl	800228c <__NVIC_EnableIRQ>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff ffa2 	bl	8002384 <SysTick_Config>
 8002440:	4603      	mov	r3, r0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002458:	f7ff feb6 	bl	80021c8 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e099      	b.n	800259c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002488:	e00f      	b.n	80024aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800248a:	f7ff fe9d 	bl	80021c8 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b05      	cmp	r3, #5
 8002496:	d908      	bls.n	80024aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2203      	movs	r2, #3
 80024a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e078      	b.n	800259c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1e8      	bne.n	800248a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <HAL_DMA_Init+0x158>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2b04      	cmp	r3, #4
 8002502:	d107      	bne.n	8002514 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	4313      	orrs	r3, r2
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f023 0307 	bic.w	r3, r3, #7
 800252a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	4313      	orrs	r3, r2
 8002534:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	2b04      	cmp	r3, #4
 800253c:	d117      	bne.n	800256e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00e      	beq.n	800256e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fb09 	bl	8002b68 <DMA_CheckFifoParam>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2240      	movs	r2, #64	; 0x40
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800256a:	2301      	movs	r3, #1
 800256c:	e016      	b.n	800259c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fac0 	bl	8002afc <DMA_CalcBaseAndBitshift>
 800257c:	4603      	mov	r3, r0
 800257e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	223f      	movs	r2, #63	; 0x3f
 8002586:	409a      	lsls	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	f010803f 	.word	0xf010803f

080025a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_DMA_Start_IT+0x26>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e048      	b.n	8002660 <HAL_DMA_Start_IT+0xb8>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d137      	bne.n	8002652 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fa52 	bl	8002aa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	223f      	movs	r2, #63	; 0x3f
 8002602:	409a      	lsls	r2, r3
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0216 	orr.w	r2, r2, #22
 8002616:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002626:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0208 	orr.w	r2, r2, #8
 800263e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e005      	b.n	800265e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800265a:	2302      	movs	r3, #2
 800265c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800265e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002676:	f7ff fda7 	bl	80021c8 <HAL_GetTick>
 800267a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d008      	beq.n	800269a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e052      	b.n	8002740 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0216 	bic.w	r2, r2, #22
 80026a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <HAL_DMA_Abort+0x62>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0208 	bic.w	r2, r2, #8
 80026d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ea:	e013      	b.n	8002714 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ec:	f7ff fd6c 	bl	80021c8 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d90c      	bls.n	8002714 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2203      	movs	r2, #3
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e015      	b.n	8002740 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e4      	bne.n	80026ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002726:	223f      	movs	r2, #63	; 0x3f
 8002728:	409a      	lsls	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d004      	beq.n	8002766 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e00c      	b.n	8002780 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2205      	movs	r2, #5
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002798:	4b8e      	ldr	r3, [pc, #568]	; (80029d4 <HAL_DMA_IRQHandler+0x248>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a8e      	ldr	r2, [pc, #568]	; (80029d8 <HAL_DMA_IRQHandler+0x24c>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0a9b      	lsrs	r3, r3, #10
 80027a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b6:	2208      	movs	r2, #8
 80027b8:	409a      	lsls	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d01a      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0204 	bic.w	r2, r2, #4
 80027de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	2208      	movs	r2, #8
 80027e6:	409a      	lsls	r2, r3
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	2201      	movs	r2, #1
 80027fe:	409a      	lsls	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d012      	beq.n	800282e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	2201      	movs	r2, #1
 800281c:	409a      	lsls	r2, r3
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	f043 0202 	orr.w	r2, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	2204      	movs	r2, #4
 8002834:	409a      	lsls	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d012      	beq.n	8002864 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00b      	beq.n	8002864 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	2204      	movs	r2, #4
 8002852:	409a      	lsls	r2, r3
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	f043 0204 	orr.w	r2, r3, #4
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	2210      	movs	r2, #16
 800286a:	409a      	lsls	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d043      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d03c      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	2210      	movs	r2, #16
 8002888:	409a      	lsls	r2, r3
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d018      	beq.n	80028ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d108      	bne.n	80028bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d024      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
 80028ba:	e01f      	b.n	80028fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01b      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
 80028cc:	e016      	b.n	80028fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0208 	bic.w	r2, r2, #8
 80028ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	2220      	movs	r2, #32
 8002902:	409a      	lsls	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 808f 	beq.w	8002a2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8087 	beq.w	8002a2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002922:	2220      	movs	r2, #32
 8002924:	409a      	lsls	r2, r3
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b05      	cmp	r3, #5
 8002934:	d136      	bne.n	80029a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0216 	bic.w	r2, r2, #22
 8002944:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002954:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d103      	bne.n	8002966 <HAL_DMA_IRQHandler+0x1da>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0208 	bic.w	r2, r2, #8
 8002974:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	223f      	movs	r2, #63	; 0x3f
 800297c:	409a      	lsls	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002996:	2b00      	cmp	r3, #0
 8002998:	d07e      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	4798      	blx	r3
        }
        return;
 80029a2:	e079      	b.n	8002a98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01d      	beq.n	80029ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10d      	bne.n	80029dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d031      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4798      	blx	r3
 80029d0:	e02c      	b.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
 80029d2:	bf00      	nop
 80029d4:	20000030 	.word	0x20000030
 80029d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d023      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
 80029ec:	e01e      	b.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10f      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0210 	bic.w	r2, r2, #16
 8002a0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d032      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d022      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2205      	movs	r2, #5
 8002a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d307      	bcc.n	8002a74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f2      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x2cc>
 8002a72:	e000      	b.n	8002a76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
 8002a96:	e000      	b.n	8002a9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a98:	bf00      	nop
    }
  }
}
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002abc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d108      	bne.n	8002ae0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ade:	e007      	b.n	8002af0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	60da      	str	r2, [r3, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	3b10      	subs	r3, #16
 8002b0c:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <DMA_CalcBaseAndBitshift+0x60>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	091b      	lsrs	r3, r3, #4
 8002b14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b16:	4a12      	ldr	r2, [pc, #72]	; (8002b60 <DMA_CalcBaseAndBitshift+0x64>)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d908      	bls.n	8002b3c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <DMA_CalcBaseAndBitshift+0x68>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	1d1a      	adds	r2, r3, #4
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	659a      	str	r2, [r3, #88]	; 0x58
 8002b3a:	e006      	b.n	8002b4a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <DMA_CalcBaseAndBitshift+0x68>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	aaaaaaab 	.word	0xaaaaaaab
 8002b60:	08007630 	.word	0x08007630
 8002b64:	fffffc00 	.word	0xfffffc00

08002b68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d11f      	bne.n	8002bc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d856      	bhi.n	8002c36 <DMA_CheckFifoParam+0xce>
 8002b88:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <DMA_CheckFifoParam+0x28>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002ba1 	.word	0x08002ba1
 8002b94:	08002bb3 	.word	0x08002bb3
 8002b98:	08002ba1 	.word	0x08002ba1
 8002b9c:	08002c37 	.word	0x08002c37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d046      	beq.n	8002c3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb0:	e043      	b.n	8002c3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bba:	d140      	bne.n	8002c3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc0:	e03d      	b.n	8002c3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bca:	d121      	bne.n	8002c10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d837      	bhi.n	8002c42 <DMA_CheckFifoParam+0xda>
 8002bd2:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <DMA_CheckFifoParam+0x70>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002bef 	.word	0x08002bef
 8002be0:	08002be9 	.word	0x08002be9
 8002be4:	08002c01 	.word	0x08002c01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
      break;
 8002bec:	e030      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d025      	beq.n	8002c46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfe:	e022      	b.n	8002c46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c08:	d11f      	bne.n	8002c4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c0e:	e01c      	b.n	8002c4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d903      	bls.n	8002c1e <DMA_CheckFifoParam+0xb6>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d003      	beq.n	8002c24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c1c:	e018      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
      break;
 8002c22:	e015      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00e      	beq.n	8002c4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      break;
 8002c34:	e00b      	b.n	8002c4e <DMA_CheckFifoParam+0xe6>
      break;
 8002c36:	bf00      	nop
 8002c38:	e00a      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e008      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e006      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
 8002c44:	e004      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop

08002c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b089      	sub	sp, #36	; 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	e175      	b.n	8002f6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c80:	2201      	movs	r2, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	f040 8164 	bne.w	8002f66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d005      	beq.n	8002cb6 <HAL_GPIO_Init+0x56>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d130      	bne.n	8002d18 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cec:	2201      	movs	r2, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 0201 	and.w	r2, r3, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d017      	beq.n	8002d54 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d123      	bne.n	8002da8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	08da      	lsrs	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3208      	adds	r2, #8
 8002d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	220f      	movs	r2, #15
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	08da      	lsrs	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3208      	adds	r2, #8
 8002da2:	69b9      	ldr	r1, [r7, #24]
 8002da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0203 	and.w	r2, r3, #3
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80be 	beq.w	8002f66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dea:	4b66      	ldr	r3, [pc, #408]	; (8002f84 <HAL_GPIO_Init+0x324>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	4a65      	ldr	r2, [pc, #404]	; (8002f84 <HAL_GPIO_Init+0x324>)
 8002df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df4:	6453      	str	r3, [r2, #68]	; 0x44
 8002df6:	4b63      	ldr	r3, [pc, #396]	; (8002f84 <HAL_GPIO_Init+0x324>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e02:	4a61      	ldr	r2, [pc, #388]	; (8002f88 <HAL_GPIO_Init+0x328>)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	3302      	adds	r3, #2
 8002e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	220f      	movs	r2, #15
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a58      	ldr	r2, [pc, #352]	; (8002f8c <HAL_GPIO_Init+0x32c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d037      	beq.n	8002e9e <HAL_GPIO_Init+0x23e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a57      	ldr	r2, [pc, #348]	; (8002f90 <HAL_GPIO_Init+0x330>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d031      	beq.n	8002e9a <HAL_GPIO_Init+0x23a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a56      	ldr	r2, [pc, #344]	; (8002f94 <HAL_GPIO_Init+0x334>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d02b      	beq.n	8002e96 <HAL_GPIO_Init+0x236>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a55      	ldr	r2, [pc, #340]	; (8002f98 <HAL_GPIO_Init+0x338>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d025      	beq.n	8002e92 <HAL_GPIO_Init+0x232>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a54      	ldr	r2, [pc, #336]	; (8002f9c <HAL_GPIO_Init+0x33c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d01f      	beq.n	8002e8e <HAL_GPIO_Init+0x22e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a53      	ldr	r2, [pc, #332]	; (8002fa0 <HAL_GPIO_Init+0x340>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d019      	beq.n	8002e8a <HAL_GPIO_Init+0x22a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_GPIO_Init+0x344>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <HAL_GPIO_Init+0x226>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a51      	ldr	r2, [pc, #324]	; (8002fa8 <HAL_GPIO_Init+0x348>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00d      	beq.n	8002e82 <HAL_GPIO_Init+0x222>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a50      	ldr	r2, [pc, #320]	; (8002fac <HAL_GPIO_Init+0x34c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d007      	beq.n	8002e7e <HAL_GPIO_Init+0x21e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4f      	ldr	r2, [pc, #316]	; (8002fb0 <HAL_GPIO_Init+0x350>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d101      	bne.n	8002e7a <HAL_GPIO_Init+0x21a>
 8002e76:	2309      	movs	r3, #9
 8002e78:	e012      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e7a:	230a      	movs	r3, #10
 8002e7c:	e010      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e7e:	2308      	movs	r3, #8
 8002e80:	e00e      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e82:	2307      	movs	r3, #7
 8002e84:	e00c      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e86:	2306      	movs	r3, #6
 8002e88:	e00a      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e8a:	2305      	movs	r3, #5
 8002e8c:	e008      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e8e:	2304      	movs	r3, #4
 8002e90:	e006      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e92:	2303      	movs	r3, #3
 8002e94:	e004      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e002      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	f002 0203 	and.w	r2, r2, #3
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	4093      	lsls	r3, r2
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002eb0:	4935      	ldr	r1, [pc, #212]	; (8002f88 <HAL_GPIO_Init+0x328>)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	089b      	lsrs	r3, r3, #2
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ebe:	4b3d      	ldr	r3, [pc, #244]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ee2:	4a34      	ldr	r2, [pc, #208]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee8:	4b32      	ldr	r3, [pc, #200]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f0c:	4a29      	ldr	r2, [pc, #164]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f12:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f36:	4a1f      	ldr	r2, [pc, #124]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f60:	4a14      	ldr	r2, [pc, #80]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	f67f ae86 	bls.w	8002c80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	3724      	adds	r7, #36	; 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40020000 	.word	0x40020000
 8002f90:	40020400 	.word	0x40020400
 8002f94:	40020800 	.word	0x40020800
 8002f98:	40020c00 	.word	0x40020c00
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40021400 	.word	0x40021400
 8002fa4:	40021800 	.word	0x40021800
 8002fa8:	40021c00 	.word	0x40021c00
 8002fac:	40022000 	.word	0x40022000
 8002fb0:	40022400 	.word	0x40022400
 8002fb4:	40013c00 	.word	0x40013c00

08002fb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	887b      	ldrh	r3, [r7, #2]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	e001      	b.n	8002fda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	807b      	strh	r3, [r7, #2]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ff8:	787b      	ldrb	r3, [r7, #1]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ffe:	887a      	ldrh	r2, [r7, #2]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003004:	e003      	b.n	800300e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003006:	887b      	ldrh	r3, [r7, #2]
 8003008:	041a      	lsls	r2, r3, #16
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	619a      	str	r2, [r3, #24]
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d006      	beq.n	8003040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003032:	4a05      	ldr	r2, [pc, #20]	; (8003048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	4618      	mov	r0, r3
 800303c:	f000 f806 	bl	800304c <HAL_GPIO_EXTI_Callback>
  }
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40013c00 	.word	0x40013c00

0800304c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a04      	ldr	r2, [pc, #16]	; (8003080 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800306e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003072:	6013      	str	r3, [r2, #0]
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40007000 	.word	0x40007000

08003084 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800308c:	2300      	movs	r3, #0
 800308e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e291      	b.n	80035be <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 8087 	beq.w	80031b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a8:	4b96      	ldr	r3, [pc, #600]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d00c      	beq.n	80030ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b4:	4b93      	ldr	r3, [pc, #588]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d112      	bne.n	80030e6 <HAL_RCC_OscConfig+0x62>
 80030c0:	4b90      	ldr	r3, [pc, #576]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030cc:	d10b      	bne.n	80030e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ce:	4b8d      	ldr	r3, [pc, #564]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d06c      	beq.n	80031b4 <HAL_RCC_OscConfig+0x130>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d168      	bne.n	80031b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e26b      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x7a>
 80030f0:	4b84      	ldr	r3, [pc, #528]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a83      	ldr	r2, [pc, #524]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80030f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	e02e      	b.n	800315c <HAL_RCC_OscConfig+0xd8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x9c>
 8003106:	4b7f      	ldr	r3, [pc, #508]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a7e      	ldr	r2, [pc, #504]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800310c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b7c      	ldr	r3, [pc, #496]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a7b      	ldr	r2, [pc, #492]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e01d      	b.n	800315c <HAL_RCC_OscConfig+0xd8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0xc0>
 800312a:	4b76      	ldr	r3, [pc, #472]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a75      	ldr	r2, [pc, #468]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	4b73      	ldr	r3, [pc, #460]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a72      	ldr	r2, [pc, #456]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e00b      	b.n	800315c <HAL_RCC_OscConfig+0xd8>
 8003144:	4b6f      	ldr	r3, [pc, #444]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a6e      	ldr	r2, [pc, #440]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800314a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b6c      	ldr	r3, [pc, #432]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a6b      	ldr	r2, [pc, #428]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800315a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7ff f830 	bl	80021c8 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7ff f82c 	bl	80021c8 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e21f      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	4b61      	ldr	r3, [pc, #388]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0xe8>
 800318a:	e014      	b.n	80031b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7ff f81c 	bl	80021c8 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003194:	f7ff f818 	bl	80021c8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	; 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e20b      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a6:	4b57      	ldr	r3, [pc, #348]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x110>
 80031b2:	e000      	b.n	80031b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d069      	beq.n	8003296 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031c2:	4b50      	ldr	r3, [pc, #320]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ce:	4b4d      	ldr	r3, [pc, #308]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d11c      	bne.n	8003214 <HAL_RCC_OscConfig+0x190>
 80031da:	4b4a      	ldr	r3, [pc, #296]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d116      	bne.n	8003214 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e6:	4b47      	ldr	r3, [pc, #284]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_RCC_OscConfig+0x17a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d001      	beq.n	80031fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e1df      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fe:	4b41      	ldr	r3, [pc, #260]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	493d      	ldr	r1, [pc, #244]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003212:	e040      	b.n	8003296 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d023      	beq.n	8003264 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800321c:	4b39      	ldr	r3, [pc, #228]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a38      	ldr	r2, [pc, #224]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fe ffce 	bl	80021c8 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003230:	f7fe ffca 	bl	80021c8 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1bd      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003242:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b2d      	ldr	r3, [pc, #180]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4929      	ldr	r1, [pc, #164]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
 8003262:	e018      	b.n	8003296 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003264:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a26      	ldr	r2, [pc, #152]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe ffaa 	bl	80021c8 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003278:	f7fe ffa6 	bl	80021c8 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e199      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d038      	beq.n	8003314 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d019      	beq.n	80032de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032aa:	4b16      	ldr	r3, [pc, #88]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	4a15      	ldr	r2, [pc, #84]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7fe ff87 	bl	80021c8 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032be:	f7fe ff83 	bl	80021c8 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e176      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80032d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x23a>
 80032dc:	e01a      	b.n	8003314 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032de:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80032e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e2:	4a08      	ldr	r2, [pc, #32]	; (8003304 <HAL_RCC_OscConfig+0x280>)
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ea:	f7fe ff6d 	bl	80021c8 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	e00a      	b.n	8003308 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f2:	f7fe ff69 	bl	80021c8 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d903      	bls.n	8003308 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e15c      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
 8003304:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	4b91      	ldr	r3, [pc, #580]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ee      	bne.n	80032f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a4 	beq.w	800346a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003322:	4b8b      	ldr	r3, [pc, #556]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10d      	bne.n	800334a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800332e:	4b88      	ldr	r3, [pc, #544]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a87      	ldr	r2, [pc, #540]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
 800333a:	4b85      	ldr	r3, [pc, #532]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003346:	2301      	movs	r3, #1
 8003348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334a:	4b82      	ldr	r3, [pc, #520]	; (8003554 <HAL_RCC_OscConfig+0x4d0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d118      	bne.n	8003388 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003356:	4b7f      	ldr	r3, [pc, #508]	; (8003554 <HAL_RCC_OscConfig+0x4d0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7e      	ldr	r2, [pc, #504]	; (8003554 <HAL_RCC_OscConfig+0x4d0>)
 800335c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003362:	f7fe ff31 	bl	80021c8 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336a:	f7fe ff2d 	bl	80021c8 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b64      	cmp	r3, #100	; 0x64
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e120      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800337c:	4b75      	ldr	r3, [pc, #468]	; (8003554 <HAL_RCC_OscConfig+0x4d0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x31a>
 8003390:	4b6f      	ldr	r3, [pc, #444]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	4a6e      	ldr	r2, [pc, #440]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6713      	str	r3, [r2, #112]	; 0x70
 800339c:	e02d      	b.n	80033fa <HAL_RCC_OscConfig+0x376>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x33c>
 80033a6:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a69      	ldr	r2, [pc, #420]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
 80033b2:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	4a66      	ldr	r2, [pc, #408]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033b8:	f023 0304 	bic.w	r3, r3, #4
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
 80033be:	e01c      	b.n	80033fa <HAL_RCC_OscConfig+0x376>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b05      	cmp	r3, #5
 80033c6:	d10c      	bne.n	80033e2 <HAL_RCC_OscConfig+0x35e>
 80033c8:	4b61      	ldr	r3, [pc, #388]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a60      	ldr	r2, [pc, #384]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033ce:	f043 0304 	orr.w	r3, r3, #4
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	4b5e      	ldr	r3, [pc, #376]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4a5d      	ldr	r2, [pc, #372]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6713      	str	r3, [r2, #112]	; 0x70
 80033e0:	e00b      	b.n	80033fa <HAL_RCC_OscConfig+0x376>
 80033e2:	4b5b      	ldr	r3, [pc, #364]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a5a      	ldr	r2, [pc, #360]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
 80033ee:	4b58      	ldr	r3, [pc, #352]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a57      	ldr	r2, [pc, #348]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80033f4:	f023 0304 	bic.w	r3, r3, #4
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d015      	beq.n	800342e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fe fee1 	bl	80021c8 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fe fedd 	bl	80021c8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	; 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e0ce      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003420:	4b4b      	ldr	r3, [pc, #300]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ee      	beq.n	800340a <HAL_RCC_OscConfig+0x386>
 800342c:	e014      	b.n	8003458 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fe fecb 	bl	80021c8 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7fe fec7 	bl	80021c8 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f241 3288 	movw	r2, #5000	; 0x1388
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e0b8      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344c:	4b40      	ldr	r3, [pc, #256]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ee      	bne.n	8003436 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003458:	7dfb      	ldrb	r3, [r7, #23]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345e:	4b3c      	ldr	r3, [pc, #240]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	4a3b      	ldr	r2, [pc, #236]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003468:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80a4 	beq.w	80035bc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003474:	4b36      	ldr	r3, [pc, #216]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b08      	cmp	r3, #8
 800347e:	d06b      	beq.n	8003558 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d149      	bne.n	800351c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003488:	4b31      	ldr	r3, [pc, #196]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a30      	ldr	r2, [pc, #192]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 800348e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fe fe98 	bl	80021c8 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fe fe94 	bl	80021c8 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e087      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	4b28      	ldr	r3, [pc, #160]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	019b      	lsls	r3, r3, #6
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	3b01      	subs	r3, #1
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	4313      	orrs	r3, r2
 80034e0:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80034e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a18      	ldr	r2, [pc, #96]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80034ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe fe68 	bl	80021c8 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fe fe64 	bl	80021c8 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e057      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x478>
 800351a:	e04f      	b.n	80035bc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe fe4e 	bl	80021c8 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003530:	f7fe fe4a 	bl	80021c8 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e03d      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	4b03      	ldr	r3, [pc, #12]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x4ac>
 800354e:	e035      	b.n	80035bc <HAL_RCC_OscConfig+0x538>
 8003550:	40023800 	.word	0x40023800
 8003554:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_RCC_OscConfig+0x544>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d028      	beq.n	80035b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d121      	bne.n	80035b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d11a      	bne.n	80035b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003588:	4013      	ands	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800358e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003590:	4293      	cmp	r3, r2
 8003592:	d111      	bne.n	80035b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	3b01      	subs	r3, #1
 80035a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800

080035cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0d0      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b6a      	ldr	r3, [pc, #424]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d910      	bls.n	8003614 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b67      	ldr	r3, [pc, #412]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 020f 	bic.w	r2, r3, #15
 80035fa:	4965      	ldr	r1, [pc, #404]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b63      	ldr	r3, [pc, #396]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0b8      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d020      	beq.n	8003662 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800362c:	4b59      	ldr	r3, [pc, #356]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a58      	ldr	r2, [pc, #352]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003636:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003644:	4b53      	ldr	r3, [pc, #332]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4a52      	ldr	r2, [pc, #328]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 800364a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800364e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003650:	4b50      	ldr	r3, [pc, #320]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	494d      	ldr	r1, [pc, #308]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d040      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d107      	bne.n	8003686 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d115      	bne.n	80036ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e07f      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368e:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e073      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369e:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e06b      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b39      	ldr	r3, [pc, #228]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4936      	ldr	r1, [pc, #216]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c0:	f7fe fd82 	bl	80021c8 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7fe fd7e 	bl	80021c8 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e053      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f0:	4b27      	ldr	r3, [pc, #156]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d210      	bcs.n	8003720 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b24      	ldr	r3, [pc, #144]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 020f 	bic.w	r2, r3, #15
 8003706:	4922      	ldr	r1, [pc, #136]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e032      	b.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4916      	ldr	r1, [pc, #88]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	490e      	ldr	r1, [pc, #56]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 800375a:	4313      	orrs	r3, r2
 800375c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800375e:	f000 f821 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8003762:	4602      	mov	r2, r0
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	490a      	ldr	r1, [pc, #40]	; (8003798 <HAL_RCC_ClockConfig+0x1cc>)
 8003770:	5ccb      	ldrb	r3, [r1, r3]
 8003772:	fa22 f303 	lsr.w	r3, r2, r3
 8003776:	4a09      	ldr	r2, [pc, #36]	; (800379c <HAL_RCC_ClockConfig+0x1d0>)
 8003778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <HAL_RCC_ClockConfig+0x1d4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fcde 	bl	8002140 <HAL_InitTick>

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40023c00 	.word	0x40023c00
 8003794:	40023800 	.word	0x40023800
 8003798:	08007618 	.word	0x08007618
 800379c:	20000030 	.word	0x20000030
 80037a0:	20000034 	.word	0x20000034

080037a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a8:	b094      	sub	sp, #80	; 0x50
 80037aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	647b      	str	r3, [r7, #68]	; 0x44
 80037b0:	2300      	movs	r3, #0
 80037b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b4:	2300      	movs	r3, #0
 80037b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037bc:	4b79      	ldr	r3, [pc, #484]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d00d      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x40>
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	f200 80e1 	bhi.w	8003990 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x34>
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d003      	beq.n	80037de <HAL_RCC_GetSysClockFreq+0x3a>
 80037d6:	e0db      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037d8:	4b73      	ldr	r3, [pc, #460]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80037da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037dc:	e0db      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037de:	4b73      	ldr	r3, [pc, #460]	; (80039ac <HAL_RCC_GetSysClockFreq+0x208>)
 80037e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037e2:	e0d8      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037e4:	4b6f      	ldr	r3, [pc, #444]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037ee:	4b6d      	ldr	r3, [pc, #436]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d063      	beq.n	80038c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fa:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	099b      	lsrs	r3, r3, #6
 8003800:	2200      	movs	r2, #0
 8003802:	63bb      	str	r3, [r7, #56]	; 0x38
 8003804:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380c:	633b      	str	r3, [r7, #48]	; 0x30
 800380e:	2300      	movs	r3, #0
 8003810:	637b      	str	r3, [r7, #52]	; 0x34
 8003812:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003816:	4622      	mov	r2, r4
 8003818:	462b      	mov	r3, r5
 800381a:	f04f 0000 	mov.w	r0, #0
 800381e:	f04f 0100 	mov.w	r1, #0
 8003822:	0159      	lsls	r1, r3, #5
 8003824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003828:	0150      	lsls	r0, r2, #5
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4621      	mov	r1, r4
 8003830:	1a51      	subs	r1, r2, r1
 8003832:	6139      	str	r1, [r7, #16]
 8003834:	4629      	mov	r1, r5
 8003836:	eb63 0301 	sbc.w	r3, r3, r1
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003848:	4659      	mov	r1, fp
 800384a:	018b      	lsls	r3, r1, #6
 800384c:	4651      	mov	r1, sl
 800384e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003852:	4651      	mov	r1, sl
 8003854:	018a      	lsls	r2, r1, #6
 8003856:	4651      	mov	r1, sl
 8003858:	ebb2 0801 	subs.w	r8, r2, r1
 800385c:	4659      	mov	r1, fp
 800385e:	eb63 0901 	sbc.w	r9, r3, r1
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800386e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003876:	4690      	mov	r8, r2
 8003878:	4699      	mov	r9, r3
 800387a:	4623      	mov	r3, r4
 800387c:	eb18 0303 	adds.w	r3, r8, r3
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	462b      	mov	r3, r5
 8003884:	eb49 0303 	adc.w	r3, r9, r3
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003896:	4629      	mov	r1, r5
 8003898:	024b      	lsls	r3, r1, #9
 800389a:	4621      	mov	r1, r4
 800389c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038a0:	4621      	mov	r1, r4
 80038a2:	024a      	lsls	r2, r1, #9
 80038a4:	4610      	mov	r0, r2
 80038a6:	4619      	mov	r1, r3
 80038a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038aa:	2200      	movs	r2, #0
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038b4:	f7fc fd04 	bl	80002c0 <__aeabi_uldivmod>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4613      	mov	r3, r2
 80038be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c0:	e058      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c2:	4b38      	ldr	r3, [pc, #224]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	099b      	lsrs	r3, r3, #6
 80038c8:	2200      	movs	r2, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	4611      	mov	r1, r2
 80038ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038d2:	623b      	str	r3, [r7, #32]
 80038d4:	2300      	movs	r3, #0
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
 80038d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038dc:	4642      	mov	r2, r8
 80038de:	464b      	mov	r3, r9
 80038e0:	f04f 0000 	mov.w	r0, #0
 80038e4:	f04f 0100 	mov.w	r1, #0
 80038e8:	0159      	lsls	r1, r3, #5
 80038ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ee:	0150      	lsls	r0, r2, #5
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4641      	mov	r1, r8
 80038f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80038fa:	4649      	mov	r1, r9
 80038fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800390c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003910:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003914:	ebb2 040a 	subs.w	r4, r2, sl
 8003918:	eb63 050b 	sbc.w	r5, r3, fp
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	00eb      	lsls	r3, r5, #3
 8003926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800392a:	00e2      	lsls	r2, r4, #3
 800392c:	4614      	mov	r4, r2
 800392e:	461d      	mov	r5, r3
 8003930:	4643      	mov	r3, r8
 8003932:	18e3      	adds	r3, r4, r3
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	464b      	mov	r3, r9
 8003938:	eb45 0303 	adc.w	r3, r5, r3
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800394a:	4629      	mov	r1, r5
 800394c:	028b      	lsls	r3, r1, #10
 800394e:	4621      	mov	r1, r4
 8003950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003954:	4621      	mov	r1, r4
 8003956:	028a      	lsls	r2, r1, #10
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800395e:	2200      	movs	r2, #0
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	61fa      	str	r2, [r7, #28]
 8003964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003968:	f7fc fcaa 	bl	80002c0 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4613      	mov	r3, r2
 8003972:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	3301      	adds	r3, #1
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003988:	fbb2 f3f3 	udiv	r3, r2, r3
 800398c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800398e:	e002      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003992:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003998:	4618      	mov	r0, r3
 800399a:	3750      	adds	r7, #80	; 0x50
 800399c:	46bd      	mov	sp, r7
 800399e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800
 80039a8:	00f42400 	.word	0x00f42400
 80039ac:	007a1200 	.word	0x007a1200

080039b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039b6:	681b      	ldr	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000030 	.word	0x20000030

080039c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039cc:	f7ff fff0 	bl	80039b0 <HAL_RCC_GetHCLKFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	0a9b      	lsrs	r3, r3, #10
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	4903      	ldr	r1, [pc, #12]	; (80039ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40023800 	.word	0x40023800
 80039ec:	08007628 	.word	0x08007628

080039f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039f4:	f7ff ffdc 	bl	80039b0 <HAL_RCC_GetHCLKFreq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	0b5b      	lsrs	r3, r3, #13
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4903      	ldr	r1, [pc, #12]	; (8003a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40023800 	.word	0x40023800
 8003a14:	08007628 	.word	0x08007628

08003a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d012      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a40:	4b69      	ldr	r3, [pc, #420]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a68      	ldr	r2, [pc, #416]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a4a:	6093      	str	r3, [r2, #8]
 8003a4c:	4b66      	ldr	r3, [pc, #408]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a54:	4964      	ldr	r1, [pc, #400]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a62:	2301      	movs	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d017      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a72:	4b5d      	ldr	r3, [pc, #372]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	4959      	ldr	r1, [pc, #356]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a90:	d101      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a92:	2301      	movs	r3, #1
 8003a94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d017      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003aae:	4b4e      	ldr	r3, [pc, #312]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	494a      	ldr	r1, [pc, #296]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ada:	2301      	movs	r3, #1
 8003adc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003aea:	2301      	movs	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 808b 	beq.w	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003afc:	4b3a      	ldr	r3, [pc, #232]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	4a39      	ldr	r2, [pc, #228]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b06:	6413      	str	r3, [r2, #64]	; 0x40
 8003b08:	4b37      	ldr	r3, [pc, #220]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b14:	4b35      	ldr	r3, [pc, #212]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a34      	ldr	r2, [pc, #208]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b20:	f7fe fb52 	bl	80021c8 <HAL_GetTick>
 8003b24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b28:	f7fe fb4e 	bl	80021c8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	; 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e357      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b3a:	4b2c      	ldr	r3, [pc, #176]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b46:	4b28      	ldr	r3, [pc, #160]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d035      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d02e      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b64:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b6e:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	4a1d      	ldr	r2, [pc, #116]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b7a:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	4a1a      	ldr	r2, [pc, #104]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b86:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b8c:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d114      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fe fb16 	bl	80021c8 <HAL_GetTick>
 8003b9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fe fb12 	bl	80021c8 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e319      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0ee      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bce:	d111      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bde:	400b      	ands	r3, r1
 8003be0:	4901      	ldr	r1, [pc, #4]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
 8003be6:	e00b      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003be8:	40023800 	.word	0x40023800
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	0ffffcff 	.word	0x0ffffcff
 8003bf4:	4baa      	ldr	r3, [pc, #680]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4aa9      	ldr	r2, [pc, #676]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bfa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bfe:	6093      	str	r3, [r2, #8]
 8003c00:	4ba7      	ldr	r3, [pc, #668]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0c:	49a4      	ldr	r1, [pc, #656]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d010      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c1e:	4ba0      	ldr	r3, [pc, #640]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c24:	4a9e      	ldr	r2, [pc, #632]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c2e:	4b9c      	ldr	r3, [pc, #624]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	4999      	ldr	r1, [pc, #612]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c4c:	4b94      	ldr	r3, [pc, #592]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c5a:	4991      	ldr	r1, [pc, #580]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c6e:	4b8c      	ldr	r3, [pc, #560]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c7c:	4988      	ldr	r1, [pc, #544]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c90:	4b83      	ldr	r3, [pc, #524]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c9e:	4980      	ldr	r1, [pc, #512]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cb2:	4b7b      	ldr	r3, [pc, #492]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	4977      	ldr	r1, [pc, #476]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd4:	4b72      	ldr	r3, [pc, #456]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	f023 0203 	bic.w	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	496f      	ldr	r1, [pc, #444]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cf6:	4b6a      	ldr	r3, [pc, #424]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfc:	f023 020c 	bic.w	r2, r3, #12
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d04:	4966      	ldr	r1, [pc, #408]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d18:	4b61      	ldr	r3, [pc, #388]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d26:	495e      	ldr	r1, [pc, #376]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d3a:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d48:	4955      	ldr	r1, [pc, #340]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d5c:	4b50      	ldr	r3, [pc, #320]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	494d      	ldr	r1, [pc, #308]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d7e:	4b48      	ldr	r3, [pc, #288]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8c:	4944      	ldr	r1, [pc, #272]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003da0:	4b3f      	ldr	r3, [pc, #252]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	493c      	ldr	r1, [pc, #240]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003dc2:	4b37      	ldr	r3, [pc, #220]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd0:	4933      	ldr	r1, [pc, #204]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003de4:	4b2e      	ldr	r3, [pc, #184]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df2:	492b      	ldr	r1, [pc, #172]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d011      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e14:	4922      	ldr	r1, [pc, #136]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e24:	d101      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e46:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	4912      	ldr	r1, [pc, #72]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00b      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e68:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e78:	4909      	ldr	r1, [pc, #36]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d006      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80d9 	beq.w	8004046 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e94:	4b02      	ldr	r3, [pc, #8]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a01      	ldr	r2, [pc, #4]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e9e:	e001      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea6:	f7fe f98f 	bl	80021c8 <HAL_GetTick>
 8003eaa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003eae:	f7fe f98b 	bl	80021c8 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b64      	cmp	r3, #100	; 0x64
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e194      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ec0:	4b6c      	ldr	r3, [pc, #432]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d021      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d11d      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ee0:	4b64      	ldr	r3, [pc, #400]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee6:	0c1b      	lsrs	r3, r3, #16
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003eee:	4b61      	ldr	r3, [pc, #388]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef4:	0e1b      	lsrs	r3, r3, #24
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	019a      	lsls	r2, r3, #6
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	041b      	lsls	r3, r3, #16
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	061b      	lsls	r3, r3, #24
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	071b      	lsls	r3, r3, #28
 8003f14:	4957      	ldr	r1, [pc, #348]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d004      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d02e      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f46:	d129      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f48:	4b4a      	ldr	r3, [pc, #296]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4e:	0c1b      	lsrs	r3, r3, #16
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f56:	4b47      	ldr	r3, [pc, #284]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5c:	0f1b      	lsrs	r3, r3, #28
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	019a      	lsls	r2, r3, #6
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	041b      	lsls	r3, r3, #16
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	431a      	orrs	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	071b      	lsls	r3, r3, #28
 8003f7c:	493d      	ldr	r1, [pc, #244]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f84:	4b3b      	ldr	r3, [pc, #236]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f8a:	f023 021f 	bic.w	r2, r3, #31
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	3b01      	subs	r3, #1
 8003f94:	4937      	ldr	r1, [pc, #220]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01d      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fa8:	4b32      	ldr	r3, [pc, #200]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fae:	0e1b      	lsrs	r3, r3, #24
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fb6:	4b2f      	ldr	r3, [pc, #188]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fbc:	0f1b      	lsrs	r3, r3, #28
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	019a      	lsls	r2, r3, #6
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	041b      	lsls	r3, r3, #16
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	061b      	lsls	r3, r3, #24
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	071b      	lsls	r3, r3, #28
 8003fdc:	4925      	ldr	r1, [pc, #148]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d011      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	019a      	lsls	r2, r3, #6
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	041b      	lsls	r3, r3, #16
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	061b      	lsls	r3, r3, #24
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	071b      	lsls	r3, r3, #28
 800400c:	4919      	ldr	r1, [pc, #100]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004014:	4b17      	ldr	r3, [pc, #92]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800401a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800401e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004020:	f7fe f8d2 	bl	80021c8 <HAL_GetTick>
 8004024:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004026:	e008      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004028:	f7fe f8ce 	bl	80021c8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e0d7      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b01      	cmp	r3, #1
 800404a:	f040 80cd 	bne.w	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a08      	ldr	r2, [pc, #32]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405a:	f7fe f8b5 	bl	80021c8 <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004060:	e00a      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004062:	f7fe f8b1 	bl	80021c8 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b64      	cmp	r3, #100	; 0x64
 800406e:	d903      	bls.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e0ba      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004074:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004078:	4b5e      	ldr	r3, [pc, #376]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004084:	d0ed      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d009      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d02e      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d12a      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040ae:	4b51      	ldr	r3, [pc, #324]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	0c1b      	lsrs	r3, r3, #16
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040bc:	4b4d      	ldr	r3, [pc, #308]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	0f1b      	lsrs	r3, r3, #28
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	019a      	lsls	r2, r3, #6
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	061b      	lsls	r3, r3, #24
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	071b      	lsls	r3, r3, #28
 80040e2:	4944      	ldr	r1, [pc, #272]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040ea:	4b42      	ldr	r3, [pc, #264]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	3b01      	subs	r3, #1
 80040fa:	021b      	lsls	r3, r3, #8
 80040fc:	493d      	ldr	r1, [pc, #244]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d022      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004118:	d11d      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800411a:	4b36      	ldr	r3, [pc, #216]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004120:	0e1b      	lsrs	r3, r3, #24
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004128:	4b32      	ldr	r3, [pc, #200]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412e:	0f1b      	lsrs	r3, r3, #28
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	019a      	lsls	r2, r3, #6
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	431a      	orrs	r2, r3
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	061b      	lsls	r3, r3, #24
 8004148:	431a      	orrs	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	071b      	lsls	r3, r3, #28
 800414e:	4929      	ldr	r1, [pc, #164]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d028      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	0e1b      	lsrs	r3, r3, #24
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004170:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	0c1b      	lsrs	r3, r3, #16
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	019a      	lsls	r2, r3, #6
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	431a      	orrs	r2, r3
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	071b      	lsls	r3, r3, #28
 8004196:	4917      	ldr	r1, [pc, #92]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800419e:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	4911      	ldr	r1, [pc, #68]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041b4:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a0e      	ldr	r2, [pc, #56]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c0:	f7fe f802 	bl	80021c8 <HAL_GetTick>
 80041c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041c8:	f7fd fffe 	bl	80021c8 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	; 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e007      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041e6:	d1ef      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800

080041f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e09d      	b.n	8004346 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	2b00      	cmp	r3, #0
 8004210:	d108      	bne.n	8004224 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800421a:	d009      	beq.n	8004230 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	61da      	str	r2, [r3, #28]
 8004222:	e005      	b.n	8004230 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fd fc60 	bl	8001b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004266:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004270:	d902      	bls.n	8004278 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e002      	b.n	800427e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800427c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004286:	d007      	beq.n	8004298 <HAL_SPI_Init+0xa0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004290:	d002      	beq.n	8004298 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	ea42 0103 	orr.w	r1, r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	0c1b      	lsrs	r3, r3, #16
 80042f4:	f003 0204 	and.w	r2, r3, #4
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004314:	ea42 0103 	orr.w	r1, r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004334:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b088      	sub	sp, #32
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	4613      	mov	r3, r2
 800435c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_SPI_Transmit+0x22>
 800436c:	2302      	movs	r3, #2
 800436e:	e158      	b.n	8004622 <HAL_SPI_Transmit+0x2d4>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004378:	f7fd ff26 	bl	80021c8 <HAL_GetTick>
 800437c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b01      	cmp	r3, #1
 800438c:	d002      	beq.n	8004394 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800438e:	2302      	movs	r3, #2
 8004390:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004392:	e13d      	b.n	8004610 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_SPI_Transmit+0x52>
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d102      	bne.n	80043a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043a4:	e134      	b.n	8004610 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2203      	movs	r2, #3
 80043aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f0:	d10f      	bne.n	8004412 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004400:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004410:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d007      	beq.n	8004430 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800442e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004438:	d94b      	bls.n	80044d2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_SPI_Transmit+0xfa>
 8004442:	8afb      	ldrh	r3, [r7, #22]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d13e      	bne.n	80044c6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	881a      	ldrh	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	1c9a      	adds	r2, r3, #2
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800446c:	e02b      	b.n	80044c6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b02      	cmp	r3, #2
 800447a:	d112      	bne.n	80044a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	881a      	ldrh	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	1c9a      	adds	r2, r3, #2
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044a0:	e011      	b.n	80044c6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044a2:	f7fd fe91 	bl	80021c8 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d803      	bhi.n	80044ba <HAL_SPI_Transmit+0x16c>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d102      	bne.n	80044c0 <HAL_SPI_Transmit+0x172>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d102      	bne.n	80044c6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044c4:	e0a4      	b.n	8004610 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ce      	bne.n	800446e <HAL_SPI_Transmit+0x120>
 80044d0:	e07c      	b.n	80045cc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_SPI_Transmit+0x192>
 80044da:	8afb      	ldrh	r3, [r7, #22]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d170      	bne.n	80045c2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d912      	bls.n	8004510 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	881a      	ldrh	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	1c9a      	adds	r2, r3, #2
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b02      	subs	r3, #2
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800450e:	e058      	b.n	80045c2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	7812      	ldrb	r2, [r2, #0]
 800451c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004536:	e044      	b.n	80045c2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b02      	cmp	r3, #2
 8004544:	d12b      	bne.n	800459e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	d912      	bls.n	8004576 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	881a      	ldrh	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	1c9a      	adds	r2, r3, #2
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b02      	subs	r3, #2
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004574:	e025      	b.n	80045c2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	330c      	adds	r3, #12
 8004580:	7812      	ldrb	r2, [r2, #0]
 8004582:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800459c:	e011      	b.n	80045c2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800459e:	f7fd fe13 	bl	80021c8 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d803      	bhi.n	80045b6 <HAL_SPI_Transmit+0x268>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b4:	d102      	bne.n	80045bc <HAL_SPI_Transmit+0x26e>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045c0:	e026      	b.n	8004610 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1b5      	bne.n	8004538 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	6839      	ldr	r1, [r7, #0]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fc1d 	bl	8004e10 <SPI_EndRxTxTransaction>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10a      	bne.n	8004600 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	77fb      	strb	r3, [r7, #31]
 800460c:	e000      	b.n	8004610 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800460e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004620:	7ffb      	ldrb	r3, [r7, #31]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3720      	adds	r7, #32
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	4613      	mov	r3, r2
 8004638:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_SPI_Transmit_DMA+0x20>
 8004648:	2302      	movs	r3, #2
 800464a:	e0d8      	b.n	80047fe <HAL_SPI_Transmit_DMA+0x1d2>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	d002      	beq.n	8004666 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004660:	2302      	movs	r3, #2
 8004662:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004664:	e0c6      	b.n	80047f4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_SPI_Transmit_DMA+0x46>
 800466c:	88fb      	ldrh	r3, [r7, #6]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d102      	bne.n	8004678 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004676:	e0bd      	b.n	80047f4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2203      	movs	r2, #3
 800467c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	88fa      	ldrh	r2, [r7, #6]
 8004690:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	88fa      	ldrh	r2, [r7, #6]
 8004696:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c2:	d10f      	bne.n	80046e4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	4a47      	ldr	r2, [pc, #284]	; (8004808 <HAL_SPI_Transmit_DMA+0x1dc>)
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f0:	4a46      	ldr	r2, [pc, #280]	; (800480c <HAL_SPI_Transmit_DMA+0x1e0>)
 80046f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f8:	4a45      	ldr	r2, [pc, #276]	; (8004810 <HAL_SPI_Transmit_DMA+0x1e4>)
 80046fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004700:	2200      	movs	r2, #0
 8004702:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004712:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800471c:	d82d      	bhi.n	800477a <HAL_SPI_Transmit_DMA+0x14e>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004728:	d127      	bne.n	800477a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472e:	b29b      	uxth	r3, r3
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10f      	bne.n	8004758 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004746:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474c:	b29b      	uxth	r3, r3
 800474e:	085b      	lsrs	r3, r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004756:	e010      	b.n	800477a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004766:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800476c:	b29b      	uxth	r3, r3
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	b29b      	uxth	r3, r3
 8004772:	3301      	adds	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	4619      	mov	r1, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	330c      	adds	r3, #12
 800478a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004790:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004792:	f7fd ff09 	bl	80025a8 <HAL_DMA_Start_IT>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00c      	beq.n	80047b6 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a0:	f043 0210 	orr.w	r2, r3, #16
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80047b4:	e01e      	b.n	80047f4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	d007      	beq.n	80047d4 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047d2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0220 	orr.w	r2, r2, #32
 80047e2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0202 	orr.w	r2, r2, #2
 80047f2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	08004b4d 	.word	0x08004b4d
 800480c:	08004aa5 	.word	0x08004aa5
 8004810:	08004b69 	.word	0x08004b69

08004814 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00f      	beq.n	8004848 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482c:	4618      	mov	r0, r3
 800482e:	f7fd ff1b 	bl	8002668 <HAL_DMA_Abort>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483c:	f043 0210 	orr.w	r2, r3, #16
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00f      	beq.n	8004870 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004854:	4618      	mov	r0, r3
 8004856:	f7fd ff07 	bl	8002668 <HAL_DMA_Abort>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004864:	f043 0210 	orr.w	r2, r3, #16
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0203 	bic.w	r2, r2, #3
 800487e:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 8004888:	7bfb      	ldrb	r3, [r7, #15]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10e      	bne.n	80048d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d009      	beq.n	80048d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d004      	beq.n	80048d4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	4798      	blx	r3
    return;
 80048d2:	e0ce      	b.n	8004a72 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_SPI_IRQHandler+0x5e>
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d004      	beq.n	80048f2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4798      	blx	r3
    return;
 80048f0:	e0bf      	b.n	8004a72 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <HAL_SPI_IRQHandler+0x7e>
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004902:	2b00      	cmp	r3, #0
 8004904:	d105      	bne.n	8004912 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80b0 	beq.w	8004a72 <HAL_SPI_IRQHandler+0x1de>
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80aa 	beq.w	8004a72 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d023      	beq.n	8004970 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b03      	cmp	r3, #3
 8004932:	d011      	beq.n	8004958 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004938:	f043 0204 	orr.w	r2, r3, #4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	e00b      	b.n	8004970 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004958:	2300      	movs	r3, #0
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	613b      	str	r3, [r7, #16]
 800496c:	693b      	ldr	r3, [r7, #16]
        return;
 800496e:	e080      	b.n	8004a72 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d014      	beq.n	80049a4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800497e:	f043 0201 	orr.w	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00c      	beq.n	80049c8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b2:	f043 0208 	orr.w	r2, r3, #8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80049ba:	2300      	movs	r3, #0
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d04f      	beq.n	8004a70 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049de:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d104      	bne.n	80049fc <HAL_SPI_IRQHandler+0x168>
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d034      	beq.n	8004a66 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0203 	bic.w	r2, r2, #3
 8004a0a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d011      	beq.n	8004a38 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a18:	4a17      	ldr	r2, [pc, #92]	; (8004a78 <HAL_SPI_IRQHandler+0x1e4>)
 8004a1a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fd fe91 	bl	8002748 <HAL_DMA_Abort_IT>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d016      	beq.n	8004a6e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a44:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <HAL_SPI_IRQHandler+0x1e4>)
 8004a46:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fd fe7b 	bl	8002748 <HAL_DMA_Abort_IT>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004a64:	e003      	b.n	8004a6e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f812 	bl	8004a90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004a6c:	e000      	b.n	8004a70 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004a6e:	bf00      	nop
    return;
 8004a70:	bf00      	nop
  }
}
 8004a72:	3720      	adds	r7, #32
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	08004ba9 	.word	0x08004ba9

08004a7c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ab2:	f7fd fb89 	bl	80021c8 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac6:	d03b      	beq.n	8004b40 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0220 	bic.w	r2, r2, #32
 8004ad6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0202 	bic.w	r2, r2, #2
 8004ae6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	2164      	movs	r1, #100	; 0x64
 8004aec:	6978      	ldr	r0, [r7, #20]
 8004aee:	f000 f98f 	bl	8004e10 <SPI_EndRxTxTransaction>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2200      	movs	r2, #0
 8004b26:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004b38:	6978      	ldr	r0, [r7, #20]
 8004b3a:	f7ff ffa9 	bl	8004a90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004b3e:	e002      	b.n	8004b46 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004b40:	6978      	ldr	r0, [r7, #20]
 8004b42:	f7fc ff61 	bl	8001a08 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff ff8e 	bl	8004a7c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0203 	bic.w	r2, r2, #3
 8004b84:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8a:	f043 0210 	orr.w	r2, r3, #16
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7ff ff78 	bl	8004a90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ba0:	bf00      	nop
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7ff ff63 	bl	8004a90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	4613      	mov	r3, r2
 8004be2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004be4:	f7fd faf0 	bl	80021c8 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bf4:	f7fd fae8 	bl	80021c8 <HAL_GetTick>
 8004bf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bfa:	4b39      	ldr	r3, [pc, #228]	; (8004ce0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	015b      	lsls	r3, r3, #5
 8004c00:	0d1b      	lsrs	r3, r3, #20
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	fb02 f303 	mul.w	r3, r2, r3
 8004c08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c0a:	e054      	b.n	8004cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d050      	beq.n	8004cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c14:	f7fd fad8 	bl	80021c8 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d902      	bls.n	8004c2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d13d      	bne.n	8004ca6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c42:	d111      	bne.n	8004c68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4c:	d004      	beq.n	8004c58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c56:	d107      	bne.n	8004c68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c70:	d10f      	bne.n	8004c92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e017      	b.n	8004cd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	bf0c      	ite	eq
 8004cc6:	2301      	moveq	r3, #1
 8004cc8:	2300      	movne	r3, #0
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d19b      	bne.n	8004c0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3720      	adds	r7, #32
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000030 	.word	0x20000030

08004ce4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08a      	sub	sp, #40	; 0x28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004cf6:	f7fd fa67 	bl	80021c8 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	4413      	add	r3, r2
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004d06:	f7fd fa5f 	bl	80021c8 <HAL_GetTick>
 8004d0a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	330c      	adds	r3, #12
 8004d12:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d14:	4b3d      	ldr	r3, [pc, #244]	; (8004e0c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	00da      	lsls	r2, r3, #3
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	0d1b      	lsrs	r3, r3, #20
 8004d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d26:	fb02 f303 	mul.w	r3, r2, r3
 8004d2a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d2c:	e060      	b.n	8004df0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d34:	d107      	bne.n	8004d46 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d104      	bne.n	8004d46 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d44:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d050      	beq.n	8004df0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d4e:	f7fd fa3b 	bl	80021c8 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d902      	bls.n	8004d64 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d13d      	bne.n	8004de0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d7c:	d111      	bne.n	8004da2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d86:	d004      	beq.n	8004d92 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d90:	d107      	bne.n	8004da2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004daa:	d10f      	bne.n	8004dcc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e010      	b.n	8004e02 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d196      	bne.n	8004d2e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3728      	adds	r7, #40	; 0x28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000030 	.word	0x20000030

08004e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f7ff ff5b 	bl	8004ce4 <SPI_WaitFifoStateUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d007      	beq.n	8004e44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e38:	f043 0220 	orr.w	r2, r3, #32
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e046      	b.n	8004ed2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e44:	4b25      	ldr	r3, [pc, #148]	; (8004edc <SPI_EndRxTxTransaction+0xcc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a25      	ldr	r2, [pc, #148]	; (8004ee0 <SPI_EndRxTxTransaction+0xd0>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	0d5b      	lsrs	r3, r3, #21
 8004e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e54:	fb02 f303 	mul.w	r3, r2, r3
 8004e58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e62:	d112      	bne.n	8004e8a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2180      	movs	r1, #128	; 0x80
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f7ff feb0 	bl	8004bd4 <SPI_WaitFlagStateUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d016      	beq.n	8004ea8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7e:	f043 0220 	orr.w	r2, r3, #32
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e023      	b.n	8004ed2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea0:	2b80      	cmp	r3, #128	; 0x80
 8004ea2:	d0f2      	beq.n	8004e8a <SPI_EndRxTxTransaction+0x7a>
 8004ea4:	e000      	b.n	8004ea8 <SPI_EndRxTxTransaction+0x98>
        break;
 8004ea6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff ff15 	bl	8004ce4 <SPI_WaitFifoStateUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d007      	beq.n	8004ed0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e000      	b.n	8004ed2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000030 	.word	0x20000030
 8004ee0:	165e9f81 	.word	0x165e9f81

08004ee4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e040      	b.n	8004f78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fc fe8a 	bl	8001c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2224      	movs	r2, #36	; 0x24
 8004f10:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fbe6 	bl	80056f4 <UART_SetConfig>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e022      	b.n	8004f78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fe3e 	bl	8005bbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fec5 	bl	8005d00 <UART_CheckIdleState>
 8004f76:	4603      	mov	r3, r0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d171      	bne.n	800507c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_UART_Transmit+0x24>
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e06a      	b.n	800507e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2221      	movs	r2, #33	; 0x21
 8004fb4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fb6:	f7fd f907 	bl	80021c8 <HAL_GetTick>
 8004fba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	88fa      	ldrh	r2, [r7, #6]
 8004fc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	88fa      	ldrh	r2, [r7, #6]
 8004fc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd4:	d108      	bne.n	8004fe8 <HAL_UART_Transmit+0x68>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d104      	bne.n	8004fe8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	e003      	b.n	8004ff0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ff0:	e02c      	b.n	800504c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2180      	movs	r1, #128	; 0x80
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 feb6 	bl	8005d6e <UART_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e038      	b.n	800507e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10b      	bne.n	800502a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005020:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	3302      	adds	r3, #2
 8005026:	61bb      	str	r3, [r7, #24]
 8005028:	e007      	b.n	800503a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	3301      	adds	r3, #1
 8005038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1cc      	bne.n	8004ff2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2200      	movs	r2, #0
 8005060:	2140      	movs	r1, #64	; 0x40
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fe83 	bl	8005d6e <UART_WaitOnFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e005      	b.n	800507e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	e000      	b.n	800507e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800507c:	2302      	movs	r3, #2
  }
}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b08a      	sub	sp, #40	; 0x28
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	4613      	mov	r3, r2
 8005092:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800509a:	2b20      	cmp	r3, #32
 800509c:	d132      	bne.n	8005104 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <HAL_UART_Receive_IT+0x24>
 80050a4:	88fb      	ldrh	r3, [r7, #6]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e02b      	b.n	8005106 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d018      	beq.n	80050f4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	613b      	str	r3, [r7, #16]
   return(result);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	69f9      	ldr	r1, [r7, #28]
 80050e6:	6a3a      	ldr	r2, [r7, #32]
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e6      	bne.n	80050c2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	461a      	mov	r2, r3
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 fefe 	bl	8005efc <UART_Start_Receive_IT>
 8005100:	4603      	mov	r3, r0
 8005102:	e000      	b.n	8005106 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3728      	adds	r7, #40	; 0x28
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b0ba      	sub	sp, #232	; 0xe8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005136:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800513a:	f640 030f 	movw	r3, #2063	; 0x80f
 800513e:	4013      	ands	r3, r2
 8005140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d115      	bne.n	8005178 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800514c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00f      	beq.n	8005178 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800515c:	f003 0320 	and.w	r3, r3, #32
 8005160:	2b00      	cmp	r3, #0
 8005162:	d009      	beq.n	8005178 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8297 	beq.w	800569c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
      }
      return;
 8005176:	e291      	b.n	800569c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8117 	beq.w	80053b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800518e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005192:	4b85      	ldr	r3, [pc, #532]	; (80053a8 <HAL_UART_IRQHandler+0x298>)
 8005194:	4013      	ands	r3, r2
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 810a 	beq.w	80053b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800519c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d011      	beq.n	80051cc <HAL_UART_IRQHandler+0xbc>
 80051a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2201      	movs	r2, #1
 80051ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c2:	f043 0201 	orr.w	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d011      	beq.n	80051fc <HAL_UART_IRQHandler+0xec>
 80051d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2202      	movs	r2, #2
 80051ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f2:	f043 0204 	orr.w	r2, r3, #4
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d011      	beq.n	800522c <HAL_UART_IRQHandler+0x11c>
 8005208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00b      	beq.n	800522c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2204      	movs	r2, #4
 800521a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005222:	f043 0202 	orr.w	r2, r3, #2
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800522c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d017      	beq.n	8005268 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b00      	cmp	r3, #0
 8005242:	d105      	bne.n	8005250 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005248:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00b      	beq.n	8005268 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2208      	movs	r2, #8
 8005256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525e:	f043 0208 	orr.w	r2, r3, #8
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005270:	2b00      	cmp	r3, #0
 8005272:	d012      	beq.n	800529a <HAL_UART_IRQHandler+0x18a>
 8005274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005278:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00c      	beq.n	800529a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005290:	f043 0220 	orr.w	r2, r3, #32
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 81fd 	beq.w	80056a0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80052a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00d      	beq.n	80052ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e2:	2b40      	cmp	r3, #64	; 0x40
 80052e4:	d005      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d04f      	beq.n	8005392 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fec8 	bl	8006088 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	d141      	bne.n	800538a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3308      	adds	r3, #8
 800530c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800531c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3308      	adds	r3, #8
 800532e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005332:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800533e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800534a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1d9      	bne.n	8005306 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005356:	2b00      	cmp	r3, #0
 8005358:	d013      	beq.n	8005382 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535e:	4a13      	ldr	r2, [pc, #76]	; (80053ac <HAL_UART_IRQHandler+0x29c>)
 8005360:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005366:	4618      	mov	r0, r3
 8005368:	f7fd f9ee 	bl	8002748 <HAL_DMA_Abort_IT>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d017      	beq.n	80053a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800537c:	4610      	mov	r0, r2
 800537e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005380:	e00f      	b.n	80053a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f9a0 	bl	80056c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005388:	e00b      	b.n	80053a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f99c 	bl	80056c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	e007      	b.n	80053a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f998 	bl	80056c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80053a0:	e17e      	b.n	80056a0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a2:	bf00      	nop
    return;
 80053a4:	e17c      	b.n	80056a0 <HAL_UART_IRQHandler+0x590>
 80053a6:	bf00      	nop
 80053a8:	04000120 	.word	0x04000120
 80053ac:	08006151 	.word	0x08006151

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	f040 814c 	bne.w	8005652 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 8145 	beq.w	8005652 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 813e 	beq.w	8005652 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2210      	movs	r2, #16
 80053dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	f040 80b6 	bne.w	800555a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 8150 	beq.w	80056a4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800540a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800540e:	429a      	cmp	r2, r3
 8005410:	f080 8148 	bcs.w	80056a4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800541a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005428:	f000 8086 	beq.w	8005538 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005456:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800545a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005462:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800546e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1da      	bne.n	800542c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3308      	adds	r3, #8
 800547c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3308      	adds	r3, #8
 8005496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800549a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800549e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e1      	bne.n	8005476 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3308      	adds	r3, #8
 80054b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3308      	adds	r3, #8
 80054d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e3      	bne.n	80054b2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005508:	f023 0310 	bic.w	r3, r3, #16
 800550c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800551a:	65bb      	str	r3, [r7, #88]	; 0x58
 800551c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005520:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e4      	bne.n	80054f8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005532:	4618      	mov	r0, r3
 8005534:	f7fd f898 	bl	8002668 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800554a:	b29b      	uxth	r3, r3
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	b29b      	uxth	r3, r3
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f8c2 	bl	80056dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005558:	e0a4      	b.n	80056a4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005566:	b29b      	uxth	r3, r3
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 8096 	beq.w	80056a8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800557c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8091 	beq.w	80056a8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	e853 3f00 	ldrex	r3, [r3]
 8005592:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800559a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055a8:	647b      	str	r3, [r7, #68]	; 0x44
 80055aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e4      	bne.n	8005586 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	623b      	str	r3, [r7, #32]
   return(result);
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3308      	adds	r3, #8
 80055dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055e0:	633a      	str	r2, [r7, #48]	; 0x30
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e3      	bne.n	80055bc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	60fb      	str	r3, [r7, #12]
   return(result);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f023 0310 	bic.w	r3, r3, #16
 800561c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	461a      	mov	r2, r3
 8005626:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800562a:	61fb      	str	r3, [r7, #28]
 800562c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	69b9      	ldr	r1, [r7, #24]
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	617b      	str	r3, [r7, #20]
   return(result);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e4      	bne.n	8005608 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f846 	bl	80056dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005650:	e02a      	b.n	80056a8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00e      	beq.n	800567c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800565e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005666:	2b00      	cmp	r3, #0
 8005668:	d008      	beq.n	800567c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01c      	beq.n	80056ac <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	4798      	blx	r3
    }
    return;
 800567a:	e017      	b.n	80056ac <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800567c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d012      	beq.n	80056ae <HAL_UART_IRQHandler+0x59e>
 8005688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00c      	beq.n	80056ae <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fd71 	bl	800617c <UART_EndTransmit_IT>
    return;
 800569a:	e008      	b.n	80056ae <HAL_UART_IRQHandler+0x59e>
      return;
 800569c:	bf00      	nop
 800569e:	e006      	b.n	80056ae <HAL_UART_IRQHandler+0x59e>
    return;
 80056a0:	bf00      	nop
 80056a2:	e004      	b.n	80056ae <HAL_UART_IRQHandler+0x59e>
      return;
 80056a4:	bf00      	nop
 80056a6:	e002      	b.n	80056ae <HAL_UART_IRQHandler+0x59e>
      return;
 80056a8:	bf00      	nop
 80056aa:	e000      	b.n	80056ae <HAL_UART_IRQHandler+0x59e>
    return;
 80056ac:	bf00      	nop
  }

}
 80056ae:	37e8      	adds	r7, #232	; 0xe8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	4ba6      	ldr	r3, [pc, #664]	; (80059b8 <UART_SetConfig+0x2c4>)
 8005720:	4013      	ands	r3, r2
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	6979      	ldr	r1, [r7, #20]
 8005728:	430b      	orrs	r3, r1
 800572a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	430a      	orrs	r2, r1
 8005764:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a94      	ldr	r2, [pc, #592]	; (80059bc <UART_SetConfig+0x2c8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d120      	bne.n	80057b2 <UART_SetConfig+0xbe>
 8005770:	4b93      	ldr	r3, [pc, #588]	; (80059c0 <UART_SetConfig+0x2cc>)
 8005772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b03      	cmp	r3, #3
 800577c:	d816      	bhi.n	80057ac <UART_SetConfig+0xb8>
 800577e:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <UART_SetConfig+0x90>)
 8005780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005784:	08005795 	.word	0x08005795
 8005788:	080057a1 	.word	0x080057a1
 800578c:	0800579b 	.word	0x0800579b
 8005790:	080057a7 	.word	0x080057a7
 8005794:	2301      	movs	r3, #1
 8005796:	77fb      	strb	r3, [r7, #31]
 8005798:	e150      	b.n	8005a3c <UART_SetConfig+0x348>
 800579a:	2302      	movs	r3, #2
 800579c:	77fb      	strb	r3, [r7, #31]
 800579e:	e14d      	b.n	8005a3c <UART_SetConfig+0x348>
 80057a0:	2304      	movs	r3, #4
 80057a2:	77fb      	strb	r3, [r7, #31]
 80057a4:	e14a      	b.n	8005a3c <UART_SetConfig+0x348>
 80057a6:	2308      	movs	r3, #8
 80057a8:	77fb      	strb	r3, [r7, #31]
 80057aa:	e147      	b.n	8005a3c <UART_SetConfig+0x348>
 80057ac:	2310      	movs	r3, #16
 80057ae:	77fb      	strb	r3, [r7, #31]
 80057b0:	e144      	b.n	8005a3c <UART_SetConfig+0x348>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a83      	ldr	r2, [pc, #524]	; (80059c4 <UART_SetConfig+0x2d0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d132      	bne.n	8005822 <UART_SetConfig+0x12e>
 80057bc:	4b80      	ldr	r3, [pc, #512]	; (80059c0 <UART_SetConfig+0x2cc>)
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c2:	f003 030c 	and.w	r3, r3, #12
 80057c6:	2b0c      	cmp	r3, #12
 80057c8:	d828      	bhi.n	800581c <UART_SetConfig+0x128>
 80057ca:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <UART_SetConfig+0xdc>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	08005805 	.word	0x08005805
 80057d4:	0800581d 	.word	0x0800581d
 80057d8:	0800581d 	.word	0x0800581d
 80057dc:	0800581d 	.word	0x0800581d
 80057e0:	08005811 	.word	0x08005811
 80057e4:	0800581d 	.word	0x0800581d
 80057e8:	0800581d 	.word	0x0800581d
 80057ec:	0800581d 	.word	0x0800581d
 80057f0:	0800580b 	.word	0x0800580b
 80057f4:	0800581d 	.word	0x0800581d
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	0800581d 	.word	0x0800581d
 8005800:	08005817 	.word	0x08005817
 8005804:	2300      	movs	r3, #0
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e118      	b.n	8005a3c <UART_SetConfig+0x348>
 800580a:	2302      	movs	r3, #2
 800580c:	77fb      	strb	r3, [r7, #31]
 800580e:	e115      	b.n	8005a3c <UART_SetConfig+0x348>
 8005810:	2304      	movs	r3, #4
 8005812:	77fb      	strb	r3, [r7, #31]
 8005814:	e112      	b.n	8005a3c <UART_SetConfig+0x348>
 8005816:	2308      	movs	r3, #8
 8005818:	77fb      	strb	r3, [r7, #31]
 800581a:	e10f      	b.n	8005a3c <UART_SetConfig+0x348>
 800581c:	2310      	movs	r3, #16
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	e10c      	b.n	8005a3c <UART_SetConfig+0x348>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a68      	ldr	r2, [pc, #416]	; (80059c8 <UART_SetConfig+0x2d4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d120      	bne.n	800586e <UART_SetConfig+0x17a>
 800582c:	4b64      	ldr	r3, [pc, #400]	; (80059c0 <UART_SetConfig+0x2cc>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005832:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005836:	2b30      	cmp	r3, #48	; 0x30
 8005838:	d013      	beq.n	8005862 <UART_SetConfig+0x16e>
 800583a:	2b30      	cmp	r3, #48	; 0x30
 800583c:	d814      	bhi.n	8005868 <UART_SetConfig+0x174>
 800583e:	2b20      	cmp	r3, #32
 8005840:	d009      	beq.n	8005856 <UART_SetConfig+0x162>
 8005842:	2b20      	cmp	r3, #32
 8005844:	d810      	bhi.n	8005868 <UART_SetConfig+0x174>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <UART_SetConfig+0x15c>
 800584a:	2b10      	cmp	r3, #16
 800584c:	d006      	beq.n	800585c <UART_SetConfig+0x168>
 800584e:	e00b      	b.n	8005868 <UART_SetConfig+0x174>
 8005850:	2300      	movs	r3, #0
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e0f2      	b.n	8005a3c <UART_SetConfig+0x348>
 8005856:	2302      	movs	r3, #2
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	e0ef      	b.n	8005a3c <UART_SetConfig+0x348>
 800585c:	2304      	movs	r3, #4
 800585e:	77fb      	strb	r3, [r7, #31]
 8005860:	e0ec      	b.n	8005a3c <UART_SetConfig+0x348>
 8005862:	2308      	movs	r3, #8
 8005864:	77fb      	strb	r3, [r7, #31]
 8005866:	e0e9      	b.n	8005a3c <UART_SetConfig+0x348>
 8005868:	2310      	movs	r3, #16
 800586a:	77fb      	strb	r3, [r7, #31]
 800586c:	e0e6      	b.n	8005a3c <UART_SetConfig+0x348>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a56      	ldr	r2, [pc, #344]	; (80059cc <UART_SetConfig+0x2d8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d120      	bne.n	80058ba <UART_SetConfig+0x1c6>
 8005878:	4b51      	ldr	r3, [pc, #324]	; (80059c0 <UART_SetConfig+0x2cc>)
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005882:	2bc0      	cmp	r3, #192	; 0xc0
 8005884:	d013      	beq.n	80058ae <UART_SetConfig+0x1ba>
 8005886:	2bc0      	cmp	r3, #192	; 0xc0
 8005888:	d814      	bhi.n	80058b4 <UART_SetConfig+0x1c0>
 800588a:	2b80      	cmp	r3, #128	; 0x80
 800588c:	d009      	beq.n	80058a2 <UART_SetConfig+0x1ae>
 800588e:	2b80      	cmp	r3, #128	; 0x80
 8005890:	d810      	bhi.n	80058b4 <UART_SetConfig+0x1c0>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <UART_SetConfig+0x1a8>
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d006      	beq.n	80058a8 <UART_SetConfig+0x1b4>
 800589a:	e00b      	b.n	80058b4 <UART_SetConfig+0x1c0>
 800589c:	2300      	movs	r3, #0
 800589e:	77fb      	strb	r3, [r7, #31]
 80058a0:	e0cc      	b.n	8005a3c <UART_SetConfig+0x348>
 80058a2:	2302      	movs	r3, #2
 80058a4:	77fb      	strb	r3, [r7, #31]
 80058a6:	e0c9      	b.n	8005a3c <UART_SetConfig+0x348>
 80058a8:	2304      	movs	r3, #4
 80058aa:	77fb      	strb	r3, [r7, #31]
 80058ac:	e0c6      	b.n	8005a3c <UART_SetConfig+0x348>
 80058ae:	2308      	movs	r3, #8
 80058b0:	77fb      	strb	r3, [r7, #31]
 80058b2:	e0c3      	b.n	8005a3c <UART_SetConfig+0x348>
 80058b4:	2310      	movs	r3, #16
 80058b6:	77fb      	strb	r3, [r7, #31]
 80058b8:	e0c0      	b.n	8005a3c <UART_SetConfig+0x348>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a44      	ldr	r2, [pc, #272]	; (80059d0 <UART_SetConfig+0x2dc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d125      	bne.n	8005910 <UART_SetConfig+0x21c>
 80058c4:	4b3e      	ldr	r3, [pc, #248]	; (80059c0 <UART_SetConfig+0x2cc>)
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d2:	d017      	beq.n	8005904 <UART_SetConfig+0x210>
 80058d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d8:	d817      	bhi.n	800590a <UART_SetConfig+0x216>
 80058da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058de:	d00b      	beq.n	80058f8 <UART_SetConfig+0x204>
 80058e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e4:	d811      	bhi.n	800590a <UART_SetConfig+0x216>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <UART_SetConfig+0x1fe>
 80058ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ee:	d006      	beq.n	80058fe <UART_SetConfig+0x20a>
 80058f0:	e00b      	b.n	800590a <UART_SetConfig+0x216>
 80058f2:	2300      	movs	r3, #0
 80058f4:	77fb      	strb	r3, [r7, #31]
 80058f6:	e0a1      	b.n	8005a3c <UART_SetConfig+0x348>
 80058f8:	2302      	movs	r3, #2
 80058fa:	77fb      	strb	r3, [r7, #31]
 80058fc:	e09e      	b.n	8005a3c <UART_SetConfig+0x348>
 80058fe:	2304      	movs	r3, #4
 8005900:	77fb      	strb	r3, [r7, #31]
 8005902:	e09b      	b.n	8005a3c <UART_SetConfig+0x348>
 8005904:	2308      	movs	r3, #8
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e098      	b.n	8005a3c <UART_SetConfig+0x348>
 800590a:	2310      	movs	r3, #16
 800590c:	77fb      	strb	r3, [r7, #31]
 800590e:	e095      	b.n	8005a3c <UART_SetConfig+0x348>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2f      	ldr	r2, [pc, #188]	; (80059d4 <UART_SetConfig+0x2e0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d125      	bne.n	8005966 <UART_SetConfig+0x272>
 800591a:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <UART_SetConfig+0x2cc>)
 800591c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005920:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005924:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005928:	d017      	beq.n	800595a <UART_SetConfig+0x266>
 800592a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800592e:	d817      	bhi.n	8005960 <UART_SetConfig+0x26c>
 8005930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005934:	d00b      	beq.n	800594e <UART_SetConfig+0x25a>
 8005936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593a:	d811      	bhi.n	8005960 <UART_SetConfig+0x26c>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <UART_SetConfig+0x254>
 8005940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005944:	d006      	beq.n	8005954 <UART_SetConfig+0x260>
 8005946:	e00b      	b.n	8005960 <UART_SetConfig+0x26c>
 8005948:	2301      	movs	r3, #1
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	e076      	b.n	8005a3c <UART_SetConfig+0x348>
 800594e:	2302      	movs	r3, #2
 8005950:	77fb      	strb	r3, [r7, #31]
 8005952:	e073      	b.n	8005a3c <UART_SetConfig+0x348>
 8005954:	2304      	movs	r3, #4
 8005956:	77fb      	strb	r3, [r7, #31]
 8005958:	e070      	b.n	8005a3c <UART_SetConfig+0x348>
 800595a:	2308      	movs	r3, #8
 800595c:	77fb      	strb	r3, [r7, #31]
 800595e:	e06d      	b.n	8005a3c <UART_SetConfig+0x348>
 8005960:	2310      	movs	r3, #16
 8005962:	77fb      	strb	r3, [r7, #31]
 8005964:	e06a      	b.n	8005a3c <UART_SetConfig+0x348>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1b      	ldr	r2, [pc, #108]	; (80059d8 <UART_SetConfig+0x2e4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d138      	bne.n	80059e2 <UART_SetConfig+0x2ee>
 8005970:	4b13      	ldr	r3, [pc, #76]	; (80059c0 <UART_SetConfig+0x2cc>)
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005976:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800597a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800597e:	d017      	beq.n	80059b0 <UART_SetConfig+0x2bc>
 8005980:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005984:	d82a      	bhi.n	80059dc <UART_SetConfig+0x2e8>
 8005986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598a:	d00b      	beq.n	80059a4 <UART_SetConfig+0x2b0>
 800598c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005990:	d824      	bhi.n	80059dc <UART_SetConfig+0x2e8>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <UART_SetConfig+0x2aa>
 8005996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599a:	d006      	beq.n	80059aa <UART_SetConfig+0x2b6>
 800599c:	e01e      	b.n	80059dc <UART_SetConfig+0x2e8>
 800599e:	2300      	movs	r3, #0
 80059a0:	77fb      	strb	r3, [r7, #31]
 80059a2:	e04b      	b.n	8005a3c <UART_SetConfig+0x348>
 80059a4:	2302      	movs	r3, #2
 80059a6:	77fb      	strb	r3, [r7, #31]
 80059a8:	e048      	b.n	8005a3c <UART_SetConfig+0x348>
 80059aa:	2304      	movs	r3, #4
 80059ac:	77fb      	strb	r3, [r7, #31]
 80059ae:	e045      	b.n	8005a3c <UART_SetConfig+0x348>
 80059b0:	2308      	movs	r3, #8
 80059b2:	77fb      	strb	r3, [r7, #31]
 80059b4:	e042      	b.n	8005a3c <UART_SetConfig+0x348>
 80059b6:	bf00      	nop
 80059b8:	efff69f3 	.word	0xefff69f3
 80059bc:	40011000 	.word	0x40011000
 80059c0:	40023800 	.word	0x40023800
 80059c4:	40004400 	.word	0x40004400
 80059c8:	40004800 	.word	0x40004800
 80059cc:	40004c00 	.word	0x40004c00
 80059d0:	40005000 	.word	0x40005000
 80059d4:	40011400 	.word	0x40011400
 80059d8:	40007800 	.word	0x40007800
 80059dc:	2310      	movs	r3, #16
 80059de:	77fb      	strb	r3, [r7, #31]
 80059e0:	e02c      	b.n	8005a3c <UART_SetConfig+0x348>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a72      	ldr	r2, [pc, #456]	; (8005bb0 <UART_SetConfig+0x4bc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d125      	bne.n	8005a38 <UART_SetConfig+0x344>
 80059ec:	4b71      	ldr	r3, [pc, #452]	; (8005bb4 <UART_SetConfig+0x4c0>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80059f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059fa:	d017      	beq.n	8005a2c <UART_SetConfig+0x338>
 80059fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a00:	d817      	bhi.n	8005a32 <UART_SetConfig+0x33e>
 8005a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a06:	d00b      	beq.n	8005a20 <UART_SetConfig+0x32c>
 8005a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a0c:	d811      	bhi.n	8005a32 <UART_SetConfig+0x33e>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <UART_SetConfig+0x326>
 8005a12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a16:	d006      	beq.n	8005a26 <UART_SetConfig+0x332>
 8005a18:	e00b      	b.n	8005a32 <UART_SetConfig+0x33e>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e00d      	b.n	8005a3c <UART_SetConfig+0x348>
 8005a20:	2302      	movs	r3, #2
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e00a      	b.n	8005a3c <UART_SetConfig+0x348>
 8005a26:	2304      	movs	r3, #4
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e007      	b.n	8005a3c <UART_SetConfig+0x348>
 8005a2c:	2308      	movs	r3, #8
 8005a2e:	77fb      	strb	r3, [r7, #31]
 8005a30:	e004      	b.n	8005a3c <UART_SetConfig+0x348>
 8005a32:	2310      	movs	r3, #16
 8005a34:	77fb      	strb	r3, [r7, #31]
 8005a36:	e001      	b.n	8005a3c <UART_SetConfig+0x348>
 8005a38:	2310      	movs	r3, #16
 8005a3a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a44:	d15b      	bne.n	8005afe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005a46:	7ffb      	ldrb	r3, [r7, #31]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d828      	bhi.n	8005a9e <UART_SetConfig+0x3aa>
 8005a4c:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <UART_SetConfig+0x360>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005a79 	.word	0x08005a79
 8005a58:	08005a81 	.word	0x08005a81
 8005a5c:	08005a89 	.word	0x08005a89
 8005a60:	08005a9f 	.word	0x08005a9f
 8005a64:	08005a8f 	.word	0x08005a8f
 8005a68:	08005a9f 	.word	0x08005a9f
 8005a6c:	08005a9f 	.word	0x08005a9f
 8005a70:	08005a9f 	.word	0x08005a9f
 8005a74:	08005a97 	.word	0x08005a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a78:	f7fd ffa6 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 8005a7c:	61b8      	str	r0, [r7, #24]
        break;
 8005a7e:	e013      	b.n	8005aa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a80:	f7fd ffb6 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8005a84:	61b8      	str	r0, [r7, #24]
        break;
 8005a86:	e00f      	b.n	8005aa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a88:	4b4b      	ldr	r3, [pc, #300]	; (8005bb8 <UART_SetConfig+0x4c4>)
 8005a8a:	61bb      	str	r3, [r7, #24]
        break;
 8005a8c:	e00c      	b.n	8005aa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a8e:	f7fd fe89 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8005a92:	61b8      	str	r0, [r7, #24]
        break;
 8005a94:	e008      	b.n	8005aa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a9a:	61bb      	str	r3, [r7, #24]
        break;
 8005a9c:	e004      	b.n	8005aa8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	77bb      	strb	r3, [r7, #30]
        break;
 8005aa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d074      	beq.n	8005b98 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	005a      	lsls	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	441a      	add	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2b0f      	cmp	r3, #15
 8005ac8:	d916      	bls.n	8005af8 <UART_SetConfig+0x404>
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad0:	d212      	bcs.n	8005af8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	f023 030f 	bic.w	r3, r3, #15
 8005ada:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	085b      	lsrs	r3, r3, #1
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	89fb      	ldrh	r3, [r7, #14]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	89fa      	ldrh	r2, [r7, #14]
 8005af4:	60da      	str	r2, [r3, #12]
 8005af6:	e04f      	b.n	8005b98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	77bb      	strb	r3, [r7, #30]
 8005afc:	e04c      	b.n	8005b98 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005afe:	7ffb      	ldrb	r3, [r7, #31]
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d828      	bhi.n	8005b56 <UART_SetConfig+0x462>
 8005b04:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <UART_SetConfig+0x418>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b31 	.word	0x08005b31
 8005b10:	08005b39 	.word	0x08005b39
 8005b14:	08005b41 	.word	0x08005b41
 8005b18:	08005b57 	.word	0x08005b57
 8005b1c:	08005b47 	.word	0x08005b47
 8005b20:	08005b57 	.word	0x08005b57
 8005b24:	08005b57 	.word	0x08005b57
 8005b28:	08005b57 	.word	0x08005b57
 8005b2c:	08005b4f 	.word	0x08005b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b30:	f7fd ff4a 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 8005b34:	61b8      	str	r0, [r7, #24]
        break;
 8005b36:	e013      	b.n	8005b60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b38:	f7fd ff5a 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8005b3c:	61b8      	str	r0, [r7, #24]
        break;
 8005b3e:	e00f      	b.n	8005b60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b40:	4b1d      	ldr	r3, [pc, #116]	; (8005bb8 <UART_SetConfig+0x4c4>)
 8005b42:	61bb      	str	r3, [r7, #24]
        break;
 8005b44:	e00c      	b.n	8005b60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b46:	f7fd fe2d 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8005b4a:	61b8      	str	r0, [r7, #24]
        break;
 8005b4c:	e008      	b.n	8005b60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b52:	61bb      	str	r3, [r7, #24]
        break;
 8005b54:	e004      	b.n	8005b60 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	77bb      	strb	r3, [r7, #30]
        break;
 8005b5e:	bf00      	nop
    }

    if (pclk != 0U)
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d018      	beq.n	8005b98 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	085a      	lsrs	r2, r3, #1
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	441a      	add	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b0f      	cmp	r3, #15
 8005b7e:	d909      	bls.n	8005b94 <UART_SetConfig+0x4a0>
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b86:	d205      	bcs.n	8005b94 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60da      	str	r2, [r3, #12]
 8005b92:	e001      	b.n	8005b98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ba4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40007c00 	.word	0x40007c00
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	00f42400 	.word	0x00f42400

08005bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00a      	beq.n	8005c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00a      	beq.n	8005c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01a      	beq.n	8005cd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cba:	d10a      	bne.n	8005cd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	605a      	str	r2, [r3, #4]
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d10:	f7fc fa5a 	bl	80021c8 <HAL_GetTick>
 8005d14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d10e      	bne.n	8005d42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f81b 	bl	8005d6e <UART_WaitOnFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e011      	b.n	8005d66 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b09c      	sub	sp, #112	; 0x70
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	603b      	str	r3, [r7, #0]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d7e:	e0a7      	b.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d86:	f000 80a3 	beq.w	8005ed0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d8a:	f7fc fa1d 	bl	80021c8 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d302      	bcc.n	8005da0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d13f      	bne.n	8005e20 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005db4:	667b      	str	r3, [r7, #100]	; 0x64
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dc0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005dc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e6      	bne.n	8005da0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	f023 0301 	bic.w	r3, r3, #1
 8005de8:	663b      	str	r3, [r7, #96]	; 0x60
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3308      	adds	r3, #8
 8005df0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005df2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005df4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005df8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e5      	bne.n	8005dd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e068      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d050      	beq.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e3c:	d148      	bne.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e46:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e66:	637b      	str	r3, [r7, #52]	; 0x34
 8005e68:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e6      	bne.n	8005e48 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	613b      	str	r3, [r7, #16]
   return(result);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f023 0301 	bic.w	r3, r3, #1
 8005e90:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e9a:	623a      	str	r2, [r7, #32]
 8005e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	69f9      	ldr	r1, [r7, #28]
 8005ea0:	6a3a      	ldr	r2, [r7, #32]
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e5      	bne.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e010      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69da      	ldr	r2, [r3, #28]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	bf0c      	ite	eq
 8005ee0:	2301      	moveq	r3, #1
 8005ee2:	2300      	movne	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	f43f af48 	beq.w	8005d80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3770      	adds	r7, #112	; 0x70
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b097      	sub	sp, #92	; 0x5c
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	88fa      	ldrh	r2, [r7, #6]
 8005f14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	88fa      	ldrh	r2, [r7, #6]
 8005f1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2e:	d10e      	bne.n	8005f4e <UART_Start_Receive_IT+0x52>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <UART_Start_Receive_IT+0x48>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005f3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f42:	e02d      	b.n	8005fa0 <UART_Start_Receive_IT+0xa4>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	22ff      	movs	r2, #255	; 0xff
 8005f48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f4c:	e028      	b.n	8005fa0 <UART_Start_Receive_IT+0xa4>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10d      	bne.n	8005f72 <UART_Start_Receive_IT+0x76>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d104      	bne.n	8005f68 <UART_Start_Receive_IT+0x6c>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	22ff      	movs	r2, #255	; 0xff
 8005f62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f66:	e01b      	b.n	8005fa0 <UART_Start_Receive_IT+0xa4>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	227f      	movs	r2, #127	; 0x7f
 8005f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f70:	e016      	b.n	8005fa0 <UART_Start_Receive_IT+0xa4>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f7a:	d10d      	bne.n	8005f98 <UART_Start_Receive_IT+0x9c>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <UART_Start_Receive_IT+0x92>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	227f      	movs	r2, #127	; 0x7f
 8005f88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f8c:	e008      	b.n	8005fa0 <UART_Start_Receive_IT+0xa4>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	223f      	movs	r2, #63	; 0x3f
 8005f92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f96:	e003      	b.n	8005fa0 <UART_Start_Receive_IT+0xa4>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2222      	movs	r2, #34	; 0x22
 8005fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	f043 0301 	orr.w	r3, r3, #1
 8005fc6:	657b      	str	r3, [r7, #84]	; 0x54
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fd0:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fd2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fec:	d107      	bne.n	8005ffe <UART_Start_Receive_IT+0x102>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d103      	bne.n	8005ffe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4a21      	ldr	r2, [pc, #132]	; (8006080 <UART_Start_Receive_IT+0x184>)
 8005ffa:	669a      	str	r2, [r3, #104]	; 0x68
 8005ffc:	e002      	b.n	8006004 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4a20      	ldr	r2, [pc, #128]	; (8006084 <UART_Start_Receive_IT+0x188>)
 8006002:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d019      	beq.n	8006040 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006020:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800602a:	637b      	str	r3, [r7, #52]	; 0x34
 800602c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e6      	bne.n	800600c <UART_Start_Receive_IT+0x110>
 800603e:	e018      	b.n	8006072 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	613b      	str	r3, [r7, #16]
   return(result);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f043 0320 	orr.w	r3, r3, #32
 8006054:	653b      	str	r3, [r7, #80]	; 0x50
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800605e:	623b      	str	r3, [r7, #32]
 8006060:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	69f9      	ldr	r1, [r7, #28]
 8006064:	6a3a      	ldr	r2, [r7, #32]
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	61bb      	str	r3, [r7, #24]
   return(result);
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e6      	bne.n	8006040 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	375c      	adds	r7, #92	; 0x5c
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	08006337 	.word	0x08006337
 8006084:	080061d1 	.word	0x080061d1

08006088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006088:	b480      	push	{r7}
 800608a:	b095      	sub	sp, #84	; 0x54
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ae:	643b      	str	r3, [r7, #64]	; 0x40
 80060b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e6      	bne.n	8006090 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3308      	adds	r3, #8
 80060c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3308      	adds	r3, #8
 80060e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e5      	bne.n	80060c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d118      	bne.n	8006130 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	60bb      	str	r3, [r7, #8]
   return(result);
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f023 0310 	bic.w	r3, r3, #16
 8006112:	647b      	str	r3, [r7, #68]	; 0x44
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006120:	6979      	ldr	r1, [r7, #20]
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	e841 2300 	strex	r3, r2, [r1]
 8006128:	613b      	str	r3, [r7, #16]
   return(result);
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1e6      	bne.n	80060fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2220      	movs	r2, #32
 8006134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006144:	bf00      	nop
 8006146:	3754      	adds	r7, #84	; 0x54
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7ff faaa 	bl	80056c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	60bb      	str	r3, [r7, #8]
   return(result);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	61bb      	str	r3, [r7, #24]
 80061a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6979      	ldr	r1, [r7, #20]
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	613b      	str	r3, [r7, #16]
   return(result);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e6      	bne.n	8006184 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff fa76 	bl	80056b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061c8:	bf00      	nop
 80061ca:	3720      	adds	r7, #32
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b096      	sub	sp, #88	; 0x58
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061e8:	2b22      	cmp	r3, #34	; 0x22
 80061ea:	f040 8098 	bne.w	800631e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80061f8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80061fc:	b2d9      	uxtb	r1, r3
 80061fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006202:	b2da      	uxtb	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006208:	400a      	ands	r2, r1
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d17b      	bne.n	800632e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800624a:	653b      	str	r3, [r7, #80]	; 0x50
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006254:	647b      	str	r3, [r7, #68]	; 0x44
 8006256:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800625a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e6      	bne.n	8006236 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3308      	adds	r3, #8
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	e853 3f00 	ldrex	r3, [r3]
 8006276:	623b      	str	r3, [r7, #32]
   return(result);
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	f023 0301 	bic.w	r3, r3, #1
 800627e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3308      	adds	r3, #8
 8006286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006288:	633a      	str	r2, [r7, #48]	; 0x30
 800628a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800628e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e5      	bne.n	8006268 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d12e      	bne.n	8006316 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0310 	bic.w	r3, r3, #16
 80062d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	69b9      	ldr	r1, [r7, #24]
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	617b      	str	r3, [r7, #20]
   return(result);
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e6      	bne.n	80062be <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	f003 0310 	and.w	r3, r3, #16
 80062fa:	2b10      	cmp	r3, #16
 80062fc:	d103      	bne.n	8006306 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2210      	movs	r2, #16
 8006304:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7ff f9e4 	bl	80056dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006314:	e00b      	b.n	800632e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fb fb96 	bl	8001a48 <HAL_UART_RxCpltCallback>
}
 800631c:	e007      	b.n	800632e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699a      	ldr	r2, [r3, #24]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f042 0208 	orr.w	r2, r2, #8
 800632c:	619a      	str	r2, [r3, #24]
}
 800632e:	bf00      	nop
 8006330:	3758      	adds	r7, #88	; 0x58
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b096      	sub	sp, #88	; 0x58
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006344:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800634e:	2b22      	cmp	r3, #34	; 0x22
 8006350:	f040 8098 	bne.w	8006484 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006364:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006368:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800636c:	4013      	ands	r3, r2
 800636e:	b29a      	uxth	r2, r3
 8006370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006372:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006378:	1c9a      	adds	r2, r3, #2
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b01      	subs	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d17b      	bne.n	8006494 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ba:	643b      	str	r3, [r7, #64]	; 0x40
 80063bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e6      	bne.n	800639c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3308      	adds	r3, #8
 80063d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	f023 0301 	bic.w	r3, r3, #1
 80063e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3308      	adds	r3, #8
 80063ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e5      	bne.n	80063ce <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2220      	movs	r2, #32
 8006406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641a:	2b01      	cmp	r3, #1
 800641c:	d12e      	bne.n	800647c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	60bb      	str	r3, [r7, #8]
   return(result);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f023 0310 	bic.w	r3, r3, #16
 8006438:	647b      	str	r3, [r7, #68]	; 0x44
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006442:	61bb      	str	r3, [r7, #24]
 8006444:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6979      	ldr	r1, [r7, #20]
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	613b      	str	r3, [r7, #16]
   return(result);
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e6      	bne.n	8006424 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	2b10      	cmp	r3, #16
 8006462:	d103      	bne.n	800646c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2210      	movs	r2, #16
 800646a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff f931 	bl	80056dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800647a:	e00b      	b.n	8006494 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7fb fae3 	bl	8001a48 <HAL_UART_RxCpltCallback>
}
 8006482:	e007      	b.n	8006494 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0208 	orr.w	r2, r2, #8
 8006492:	619a      	str	r2, [r3, #24]
}
 8006494:	bf00      	nop
 8006496:	3758      	adds	r7, #88	; 0x58
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <_vsniprintf_r>:
 800649c:	b530      	push	{r4, r5, lr}
 800649e:	4614      	mov	r4, r2
 80064a0:	2c00      	cmp	r4, #0
 80064a2:	b09b      	sub	sp, #108	; 0x6c
 80064a4:	4605      	mov	r5, r0
 80064a6:	461a      	mov	r2, r3
 80064a8:	da05      	bge.n	80064b6 <_vsniprintf_r+0x1a>
 80064aa:	238b      	movs	r3, #139	; 0x8b
 80064ac:	6003      	str	r3, [r0, #0]
 80064ae:	f04f 30ff 	mov.w	r0, #4294967295
 80064b2:	b01b      	add	sp, #108	; 0x6c
 80064b4:	bd30      	pop	{r4, r5, pc}
 80064b6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80064ba:	f8ad 300c 	strh.w	r3, [sp, #12]
 80064be:	bf14      	ite	ne
 80064c0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80064c4:	4623      	moveq	r3, r4
 80064c6:	9302      	str	r3, [sp, #8]
 80064c8:	9305      	str	r3, [sp, #20]
 80064ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064ce:	9100      	str	r1, [sp, #0]
 80064d0:	9104      	str	r1, [sp, #16]
 80064d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80064d6:	4669      	mov	r1, sp
 80064d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064da:	f000 f99f 	bl	800681c <_svfiprintf_r>
 80064de:	1c43      	adds	r3, r0, #1
 80064e0:	bfbc      	itt	lt
 80064e2:	238b      	movlt	r3, #139	; 0x8b
 80064e4:	602b      	strlt	r3, [r5, #0]
 80064e6:	2c00      	cmp	r4, #0
 80064e8:	d0e3      	beq.n	80064b2 <_vsniprintf_r+0x16>
 80064ea:	9b00      	ldr	r3, [sp, #0]
 80064ec:	2200      	movs	r2, #0
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	e7df      	b.n	80064b2 <_vsniprintf_r+0x16>
	...

080064f4 <vsniprintf>:
 80064f4:	b507      	push	{r0, r1, r2, lr}
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	460a      	mov	r2, r1
 80064fc:	4601      	mov	r1, r0
 80064fe:	4803      	ldr	r0, [pc, #12]	; (800650c <vsniprintf+0x18>)
 8006500:	6800      	ldr	r0, [r0, #0]
 8006502:	f7ff ffcb 	bl	800649c <_vsniprintf_r>
 8006506:	b003      	add	sp, #12
 8006508:	f85d fb04 	ldr.w	pc, [sp], #4
 800650c:	20000088 	.word	0x20000088

08006510 <memset>:
 8006510:	4402      	add	r2, r0
 8006512:	4603      	mov	r3, r0
 8006514:	4293      	cmp	r3, r2
 8006516:	d100      	bne.n	800651a <memset+0xa>
 8006518:	4770      	bx	lr
 800651a:	f803 1b01 	strb.w	r1, [r3], #1
 800651e:	e7f9      	b.n	8006514 <memset+0x4>

08006520 <__errno>:
 8006520:	4b01      	ldr	r3, [pc, #4]	; (8006528 <__errno+0x8>)
 8006522:	6818      	ldr	r0, [r3, #0]
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20000088 	.word	0x20000088

0800652c <__libc_init_array>:
 800652c:	b570      	push	{r4, r5, r6, lr}
 800652e:	4d0d      	ldr	r5, [pc, #52]	; (8006564 <__libc_init_array+0x38>)
 8006530:	4c0d      	ldr	r4, [pc, #52]	; (8006568 <__libc_init_array+0x3c>)
 8006532:	1b64      	subs	r4, r4, r5
 8006534:	10a4      	asrs	r4, r4, #2
 8006536:	2600      	movs	r6, #0
 8006538:	42a6      	cmp	r6, r4
 800653a:	d109      	bne.n	8006550 <__libc_init_array+0x24>
 800653c:	4d0b      	ldr	r5, [pc, #44]	; (800656c <__libc_init_array+0x40>)
 800653e:	4c0c      	ldr	r4, [pc, #48]	; (8006570 <__libc_init_array+0x44>)
 8006540:	f000 fc6a 	bl	8006e18 <_init>
 8006544:	1b64      	subs	r4, r4, r5
 8006546:	10a4      	asrs	r4, r4, #2
 8006548:	2600      	movs	r6, #0
 800654a:	42a6      	cmp	r6, r4
 800654c:	d105      	bne.n	800655a <__libc_init_array+0x2e>
 800654e:	bd70      	pop	{r4, r5, r6, pc}
 8006550:	f855 3b04 	ldr.w	r3, [r5], #4
 8006554:	4798      	blx	r3
 8006556:	3601      	adds	r6, #1
 8006558:	e7ee      	b.n	8006538 <__libc_init_array+0xc>
 800655a:	f855 3b04 	ldr.w	r3, [r5], #4
 800655e:	4798      	blx	r3
 8006560:	3601      	adds	r6, #1
 8006562:	e7f2      	b.n	800654a <__libc_init_array+0x1e>
 8006564:	08007674 	.word	0x08007674
 8006568:	08007674 	.word	0x08007674
 800656c:	08007674 	.word	0x08007674
 8006570:	08007678 	.word	0x08007678

08006574 <__retarget_lock_acquire_recursive>:
 8006574:	4770      	bx	lr

08006576 <__retarget_lock_release_recursive>:
 8006576:	4770      	bx	lr

08006578 <_free_r>:
 8006578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800657a:	2900      	cmp	r1, #0
 800657c:	d044      	beq.n	8006608 <_free_r+0x90>
 800657e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006582:	9001      	str	r0, [sp, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f1a1 0404 	sub.w	r4, r1, #4
 800658a:	bfb8      	it	lt
 800658c:	18e4      	addlt	r4, r4, r3
 800658e:	f000 f8df 	bl	8006750 <__malloc_lock>
 8006592:	4a1e      	ldr	r2, [pc, #120]	; (800660c <_free_r+0x94>)
 8006594:	9801      	ldr	r0, [sp, #4]
 8006596:	6813      	ldr	r3, [r2, #0]
 8006598:	b933      	cbnz	r3, 80065a8 <_free_r+0x30>
 800659a:	6063      	str	r3, [r4, #4]
 800659c:	6014      	str	r4, [r2, #0]
 800659e:	b003      	add	sp, #12
 80065a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065a4:	f000 b8da 	b.w	800675c <__malloc_unlock>
 80065a8:	42a3      	cmp	r3, r4
 80065aa:	d908      	bls.n	80065be <_free_r+0x46>
 80065ac:	6825      	ldr	r5, [r4, #0]
 80065ae:	1961      	adds	r1, r4, r5
 80065b0:	428b      	cmp	r3, r1
 80065b2:	bf01      	itttt	eq
 80065b4:	6819      	ldreq	r1, [r3, #0]
 80065b6:	685b      	ldreq	r3, [r3, #4]
 80065b8:	1949      	addeq	r1, r1, r5
 80065ba:	6021      	streq	r1, [r4, #0]
 80065bc:	e7ed      	b.n	800659a <_free_r+0x22>
 80065be:	461a      	mov	r2, r3
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	b10b      	cbz	r3, 80065c8 <_free_r+0x50>
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	d9fa      	bls.n	80065be <_free_r+0x46>
 80065c8:	6811      	ldr	r1, [r2, #0]
 80065ca:	1855      	adds	r5, r2, r1
 80065cc:	42a5      	cmp	r5, r4
 80065ce:	d10b      	bne.n	80065e8 <_free_r+0x70>
 80065d0:	6824      	ldr	r4, [r4, #0]
 80065d2:	4421      	add	r1, r4
 80065d4:	1854      	adds	r4, r2, r1
 80065d6:	42a3      	cmp	r3, r4
 80065d8:	6011      	str	r1, [r2, #0]
 80065da:	d1e0      	bne.n	800659e <_free_r+0x26>
 80065dc:	681c      	ldr	r4, [r3, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	6053      	str	r3, [r2, #4]
 80065e2:	440c      	add	r4, r1
 80065e4:	6014      	str	r4, [r2, #0]
 80065e6:	e7da      	b.n	800659e <_free_r+0x26>
 80065e8:	d902      	bls.n	80065f0 <_free_r+0x78>
 80065ea:	230c      	movs	r3, #12
 80065ec:	6003      	str	r3, [r0, #0]
 80065ee:	e7d6      	b.n	800659e <_free_r+0x26>
 80065f0:	6825      	ldr	r5, [r4, #0]
 80065f2:	1961      	adds	r1, r4, r5
 80065f4:	428b      	cmp	r3, r1
 80065f6:	bf04      	itt	eq
 80065f8:	6819      	ldreq	r1, [r3, #0]
 80065fa:	685b      	ldreq	r3, [r3, #4]
 80065fc:	6063      	str	r3, [r4, #4]
 80065fe:	bf04      	itt	eq
 8006600:	1949      	addeq	r1, r1, r5
 8006602:	6021      	streq	r1, [r4, #0]
 8006604:	6054      	str	r4, [r2, #4]
 8006606:	e7ca      	b.n	800659e <_free_r+0x26>
 8006608:	b003      	add	sp, #12
 800660a:	bd30      	pop	{r4, r5, pc}
 800660c:	2000b70c 	.word	0x2000b70c

08006610 <sbrk_aligned>:
 8006610:	b570      	push	{r4, r5, r6, lr}
 8006612:	4e0e      	ldr	r6, [pc, #56]	; (800664c <sbrk_aligned+0x3c>)
 8006614:	460c      	mov	r4, r1
 8006616:	6831      	ldr	r1, [r6, #0]
 8006618:	4605      	mov	r5, r0
 800661a:	b911      	cbnz	r1, 8006622 <sbrk_aligned+0x12>
 800661c:	f000 fba6 	bl	8006d6c <_sbrk_r>
 8006620:	6030      	str	r0, [r6, #0]
 8006622:	4621      	mov	r1, r4
 8006624:	4628      	mov	r0, r5
 8006626:	f000 fba1 	bl	8006d6c <_sbrk_r>
 800662a:	1c43      	adds	r3, r0, #1
 800662c:	d00a      	beq.n	8006644 <sbrk_aligned+0x34>
 800662e:	1cc4      	adds	r4, r0, #3
 8006630:	f024 0403 	bic.w	r4, r4, #3
 8006634:	42a0      	cmp	r0, r4
 8006636:	d007      	beq.n	8006648 <sbrk_aligned+0x38>
 8006638:	1a21      	subs	r1, r4, r0
 800663a:	4628      	mov	r0, r5
 800663c:	f000 fb96 	bl	8006d6c <_sbrk_r>
 8006640:	3001      	adds	r0, #1
 8006642:	d101      	bne.n	8006648 <sbrk_aligned+0x38>
 8006644:	f04f 34ff 	mov.w	r4, #4294967295
 8006648:	4620      	mov	r0, r4
 800664a:	bd70      	pop	{r4, r5, r6, pc}
 800664c:	2000b710 	.word	0x2000b710

08006650 <_malloc_r>:
 8006650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006654:	1ccd      	adds	r5, r1, #3
 8006656:	f025 0503 	bic.w	r5, r5, #3
 800665a:	3508      	adds	r5, #8
 800665c:	2d0c      	cmp	r5, #12
 800665e:	bf38      	it	cc
 8006660:	250c      	movcc	r5, #12
 8006662:	2d00      	cmp	r5, #0
 8006664:	4607      	mov	r7, r0
 8006666:	db01      	blt.n	800666c <_malloc_r+0x1c>
 8006668:	42a9      	cmp	r1, r5
 800666a:	d905      	bls.n	8006678 <_malloc_r+0x28>
 800666c:	230c      	movs	r3, #12
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	2600      	movs	r6, #0
 8006672:	4630      	mov	r0, r6
 8006674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006678:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800674c <_malloc_r+0xfc>
 800667c:	f000 f868 	bl	8006750 <__malloc_lock>
 8006680:	f8d8 3000 	ldr.w	r3, [r8]
 8006684:	461c      	mov	r4, r3
 8006686:	bb5c      	cbnz	r4, 80066e0 <_malloc_r+0x90>
 8006688:	4629      	mov	r1, r5
 800668a:	4638      	mov	r0, r7
 800668c:	f7ff ffc0 	bl	8006610 <sbrk_aligned>
 8006690:	1c43      	adds	r3, r0, #1
 8006692:	4604      	mov	r4, r0
 8006694:	d155      	bne.n	8006742 <_malloc_r+0xf2>
 8006696:	f8d8 4000 	ldr.w	r4, [r8]
 800669a:	4626      	mov	r6, r4
 800669c:	2e00      	cmp	r6, #0
 800669e:	d145      	bne.n	800672c <_malloc_r+0xdc>
 80066a0:	2c00      	cmp	r4, #0
 80066a2:	d048      	beq.n	8006736 <_malloc_r+0xe6>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	4631      	mov	r1, r6
 80066a8:	4638      	mov	r0, r7
 80066aa:	eb04 0903 	add.w	r9, r4, r3
 80066ae:	f000 fb5d 	bl	8006d6c <_sbrk_r>
 80066b2:	4581      	cmp	r9, r0
 80066b4:	d13f      	bne.n	8006736 <_malloc_r+0xe6>
 80066b6:	6821      	ldr	r1, [r4, #0]
 80066b8:	1a6d      	subs	r5, r5, r1
 80066ba:	4629      	mov	r1, r5
 80066bc:	4638      	mov	r0, r7
 80066be:	f7ff ffa7 	bl	8006610 <sbrk_aligned>
 80066c2:	3001      	adds	r0, #1
 80066c4:	d037      	beq.n	8006736 <_malloc_r+0xe6>
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	442b      	add	r3, r5
 80066ca:	6023      	str	r3, [r4, #0]
 80066cc:	f8d8 3000 	ldr.w	r3, [r8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d038      	beq.n	8006746 <_malloc_r+0xf6>
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	42a2      	cmp	r2, r4
 80066d8:	d12b      	bne.n	8006732 <_malloc_r+0xe2>
 80066da:	2200      	movs	r2, #0
 80066dc:	605a      	str	r2, [r3, #4]
 80066de:	e00f      	b.n	8006700 <_malloc_r+0xb0>
 80066e0:	6822      	ldr	r2, [r4, #0]
 80066e2:	1b52      	subs	r2, r2, r5
 80066e4:	d41f      	bmi.n	8006726 <_malloc_r+0xd6>
 80066e6:	2a0b      	cmp	r2, #11
 80066e8:	d917      	bls.n	800671a <_malloc_r+0xca>
 80066ea:	1961      	adds	r1, r4, r5
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	6025      	str	r5, [r4, #0]
 80066f0:	bf18      	it	ne
 80066f2:	6059      	strne	r1, [r3, #4]
 80066f4:	6863      	ldr	r3, [r4, #4]
 80066f6:	bf08      	it	eq
 80066f8:	f8c8 1000 	streq.w	r1, [r8]
 80066fc:	5162      	str	r2, [r4, r5]
 80066fe:	604b      	str	r3, [r1, #4]
 8006700:	4638      	mov	r0, r7
 8006702:	f104 060b 	add.w	r6, r4, #11
 8006706:	f000 f829 	bl	800675c <__malloc_unlock>
 800670a:	f026 0607 	bic.w	r6, r6, #7
 800670e:	1d23      	adds	r3, r4, #4
 8006710:	1af2      	subs	r2, r6, r3
 8006712:	d0ae      	beq.n	8006672 <_malloc_r+0x22>
 8006714:	1b9b      	subs	r3, r3, r6
 8006716:	50a3      	str	r3, [r4, r2]
 8006718:	e7ab      	b.n	8006672 <_malloc_r+0x22>
 800671a:	42a3      	cmp	r3, r4
 800671c:	6862      	ldr	r2, [r4, #4]
 800671e:	d1dd      	bne.n	80066dc <_malloc_r+0x8c>
 8006720:	f8c8 2000 	str.w	r2, [r8]
 8006724:	e7ec      	b.n	8006700 <_malloc_r+0xb0>
 8006726:	4623      	mov	r3, r4
 8006728:	6864      	ldr	r4, [r4, #4]
 800672a:	e7ac      	b.n	8006686 <_malloc_r+0x36>
 800672c:	4634      	mov	r4, r6
 800672e:	6876      	ldr	r6, [r6, #4]
 8006730:	e7b4      	b.n	800669c <_malloc_r+0x4c>
 8006732:	4613      	mov	r3, r2
 8006734:	e7cc      	b.n	80066d0 <_malloc_r+0x80>
 8006736:	230c      	movs	r3, #12
 8006738:	603b      	str	r3, [r7, #0]
 800673a:	4638      	mov	r0, r7
 800673c:	f000 f80e 	bl	800675c <__malloc_unlock>
 8006740:	e797      	b.n	8006672 <_malloc_r+0x22>
 8006742:	6025      	str	r5, [r4, #0]
 8006744:	e7dc      	b.n	8006700 <_malloc_r+0xb0>
 8006746:	605b      	str	r3, [r3, #4]
 8006748:	deff      	udf	#255	; 0xff
 800674a:	bf00      	nop
 800674c:	2000b70c 	.word	0x2000b70c

08006750 <__malloc_lock>:
 8006750:	4801      	ldr	r0, [pc, #4]	; (8006758 <__malloc_lock+0x8>)
 8006752:	f7ff bf0f 	b.w	8006574 <__retarget_lock_acquire_recursive>
 8006756:	bf00      	nop
 8006758:	2000b708 	.word	0x2000b708

0800675c <__malloc_unlock>:
 800675c:	4801      	ldr	r0, [pc, #4]	; (8006764 <__malloc_unlock+0x8>)
 800675e:	f7ff bf0a 	b.w	8006576 <__retarget_lock_release_recursive>
 8006762:	bf00      	nop
 8006764:	2000b708 	.word	0x2000b708

08006768 <__ssputs_r>:
 8006768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800676c:	688e      	ldr	r6, [r1, #8]
 800676e:	461f      	mov	r7, r3
 8006770:	42be      	cmp	r6, r7
 8006772:	680b      	ldr	r3, [r1, #0]
 8006774:	4682      	mov	sl, r0
 8006776:	460c      	mov	r4, r1
 8006778:	4690      	mov	r8, r2
 800677a:	d82c      	bhi.n	80067d6 <__ssputs_r+0x6e>
 800677c:	898a      	ldrh	r2, [r1, #12]
 800677e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006782:	d026      	beq.n	80067d2 <__ssputs_r+0x6a>
 8006784:	6965      	ldr	r5, [r4, #20]
 8006786:	6909      	ldr	r1, [r1, #16]
 8006788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800678c:	eba3 0901 	sub.w	r9, r3, r1
 8006790:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006794:	1c7b      	adds	r3, r7, #1
 8006796:	444b      	add	r3, r9
 8006798:	106d      	asrs	r5, r5, #1
 800679a:	429d      	cmp	r5, r3
 800679c:	bf38      	it	cc
 800679e:	461d      	movcc	r5, r3
 80067a0:	0553      	lsls	r3, r2, #21
 80067a2:	d527      	bpl.n	80067f4 <__ssputs_r+0x8c>
 80067a4:	4629      	mov	r1, r5
 80067a6:	f7ff ff53 	bl	8006650 <_malloc_r>
 80067aa:	4606      	mov	r6, r0
 80067ac:	b360      	cbz	r0, 8006808 <__ssputs_r+0xa0>
 80067ae:	6921      	ldr	r1, [r4, #16]
 80067b0:	464a      	mov	r2, r9
 80067b2:	f000 faeb 	bl	8006d8c <memcpy>
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067c0:	81a3      	strh	r3, [r4, #12]
 80067c2:	6126      	str	r6, [r4, #16]
 80067c4:	6165      	str	r5, [r4, #20]
 80067c6:	444e      	add	r6, r9
 80067c8:	eba5 0509 	sub.w	r5, r5, r9
 80067cc:	6026      	str	r6, [r4, #0]
 80067ce:	60a5      	str	r5, [r4, #8]
 80067d0:	463e      	mov	r6, r7
 80067d2:	42be      	cmp	r6, r7
 80067d4:	d900      	bls.n	80067d8 <__ssputs_r+0x70>
 80067d6:	463e      	mov	r6, r7
 80067d8:	6820      	ldr	r0, [r4, #0]
 80067da:	4632      	mov	r2, r6
 80067dc:	4641      	mov	r1, r8
 80067de:	f000 faab 	bl	8006d38 <memmove>
 80067e2:	68a3      	ldr	r3, [r4, #8]
 80067e4:	1b9b      	subs	r3, r3, r6
 80067e6:	60a3      	str	r3, [r4, #8]
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	4433      	add	r3, r6
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	2000      	movs	r0, #0
 80067f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f4:	462a      	mov	r2, r5
 80067f6:	f000 fad7 	bl	8006da8 <_realloc_r>
 80067fa:	4606      	mov	r6, r0
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d1e0      	bne.n	80067c2 <__ssputs_r+0x5a>
 8006800:	6921      	ldr	r1, [r4, #16]
 8006802:	4650      	mov	r0, sl
 8006804:	f7ff feb8 	bl	8006578 <_free_r>
 8006808:	230c      	movs	r3, #12
 800680a:	f8ca 3000 	str.w	r3, [sl]
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006814:	81a3      	strh	r3, [r4, #12]
 8006816:	f04f 30ff 	mov.w	r0, #4294967295
 800681a:	e7e9      	b.n	80067f0 <__ssputs_r+0x88>

0800681c <_svfiprintf_r>:
 800681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006820:	4698      	mov	r8, r3
 8006822:	898b      	ldrh	r3, [r1, #12]
 8006824:	061b      	lsls	r3, r3, #24
 8006826:	b09d      	sub	sp, #116	; 0x74
 8006828:	4607      	mov	r7, r0
 800682a:	460d      	mov	r5, r1
 800682c:	4614      	mov	r4, r2
 800682e:	d50e      	bpl.n	800684e <_svfiprintf_r+0x32>
 8006830:	690b      	ldr	r3, [r1, #16]
 8006832:	b963      	cbnz	r3, 800684e <_svfiprintf_r+0x32>
 8006834:	2140      	movs	r1, #64	; 0x40
 8006836:	f7ff ff0b 	bl	8006650 <_malloc_r>
 800683a:	6028      	str	r0, [r5, #0]
 800683c:	6128      	str	r0, [r5, #16]
 800683e:	b920      	cbnz	r0, 800684a <_svfiprintf_r+0x2e>
 8006840:	230c      	movs	r3, #12
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	f04f 30ff 	mov.w	r0, #4294967295
 8006848:	e0d0      	b.n	80069ec <_svfiprintf_r+0x1d0>
 800684a:	2340      	movs	r3, #64	; 0x40
 800684c:	616b      	str	r3, [r5, #20]
 800684e:	2300      	movs	r3, #0
 8006850:	9309      	str	r3, [sp, #36]	; 0x24
 8006852:	2320      	movs	r3, #32
 8006854:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006858:	f8cd 800c 	str.w	r8, [sp, #12]
 800685c:	2330      	movs	r3, #48	; 0x30
 800685e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a04 <_svfiprintf_r+0x1e8>
 8006862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006866:	f04f 0901 	mov.w	r9, #1
 800686a:	4623      	mov	r3, r4
 800686c:	469a      	mov	sl, r3
 800686e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006872:	b10a      	cbz	r2, 8006878 <_svfiprintf_r+0x5c>
 8006874:	2a25      	cmp	r2, #37	; 0x25
 8006876:	d1f9      	bne.n	800686c <_svfiprintf_r+0x50>
 8006878:	ebba 0b04 	subs.w	fp, sl, r4
 800687c:	d00b      	beq.n	8006896 <_svfiprintf_r+0x7a>
 800687e:	465b      	mov	r3, fp
 8006880:	4622      	mov	r2, r4
 8006882:	4629      	mov	r1, r5
 8006884:	4638      	mov	r0, r7
 8006886:	f7ff ff6f 	bl	8006768 <__ssputs_r>
 800688a:	3001      	adds	r0, #1
 800688c:	f000 80a9 	beq.w	80069e2 <_svfiprintf_r+0x1c6>
 8006890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006892:	445a      	add	r2, fp
 8006894:	9209      	str	r2, [sp, #36]	; 0x24
 8006896:	f89a 3000 	ldrb.w	r3, [sl]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80a1 	beq.w	80069e2 <_svfiprintf_r+0x1c6>
 80068a0:	2300      	movs	r3, #0
 80068a2:	f04f 32ff 	mov.w	r2, #4294967295
 80068a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068aa:	f10a 0a01 	add.w	sl, sl, #1
 80068ae:	9304      	str	r3, [sp, #16]
 80068b0:	9307      	str	r3, [sp, #28]
 80068b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068b6:	931a      	str	r3, [sp, #104]	; 0x68
 80068b8:	4654      	mov	r4, sl
 80068ba:	2205      	movs	r2, #5
 80068bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c0:	4850      	ldr	r0, [pc, #320]	; (8006a04 <_svfiprintf_r+0x1e8>)
 80068c2:	f7f9 fcad 	bl	8000220 <memchr>
 80068c6:	9a04      	ldr	r2, [sp, #16]
 80068c8:	b9d8      	cbnz	r0, 8006902 <_svfiprintf_r+0xe6>
 80068ca:	06d0      	lsls	r0, r2, #27
 80068cc:	bf44      	itt	mi
 80068ce:	2320      	movmi	r3, #32
 80068d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068d4:	0711      	lsls	r1, r2, #28
 80068d6:	bf44      	itt	mi
 80068d8:	232b      	movmi	r3, #43	; 0x2b
 80068da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068de:	f89a 3000 	ldrb.w	r3, [sl]
 80068e2:	2b2a      	cmp	r3, #42	; 0x2a
 80068e4:	d015      	beq.n	8006912 <_svfiprintf_r+0xf6>
 80068e6:	9a07      	ldr	r2, [sp, #28]
 80068e8:	4654      	mov	r4, sl
 80068ea:	2000      	movs	r0, #0
 80068ec:	f04f 0c0a 	mov.w	ip, #10
 80068f0:	4621      	mov	r1, r4
 80068f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068f6:	3b30      	subs	r3, #48	; 0x30
 80068f8:	2b09      	cmp	r3, #9
 80068fa:	d94d      	bls.n	8006998 <_svfiprintf_r+0x17c>
 80068fc:	b1b0      	cbz	r0, 800692c <_svfiprintf_r+0x110>
 80068fe:	9207      	str	r2, [sp, #28]
 8006900:	e014      	b.n	800692c <_svfiprintf_r+0x110>
 8006902:	eba0 0308 	sub.w	r3, r0, r8
 8006906:	fa09 f303 	lsl.w	r3, r9, r3
 800690a:	4313      	orrs	r3, r2
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	46a2      	mov	sl, r4
 8006910:	e7d2      	b.n	80068b8 <_svfiprintf_r+0x9c>
 8006912:	9b03      	ldr	r3, [sp, #12]
 8006914:	1d19      	adds	r1, r3, #4
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	9103      	str	r1, [sp, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	bfbb      	ittet	lt
 800691e:	425b      	neglt	r3, r3
 8006920:	f042 0202 	orrlt.w	r2, r2, #2
 8006924:	9307      	strge	r3, [sp, #28]
 8006926:	9307      	strlt	r3, [sp, #28]
 8006928:	bfb8      	it	lt
 800692a:	9204      	strlt	r2, [sp, #16]
 800692c:	7823      	ldrb	r3, [r4, #0]
 800692e:	2b2e      	cmp	r3, #46	; 0x2e
 8006930:	d10c      	bne.n	800694c <_svfiprintf_r+0x130>
 8006932:	7863      	ldrb	r3, [r4, #1]
 8006934:	2b2a      	cmp	r3, #42	; 0x2a
 8006936:	d134      	bne.n	80069a2 <_svfiprintf_r+0x186>
 8006938:	9b03      	ldr	r3, [sp, #12]
 800693a:	1d1a      	adds	r2, r3, #4
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	9203      	str	r2, [sp, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	bfb8      	it	lt
 8006944:	f04f 33ff 	movlt.w	r3, #4294967295
 8006948:	3402      	adds	r4, #2
 800694a:	9305      	str	r3, [sp, #20]
 800694c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006a14 <_svfiprintf_r+0x1f8>
 8006950:	7821      	ldrb	r1, [r4, #0]
 8006952:	2203      	movs	r2, #3
 8006954:	4650      	mov	r0, sl
 8006956:	f7f9 fc63 	bl	8000220 <memchr>
 800695a:	b138      	cbz	r0, 800696c <_svfiprintf_r+0x150>
 800695c:	9b04      	ldr	r3, [sp, #16]
 800695e:	eba0 000a 	sub.w	r0, r0, sl
 8006962:	2240      	movs	r2, #64	; 0x40
 8006964:	4082      	lsls	r2, r0
 8006966:	4313      	orrs	r3, r2
 8006968:	3401      	adds	r4, #1
 800696a:	9304      	str	r3, [sp, #16]
 800696c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006970:	4825      	ldr	r0, [pc, #148]	; (8006a08 <_svfiprintf_r+0x1ec>)
 8006972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006976:	2206      	movs	r2, #6
 8006978:	f7f9 fc52 	bl	8000220 <memchr>
 800697c:	2800      	cmp	r0, #0
 800697e:	d038      	beq.n	80069f2 <_svfiprintf_r+0x1d6>
 8006980:	4b22      	ldr	r3, [pc, #136]	; (8006a0c <_svfiprintf_r+0x1f0>)
 8006982:	bb1b      	cbnz	r3, 80069cc <_svfiprintf_r+0x1b0>
 8006984:	9b03      	ldr	r3, [sp, #12]
 8006986:	3307      	adds	r3, #7
 8006988:	f023 0307 	bic.w	r3, r3, #7
 800698c:	3308      	adds	r3, #8
 800698e:	9303      	str	r3, [sp, #12]
 8006990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006992:	4433      	add	r3, r6
 8006994:	9309      	str	r3, [sp, #36]	; 0x24
 8006996:	e768      	b.n	800686a <_svfiprintf_r+0x4e>
 8006998:	fb0c 3202 	mla	r2, ip, r2, r3
 800699c:	460c      	mov	r4, r1
 800699e:	2001      	movs	r0, #1
 80069a0:	e7a6      	b.n	80068f0 <_svfiprintf_r+0xd4>
 80069a2:	2300      	movs	r3, #0
 80069a4:	3401      	adds	r4, #1
 80069a6:	9305      	str	r3, [sp, #20]
 80069a8:	4619      	mov	r1, r3
 80069aa:	f04f 0c0a 	mov.w	ip, #10
 80069ae:	4620      	mov	r0, r4
 80069b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069b4:	3a30      	subs	r2, #48	; 0x30
 80069b6:	2a09      	cmp	r2, #9
 80069b8:	d903      	bls.n	80069c2 <_svfiprintf_r+0x1a6>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0c6      	beq.n	800694c <_svfiprintf_r+0x130>
 80069be:	9105      	str	r1, [sp, #20]
 80069c0:	e7c4      	b.n	800694c <_svfiprintf_r+0x130>
 80069c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80069c6:	4604      	mov	r4, r0
 80069c8:	2301      	movs	r3, #1
 80069ca:	e7f0      	b.n	80069ae <_svfiprintf_r+0x192>
 80069cc:	ab03      	add	r3, sp, #12
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	462a      	mov	r2, r5
 80069d2:	4b0f      	ldr	r3, [pc, #60]	; (8006a10 <_svfiprintf_r+0x1f4>)
 80069d4:	a904      	add	r1, sp, #16
 80069d6:	4638      	mov	r0, r7
 80069d8:	f3af 8000 	nop.w
 80069dc:	1c42      	adds	r2, r0, #1
 80069de:	4606      	mov	r6, r0
 80069e0:	d1d6      	bne.n	8006990 <_svfiprintf_r+0x174>
 80069e2:	89ab      	ldrh	r3, [r5, #12]
 80069e4:	065b      	lsls	r3, r3, #25
 80069e6:	f53f af2d 	bmi.w	8006844 <_svfiprintf_r+0x28>
 80069ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ec:	b01d      	add	sp, #116	; 0x74
 80069ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f2:	ab03      	add	r3, sp, #12
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	462a      	mov	r2, r5
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <_svfiprintf_r+0x1f4>)
 80069fa:	a904      	add	r1, sp, #16
 80069fc:	4638      	mov	r0, r7
 80069fe:	f000 f879 	bl	8006af4 <_printf_i>
 8006a02:	e7eb      	b.n	80069dc <_svfiprintf_r+0x1c0>
 8006a04:	08007638 	.word	0x08007638
 8006a08:	08007642 	.word	0x08007642
 8006a0c:	00000000 	.word	0x00000000
 8006a10:	08006769 	.word	0x08006769
 8006a14:	0800763e 	.word	0x0800763e

08006a18 <_printf_common>:
 8006a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a1c:	4616      	mov	r6, r2
 8006a1e:	4699      	mov	r9, r3
 8006a20:	688a      	ldr	r2, [r1, #8]
 8006a22:	690b      	ldr	r3, [r1, #16]
 8006a24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	bfb8      	it	lt
 8006a2c:	4613      	movlt	r3, r2
 8006a2e:	6033      	str	r3, [r6, #0]
 8006a30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a34:	4607      	mov	r7, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	b10a      	cbz	r2, 8006a3e <_printf_common+0x26>
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	6033      	str	r3, [r6, #0]
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	0699      	lsls	r1, r3, #26
 8006a42:	bf42      	ittt	mi
 8006a44:	6833      	ldrmi	r3, [r6, #0]
 8006a46:	3302      	addmi	r3, #2
 8006a48:	6033      	strmi	r3, [r6, #0]
 8006a4a:	6825      	ldr	r5, [r4, #0]
 8006a4c:	f015 0506 	ands.w	r5, r5, #6
 8006a50:	d106      	bne.n	8006a60 <_printf_common+0x48>
 8006a52:	f104 0a19 	add.w	sl, r4, #25
 8006a56:	68e3      	ldr	r3, [r4, #12]
 8006a58:	6832      	ldr	r2, [r6, #0]
 8006a5a:	1a9b      	subs	r3, r3, r2
 8006a5c:	42ab      	cmp	r3, r5
 8006a5e:	dc26      	bgt.n	8006aae <_printf_common+0x96>
 8006a60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a64:	1e13      	subs	r3, r2, #0
 8006a66:	6822      	ldr	r2, [r4, #0]
 8006a68:	bf18      	it	ne
 8006a6a:	2301      	movne	r3, #1
 8006a6c:	0692      	lsls	r2, r2, #26
 8006a6e:	d42b      	bmi.n	8006ac8 <_printf_common+0xb0>
 8006a70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a74:	4649      	mov	r1, r9
 8006a76:	4638      	mov	r0, r7
 8006a78:	47c0      	blx	r8
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	d01e      	beq.n	8006abc <_printf_common+0xa4>
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	6922      	ldr	r2, [r4, #16]
 8006a82:	f003 0306 	and.w	r3, r3, #6
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	bf02      	ittt	eq
 8006a8a:	68e5      	ldreq	r5, [r4, #12]
 8006a8c:	6833      	ldreq	r3, [r6, #0]
 8006a8e:	1aed      	subeq	r5, r5, r3
 8006a90:	68a3      	ldr	r3, [r4, #8]
 8006a92:	bf0c      	ite	eq
 8006a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a98:	2500      	movne	r5, #0
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	bfc4      	itt	gt
 8006a9e:	1a9b      	subgt	r3, r3, r2
 8006aa0:	18ed      	addgt	r5, r5, r3
 8006aa2:	2600      	movs	r6, #0
 8006aa4:	341a      	adds	r4, #26
 8006aa6:	42b5      	cmp	r5, r6
 8006aa8:	d11a      	bne.n	8006ae0 <_printf_common+0xc8>
 8006aaa:	2000      	movs	r0, #0
 8006aac:	e008      	b.n	8006ac0 <_printf_common+0xa8>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4652      	mov	r2, sl
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	47c0      	blx	r8
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d103      	bne.n	8006ac4 <_printf_common+0xac>
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac4:	3501      	adds	r5, #1
 8006ac6:	e7c6      	b.n	8006a56 <_printf_common+0x3e>
 8006ac8:	18e1      	adds	r1, r4, r3
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	2030      	movs	r0, #48	; 0x30
 8006ace:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ad2:	4422      	add	r2, r4
 8006ad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006adc:	3302      	adds	r3, #2
 8006ade:	e7c7      	b.n	8006a70 <_printf_common+0x58>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	4622      	mov	r2, r4
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	47c0      	blx	r8
 8006aea:	3001      	adds	r0, #1
 8006aec:	d0e6      	beq.n	8006abc <_printf_common+0xa4>
 8006aee:	3601      	adds	r6, #1
 8006af0:	e7d9      	b.n	8006aa6 <_printf_common+0x8e>
	...

08006af4 <_printf_i>:
 8006af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006af8:	7e0f      	ldrb	r7, [r1, #24]
 8006afa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006afc:	2f78      	cmp	r7, #120	; 0x78
 8006afe:	4691      	mov	r9, r2
 8006b00:	4680      	mov	r8, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	469a      	mov	sl, r3
 8006b06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b0a:	d807      	bhi.n	8006b1c <_printf_i+0x28>
 8006b0c:	2f62      	cmp	r7, #98	; 0x62
 8006b0e:	d80a      	bhi.n	8006b26 <_printf_i+0x32>
 8006b10:	2f00      	cmp	r7, #0
 8006b12:	f000 80d4 	beq.w	8006cbe <_printf_i+0x1ca>
 8006b16:	2f58      	cmp	r7, #88	; 0x58
 8006b18:	f000 80c0 	beq.w	8006c9c <_printf_i+0x1a8>
 8006b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b24:	e03a      	b.n	8006b9c <_printf_i+0xa8>
 8006b26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b2a:	2b15      	cmp	r3, #21
 8006b2c:	d8f6      	bhi.n	8006b1c <_printf_i+0x28>
 8006b2e:	a101      	add	r1, pc, #4	; (adr r1, 8006b34 <_printf_i+0x40>)
 8006b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b34:	08006b8d 	.word	0x08006b8d
 8006b38:	08006ba1 	.word	0x08006ba1
 8006b3c:	08006b1d 	.word	0x08006b1d
 8006b40:	08006b1d 	.word	0x08006b1d
 8006b44:	08006b1d 	.word	0x08006b1d
 8006b48:	08006b1d 	.word	0x08006b1d
 8006b4c:	08006ba1 	.word	0x08006ba1
 8006b50:	08006b1d 	.word	0x08006b1d
 8006b54:	08006b1d 	.word	0x08006b1d
 8006b58:	08006b1d 	.word	0x08006b1d
 8006b5c:	08006b1d 	.word	0x08006b1d
 8006b60:	08006ca5 	.word	0x08006ca5
 8006b64:	08006bcd 	.word	0x08006bcd
 8006b68:	08006c5f 	.word	0x08006c5f
 8006b6c:	08006b1d 	.word	0x08006b1d
 8006b70:	08006b1d 	.word	0x08006b1d
 8006b74:	08006cc7 	.word	0x08006cc7
 8006b78:	08006b1d 	.word	0x08006b1d
 8006b7c:	08006bcd 	.word	0x08006bcd
 8006b80:	08006b1d 	.word	0x08006b1d
 8006b84:	08006b1d 	.word	0x08006b1d
 8006b88:	08006c67 	.word	0x08006c67
 8006b8c:	682b      	ldr	r3, [r5, #0]
 8006b8e:	1d1a      	adds	r2, r3, #4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	602a      	str	r2, [r5, #0]
 8006b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e09f      	b.n	8006ce0 <_printf_i+0x1ec>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	682b      	ldr	r3, [r5, #0]
 8006ba4:	0607      	lsls	r7, r0, #24
 8006ba6:	f103 0104 	add.w	r1, r3, #4
 8006baa:	6029      	str	r1, [r5, #0]
 8006bac:	d501      	bpl.n	8006bb2 <_printf_i+0xbe>
 8006bae:	681e      	ldr	r6, [r3, #0]
 8006bb0:	e003      	b.n	8006bba <_printf_i+0xc6>
 8006bb2:	0646      	lsls	r6, r0, #25
 8006bb4:	d5fb      	bpl.n	8006bae <_printf_i+0xba>
 8006bb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006bba:	2e00      	cmp	r6, #0
 8006bbc:	da03      	bge.n	8006bc6 <_printf_i+0xd2>
 8006bbe:	232d      	movs	r3, #45	; 0x2d
 8006bc0:	4276      	negs	r6, r6
 8006bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc6:	485a      	ldr	r0, [pc, #360]	; (8006d30 <_printf_i+0x23c>)
 8006bc8:	230a      	movs	r3, #10
 8006bca:	e012      	b.n	8006bf2 <_printf_i+0xfe>
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	6820      	ldr	r0, [r4, #0]
 8006bd0:	1d19      	adds	r1, r3, #4
 8006bd2:	6029      	str	r1, [r5, #0]
 8006bd4:	0605      	lsls	r5, r0, #24
 8006bd6:	d501      	bpl.n	8006bdc <_printf_i+0xe8>
 8006bd8:	681e      	ldr	r6, [r3, #0]
 8006bda:	e002      	b.n	8006be2 <_printf_i+0xee>
 8006bdc:	0641      	lsls	r1, r0, #25
 8006bde:	d5fb      	bpl.n	8006bd8 <_printf_i+0xe4>
 8006be0:	881e      	ldrh	r6, [r3, #0]
 8006be2:	4853      	ldr	r0, [pc, #332]	; (8006d30 <_printf_i+0x23c>)
 8006be4:	2f6f      	cmp	r7, #111	; 0x6f
 8006be6:	bf0c      	ite	eq
 8006be8:	2308      	moveq	r3, #8
 8006bea:	230a      	movne	r3, #10
 8006bec:	2100      	movs	r1, #0
 8006bee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bf2:	6865      	ldr	r5, [r4, #4]
 8006bf4:	60a5      	str	r5, [r4, #8]
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	bfa2      	ittt	ge
 8006bfa:	6821      	ldrge	r1, [r4, #0]
 8006bfc:	f021 0104 	bicge.w	r1, r1, #4
 8006c00:	6021      	strge	r1, [r4, #0]
 8006c02:	b90e      	cbnz	r6, 8006c08 <_printf_i+0x114>
 8006c04:	2d00      	cmp	r5, #0
 8006c06:	d04b      	beq.n	8006ca0 <_printf_i+0x1ac>
 8006c08:	4615      	mov	r5, r2
 8006c0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c0e:	fb03 6711 	mls	r7, r3, r1, r6
 8006c12:	5dc7      	ldrb	r7, [r0, r7]
 8006c14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c18:	4637      	mov	r7, r6
 8006c1a:	42bb      	cmp	r3, r7
 8006c1c:	460e      	mov	r6, r1
 8006c1e:	d9f4      	bls.n	8006c0a <_printf_i+0x116>
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d10b      	bne.n	8006c3c <_printf_i+0x148>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	07de      	lsls	r6, r3, #31
 8006c28:	d508      	bpl.n	8006c3c <_printf_i+0x148>
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	6861      	ldr	r1, [r4, #4]
 8006c2e:	4299      	cmp	r1, r3
 8006c30:	bfde      	ittt	le
 8006c32:	2330      	movle	r3, #48	; 0x30
 8006c34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c3c:	1b52      	subs	r2, r2, r5
 8006c3e:	6122      	str	r2, [r4, #16]
 8006c40:	f8cd a000 	str.w	sl, [sp]
 8006c44:	464b      	mov	r3, r9
 8006c46:	aa03      	add	r2, sp, #12
 8006c48:	4621      	mov	r1, r4
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	f7ff fee4 	bl	8006a18 <_printf_common>
 8006c50:	3001      	adds	r0, #1
 8006c52:	d14a      	bne.n	8006cea <_printf_i+0x1f6>
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295
 8006c58:	b004      	add	sp, #16
 8006c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	f043 0320 	orr.w	r3, r3, #32
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	4833      	ldr	r0, [pc, #204]	; (8006d34 <_printf_i+0x240>)
 8006c68:	2778      	movs	r7, #120	; 0x78
 8006c6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	6829      	ldr	r1, [r5, #0]
 8006c72:	061f      	lsls	r7, r3, #24
 8006c74:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c78:	d402      	bmi.n	8006c80 <_printf_i+0x18c>
 8006c7a:	065f      	lsls	r7, r3, #25
 8006c7c:	bf48      	it	mi
 8006c7e:	b2b6      	uxthmi	r6, r6
 8006c80:	07df      	lsls	r7, r3, #31
 8006c82:	bf48      	it	mi
 8006c84:	f043 0320 	orrmi.w	r3, r3, #32
 8006c88:	6029      	str	r1, [r5, #0]
 8006c8a:	bf48      	it	mi
 8006c8c:	6023      	strmi	r3, [r4, #0]
 8006c8e:	b91e      	cbnz	r6, 8006c98 <_printf_i+0x1a4>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	f023 0320 	bic.w	r3, r3, #32
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	2310      	movs	r3, #16
 8006c9a:	e7a7      	b.n	8006bec <_printf_i+0xf8>
 8006c9c:	4824      	ldr	r0, [pc, #144]	; (8006d30 <_printf_i+0x23c>)
 8006c9e:	e7e4      	b.n	8006c6a <_printf_i+0x176>
 8006ca0:	4615      	mov	r5, r2
 8006ca2:	e7bd      	b.n	8006c20 <_printf_i+0x12c>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	6826      	ldr	r6, [r4, #0]
 8006ca8:	6961      	ldr	r1, [r4, #20]
 8006caa:	1d18      	adds	r0, r3, #4
 8006cac:	6028      	str	r0, [r5, #0]
 8006cae:	0635      	lsls	r5, r6, #24
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	d501      	bpl.n	8006cb8 <_printf_i+0x1c4>
 8006cb4:	6019      	str	r1, [r3, #0]
 8006cb6:	e002      	b.n	8006cbe <_printf_i+0x1ca>
 8006cb8:	0670      	lsls	r0, r6, #25
 8006cba:	d5fb      	bpl.n	8006cb4 <_printf_i+0x1c0>
 8006cbc:	8019      	strh	r1, [r3, #0]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	6123      	str	r3, [r4, #16]
 8006cc2:	4615      	mov	r5, r2
 8006cc4:	e7bc      	b.n	8006c40 <_printf_i+0x14c>
 8006cc6:	682b      	ldr	r3, [r5, #0]
 8006cc8:	1d1a      	adds	r2, r3, #4
 8006cca:	602a      	str	r2, [r5, #0]
 8006ccc:	681d      	ldr	r5, [r3, #0]
 8006cce:	6862      	ldr	r2, [r4, #4]
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	f7f9 faa4 	bl	8000220 <memchr>
 8006cd8:	b108      	cbz	r0, 8006cde <_printf_i+0x1ea>
 8006cda:	1b40      	subs	r0, r0, r5
 8006cdc:	6060      	str	r0, [r4, #4]
 8006cde:	6863      	ldr	r3, [r4, #4]
 8006ce0:	6123      	str	r3, [r4, #16]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce8:	e7aa      	b.n	8006c40 <_printf_i+0x14c>
 8006cea:	6923      	ldr	r3, [r4, #16]
 8006cec:	462a      	mov	r2, r5
 8006cee:	4649      	mov	r1, r9
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	47d0      	blx	sl
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d0ad      	beq.n	8006c54 <_printf_i+0x160>
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	079b      	lsls	r3, r3, #30
 8006cfc:	d413      	bmi.n	8006d26 <_printf_i+0x232>
 8006cfe:	68e0      	ldr	r0, [r4, #12]
 8006d00:	9b03      	ldr	r3, [sp, #12]
 8006d02:	4298      	cmp	r0, r3
 8006d04:	bfb8      	it	lt
 8006d06:	4618      	movlt	r0, r3
 8006d08:	e7a6      	b.n	8006c58 <_printf_i+0x164>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	4649      	mov	r1, r9
 8006d10:	4640      	mov	r0, r8
 8006d12:	47d0      	blx	sl
 8006d14:	3001      	adds	r0, #1
 8006d16:	d09d      	beq.n	8006c54 <_printf_i+0x160>
 8006d18:	3501      	adds	r5, #1
 8006d1a:	68e3      	ldr	r3, [r4, #12]
 8006d1c:	9903      	ldr	r1, [sp, #12]
 8006d1e:	1a5b      	subs	r3, r3, r1
 8006d20:	42ab      	cmp	r3, r5
 8006d22:	dcf2      	bgt.n	8006d0a <_printf_i+0x216>
 8006d24:	e7eb      	b.n	8006cfe <_printf_i+0x20a>
 8006d26:	2500      	movs	r5, #0
 8006d28:	f104 0619 	add.w	r6, r4, #25
 8006d2c:	e7f5      	b.n	8006d1a <_printf_i+0x226>
 8006d2e:	bf00      	nop
 8006d30:	08007649 	.word	0x08007649
 8006d34:	0800765a 	.word	0x0800765a

08006d38 <memmove>:
 8006d38:	4288      	cmp	r0, r1
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	eb01 0402 	add.w	r4, r1, r2
 8006d40:	d902      	bls.n	8006d48 <memmove+0x10>
 8006d42:	4284      	cmp	r4, r0
 8006d44:	4623      	mov	r3, r4
 8006d46:	d807      	bhi.n	8006d58 <memmove+0x20>
 8006d48:	1e43      	subs	r3, r0, #1
 8006d4a:	42a1      	cmp	r1, r4
 8006d4c:	d008      	beq.n	8006d60 <memmove+0x28>
 8006d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d56:	e7f8      	b.n	8006d4a <memmove+0x12>
 8006d58:	4402      	add	r2, r0
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	428a      	cmp	r2, r1
 8006d5e:	d100      	bne.n	8006d62 <memmove+0x2a>
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d6a:	e7f7      	b.n	8006d5c <memmove+0x24>

08006d6c <_sbrk_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4d06      	ldr	r5, [pc, #24]	; (8006d88 <_sbrk_r+0x1c>)
 8006d70:	2300      	movs	r3, #0
 8006d72:	4604      	mov	r4, r0
 8006d74:	4608      	mov	r0, r1
 8006d76:	602b      	str	r3, [r5, #0]
 8006d78:	f7fb f964 	bl	8002044 <_sbrk>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_sbrk_r+0x1a>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_sbrk_r+0x1a>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	2000b704 	.word	0x2000b704

08006d8c <memcpy>:
 8006d8c:	440a      	add	r2, r1
 8006d8e:	4291      	cmp	r1, r2
 8006d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d94:	d100      	bne.n	8006d98 <memcpy+0xc>
 8006d96:	4770      	bx	lr
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006da2:	4291      	cmp	r1, r2
 8006da4:	d1f9      	bne.n	8006d9a <memcpy+0xe>
 8006da6:	bd10      	pop	{r4, pc}

08006da8 <_realloc_r>:
 8006da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dac:	4680      	mov	r8, r0
 8006dae:	4614      	mov	r4, r2
 8006db0:	460e      	mov	r6, r1
 8006db2:	b921      	cbnz	r1, 8006dbe <_realloc_r+0x16>
 8006db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006db8:	4611      	mov	r1, r2
 8006dba:	f7ff bc49 	b.w	8006650 <_malloc_r>
 8006dbe:	b92a      	cbnz	r2, 8006dcc <_realloc_r+0x24>
 8006dc0:	f7ff fbda 	bl	8006578 <_free_r>
 8006dc4:	4625      	mov	r5, r4
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dcc:	f000 f81b 	bl	8006e06 <_malloc_usable_size_r>
 8006dd0:	4284      	cmp	r4, r0
 8006dd2:	4607      	mov	r7, r0
 8006dd4:	d802      	bhi.n	8006ddc <_realloc_r+0x34>
 8006dd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006dda:	d812      	bhi.n	8006e02 <_realloc_r+0x5a>
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4640      	mov	r0, r8
 8006de0:	f7ff fc36 	bl	8006650 <_malloc_r>
 8006de4:	4605      	mov	r5, r0
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d0ed      	beq.n	8006dc6 <_realloc_r+0x1e>
 8006dea:	42bc      	cmp	r4, r7
 8006dec:	4622      	mov	r2, r4
 8006dee:	4631      	mov	r1, r6
 8006df0:	bf28      	it	cs
 8006df2:	463a      	movcs	r2, r7
 8006df4:	f7ff ffca 	bl	8006d8c <memcpy>
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4640      	mov	r0, r8
 8006dfc:	f7ff fbbc 	bl	8006578 <_free_r>
 8006e00:	e7e1      	b.n	8006dc6 <_realloc_r+0x1e>
 8006e02:	4635      	mov	r5, r6
 8006e04:	e7df      	b.n	8006dc6 <_realloc_r+0x1e>

08006e06 <_malloc_usable_size_r>:
 8006e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e0a:	1f18      	subs	r0, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	bfbc      	itt	lt
 8006e10:	580b      	ldrlt	r3, [r1, r0]
 8006e12:	18c0      	addlt	r0, r0, r3
 8006e14:	4770      	bx	lr
	...

08006e18 <_init>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	bf00      	nop
 8006e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1e:	bc08      	pop	{r3}
 8006e20:	469e      	mov	lr, r3
 8006e22:	4770      	bx	lr

08006e24 <_fini>:
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	bf00      	nop
 8006e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2a:	bc08      	pop	{r3}
 8006e2c:	469e      	mov	lr, r3
 8006e2e:	4770      	bx	lr
