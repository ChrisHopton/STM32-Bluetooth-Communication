
MPDD_Final_Project_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b074  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800b23c  0800b23c  0001b23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2d8  0800b2d8  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2d8  0800b2d8  0001b2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2e0  0800b2e0  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2e0  0800b2e0  0001b2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2e4  0800b2e4  0001b2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800b2e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e0  2000017c  0800b464  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000225c  0800b464  0002225c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce96  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000411b  00000000  00000000  0003d085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  000411a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000123a  00000000  00000000  00042938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029191  00000000  00000000  00043b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ecb7  00000000  00000000  0006cd03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f755e  00000000  00000000  0008b9ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006694  00000000  00000000  00182f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  001895ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000017c 	.word	0x2000017c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b224 	.word	0x0800b224

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000180 	.word	0x20000180
 8000204:	0800b224 	.word	0x0800b224

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <ILI9163_writeCommand+0x44>)
 8000526:	f001 fe11 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000530:	4809      	ldr	r0, [pc, #36]	; (8000558 <ILI9163_writeCommand+0x44>)
 8000532:	f001 fe0b 	bl	800214c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 8000536:	1df9      	adds	r1, r7, #7
 8000538:	2300      	movs	r3, #0
 800053a:	2201      	movs	r2, #1
 800053c:	4807      	ldr	r0, [pc, #28]	; (800055c <ILI9163_writeCommand+0x48>)
 800053e:	f004 fa70 	bl	8004a22 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <ILI9163_writeCommand+0x44>)
 800054a:	f001 fdff 	bl	800214c <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40020400 	.word	0x40020400
 800055c:	20000198 	.word	0x20000198

08000560 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <ILI9163_writeData+0x44>)
 8000572:	f001 fdeb 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057c:	4809      	ldr	r0, [pc, #36]	; (80005a4 <ILI9163_writeData+0x44>)
 800057e:	f001 fde5 	bl	800214c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 8000582:	1df9      	adds	r1, r7, #7
 8000584:	2300      	movs	r3, #0
 8000586:	2201      	movs	r2, #1
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <ILI9163_writeData+0x48>)
 800058a:	f004 fa4a 	bl	8004a22 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <ILI9163_writeData+0x44>)
 8000596:	f001 fdd9 	bl	800214c <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40020400 	.word	0x40020400
 80005a8:	20000198 	.word	0x20000198

080005ac <ILI9163_reset>:

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
}

void ILI9163_reset(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <ILI9163_reset+0x2c>)
 80005b8:	f001 fdc8 	bl	800214c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80005bc:	2032      	movs	r0, #50	; 0x32
 80005be:	f000 ff4f 	bl	8001460 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <ILI9163_reset+0x2c>)
 80005ca:	f001 fdbf 	bl	800214c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f000 ff46 	bl	8001460 <HAL_Delay>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40020c00 	.word	0x40020c00

080005dc <ILI9163_init>:

void ILI9163_init(int rotation) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ea:	486e      	ldr	r0, [pc, #440]	; (80007a4 <ILI9163_init+0x1c8>)
 80005ec:	f001 fdae 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f6:	486c      	ldr	r0, [pc, #432]	; (80007a8 <ILI9163_init+0x1cc>)
 80005f8:	f001 fda8 	bl	800214c <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 80005fc:	f7ff ffd6 	bl	80005ac <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 8000600:	2011      	movs	r0, #17
 8000602:	f7ff ff87 	bl	8000514 <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 8000606:	2005      	movs	r0, #5
 8000608:	f000 ff2a 	bl	8001460 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 800060c:	203a      	movs	r0, #58	; 0x3a
 800060e:	f7ff ff81 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 8000612:	2005      	movs	r0, #5
 8000614:	f7ff ffa4 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 8000618:	2026      	movs	r0, #38	; 0x26
 800061a:	f7ff ff7b 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 800061e:	2004      	movs	r0, #4
 8000620:	f7ff ff9e 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8000624:	20f2      	movs	r0, #242	; 0xf2
 8000626:	f7ff ff75 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff ff98 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 8000630:	20e0      	movs	r0, #224	; 0xe0
 8000632:	f7ff ff6f 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 8000636:	203f      	movs	r0, #63	; 0x3f
 8000638:	f7ff ff92 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800063c:	2025      	movs	r0, #37	; 0x25
 800063e:	f7ff ff8f 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 8000642:	201c      	movs	r0, #28
 8000644:	f7ff ff8c 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 8000648:	201e      	movs	r0, #30
 800064a:	f7ff ff89 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800064e:	2020      	movs	r0, #32
 8000650:	f7ff ff86 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 8000654:	2012      	movs	r0, #18
 8000656:	f7ff ff83 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 800065a:	202a      	movs	r0, #42	; 0x2a
 800065c:	f7ff ff80 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 8000660:	2090      	movs	r0, #144	; 0x90
 8000662:	f7ff ff7d 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 8000666:	2024      	movs	r0, #36	; 0x24
 8000668:	f7ff ff7a 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 800066c:	2011      	movs	r0, #17
 800066e:	f7ff ff77 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff ff74 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ff71 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff ff6e 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff ff6b 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ff68 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 8000690:	20e1      	movs	r0, #225	; 0xe1
 8000692:	f7ff ff3f 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 8000696:	2020      	movs	r0, #32
 8000698:	f7ff ff62 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800069c:	2020      	movs	r0, #32
 800069e:	f7ff ff5f 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80006a2:	2020      	movs	r0, #32
 80006a4:	f7ff ff5c 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80006a8:	2020      	movs	r0, #32
 80006aa:	f7ff ff59 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 80006ae:	2005      	movs	r0, #5
 80006b0:	f7ff ff56 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ff53 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 80006ba:	2015      	movs	r0, #21
 80006bc:	f7ff ff50 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 80006c0:	20a7      	movs	r0, #167	; 0xa7
 80006c2:	f7ff ff4d 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 80006c6:	203d      	movs	r0, #61	; 0x3d
 80006c8:	f7ff ff4a 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 80006cc:	2018      	movs	r0, #24
 80006ce:	f7ff ff47 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 80006d2:	2025      	movs	r0, #37	; 0x25
 80006d4:	f7ff ff44 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 80006d8:	202a      	movs	r0, #42	; 0x2a
 80006da:	f7ff ff41 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 80006de:	202b      	movs	r0, #43	; 0x2b
 80006e0:	f7ff ff3e 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 80006e4:	202b      	movs	r0, #43	; 0x2b
 80006e6:	f7ff ff3b 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 80006ea:	203a      	movs	r0, #58	; 0x3a
 80006ec:	f7ff ff38 	bl	8000560 <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 80006f0:	20b1      	movs	r0, #177	; 0xb1
 80006f2:	f7ff ff0f 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 80006f6:	2008      	movs	r0, #8
 80006f8:	f7ff ff32 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff2f 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 8000702:	20b2      	movs	r0, #178	; 0xb2
 8000704:	f7ff ff06 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000708:	2008      	movs	r0, #8
 800070a:	f7ff ff29 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800070e:	2002      	movs	r0, #2
 8000710:	f7ff ff26 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8000714:	20b3      	movs	r0, #179	; 0xb3
 8000716:	f7ff fefd 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800071a:	2008      	movs	r0, #8
 800071c:	f7ff ff20 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff ff1d 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8000726:	20b4      	movs	r0, #180	; 0xb4
 8000728:	f7ff fef4 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 800072c:	2007      	movs	r0, #7
 800072e:	f7ff ff17 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8000732:	202a      	movs	r0, #42	; 0x2a
 8000734:	f7ff feee 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff ff11 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 800073e:	2000      	movs	r0, #0
 8000740:	f7ff ff0e 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff ff0b 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 800074a:	207f      	movs	r0, #127	; 0x7f
 800074c:	f7ff ff08 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8000750:	202b      	movs	r0, #43	; 0x2b
 8000752:	f7ff fedf 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff ff02 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff feff 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff fefc 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 8000768:	209f      	movs	r0, #159	; 0x9f
 800076a:	f7ff fef9 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 800076e:	2036      	movs	r0, #54	; 0x36
 8000770:	f7ff fed0 	bl	8000514 <ILI9163_writeCommand>
	if(rotation)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d003      	beq.n	8000782 <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 800077a:	20a8      	movs	r0, #168	; 0xa8
 800077c:	f7ff fef0 	bl	8000560 <ILI9163_writeData>
 8000780:	e002      	b.n	8000788 <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 8000782:	2068      	movs	r0, #104	; 0x68
 8000784:	f7ff feec 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 8000788:	2013      	movs	r0, #19
 800078a:	f7ff fec3 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 800078e:	2029      	movs	r0, #41	; 0x29
 8000790:	f7ff fec0 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 8000794:	202c      	movs	r0, #44	; 0x2c
 8000796:	f7ff febd 	bl	8000514 <ILI9163_writeCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020c00 	.word	0x40020c00

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b5b0      	push	{r4, r5, r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f000 fdf8 	bl	80013a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f861 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 f977 	bl	8000aac <MX_GPIO_Init>
  MX_DMA_Init();
 80007be:	f000 f957 	bl	8000a70 <MX_DMA_Init>
  MX_SPI1_Init();
 80007c2:	f000 f8c3 	bl	800094c <MX_SPI1_Init>
  MX_TIM14_Init();
 80007c6:	f000 f8ff 	bl	80009c8 <MX_TIM14_Init>
  MX_USART6_UART_Init();
 80007ca:	f000 f921 	bl	8000a10 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 80007ce:	f009 fe6d 	bl	800a4ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  ILI9163_init(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff ff02 	bl	80005dc <ILI9163_init>
//  char *message = "STM32 is ready\r\n";
//   HAL_UART_Transmit(&huart6, (uint8_t *)message, strlen(message), HAL_MAX_DELAY); // Send message over USART6

   // Start receiving data in interrupt mode

   HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
 80007d8:	2201      	movs	r2, #1
 80007da:	4921      	ldr	r1, [pc, #132]	; (8000860 <main+0xb4>)
 80007dc:	4821      	ldr	r0, [pc, #132]	; (8000864 <main+0xb8>)
 80007de:	f005 f862 	bl	80058a6 <HAL_UART_Receive_IT>
   uint8_t dataToSend[] = "My name is Chris";
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <main+0xbc>)
 80007e4:	f107 0410 	add.w	r4, r7, #16
 80007e8:	461d      	mov	r5, r3
 80007ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ee:	682b      	ldr	r3, [r5, #0]
 80007f0:	7023      	strb	r3, [r4, #0]
	  //char *dataToSend = "Hello Bluetooth!";

	  // Check if data is received from USB CDC
	  // Check if data is received from USB CDC

	  statePinStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0); // Replace GPIOx with the actual GPIO port and STATE_PIN with the actual pin number
 80007f2:	2101      	movs	r1, #1
 80007f4:	481d      	ldr	r0, [pc, #116]	; (800086c <main+0xc0>)
 80007f6:	f001 fc91 	bl	800211c <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <main+0xc4>)
 8000800:	701a      	strb	r2, [r3, #0]

	  if(statePinStatus == GPIO_PIN_SET) {
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <main+0xc4>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d123      	bne.n	8000852 <main+0xa6>
	          // The module is connected to another Bluetooth device
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn on LED
 800080a:	2201      	movs	r2, #1
 800080c:	2101      	movs	r1, #1
 800080e:	4819      	ldr	r0, [pc, #100]	; (8000874 <main+0xc8>)
 8000810:	f001 fc9c 	bl	800214c <HAL_GPIO_WritePin>
HAL_Delay(10000);
 8000814:	f242 7010 	movw	r0, #10000	; 0x2710
 8000818:	f000 fe22 	bl	8001460 <HAL_Delay>
	         // Data you want to send
	       uint16_t dataSize = sizeof(dataToSend); // Calculate the size of the data
 800081c:	2311      	movs	r3, #17
 800081e:	84fb      	strh	r3, [r7, #38]	; 0x26
//	       ILI9163_newFrame();
//	       ILI9163_drawString(5,5,Font_7x10,BLUE,dataToSend);
//	       ILI9163_render();

	          // Call the function to transmit data
	          transmitData(&huart6, dataToSend, dataSize);
 8000820:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	4619      	mov	r1, r3
 8000828:	480e      	ldr	r0, [pc, #56]	; (8000864 <main+0xb8>)
 800082a:	f000 f9f3 	bl	8000c14 <transmitData>
	          HAL_Delay(10000);
 800082e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000832:	f000 fe15 	bl	8001460 <HAL_Delay>
	          uint8_t test[] = "Whats my name";
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <main+0xcc>)
 8000838:	463c      	mov	r4, r7
 800083a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800083c:	c407      	stmia	r4!, {r0, r1, r2}
 800083e:	8023      	strh	r3, [r4, #0]
	          uint16_t dataSize2 = sizeof(test); // Calculate the size of the data
 8000840:	230e      	movs	r3, #14
 8000842:	84bb      	strh	r3, [r7, #36]	; 0x24
	          //	       ILI9163_newFrame();
	          //	       ILI9163_drawString(5,5,Font_7x10,BLUE,dataToSend);
	          //	       ILI9163_render();

	          	          // Call the function to transmit data
	          	          transmitData(&huart6, test, dataSize2);
 8000844:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <main+0xb8>)
 800084c:	f000 f9e2 	bl	8000c14 <transmitData>
 8000850:	e7cf      	b.n	80007f2 <main+0x46>
//	              }
	          }

	      else {
	         // The module is not connected
	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn off LED
 8000852:	2200      	movs	r2, #0
 8000854:	2101      	movs	r1, #1
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <main+0xc8>)
 8000858:	f001 fc78 	bl	800214c <HAL_GPIO_WritePin>
	  statePinStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0); // Replace GPIOx with the actual GPIO port and STATE_PIN with the actual pin number
 800085c:	e7c9      	b.n	80007f2 <main+0x46>
 800085e:	bf00      	nop
 8000860:	20000334 	.word	0x20000334
 8000864:	200002a8 	.word	0x200002a8
 8000868:	0800b23c 	.word	0x0800b23c
 800086c:	40021800 	.word	0x40021800
 8000870:	20000721 	.word	0x20000721
 8000874:	40020400 	.word	0x40020400
 8000878:	0800b250 	.word	0x0800b250

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b094      	sub	sp, #80	; 0x50
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	2230      	movs	r2, #48	; 0x30
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f00a fc3a 	bl	800b104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008a0:	f002 ff4a 	bl	8003738 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <SystemClock_Config+0xc8>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	4a26      	ldr	r2, [pc, #152]	; (8000944 <SystemClock_Config+0xc8>)
 80008aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ae:	6413      	str	r3, [r2, #64]	; 0x40
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <SystemClock_Config+0xc8>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <SystemClock_Config+0xcc>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008c4:	4a20      	ldr	r2, [pc, #128]	; (8000948 <SystemClock_Config+0xcc>)
 80008c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <SystemClock_Config+0xcc>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d8:	2301      	movs	r3, #1
 80008da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008f0:	2348      	movs	r3, #72	; 0x48
 80008f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008f8:	2303      	movs	r3, #3
 80008fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4618      	mov	r0, r3
 8000902:	f002 ff29 	bl	8003758 <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800090c:	f000 f9d4 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2302      	movs	r3, #2
 8000916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2102      	movs	r1, #2
 800092c:	4618      	mov	r0, r3
 800092e:	f003 f9b7 	bl	8003ca0 <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000938:	f000 f9be 	bl	8000cb8 <Error_Handler>
  }
}
 800093c:	bf00      	nop
 800093e:	3750      	adds	r7, #80	; 0x50
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000

0800094c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000952:	4a1c      	ldr	r2, [pc, #112]	; (80009c4 <MX_SPI1_Init+0x78>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000958:	f44f 7282 	mov.w	r2, #260	; 0x104
 800095c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000966:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800096a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_SPI1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_SPI1_Init+0x74>)
 800097a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000982:	2208      	movs	r2, #8
 8000984:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_SPI1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_SPI1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_SPI1_Init+0x74>)
 800099a:	2207      	movs	r2, #7
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_SPI1_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_SPI1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_SPI1_Init+0x74>)
 80009ac:	f003 ff8e 	bl	80048cc <HAL_SPI_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f000 f97f 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000198 	.word	0x20000198
 80009c4:	40013000 	.word	0x40013000

080009c8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_TIM14_Init+0x40>)
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <MX_TIM14_Init+0x44>)
 80009d0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_TIM14_Init+0x40>)
 80009d4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80009d8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_TIM14_Init+0x40>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_TIM14_Init+0x40>)
 80009e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009e6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <MX_TIM14_Init+0x40>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_TIM14_Init+0x40>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_TIM14_Init+0x40>)
 80009f6:	f004 fc1f 	bl	8005238 <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000a00:	f000 f95a 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000025c 	.word	0x2000025c
 8000a0c:	40002000 	.word	0x40002000

08000a10 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USART6_UART_Init+0x58>)
 8000a16:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <MX_USART6_UART_Init+0x5c>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_USART6_UART_Init+0x58>)
 8000a1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a20:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART6_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_USART6_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART6_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART6_UART_Init+0x58>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART6_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART6_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART6_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART6_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART6_UART_Init+0x58>)
 8000a54:	f004 fe56 	bl	8005704 <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000a5e:	f000 f92b 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200002a8 	.word	0x200002a8
 8000a6c:	40011400 	.word	0x40011400

08000a70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_DMA_Init+0x38>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <MX_DMA_Init+0x38>)
 8000a7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_DMA_Init+0x38>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	203b      	movs	r0, #59	; 0x3b
 8000a94:	f000 fde3 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a98:	203b      	movs	r0, #59	; 0x3b
 8000a9a:	f000 fdfc 	bl	8001696 <HAL_NVIC_EnableIRQ>

}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac2:	4b4f      	ldr	r3, [pc, #316]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a4e      	ldr	r2, [pc, #312]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b4c      	ldr	r3, [pc, #304]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	4b49      	ldr	r3, [pc, #292]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a48      	ldr	r2, [pc, #288]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b46      	ldr	r3, [pc, #280]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	4b43      	ldr	r3, [pc, #268]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a42      	ldr	r2, [pc, #264]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b40      	ldr	r3, [pc, #256]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b3d      	ldr	r3, [pc, #244]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a3c      	ldr	r2, [pc, #240]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b3a      	ldr	r3, [pc, #232]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a36      	ldr	r2, [pc, #216]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3a:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a30      	ldr	r2, [pc, #192]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <MX_GPIO_Init+0x154>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13
 8000b52:	2200      	movs	r2, #0
 8000b54:	f64a 3103 	movw	r1, #43779	; 0xab03
 8000b58:	482a      	ldr	r0, [pc, #168]	; (8000c04 <MX_GPIO_Init+0x158>)
 8000b5a:	f001 faf7 	bl	800214c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b5e:	2320      	movs	r3, #32
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4825      	ldr	r0, [pc, #148]	; (8000c08 <MX_GPIO_Init+0x15c>)
 8000b74:	f001 f926 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 8000b78:	f240 3301 	movw	r3, #769	; 0x301
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	481c      	ldr	r0, [pc, #112]	; (8000c04 <MX_GPIO_Init+0x158>)
 8000b92:	f001 f917 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB11 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 8000b96:	f64a 0302 	movw	r3, #43010	; 0xa802
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	4815      	ldr	r0, [pc, #84]	; (8000c04 <MX_GPIO_Init+0x158>)
 8000bb0:	f001 f908 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ble_state_Pin */
  GPIO_InitStruct.Pin = ble_state_Pin;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ble_state_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4811      	ldr	r0, [pc, #68]	; (8000c0c <MX_GPIO_Init+0x160>)
 8000bc8:	f001 f8fc 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000bcc:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bd2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	480b      	ldr	r0, [pc, #44]	; (8000c10 <MX_GPIO_Init+0x164>)
 8000be4:	f001 f8ee 	bl	8001dc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2017      	movs	r0, #23
 8000bee:	f000 fd36 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bf2:	2017      	movs	r0, #23
 8000bf4:	f000 fd4f 	bl	8001696 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3730      	adds	r7, #48	; 0x30
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020400 	.word	0x40020400
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40021800 	.word	0x40021800
 8000c10:	40020800 	.word	0x40020800

08000c14 <transmitData>:

/* USER CODE BEGIN 4 */
void transmitData(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(huart, data, size, 1000); // 1000 is timeout duration
 8000c22:	88fa      	ldrh	r2, [r7, #6]
 8000c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f004 fdb8 	bl	80057a0 <HAL_UART_Transmit>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <HAL_UART_RxCpltCallback+0x6c>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d127      	bne.n	8000c9a <HAL_UART_RxCpltCallback+0x62>
    // Print the received byte for debugging
   // HAL_UART_Transmit(&huart6, (uint8_t *)receiveBuffer, 1, HAL_MAX_DELAY); // Echo the byte

    // Append received byte to receivedData buffer
    receivedData[receivedDataIndex++] = receiveBuffer[0];
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_UART_RxCpltCallback+0x70>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	b2d1      	uxtb	r1, r2
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <HAL_UART_RxCpltCallback+0x70>)
 8000c54:	7011      	strb	r1, [r2, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_UART_RxCpltCallback+0x74>)
 8000c5a:	7819      	ldrb	r1, [r3, #0]
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_UART_RxCpltCallback+0x78>)
 8000c5e:	5499      	strb	r1, [r3, r2]

    // Check for end of message or buffer overflow
    if (receiveBuffer[0] == '\n' || receivedDataIndex >= sizeof(receivedData) - 1) {
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_UART_RxCpltCallback+0x74>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b0a      	cmp	r3, #10
 8000c66:	d113      	bne.n	8000c90 <HAL_UART_RxCpltCallback+0x58>
      // Null-terminate the string and reset index
      receivedData[receivedDataIndex] = '\0';
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_UART_RxCpltCallback+0x70>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_UART_RxCpltCallback+0x78>)
 8000c70:	2100      	movs	r1, #0
 8000c72:	5499      	strb	r1, [r3, r2]
      receivedDataIndex = 0;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_UART_RxCpltCallback+0x70>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]

      // Echo received data back to the sender for confirmation
      HAL_UART_Transmit(&huart6, (uint8_t *)receivedData, strlen(receivedData), HAL_MAX_DELAY);
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <HAL_UART_RxCpltCallback+0x78>)
 8000c7c:	f7ff fac4 	bl	8000208 <strlen>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	4909      	ldr	r1, [pc, #36]	; (8000cb0 <HAL_UART_RxCpltCallback+0x78>)
 8000c8a:	480a      	ldr	r0, [pc, #40]	; (8000cb4 <HAL_UART_RxCpltCallback+0x7c>)
 8000c8c:	f004 fd88 	bl	80057a0 <HAL_UART_Transmit>
    }

    // Re-enable UART receive interrupt for the next byte
    HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
 8000c90:	2201      	movs	r2, #1
 8000c92:	4906      	ldr	r1, [pc, #24]	; (8000cac <HAL_UART_RxCpltCallback+0x74>)
 8000c94:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <HAL_UART_RxCpltCallback+0x7c>)
 8000c96:	f004 fe06 	bl	80058a6 <HAL_UART_Receive_IT>
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40011400 	.word	0x40011400
 8000ca8:	20000720 	.word	0x20000720
 8000cac:	20000334 	.word	0x20000334
 8000cb0:	20000338 	.word	0x20000338
 8000cb4:	200002a8 	.word	0x200002a8

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_MspInit+0x44>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_MspInit+0x44>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_MspInit+0x44>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_MspInit+0x44>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_MspInit+0x44>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_MspInit+0x44>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800

08000d0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a37      	ldr	r2, [pc, #220]	; (8000e08 <HAL_SPI_MspInit+0xfc>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d168      	bne.n	8000e00 <HAL_SPI_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d2e:	4b37      	ldr	r3, [pc, #220]	; (8000e0c <HAL_SPI_MspInit+0x100>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	4a36      	ldr	r2, [pc, #216]	; (8000e0c <HAL_SPI_MspInit+0x100>)
 8000d34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d38:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <HAL_SPI_MspInit+0x100>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <HAL_SPI_MspInit+0x100>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a30      	ldr	r2, [pc, #192]	; (8000e0c <HAL_SPI_MspInit+0x100>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <HAL_SPI_MspInit+0x100>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d5e:	23e0      	movs	r3, #224	; 0xe0
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	4825      	ldr	r0, [pc, #148]	; (8000e10 <HAL_SPI_MspInit+0x104>)
 8000d7a:	f001 f823 	bl	8001dc4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000d80:	4a25      	ldr	r2, [pc, #148]	; (8000e18 <HAL_SPI_MspInit+0x10c>)
 8000d82:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000d86:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d8a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d8c:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000d8e:	2240      	movs	r2, #64	; 0x40
 8000d90:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000d9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d9e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000da0:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000da2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000da6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000daa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dae:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000dd4:	480f      	ldr	r0, [pc, #60]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000dd6:	f000 fc79 	bl	80016cc <HAL_DMA_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_SPI_MspInit+0xd8>
    {
      Error_Handler();
 8000de0:	f7ff ff6a 	bl	8000cb8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000de8:	655a      	str	r2, [r3, #84]	; 0x54
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_SPI_MspInit+0x108>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	2023      	movs	r0, #35	; 0x23
 8000df6:	f000 fc32 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000dfa:	2023      	movs	r0, #35	; 0x23
 8000dfc:	f000 fc4b 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	; 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40013000 	.word	0x40013000
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	200001fc 	.word	0x200001fc
 8000e18:	40026458 	.word	0x40026458

08000e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <HAL_TIM_Base_MspInit+0x44>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d113      	bne.n	8000e56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_TIM_Base_MspInit+0x48>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a0c      	ldr	r2, [pc, #48]	; (8000e64 <HAL_TIM_Base_MspInit+0x48>)
 8000e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_TIM_Base_MspInit+0x48>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	202d      	movs	r0, #45	; 0x2d
 8000e4c:	f000 fc07 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000e50:	202d      	movs	r0, #45	; 0x2d
 8000e52:	f000 fc20 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40002000 	.word	0x40002000
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0aa      	sub	sp, #168	; 0xa8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	2284      	movs	r2, #132	; 0x84
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f00a f93b 	bl	800b104 <memset>
  if(huart->Instance==USART6)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a26      	ldr	r2, [pc, #152]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d144      	bne.n	8000f22 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000e98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e9c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 f920 	bl	80040ec <HAL_RCCEx_PeriphCLKConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eb2:	f7ff ff01 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_UART_MspInit+0xc8>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <HAL_UART_MspInit+0xc8>)
 8000ebc:	f043 0320 	orr.w	r3, r3, #32
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_UART_MspInit+0xc8>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f003 0320 	and.w	r3, r3, #32
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_UART_MspInit+0xc8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <HAL_UART_MspInit+0xc8>)
 8000ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_UART_MspInit+0xc8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000ee6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000eea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f00:	2308      	movs	r3, #8
 8000f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <HAL_UART_MspInit+0xcc>)
 8000f0e:	f000 ff59 	bl	8001dc4 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2047      	movs	r0, #71	; 0x47
 8000f18:	f000 fba1 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f1c:	2047      	movs	r0, #71	; 0x47
 8000f1e:	f000 fbba 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	37a8      	adds	r7, #168	; 0xa8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40011400 	.word	0x40011400
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40021800 	.word	0x40021800

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8c:	f000 fa48 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	key = 0;
 8000f9a:	4b51      	ldr	r3, [pc, #324]	; (80010e0 <EXTI9_5_IRQHandler+0x14c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	801a      	strh	r2, [r3, #0]
		for(uint8_t c=0 ; c<4 ; c++){
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	e075      	b.n	8001092 <EXTI9_5_IRQHandler+0xfe>
			for(uint8_t i=0 ; i<4 ; i++){
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	71bb      	strb	r3, [r7, #6]
 8000faa:	e00e      	b.n	8000fca <EXTI9_5_IRQHandler+0x36>
				HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000fac:	79bb      	ldrb	r3, [r7, #6]
 8000fae:	4a4d      	ldr	r2, [pc, #308]	; (80010e4 <EXTI9_5_IRQHandler+0x150>)
 8000fb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <EXTI9_5_IRQHandler+0x154>)
 8000fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f001 f8c4 	bl	800214c <HAL_GPIO_WritePin>
			for(uint8_t i=0 ; i<4 ; i++){
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	71bb      	strb	r3, [r7, #6]
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d9ed      	bls.n	8000fac <EXTI9_5_IRQHandler+0x18>
			}
			HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	4a44      	ldr	r2, [pc, #272]	; (80010e4 <EXTI9_5_IRQHandler+0x150>)
 8000fd4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4a43      	ldr	r2, [pc, #268]	; (80010e8 <EXTI9_5_IRQHandler+0x154>)
 8000fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f001 f8b2 	bl	800214c <HAL_GPIO_WritePin>
			for(uint8_t r=0 ; r<4 ; r++){
 8000fe8:	2300      	movs	r3, #0
 8000fea:	717b      	strb	r3, [r7, #5]
 8000fec:	e04b      	b.n	8001086 <EXTI9_5_IRQHandler+0xf2>
				if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000fee:	797b      	ldrb	r3, [r7, #5]
 8000ff0:	4a3e      	ldr	r2, [pc, #248]	; (80010ec <EXTI9_5_IRQHandler+0x158>)
 8000ff2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ff6:	797b      	ldrb	r3, [r7, #5]
 8000ff8:	493d      	ldr	r1, [pc, #244]	; (80010f0 <EXTI9_5_IRQHandler+0x15c>)
 8000ffa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ffe:	4619      	mov	r1, r3
 8001000:	4610      	mov	r0, r2
 8001002:	f001 f88b 	bl	800211c <HAL_GPIO_ReadPin>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d139      	bne.n	8001080 <EXTI9_5_IRQHandler+0xec>
					if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 800100c:	797b      	ldrb	r3, [r7, #5]
 800100e:	4a37      	ldr	r2, [pc, #220]	; (80010ec <EXTI9_5_IRQHandler+0x158>)
 8001010:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001014:	797b      	ldrb	r3, [r7, #5]
 8001016:	4936      	ldr	r1, [pc, #216]	; (80010f0 <EXTI9_5_IRQHandler+0x15c>)
 8001018:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800101c:	4619      	mov	r1, r3
 800101e:	4610      	mov	r0, r2
 8001020:	f001 f87c 	bl	800211c <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d12a      	bne.n	8001080 <EXTI9_5_IRQHandler+0xec>
						key |= 1<<c;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2201      	movs	r2, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	b21a      	sxth	r2, r3
 8001034:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <EXTI9_5_IRQHandler+0x14c>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21b      	sxth	r3, r3
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <EXTI9_5_IRQHandler+0x14c>)
 8001042:	801a      	strh	r2, [r3, #0]
						key |= 1<<(r+8);
 8001044:	797b      	ldrb	r3, [r7, #5]
 8001046:	3308      	adds	r3, #8
 8001048:	2201      	movs	r2, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <EXTI9_5_IRQHandler+0x14c>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <EXTI9_5_IRQHandler+0x14c>)
 800105e:	801a      	strh	r2, [r3, #0]
						while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8001060:	bf00      	nop
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	4a21      	ldr	r2, [pc, #132]	; (80010ec <EXTI9_5_IRQHandler+0x158>)
 8001066:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800106a:	797b      	ldrb	r3, [r7, #5]
 800106c:	4920      	ldr	r1, [pc, #128]	; (80010f0 <EXTI9_5_IRQHandler+0x15c>)
 800106e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001072:	4619      	mov	r1, r3
 8001074:	4610      	mov	r0, r2
 8001076:	f001 f851 	bl	800211c <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f0      	beq.n	8001062 <EXTI9_5_IRQHandler+0xce>
			for(uint8_t r=0 ; r<4 ; r++){
 8001080:	797b      	ldrb	r3, [r7, #5]
 8001082:	3301      	adds	r3, #1
 8001084:	717b      	strb	r3, [r7, #5]
 8001086:	797b      	ldrb	r3, [r7, #5]
 8001088:	2b03      	cmp	r3, #3
 800108a:	d9b0      	bls.n	8000fee <EXTI9_5_IRQHandler+0x5a>
		for(uint8_t c=0 ; c<4 ; c++){
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	3301      	adds	r3, #1
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b03      	cmp	r3, #3
 8001096:	d986      	bls.n	8000fa6 <EXTI9_5_IRQHandler+0x12>
					}
				}
			}
		}

		keyChar = KeyPadGetChar(key);
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <EXTI9_5_IRQHandler+0x14c>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f85f 	bl	8001160 <KeyPadGetChar>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <EXTI9_5_IRQHandler+0x160>)
 80010a8:	701a      	strb	r2, [r3, #0]
		key = 0;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <EXTI9_5_IRQHandler+0x14c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f64a 0102 	movw	r1, #43010	; 0xa802
 80010b6:	4810      	ldr	r0, [pc, #64]	; (80010f8 <EXTI9_5_IRQHandler+0x164>)
 80010b8:	f001 f848 	bl	800214c <HAL_GPIO_WritePin>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80010bc:	2020      	movs	r0, #32
 80010be:	f001 f85f 	bl	8002180 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80010c2:	2040      	movs	r0, #64	; 0x40
 80010c4:	f001 f85c 	bl	8002180 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80010c8:	2080      	movs	r0, #128	; 0x80
 80010ca:	f001 f859 	bl	8002180 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80010ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010d2:	f001 f855 	bl	8002180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000332 	.word	0x20000332
 80010e4:	20000000 	.word	0x20000000
 80010e8:	0800b2a8 	.word	0x0800b2a8
 80010ec:	20000010 	.word	0x20000010
 80010f0:	0800b2b0 	.word	0x0800b2b0
 80010f4:	20000330 	.word	0x20000330
 80010f8:	40020400 	.word	0x40020400

080010fc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <SPI1_IRQHandler+0x10>)
 8001102:	f003 fdfd 	bl	8004d00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000198 	.word	0x20000198

08001110 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001116:	f004 f8e6 	bl	80052e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000025c 	.word	0x2000025c

08001124 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <DMA2_Stream3_IRQHandler+0x10>)
 800112a:	f000 fc0f 	bl	800194c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200001fc 	.word	0x200001fc

08001138 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <OTG_FS_IRQHandler+0x10>)
 800113e:	f001 f988 	bl	8002452 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20001c0c 	.word	0x20001c0c

0800114c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <USART6_IRQHandler+0x10>)
 8001152:	f004 fbed 	bl	8005930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200002a8 	.word	0x200002a8

08001160 <KeyPadGetChar>:

/* USER CODE BEGIN 1 */
char KeyPadGetChar(uint16_t	key)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
  switch(key)
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	f640 0208 	movw	r2, #2056	; 0x808
 8001170:	4293      	cmp	r3, r2
 8001172:	f300 809f 	bgt.w	80012b4 <KeyPadGetChar+0x154>
 8001176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800117a:	dc1a      	bgt.n	80011b2 <KeyPadGetChar+0x52>
 800117c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8001180:	f300 8098 	bgt.w	80012b4 <KeyPadGetChar+0x154>
 8001184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001188:	dc2a      	bgt.n	80011e0 <KeyPadGetChar+0x80>
 800118a:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800118e:	f300 8091 	bgt.w	80012b4 <KeyPadGetChar+0x154>
 8001192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001196:	dc3b      	bgt.n	8001210 <KeyPadGetChar+0xb0>
 8001198:	2b00      	cmp	r3, #0
 800119a:	d069      	beq.n	8001270 <KeyPadGetChar+0x110>
 800119c:	2b00      	cmp	r3, #0
 800119e:	f2c0 8089 	blt.w	80012b4 <KeyPadGetChar+0x154>
 80011a2:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80011a6:	f300 8085 	bgt.w	80012b4 <KeyPadGetChar+0x154>
 80011aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ae:	dc47      	bgt.n	8001240 <KeyPadGetChar+0xe0>
 80011b0:	e080      	b.n	80012b4 <KeyPadGetChar+0x154>
 80011b2:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 80011b6:	2b07      	cmp	r3, #7
 80011b8:	d87c      	bhi.n	80012b4 <KeyPadGetChar+0x154>
 80011ba:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <KeyPadGetChar+0x60>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	08001281 	.word	0x08001281
 80011c4:	08001291 	.word	0x08001291
 80011c8:	080012b5 	.word	0x080012b5
 80011cc:	080012a1 	.word	0x080012a1
 80011d0:	080012b5 	.word	0x080012b5
 80011d4:	080012b5 	.word	0x080012b5
 80011d8:	080012b5 	.word	0x080012b5
 80011dc:	080012b1 	.word	0x080012b1
 80011e0:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	d865      	bhi.n	80012b4 <KeyPadGetChar+0x154>
 80011e8:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <KeyPadGetChar+0x90>)
 80011ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	0800127d 	.word	0x0800127d
 80011f4:	0800128d 	.word	0x0800128d
 80011f8:	080012b5 	.word	0x080012b5
 80011fc:	0800129d 	.word	0x0800129d
 8001200:	080012b5 	.word	0x080012b5
 8001204:	080012b5 	.word	0x080012b5
 8001208:	080012b5 	.word	0x080012b5
 800120c:	080012ad 	.word	0x080012ad
 8001210:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001214:	2b07      	cmp	r3, #7
 8001216:	d84d      	bhi.n	80012b4 <KeyPadGetChar+0x154>
 8001218:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <KeyPadGetChar+0xc0>)
 800121a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121e:	bf00      	nop
 8001220:	08001279 	.word	0x08001279
 8001224:	08001289 	.word	0x08001289
 8001228:	080012b5 	.word	0x080012b5
 800122c:	08001299 	.word	0x08001299
 8001230:	080012b5 	.word	0x080012b5
 8001234:	080012b5 	.word	0x080012b5
 8001238:	080012b5 	.word	0x080012b5
 800123c:	080012a9 	.word	0x080012a9
 8001240:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8001244:	2b07      	cmp	r3, #7
 8001246:	d835      	bhi.n	80012b4 <KeyPadGetChar+0x154>
 8001248:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <KeyPadGetChar+0xf0>)
 800124a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124e:	bf00      	nop
 8001250:	08001275 	.word	0x08001275
 8001254:	08001285 	.word	0x08001285
 8001258:	080012b5 	.word	0x080012b5
 800125c:	08001295 	.word	0x08001295
 8001260:	080012b5 	.word	0x080012b5
 8001264:	080012b5 	.word	0x080012b5
 8001268:	080012b5 	.word	0x080012b5
 800126c:	080012a5 	.word	0x080012a5
  {
    case 0x0000:
      return 0;
 8001270:	2300      	movs	r3, #0
 8001272:	e020      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0101:
			return '1';
 8001274:	2331      	movs	r3, #49	; 0x31
 8001276:	e01e      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0201:
			return '2';
 8001278:	2332      	movs	r3, #50	; 0x32
 800127a:	e01c      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0401:
			return '3';
 800127c:	2333      	movs	r3, #51	; 0x33
 800127e:	e01a      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0801:
			return 'A';
 8001280:	2341      	movs	r3, #65	; 0x41
 8001282:	e018      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0102:
			return '4';
 8001284:	2334      	movs	r3, #52	; 0x34
 8001286:	e016      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0202:
			return '5';
 8001288:	2335      	movs	r3, #53	; 0x35
 800128a:	e014      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0402:
			return '6';
 800128c:	2336      	movs	r3, #54	; 0x36
 800128e:	e012      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0802:
			return 'B';
 8001290:	2342      	movs	r3, #66	; 0x42
 8001292:	e010      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0104:
			return '7';
 8001294:	2337      	movs	r3, #55	; 0x37
 8001296:	e00e      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0204:
			return '8';
 8001298:	2338      	movs	r3, #56	; 0x38
 800129a:	e00c      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0404:
			return '9';
 800129c:	2339      	movs	r3, #57	; 0x39
 800129e:	e00a      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0804:
			return 'C';
 80012a0:	2343      	movs	r3, #67	; 0x43
 80012a2:	e008      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0108:
			return '*';
 80012a4:	232a      	movs	r3, #42	; 0x2a
 80012a6:	e006      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0208:
			return '0';
 80012a8:	2330      	movs	r3, #48	; 0x30
 80012aa:	e004      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0408:
			return '#';
 80012ac:	2323      	movs	r3, #35	; 0x23
 80012ae:	e002      	b.n	80012b6 <KeyPadGetChar+0x156>
		case 0x0808:
			return 'D';
 80012b0:	2344      	movs	r3, #68	; 0x44
 80012b2:	e000      	b.n	80012b6 <KeyPadGetChar+0x156>
		default:
			return 0;
 80012b4:	2300      	movs	r3, #0
	}
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop

080012c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012cc:	4a14      	ldr	r2, [pc, #80]	; (8001320 <_sbrk+0x5c>)
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <_sbrk+0x60>)
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <_sbrk+0x64>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <_sbrk+0x68>)
 80012e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d207      	bcs.n	8001304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f4:	f009 ff1e 	bl	800b134 <__errno>
 80012f8:	4603      	mov	r3, r0
 80012fa:	220c      	movs	r2, #12
 80012fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	e009      	b.n	8001318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <_sbrk+0x64>)
 8001314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20050000 	.word	0x20050000
 8001324:	00000400 	.word	0x00000400
 8001328:	20000724 	.word	0x20000724
 800132c:	20002260 	.word	0x20002260

08001330 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <SystemInit+0x20>)
 8001336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <SystemInit+0x20>)
 800133c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800138c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800135a:	490e      	ldr	r1, [pc, #56]	; (8001394 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001370:	4c0b      	ldr	r4, [pc, #44]	; (80013a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800137e:	f7ff ffd7 	bl	8001330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001382:	f009 fedd 	bl	800b140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001386:	f7ff fa11 	bl	80007ac <main>
  bx  lr    
 800138a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800138c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001394:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001398:	0800b2e8 	.word	0x0800b2e8
  ldr r2, =_sbss
 800139c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80013a0:	2000225c 	.word	0x2000225c

080013a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC_IRQHandler>

080013a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013aa:	2003      	movs	r0, #3
 80013ac:	f000 f94c 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f000 f805 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b6:	f7ff fc85 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f967 	bl	80016b2 <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 f92f 	bl	800165e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000020 	.word	0x20000020
 8001418:	20000028 	.word	0x20000028
 800141c:	20000024 	.word	0x20000024

08001420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000028 	.word	0x20000028
 8001444:	20000728 	.word	0x20000728

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000728 	.word	0x20000728

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_Delay+0x44>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001486:	bf00      	nop
 8001488:	f7ff ffde 	bl	8001448 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000028 	.word	0x20000028

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <__NVIC_SetPriorityGrouping+0x40>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <__NVIC_SetPriorityGrouping+0x40>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00
 80014ec:	05fa0000 	.word	0x05fa0000

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4907      	ldr	r1, [pc, #28]	; (8001544 <__NVIC_EnableIRQ+0x38>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f7ff ff8e 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff29 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff3e 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff8e 	bl	800159c <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5d 	bl	8001548 <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff31 	bl	800150c <__NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa2 	bl	8001604 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff feb6 	bl	8001448 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e099      	b.n	800181c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2202      	movs	r2, #2
 80016ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001708:	e00f      	b.n	800172a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800170a:	f7ff fe9d 	bl	8001448 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b05      	cmp	r3, #5
 8001716:	d908      	bls.n	800172a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2220      	movs	r2, #32
 800171c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2203      	movs	r2, #3
 8001722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e078      	b.n	800181c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1e8      	bne.n	800170a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_DMA_Init+0x158>)
 8001744:	4013      	ands	r3, r2
 8001746:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001756:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800176e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	4313      	orrs	r3, r2
 800177a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2b04      	cmp	r3, #4
 8001782:	d107      	bne.n	8001794 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	4313      	orrs	r3, r2
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4313      	orrs	r3, r2
 8001792:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f023 0307 	bic.w	r3, r3, #7
 80017aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d117      	bne.n	80017ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00e      	beq.n	80017ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 fa7b 	bl	8001ccc <DMA_CheckFifoParam>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2240      	movs	r2, #64	; 0x40
 80017e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017ea:	2301      	movs	r3, #1
 80017ec:	e016      	b.n	800181c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fa32 	bl	8001c60 <DMA_CalcBaseAndBitshift>
 80017fc:	4603      	mov	r3, r0
 80017fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001804:	223f      	movs	r2, #63	; 0x3f
 8001806:	409a      	lsls	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	f010803f 	.word	0xf010803f

08001828 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001836:	f7ff fe07 	bl	8001448 <HAL_GetTick>
 800183a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d008      	beq.n	800185a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e052      	b.n	8001900 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0216 	bic.w	r2, r2, #22
 8001868:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001878:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	2b00      	cmp	r3, #0
 8001880:	d103      	bne.n	800188a <HAL_DMA_Abort+0x62>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0208 	bic.w	r2, r2, #8
 8001898:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0201 	bic.w	r2, r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018aa:	e013      	b.n	80018d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018ac:	f7ff fdcc 	bl	8001448 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	d90c      	bls.n	80018d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2220      	movs	r2, #32
 80018be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2203      	movs	r2, #3
 80018c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e015      	b.n	8001900 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1e4      	bne.n	80018ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e6:	223f      	movs	r2, #63	; 0x3f
 80018e8:	409a      	lsls	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d004      	beq.n	8001926 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2280      	movs	r2, #128	; 0x80
 8001920:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00c      	b.n	8001940 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2205      	movs	r2, #5
 800192a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0201 	bic.w	r2, r2, #1
 800193c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001958:	4b8e      	ldr	r3, [pc, #568]	; (8001b94 <HAL_DMA_IRQHandler+0x248>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a8e      	ldr	r2, [pc, #568]	; (8001b98 <HAL_DMA_IRQHandler+0x24c>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0a9b      	lsrs	r3, r3, #10
 8001964:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001976:	2208      	movs	r2, #8
 8001978:	409a      	lsls	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d01a      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0204 	bic.w	r2, r2, #4
 800199e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a4:	2208      	movs	r2, #8
 80019a6:	409a      	lsls	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	2201      	movs	r2, #1
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d012      	beq.n	80019ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019da:	2201      	movs	r2, #1
 80019dc:	409a      	lsls	r2, r3
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e6:	f043 0202 	orr.w	r2, r3, #2
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2204      	movs	r2, #4
 80019f4:	409a      	lsls	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d012      	beq.n	8001a24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00b      	beq.n	8001a24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	2204      	movs	r2, #4
 8001a12:	409a      	lsls	r2, r3
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1c:	f043 0204 	orr.w	r2, r3, #4
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	2210      	movs	r2, #16
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d043      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d03c      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	2210      	movs	r2, #16
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d018      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d108      	bne.n	8001a7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d024      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
 8001a7a:	e01f      	b.n	8001abc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d01b      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	4798      	blx	r3
 8001a8c:	e016      	b.n	8001abc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d107      	bne.n	8001aac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0208 	bic.w	r2, r2, #8
 8001aaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 808f 	beq.w	8001bec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8087 	beq.w	8001bec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d136      	bne.n	8001b64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0216 	bic.w	r2, r2, #22
 8001b04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d103      	bne.n	8001b26 <HAL_DMA_IRQHandler+0x1da>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0208 	bic.w	r2, r2, #8
 8001b34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3a:	223f      	movs	r2, #63	; 0x3f
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d07e      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	4798      	blx	r3
        }
        return;
 8001b62:	e079      	b.n	8001c58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d01d      	beq.n	8001bae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10d      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d031      	beq.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4798      	blx	r3
 8001b90:	e02c      	b.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
 8001b92:	bf00      	nop
 8001b94:	20000020 	.word	0x20000020
 8001b98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d023      	beq.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4798      	blx	r3
 8001bac:	e01e      	b.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10f      	bne.n	8001bdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0210 	bic.w	r2, r2, #16
 8001bca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d032      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d022      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2205      	movs	r2, #5
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d307      	bcc.n	8001c34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f2      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x2cc>
 8001c32:	e000      	b.n	8001c36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	4798      	blx	r3
 8001c56:	e000      	b.n	8001c5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c58:	bf00      	nop
    }
  }
}
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3b10      	subs	r3, #16
 8001c70:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <DMA_CalcBaseAndBitshift+0x60>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c7a:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <DMA_CalcBaseAndBitshift+0x64>)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d908      	bls.n	8001ca0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <DMA_CalcBaseAndBitshift+0x68>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	1d1a      	adds	r2, r3, #4
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	659a      	str	r2, [r3, #88]	; 0x58
 8001c9e:	e006      	b.n	8001cae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <DMA_CalcBaseAndBitshift+0x68>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	aaaaaaab 	.word	0xaaaaaaab
 8001cc4:	0800b2d0 	.word	0x0800b2d0
 8001cc8:	fffffc00 	.word	0xfffffc00

08001ccc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d11f      	bne.n	8001d26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d856      	bhi.n	8001d9a <DMA_CheckFifoParam+0xce>
 8001cec:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <DMA_CheckFifoParam+0x28>)
 8001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	08001d05 	.word	0x08001d05
 8001cf8:	08001d17 	.word	0x08001d17
 8001cfc:	08001d05 	.word	0x08001d05
 8001d00:	08001d9b 	.word	0x08001d9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d046      	beq.n	8001d9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d14:	e043      	b.n	8001d9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d1e:	d140      	bne.n	8001da2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d24:	e03d      	b.n	8001da2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d2e:	d121      	bne.n	8001d74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d837      	bhi.n	8001da6 <DMA_CheckFifoParam+0xda>
 8001d36:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <DMA_CheckFifoParam+0x70>)
 8001d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3c:	08001d4d 	.word	0x08001d4d
 8001d40:	08001d53 	.word	0x08001d53
 8001d44:	08001d4d 	.word	0x08001d4d
 8001d48:	08001d65 	.word	0x08001d65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d50:	e030      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d025      	beq.n	8001daa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d62:	e022      	b.n	8001daa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d6c:	d11f      	bne.n	8001dae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d72:	e01c      	b.n	8001dae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d903      	bls.n	8001d82 <DMA_CheckFifoParam+0xb6>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d003      	beq.n	8001d88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d80:	e018      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
      break;
 8001d86:	e015      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00e      	beq.n	8001db2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
      break;
 8001d98:	e00b      	b.n	8001db2 <DMA_CheckFifoParam+0xe6>
      break;
 8001d9a:	bf00      	nop
 8001d9c:	e00a      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      break;
 8001d9e:	bf00      	nop
 8001da0:	e008      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      break;
 8001da2:	bf00      	nop
 8001da4:	e006      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      break;
 8001da6:	bf00      	nop
 8001da8:	e004      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      break;
 8001daa:	bf00      	nop
 8001dac:	e002      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dae:	bf00      	nop
 8001db0:	e000      	b.n	8001db4 <DMA_CheckFifoParam+0xe8>
      break;
 8001db2:	bf00      	nop
    }
  } 
  
  return status; 
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e175      	b.n	80020d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	f040 8164 	bne.w	80020ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d005      	beq.n	8001e1a <HAL_GPIO_Init+0x56>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d130      	bne.n	8001e7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e50:	2201      	movs	r2, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	f003 0201 	and.w	r2, r3, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d017      	beq.n	8001eb8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d123      	bne.n	8001f0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	08da      	lsrs	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3208      	adds	r2, #8
 8001ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	69b9      	ldr	r1, [r7, #24]
 8001f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0203 	and.w	r2, r3, #3
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80be 	beq.w	80020ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <HAL_GPIO_Init+0x324>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4a65      	ldr	r2, [pc, #404]	; (80020e8 <HAL_GPIO_Init+0x324>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f58:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5a:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_GPIO_Init+0x324>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f66:	4a61      	ldr	r2, [pc, #388]	; (80020ec <HAL_GPIO_Init+0x328>)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a58      	ldr	r2, [pc, #352]	; (80020f0 <HAL_GPIO_Init+0x32c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d037      	beq.n	8002002 <HAL_GPIO_Init+0x23e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a57      	ldr	r2, [pc, #348]	; (80020f4 <HAL_GPIO_Init+0x330>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d031      	beq.n	8001ffe <HAL_GPIO_Init+0x23a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a56      	ldr	r2, [pc, #344]	; (80020f8 <HAL_GPIO_Init+0x334>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d02b      	beq.n	8001ffa <HAL_GPIO_Init+0x236>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a55      	ldr	r2, [pc, #340]	; (80020fc <HAL_GPIO_Init+0x338>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d025      	beq.n	8001ff6 <HAL_GPIO_Init+0x232>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a54      	ldr	r2, [pc, #336]	; (8002100 <HAL_GPIO_Init+0x33c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01f      	beq.n	8001ff2 <HAL_GPIO_Init+0x22e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a53      	ldr	r2, [pc, #332]	; (8002104 <HAL_GPIO_Init+0x340>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d019      	beq.n	8001fee <HAL_GPIO_Init+0x22a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_GPIO_Init+0x344>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x226>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a51      	ldr	r2, [pc, #324]	; (800210c <HAL_GPIO_Init+0x348>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x222>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a50      	ldr	r2, [pc, #320]	; (8002110 <HAL_GPIO_Init+0x34c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x21e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4f      	ldr	r2, [pc, #316]	; (8002114 <HAL_GPIO_Init+0x350>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x21a>
 8001fda:	2309      	movs	r3, #9
 8001fdc:	e012      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fde:	230a      	movs	r3, #10
 8001fe0:	e010      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	e00e      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	e00c      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fea:	2306      	movs	r3, #6
 8001fec:	e00a      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fee:	2305      	movs	r3, #5
 8001ff0:	e008      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	e006      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e004      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e002      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8002002:	2300      	movs	r3, #0
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	f002 0203 	and.w	r2, r2, #3
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	4093      	lsls	r3, r2
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002014:	4935      	ldr	r1, [pc, #212]	; (80020ec <HAL_GPIO_Init+0x328>)
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002022:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002046:	4a34      	ldr	r2, [pc, #208]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800204c:	4b32      	ldr	r3, [pc, #200]	; (8002118 <HAL_GPIO_Init+0x354>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002070:	4a29      	ldr	r2, [pc, #164]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002076:	4b28      	ldr	r3, [pc, #160]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209a:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <HAL_GPIO_Init+0x354>)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_GPIO_Init+0x354>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <HAL_GPIO_Init+0x354>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3301      	adds	r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b0f      	cmp	r3, #15
 80020d4:	f67f ae86 	bls.w	8001de4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40013800 	.word	0x40013800
 80020f0:	40020000 	.word	0x40020000
 80020f4:	40020400 	.word	0x40020400
 80020f8:	40020800 	.word	0x40020800
 80020fc:	40020c00 	.word	0x40020c00
 8002100:	40021000 	.word	0x40021000
 8002104:	40021400 	.word	0x40021400
 8002108:	40021800 	.word	0x40021800
 800210c:	40021c00 	.word	0x40021c00
 8002110:	40022000 	.word	0x40022000
 8002114:	40022400 	.word	0x40022400
 8002118:	40013c00 	.word	0x40013c00

0800211c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e001      	b.n	800213e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002168:	e003      	b.n	8002172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	619a      	str	r2, [r3, #24]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d006      	beq.n	80021a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002196:	4a05      	ldr	r2, [pc, #20]	; (80021ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f806 	bl	80021b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40013c00 	.word	0x40013c00

080021b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c8:	b08f      	sub	sp, #60	; 0x3c
 80021ca:	af0a      	add	r7, sp, #40	; 0x28
 80021cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e116      	b.n	8002406 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f008 fb4c 	bl	800a890 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2203      	movs	r2, #3
 80021fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f004 fe5b 	bl	8006ed2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	687e      	ldr	r6, [r7, #4]
 8002224:	466d      	mov	r5, sp
 8002226:	f106 0410 	add.w	r4, r6, #16
 800222a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002232:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002236:	e885 0003 	stmia.w	r5, {r0, r1}
 800223a:	1d33      	adds	r3, r6, #4
 800223c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223e:	6838      	ldr	r0, [r7, #0]
 8002240:	f004 fd3c 	bl	8006cbc <USB_CoreInit>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0d7      	b.n	8002406 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f004 fe49 	bl	8006ef4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e04a      	b.n	80022fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	333d      	adds	r3, #61	; 0x3d
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	333c      	adds	r3, #60	; 0x3c
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	b298      	uxth	r0, r3
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	3344      	adds	r3, #68	; 0x44
 80022a4:	4602      	mov	r2, r0
 80022a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	3340      	adds	r3, #64	; 0x40
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	3348      	adds	r3, #72	; 0x48
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	334c      	adds	r3, #76	; 0x4c
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	3354      	adds	r3, #84	; 0x54
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	3301      	adds	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	d3af      	bcc.n	8002268 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	e044      	b.n	8002398 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	3301      	adds	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d3b5      	bcc.n	800230e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	687e      	ldr	r6, [r7, #4]
 80023aa:	466d      	mov	r5, sp
 80023ac:	f106 0410 	add.w	r4, r6, #16
 80023b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80023c0:	1d33      	adds	r3, r6, #4
 80023c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c4:	6838      	ldr	r0, [r7, #0]
 80023c6:	f004 fde1 	bl	8006f8c <USB_DevInit>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e014      	b.n	8002406 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d102      	bne.n	80023fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f001 f97b 	bl	80036f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f005 ff2f 	bl	8008262 <USB_DevDisconnect>

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800240e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_PCD_Start+0x16>
 8002420:	2302      	movs	r3, #2
 8002422:	e012      	b.n	800244a <HAL_PCD_Start+0x3c>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f004 fd3d 	bl	8006eb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f005 fef0 	bl	8008220 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002452:	b590      	push	{r4, r7, lr}
 8002454:	b08d      	sub	sp, #52	; 0x34
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f005 ffae 	bl	80083ca <USB_GetMode>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 84b7 	bne.w	8002de4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f005 ff12 	bl	80082a4 <USB_ReadInterrupts>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 84ad 	beq.w	8002de2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f005 feff 	bl	80082a4 <USB_ReadInterrupts>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d107      	bne.n	80024c0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f002 0202 	and.w	r2, r2, #2
 80024be:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f005 feed 	bl	80082a4 <USB_ReadInterrupts>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d161      	bne.n	8002598 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0210 	bic.w	r2, r2, #16
 80024e2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f003 020f 	and.w	r2, r3, #15
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	3304      	adds	r3, #4
 8002502:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	0c5b      	lsrs	r3, r3, #17
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	2b02      	cmp	r3, #2
 800250e:	d124      	bne.n	800255a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d035      	beq.n	8002588 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800252a:	b29b      	uxth	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	6a38      	ldr	r0, [r7, #32]
 8002530:	f005 fd24 	bl	8007f7c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002540:	441a      	add	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	6a1a      	ldr	r2, [r3, #32]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002552:	441a      	add	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	621a      	str	r2, [r3, #32]
 8002558:	e016      	b.n	8002588 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	0c5b      	lsrs	r3, r3, #17
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	2b06      	cmp	r3, #6
 8002564:	d110      	bne.n	8002588 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800256c:	2208      	movs	r2, #8
 800256e:	4619      	mov	r1, r3
 8002570:	6a38      	ldr	r0, [r7, #32]
 8002572:	f005 fd03 	bl	8007f7c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	6a1a      	ldr	r2, [r3, #32]
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002582:	441a      	add	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0210 	orr.w	r2, r2, #16
 8002596:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f005 fe81 	bl	80082a4 <USB_ReadInterrupts>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025ac:	f040 80a7 	bne.w	80026fe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f005 fe86 	bl	80082ca <USB_ReadDevAllOutEpInterrupt>
 80025be:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025c0:	e099      	b.n	80026f6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 808e 	beq.w	80026ea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f005 feaa 	bl	8008332 <USB_ReadDevOutEPInterrupt>
 80025de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00c      	beq.n	8002604 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f6:	461a      	mov	r2, r3
 80025f8:	2301      	movs	r3, #1
 80025fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fef0 	bl	80033e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00c      	beq.n	8002628 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	4413      	add	r3, r2
 8002616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800261a:	461a      	mov	r2, r3
 800261c:	2308      	movs	r3, #8
 800261e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 ffc6 	bl	80035b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	4413      	add	r3, r2
 800263a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800263e:	461a      	mov	r2, r3
 8002640:	2310      	movs	r3, #16
 8002642:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d030      	beq.n	80026b0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002656:	2b80      	cmp	r3, #128	; 0x80
 8002658:	d109      	bne.n	800266e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002668:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800266e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	4413      	add	r3, r2
 8002680:	3304      	adds	r3, #4
 8002682:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	78db      	ldrb	r3, [r3, #3]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d108      	bne.n	800269e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2200      	movs	r2, #0
 8002690:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	b2db      	uxtb	r3, r3
 8002696:	4619      	mov	r1, r3
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f008 fa2d 	bl	800aaf8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026aa:	461a      	mov	r2, r3
 80026ac:	2302      	movs	r3, #2
 80026ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c6:	461a      	mov	r2, r3
 80026c8:	2320      	movs	r3, #32
 80026ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e2:	461a      	mov	r2, r3
 80026e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	3301      	adds	r3, #1
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f47f af62 	bne.w	80025c2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f005 fdce 	bl	80082a4 <USB_ReadInterrupts>
 8002708:	4603      	mov	r3, r0
 800270a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800270e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002712:	f040 80db 	bne.w	80028cc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f005 fdef 	bl	80082fe <USB_ReadDevAllInEpInterrupt>
 8002720:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002726:	e0cd      	b.n	80028c4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80c2 	beq.w	80028b8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f005 fe15 	bl	800836e <USB_ReadDevInEPInterrupt>
 8002744:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d057      	beq.n	8002800 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	2201      	movs	r2, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	43db      	mvns	r3, r3
 800276a:	69f9      	ldr	r1, [r7, #28]
 800276c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002770:	4013      	ands	r3, r2
 8002772:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	4413      	add	r3, r2
 800277c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002780:	461a      	mov	r2, r3
 8002782:	2301      	movs	r3, #1
 8002784:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d132      	bne.n	80027f4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	334c      	adds	r3, #76	; 0x4c
 800279e:	6819      	ldr	r1, [r3, #0]
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4403      	add	r3, r0
 80027ae:	3348      	adds	r3, #72	; 0x48
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4419      	add	r1, r3
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4403      	add	r3, r0
 80027c2:	334c      	adds	r3, #76	; 0x4c
 80027c4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d113      	bne.n	80027f4 <HAL_PCD_IRQHandler+0x3a2>
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3354      	adds	r3, #84	; 0x54
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d108      	bne.n	80027f4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027ec:	461a      	mov	r2, r3
 80027ee:	2101      	movs	r1, #1
 80027f0:	f005 fe1e 	bl	8008430 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	4619      	mov	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f008 f8f7 	bl	800a9ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	4413      	add	r3, r2
 8002812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002816:	461a      	mov	r2, r3
 8002818:	2308      	movs	r3, #8
 800281a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002832:	461a      	mov	r2, r3
 8002834:	2310      	movs	r3, #16
 8002836:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800284e:	461a      	mov	r2, r3
 8002850:	2340      	movs	r3, #64	; 0x40
 8002852:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d023      	beq.n	80028a6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800285e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002860:	6a38      	ldr	r0, [r7, #32]
 8002862:	f004 fcf1 	bl	8007248 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	3338      	adds	r3, #56	; 0x38
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	4413      	add	r3, r2
 8002876:	3304      	adds	r3, #4
 8002878:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	78db      	ldrb	r3, [r3, #3]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d108      	bne.n	8002894 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2200      	movs	r2, #0
 8002886:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	b2db      	uxtb	r3, r3
 800288c:	4619      	mov	r1, r3
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f008 f944 	bl	800ab1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a0:	461a      	mov	r2, r3
 80028a2:	2302      	movs	r3, #2
 80028a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fd08 	bl	80032c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	3301      	adds	r3, #1
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	085b      	lsrs	r3, r3, #1
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f47f af2e 	bne.w	8002728 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f005 fce7 	bl	80082a4 <USB_ReadInterrupts>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028e0:	d122      	bne.n	8002928 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d108      	bne.n	8002912 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002908:	2100      	movs	r1, #0
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f008 fabe 	bl	800ae8c <HAL_PCDEx_LPM_Callback>
 8002910:	e002      	b.n	8002918 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f008 f8e2 	bl	800aadc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f005 fcb9 	bl	80082a4 <USB_ReadInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800293c:	d112      	bne.n	8002964 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d102      	bne.n	8002954 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f008 f89e 	bl	800aa90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002962:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f005 fc9b 	bl	80082a4 <USB_ReadInterrupts>
 800296e:	4603      	mov	r3, r0
 8002970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002978:	d121      	bne.n	80029be <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002988:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d111      	bne.n	80029b8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	f003 020f 	and.w	r2, r3, #15
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80029ae:	2101      	movs	r1, #1
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f008 fa6b 	bl	800ae8c <HAL_PCDEx_LPM_Callback>
 80029b6:	e002      	b.n	80029be <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f008 f869 	bl	800aa90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f005 fc6e 	bl	80082a4 <USB_ReadInterrupts>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d2:	f040 80b7 	bne.w	8002b44 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e4:	f023 0301 	bic.w	r3, r3, #1
 80029e8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2110      	movs	r1, #16
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 fc29 	bl	8007248 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029fa:	e046      	b.n	8002a8a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a0e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a20:	0151      	lsls	r1, r2, #5
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	440a      	add	r2, r1
 8002a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a42:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a54:	0151      	lsls	r1, r2, #5
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	440a      	add	r2, r1
 8002a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a74:	0151      	lsls	r1, r2, #5
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	440a      	add	r2, r1
 8002a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a82:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	3301      	adds	r3, #1
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d3b3      	bcc.n	80029fc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002aa6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d016      	beq.n	8002ade <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ac0:	f043 030b 	orr.w	r3, r3, #11
 8002ac4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad6:	f043 030b 	orr.w	r3, r3, #11
 8002ada:	6453      	str	r3, [r2, #68]	; 0x44
 8002adc:	e015      	b.n	8002b0a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aec:	4619      	mov	r1, r3
 8002aee:	f242 032b 	movw	r3, #8235	; 0x202b
 8002af2:	4313      	orrs	r3, r2
 8002af4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b04:	f043 030b 	orr.w	r3, r3, #11
 8002b08:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b18:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b1c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f005 fc7e 	bl	8008430 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f005 fbab 	bl	80082a4 <USB_ReadInterrupts>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b58:	d124      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f005 fc42 	bl	80083e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 fbea 	bl	8007342 <USB_GetDevSpeed>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681c      	ldr	r4, [r3, #0]
 8002b7a:	f001 fa83 	bl	8004084 <HAL_RCC_GetHCLKFreq>
 8002b7e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f004 f8ef 	bl	8006d6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f007 ff55 	bl	800aa3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f005 fb7b 	bl	80082a4 <USB_ReadInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d10a      	bne.n	8002bce <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f007 ff32 	bl	800aa22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f002 0208 	and.w	r2, r2, #8
 8002bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f005 fb66 	bl	80082a4 <USB_ReadInterrupts>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bde:	2b80      	cmp	r3, #128	; 0x80
 8002be0:	d122      	bne.n	8002c28 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bee:	2301      	movs	r3, #1
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf2:	e014      	b.n	8002c1e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d105      	bne.n	8002c18 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	4619      	mov	r1, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fb27 	bl	8003266 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d3e5      	bcc.n	8002bf4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f005 fb39 	bl	80082a4 <USB_ReadInterrupts>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c3c:	d13b      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c3e:	2301      	movs	r3, #1
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
 8002c42:	e02b      	b.n	8002c9c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	3340      	adds	r3, #64	; 0x40
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d115      	bne.n	8002c96 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c6a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	da12      	bge.n	8002c96 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	333f      	adds	r3, #63	; 0x3f
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fae8 	bl	8003266 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	3301      	adds	r3, #1
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d3ce      	bcc.n	8002c44 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f005 faf2 	bl	80082a4 <USB_ReadInterrupts>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cca:	d155      	bne.n	8002d78 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ccc:	2301      	movs	r3, #1
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd0:	e045      	b.n	8002d5e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d12e      	bne.n	8002d58 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cfa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	da2b      	bge.n	8002d58 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d0c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d121      	bne.n	8002d58 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d54:	6053      	str	r3, [r2, #4]
            break;
 8002d56:	e007      	b.n	8002d68 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d3b4      	bcc.n	8002cd2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f005 fa91 	bl	80082a4 <USB_ReadInterrupts>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8c:	d10a      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f007 fed6 	bl	800ab40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f005 fa7b 	bl	80082a4 <USB_ReadInterrupts>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d115      	bne.n	8002de4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f007 fec6 	bl	800ab5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6859      	ldr	r1, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	e000      	b.n	8002de4 <HAL_PCD_IRQHandler+0x992>
      return;
 8002de2:	bf00      	nop
    }
  }
}
 8002de4:	3734      	adds	r7, #52	; 0x34
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd90      	pop	{r4, r7, pc}

08002dea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_PCD_SetAddress+0x1a>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e013      	b.n	8002e2c <HAL_PCD_SetAddress+0x42>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f005 f9d9 	bl	80081d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	4608      	mov	r0, r1
 8002e3e:	4611      	mov	r1, r2
 8002e40:	461a      	mov	r2, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	70fb      	strb	r3, [r7, #3]
 8002e46:	460b      	mov	r3, r1
 8002e48:	803b      	strh	r3, [r7, #0]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	da0f      	bge.n	8002e7a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	f003 020f 	and.w	r2, r3, #15
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	3338      	adds	r3, #56	; 0x38
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3304      	adds	r3, #4
 8002e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	705a      	strb	r2, [r3, #1]
 8002e78:	e00f      	b.n	8002e9a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	f003 020f 	and.w	r2, r3, #15
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	3304      	adds	r3, #4
 8002e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ea6:	883a      	ldrh	r2, [r7, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	78ba      	ldrb	r2, [r7, #2]
 8002eb0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	785b      	ldrb	r3, [r3, #1]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d004      	beq.n	8002ec4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ec4:	78bb      	ldrb	r3, [r7, #2]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d102      	bne.n	8002ed0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_PCD_EP_Open+0xaa>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e00e      	b.n	8002efc <HAL_PCD_EP_Open+0xc8>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68f9      	ldr	r1, [r7, #12]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f004 fa4d 	bl	800738c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002efa:	7afb      	ldrb	r3, [r7, #11]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	da0f      	bge.n	8002f38 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	f003 020f 	and.w	r2, r3, #15
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	3338      	adds	r3, #56	; 0x38
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2201      	movs	r2, #1
 8002f34:	705a      	strb	r2, [r3, #1]
 8002f36:	e00f      	b.n	8002f58 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	f003 020f 	and.w	r2, r3, #15
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3304      	adds	r3, #4
 8002f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_PCD_EP_Close+0x6e>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e00e      	b.n	8002f90 <HAL_PCD_EP_Close+0x8c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68f9      	ldr	r1, [r7, #12]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 fa8b 	bl	800749c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa8:	7afb      	ldrb	r3, [r7, #11]
 8002faa:	f003 020f 	and.w	r2, r3, #15
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fda:	7afb      	ldrb	r3, [r7, #11]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d102      	bne.n	8002ff4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ff4:	7afb      	ldrb	r3, [r7, #11]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	6979      	ldr	r1, [r7, #20]
 800300c:	f004 fd72 	bl	8007af4 <USB_EP0StartXfer>
 8003010:	e008      	b.n	8003024 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	6979      	ldr	r1, [r7, #20]
 8003020:	f004 fb18 	bl	8007654 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	460b      	mov	r3, r1
 8003038:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	f003 020f 	and.w	r2, r3, #15
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003050:	681b      	ldr	r3, [r3, #0]
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	460b      	mov	r3, r1
 800306c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306e:	7afb      	ldrb	r3, [r7, #11]
 8003070:	f003 020f 	and.w	r2, r3, #15
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	3338      	adds	r3, #56	; 0x38
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4413      	add	r3, r2
 8003082:	3304      	adds	r3, #4
 8003084:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2200      	movs	r2, #0
 8003096:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2201      	movs	r2, #1
 800309c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800309e:	7afb      	ldrb	r3, [r7, #11]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d102      	bne.n	80030b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030b8:	7afb      	ldrb	r3, [r7, #11]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	6979      	ldr	r1, [r7, #20]
 80030d0:	f004 fd10 	bl	8007af4 <USB_EP0StartXfer>
 80030d4:	e008      	b.n	80030e8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	6979      	ldr	r1, [r7, #20]
 80030e4:	f004 fab6 	bl	8007654 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	429a      	cmp	r2, r3
 800310a:	d901      	bls.n	8003110 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e050      	b.n	80031b2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003114:	2b00      	cmp	r3, #0
 8003116:	da0f      	bge.n	8003138 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	f003 020f 	and.w	r2, r3, #15
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	3338      	adds	r3, #56	; 0x38
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4413      	add	r3, r2
 800312c:	3304      	adds	r3, #4
 800312e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	705a      	strb	r2, [r3, #1]
 8003136:	e00d      	b.n	8003154 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	3304      	adds	r3, #4
 800314c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_PCD_EP_SetStall+0x82>
 8003170:	2302      	movs	r3, #2
 8003172:	e01e      	b.n	80031b2 <HAL_PCD_EP_SetStall+0xc0>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68f9      	ldr	r1, [r7, #12]
 8003182:	4618      	mov	r0, r3
 8003184:	f004 ff52 	bl	800802c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	b2d9      	uxtb	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031a2:	461a      	mov	r2, r3
 80031a4:	f005 f944 	bl	8008430 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 020f 	and.w	r2, r3, #15
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d901      	bls.n	80031d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e042      	b.n	800325e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	da0f      	bge.n	8003200 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 020f 	and.w	r2, r3, #15
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	3338      	adds	r3, #56	; 0x38
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4413      	add	r3, r2
 80031f4:	3304      	adds	r3, #4
 80031f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	705a      	strb	r2, [r3, #1]
 80031fe:	e00f      	b.n	8003220 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 020f 	and.w	r2, r3, #15
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	3304      	adds	r3, #4
 8003218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	b2da      	uxtb	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_PCD_EP_ClrStall+0x86>
 800323c:	2302      	movs	r3, #2
 800323e:	e00e      	b.n	800325e <HAL_PCD_EP_ClrStall+0xa4>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68f9      	ldr	r1, [r7, #12]
 800324e:	4618      	mov	r0, r3
 8003250:	f004 ff5a 	bl	8008108 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003276:	2b00      	cmp	r3, #0
 8003278:	da0c      	bge.n	8003294 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	f003 020f 	and.w	r2, r3, #15
 8003280:	4613      	mov	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	3338      	adds	r3, #56	; 0x38
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	3304      	adds	r3, #4
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	e00c      	b.n	80032ae <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	f003 020f 	and.w	r2, r3, #15
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	3304      	adds	r3, #4
 80032ac:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f004 fd79 	bl	8007dac <USB_EPStopXfer>
 80032ba:	4603      	mov	r3, r0
 80032bc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032be:	7afb      	ldrb	r3, [r7, #11]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	; 0x28
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	3338      	adds	r3, #56	; 0x38
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	3304      	adds	r3, #4
 80032ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a1a      	ldr	r2, [r3, #32]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d901      	bls.n	8003300 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e06c      	b.n	80033da <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	699a      	ldr	r2, [r3, #24]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	429a      	cmp	r2, r3
 8003314:	d902      	bls.n	800331c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	3303      	adds	r3, #3
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003324:	e02b      	b.n	800337e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	429a      	cmp	r2, r3
 800333a:	d902      	bls.n	8003342 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3303      	adds	r3, #3
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6919      	ldr	r1, [r3, #16]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800335a:	b2db      	uxtb	r3, r3
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	4603      	mov	r3, r0
 8003360:	6978      	ldr	r0, [r7, #20]
 8003362:	f004 fdcd 	bl	8007f00 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	441a      	add	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1a      	ldr	r2, [r3, #32]
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	441a      	add	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	429a      	cmp	r2, r3
 8003392:	d809      	bhi.n	80033a8 <PCD_WriteEmptyTxFifo+0xe0>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a1a      	ldr	r2, [r3, #32]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800339c:	429a      	cmp	r2, r3
 800339e:	d203      	bcs.n	80033a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1be      	bne.n	8003326 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d811      	bhi.n	80033d8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	2201      	movs	r2, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	6939      	ldr	r1, [r7, #16]
 80033d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033d4:	4013      	ands	r3, r2
 80033d6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	333c      	adds	r3, #60	; 0x3c
 80033fc:	3304      	adds	r3, #4
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d17b      	bne.n	8003512 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d015      	beq.n	8003450 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	4a61      	ldr	r2, [pc, #388]	; (80035ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	f240 80b9 	bls.w	80035a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80b3 	beq.w	80035a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003446:	461a      	mov	r2, r3
 8003448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800344c:	6093      	str	r3, [r2, #8]
 800344e:	e0a7      	b.n	80035a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003466:	461a      	mov	r2, r3
 8003468:	2320      	movs	r3, #32
 800346a:	6093      	str	r3, [r2, #8]
 800346c:	e098      	b.n	80035a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003474:	2b00      	cmp	r3, #0
 8003476:	f040 8093 	bne.w	80035a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	4a4b      	ldr	r2, [pc, #300]	; (80035ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d90f      	bls.n	80034a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003498:	461a      	mov	r2, r3
 800349a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349e:	6093      	str	r3, [r2, #8]
 80034a0:	e07e      	b.n	80035a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4413      	add	r3, r2
 80034b4:	3304      	adds	r3, #4
 80034b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	0159      	lsls	r1, r3, #5
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	440b      	add	r3, r1
 80034c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ce:	1ad2      	subs	r2, r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d114      	bne.n	8003504 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034ec:	461a      	mov	r2, r3
 80034ee:	2101      	movs	r1, #1
 80034f0:	f004 ff9e 	bl	8008430 <USB_EP0_OutStart>
 80034f4:	e006      	b.n	8003504 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	441a      	add	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	4619      	mov	r1, r3
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f007 fa54 	bl	800a9b8 <HAL_PCD_DataOutStageCallback>
 8003510:	e046      	b.n	80035a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	4a26      	ldr	r2, [pc, #152]	; (80035b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d124      	bne.n	8003564 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	4413      	add	r3, r2
 800352c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003530:	461a      	mov	r2, r3
 8003532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003536:	6093      	str	r3, [r2, #8]
 8003538:	e032      	b.n	80035a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003550:	461a      	mov	r2, r3
 8003552:	2320      	movs	r3, #32
 8003554:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	4619      	mov	r1, r3
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f007 fa2b 	bl	800a9b8 <HAL_PCD_DataOutStageCallback>
 8003562:	e01d      	b.n	80035a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d114      	bne.n	8003594 <PCD_EP_OutXfrComplete_int+0x1b0>
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d108      	bne.n	8003594 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800358c:	461a      	mov	r2, r3
 800358e:	2100      	movs	r1, #0
 8003590:	f004 ff4e 	bl	8008430 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	4619      	mov	r1, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f007 fa0c 	bl	800a9b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	4f54300a 	.word	0x4f54300a
 80035b0:	4f54310a 	.word	0x4f54310a

080035b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	333c      	adds	r3, #60	; 0x3c
 80035cc:	3304      	adds	r3, #4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4a15      	ldr	r2, [pc, #84]	; (800363c <PCD_EP_OutSetupPacket_int+0x88>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d90e      	bls.n	8003608 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d009      	beq.n	8003608 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003600:	461a      	mov	r2, r3
 8003602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003606:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f007 f9c3 	bl	800a994 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4a0a      	ldr	r2, [pc, #40]	; (800363c <PCD_EP_OutSetupPacket_int+0x88>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d90c      	bls.n	8003630 <PCD_EP_OutSetupPacket_int+0x7c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d108      	bne.n	8003630 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003628:	461a      	mov	r2, r3
 800362a:	2101      	movs	r1, #1
 800362c:	f004 ff00 	bl	8008430 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	4f54300a 	.word	0x4f54300a

08003640 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
 800364c:	4613      	mov	r3, r2
 800364e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d107      	bne.n	800366e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800365e:	883b      	ldrh	r3, [r7, #0]
 8003660:	0419      	lsls	r1, r3, #16
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	430a      	orrs	r2, r1
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
 800366c:	e028      	b.n	80036c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	4413      	add	r3, r2
 800367a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800367c:	2300      	movs	r3, #0
 800367e:	73fb      	strb	r3, [r7, #15]
 8003680:	e00d      	b.n	800369e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	3340      	adds	r3, #64	; 0x40
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	4413      	add	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	3301      	adds	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	7bfa      	ldrb	r2, [r7, #15]
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d3ec      	bcc.n	8003682 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036a8:	883b      	ldrh	r3, [r7, #0]
 80036aa:	0418      	lsls	r0, r3, #16
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	4302      	orrs	r2, r0
 80036b8:	3340      	adds	r3, #64	; 0x40
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	887a      	ldrh	r2, [r7, #2]
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_PCDEx_ActivateLPM+0x44>)
 8003720:	4313      	orrs	r3, r2
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	10000003 	.word	0x10000003

08003738 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a04      	ldr	r2, [pc, #16]	; (8003754 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003746:	6013      	str	r3, [r2, #0]
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40007000 	.word	0x40007000

08003758 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003760:	2300      	movs	r3, #0
 8003762:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e291      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8087 	beq.w	800388a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800377c:	4b96      	ldr	r3, [pc, #600]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b04      	cmp	r3, #4
 8003786:	d00c      	beq.n	80037a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003788:	4b93      	ldr	r3, [pc, #588]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d112      	bne.n	80037ba <HAL_RCC_OscConfig+0x62>
 8003794:	4b90      	ldr	r3, [pc, #576]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a0:	d10b      	bne.n	80037ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a2:	4b8d      	ldr	r3, [pc, #564]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d06c      	beq.n	8003888 <HAL_RCC_OscConfig+0x130>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d168      	bne.n	8003888 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e26b      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c2:	d106      	bne.n	80037d2 <HAL_RCC_OscConfig+0x7a>
 80037c4:	4b84      	ldr	r3, [pc, #528]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a83      	ldr	r2, [pc, #524]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80037ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	e02e      	b.n	8003830 <HAL_RCC_OscConfig+0xd8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x9c>
 80037da:	4b7f      	ldr	r3, [pc, #508]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7e      	ldr	r2, [pc, #504]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80037e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b7c      	ldr	r3, [pc, #496]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a7b      	ldr	r2, [pc, #492]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80037ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e01d      	b.n	8003830 <HAL_RCC_OscConfig+0xd8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0xc0>
 80037fe:	4b76      	ldr	r3, [pc, #472]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a75      	ldr	r2, [pc, #468]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b73      	ldr	r3, [pc, #460]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a72      	ldr	r2, [pc, #456]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0xd8>
 8003818:	4b6f      	ldr	r3, [pc, #444]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a6e      	ldr	r2, [pc, #440]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b6c      	ldr	r3, [pc, #432]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a6b      	ldr	r2, [pc, #428]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fd fe06 	bl	8001448 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fd fe02 	bl	8001448 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e21f      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b61      	ldr	r3, [pc, #388]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0xe8>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fd fdf2 	bl	8001448 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003868:	f7fd fdee 	bl	8001448 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e20b      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	4b57      	ldr	r3, [pc, #348]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x110>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d069      	beq.n	800396a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003896:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a2:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d11c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x190>
 80038ae:	4b4a      	ldr	r3, [pc, #296]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d116      	bne.n	80038e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ba:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_RCC_OscConfig+0x17a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e1df      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d2:	4b41      	ldr	r3, [pc, #260]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	493d      	ldr	r1, [pc, #244]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	e040      	b.n	800396a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d023      	beq.n	8003938 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f0:	4b39      	ldr	r3, [pc, #228]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a38      	ldr	r2, [pc, #224]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd fda4 	bl	8001448 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003904:	f7fd fda0 	bl	8001448 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e1bd      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003916:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003922:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4929      	ldr	r1, [pc, #164]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]
 8003936:	e018      	b.n	800396a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fd fd80 	bl	8001448 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394c:	f7fd fd7c 	bl	8001448 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e199      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395e:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d038      	beq.n	80039e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d019      	beq.n	80039b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397e:	4b16      	ldr	r3, [pc, #88]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003982:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398a:	f7fd fd5d 	bl	8001448 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003992:	f7fd fd59 	bl	8001448 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e176      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80039a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x23a>
 80039b0:	e01a      	b.n	80039e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b2:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80039b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b6:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039be:	f7fd fd43 	bl	8001448 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c4:	e00a      	b.n	80039dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c6:	f7fd fd3f 	bl	8001448 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d903      	bls.n	80039dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e15c      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
 80039d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	4b91      	ldr	r3, [pc, #580]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 80039de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1ee      	bne.n	80039c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a4 	beq.w	8003b3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f6:	4b8b      	ldr	r3, [pc, #556]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10d      	bne.n	8003a1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	4b88      	ldr	r3, [pc, #544]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	4a87      	ldr	r2, [pc, #540]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0e:	4b85      	ldr	r3, [pc, #532]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1e:	4b82      	ldr	r3, [pc, #520]	; (8003c28 <HAL_RCC_OscConfig+0x4d0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d118      	bne.n	8003a5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a2a:	4b7f      	ldr	r3, [pc, #508]	; (8003c28 <HAL_RCC_OscConfig+0x4d0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a7e      	ldr	r2, [pc, #504]	; (8003c28 <HAL_RCC_OscConfig+0x4d0>)
 8003a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a36:	f7fd fd07 	bl	8001448 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3e:	f7fd fd03 	bl	8001448 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b64      	cmp	r3, #100	; 0x64
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e120      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a50:	4b75      	ldr	r3, [pc, #468]	; (8003c28 <HAL_RCC_OscConfig+0x4d0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_OscConfig+0x31a>
 8003a64:	4b6f      	ldr	r3, [pc, #444]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	4a6e      	ldr	r2, [pc, #440]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a70:	e02d      	b.n	8003ace <HAL_RCC_OscConfig+0x376>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x33c>
 8003a7a:	4b6a      	ldr	r3, [pc, #424]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	4a69      	ldr	r2, [pc, #420]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	6713      	str	r3, [r2, #112]	; 0x70
 8003a86:	4b67      	ldr	r3, [pc, #412]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	4a66      	ldr	r2, [pc, #408]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a8c:	f023 0304 	bic.w	r3, r3, #4
 8003a90:	6713      	str	r3, [r2, #112]	; 0x70
 8003a92:	e01c      	b.n	8003ace <HAL_RCC_OscConfig+0x376>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b05      	cmp	r3, #5
 8003a9a:	d10c      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x35e>
 8003a9c:	4b61      	ldr	r3, [pc, #388]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	4a60      	ldr	r2, [pc, #384]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003aa2:	f043 0304 	orr.w	r3, r3, #4
 8003aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa8:	4b5e      	ldr	r3, [pc, #376]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	4a5d      	ldr	r2, [pc, #372]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab4:	e00b      	b.n	8003ace <HAL_RCC_OscConfig+0x376>
 8003ab6:	4b5b      	ldr	r3, [pc, #364]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	4a5a      	ldr	r2, [pc, #360]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003abc:	f023 0301 	bic.w	r3, r3, #1
 8003ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac2:	4b58      	ldr	r3, [pc, #352]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	4a57      	ldr	r2, [pc, #348]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003ac8:	f023 0304 	bic.w	r3, r3, #4
 8003acc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d015      	beq.n	8003b02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad6:	f7fd fcb7 	bl	8001448 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003adc:	e00a      	b.n	8003af4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fd fcb3 	bl	8001448 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e0ce      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af4:	4b4b      	ldr	r3, [pc, #300]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0ee      	beq.n	8003ade <HAL_RCC_OscConfig+0x386>
 8003b00:	e014      	b.n	8003b2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b02:	f7fd fca1 	bl	8001448 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b08:	e00a      	b.n	8003b20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0a:	f7fd fc9d 	bl	8001448 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e0b8      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b20:	4b40      	ldr	r3, [pc, #256]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1ee      	bne.n	8003b0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d105      	bne.n	8003b3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b32:	4b3c      	ldr	r3, [pc, #240]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	4a3b      	ldr	r2, [pc, #236]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 80a4 	beq.w	8003c90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b48:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d06b      	beq.n	8003c2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d149      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5c:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a30      	ldr	r2, [pc, #192]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fd fc6e 	bl	8001448 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fd fc6a 	bl	8001448 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e087      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	4b28      	ldr	r3, [pc, #160]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	019b      	lsls	r3, r3, #6
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	041b      	lsls	r3, r3, #16
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	061b      	lsls	r3, r3, #24
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003bb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a18      	ldr	r2, [pc, #96]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fd fc3e 	bl	8001448 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fd fc3a 	bl	8001448 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e057      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x478>
 8003bee:	e04f      	b.n	8003c90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0b      	ldr	r2, [pc, #44]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fd fc24 	bl	8001448 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fd fc20 	bl	8001448 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e03d      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_RCC_OscConfig+0x4cc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4ac>
 8003c22:	e035      	b.n	8003c90 <HAL_RCC_OscConfig+0x538>
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <HAL_RCC_OscConfig+0x544>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d028      	beq.n	8003c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d121      	bne.n	8003c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d11a      	bne.n	8003c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d111      	bne.n	8003c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	3b01      	subs	r3, #1
 8003c76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800

08003ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0d0      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b6a      	ldr	r3, [pc, #424]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d910      	bls.n	8003ce8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b67      	ldr	r3, [pc, #412]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 020f 	bic.w	r2, r3, #15
 8003cce:	4965      	ldr	r1, [pc, #404]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0b8      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d020      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d00:	4b59      	ldr	r3, [pc, #356]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4a58      	ldr	r2, [pc, #352]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d18:	4b53      	ldr	r3, [pc, #332]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4a52      	ldr	r2, [pc, #328]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d24:	4b50      	ldr	r3, [pc, #320]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	494d      	ldr	r1, [pc, #308]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d040      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d107      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4a:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d115      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e07f      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d107      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d62:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e073      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d72:	4b3d      	ldr	r3, [pc, #244]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e06b      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d82:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 0203 	bic.w	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4936      	ldr	r1, [pc, #216]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d94:	f7fd fb58 	bl	8001448 <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d9c:	f7fd fb54 	bl	8001448 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e053      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db2:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 020c 	and.w	r2, r3, #12
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d1eb      	bne.n	8003d9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d210      	bcs.n	8003df4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 020f 	bic.w	r2, r3, #15
 8003dda:	4922      	ldr	r1, [pc, #136]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e032      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e00:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4916      	ldr	r1, [pc, #88]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e1e:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	490e      	ldr	r1, [pc, #56]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e32:	f000 f821 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8003e36:	4602      	mov	r2, r0
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	490a      	ldr	r1, [pc, #40]	; (8003e6c <HAL_RCC_ClockConfig+0x1cc>)
 8003e44:	5ccb      	ldrb	r3, [r1, r3]
 8003e46:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4a:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <HAL_RCC_ClockConfig+0x1d0>)
 8003e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x1d4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fd fab4 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40023c00 	.word	0x40023c00
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	0800b2b8 	.word	0x0800b2b8
 8003e70:	20000020 	.word	0x20000020
 8003e74:	20000024 	.word	0x20000024

08003e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e7c:	b094      	sub	sp, #80	; 0x50
 8003e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	647b      	str	r3, [r7, #68]	; 0x44
 8003e84:	2300      	movs	r3, #0
 8003e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e88:	2300      	movs	r3, #0
 8003e8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e90:	4b79      	ldr	r3, [pc, #484]	; (8004078 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	f200 80e1 	bhi.w	8004064 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x34>
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d003      	beq.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eaa:	e0db      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eac:	4b73      	ldr	r3, [pc, #460]	; (800407c <HAL_RCC_GetSysClockFreq+0x204>)
 8003eae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eb0:	e0db      	b.n	800406a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eb2:	4b73      	ldr	r3, [pc, #460]	; (8004080 <HAL_RCC_GetSysClockFreq+0x208>)
 8003eb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eb6:	e0d8      	b.n	800406a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eb8:	4b6f      	ldr	r3, [pc, #444]	; (8004078 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ec0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ec2:	4b6d      	ldr	r3, [pc, #436]	; (8004078 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d063      	beq.n	8003f96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ece:	4b6a      	ldr	r3, [pc, #424]	; (8004078 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	099b      	lsrs	r3, r3, #6
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ed8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eea:	4622      	mov	r2, r4
 8003eec:	462b      	mov	r3, r5
 8003eee:	f04f 0000 	mov.w	r0, #0
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	0159      	lsls	r1, r3, #5
 8003ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003efc:	0150      	lsls	r0, r2, #5
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4621      	mov	r1, r4
 8003f04:	1a51      	subs	r1, r2, r1
 8003f06:	6139      	str	r1, [r7, #16]
 8003f08:	4629      	mov	r1, r5
 8003f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f1c:	4659      	mov	r1, fp
 8003f1e:	018b      	lsls	r3, r1, #6
 8003f20:	4651      	mov	r1, sl
 8003f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f26:	4651      	mov	r1, sl
 8003f28:	018a      	lsls	r2, r1, #6
 8003f2a:	4651      	mov	r1, sl
 8003f2c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f30:	4659      	mov	r1, fp
 8003f32:	eb63 0901 	sbc.w	r9, r3, r1
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f4a:	4690      	mov	r8, r2
 8003f4c:	4699      	mov	r9, r3
 8003f4e:	4623      	mov	r3, r4
 8003f50:	eb18 0303 	adds.w	r3, r8, r3
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	462b      	mov	r3, r5
 8003f58:	eb49 0303 	adc.w	r3, r9, r3
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	024b      	lsls	r3, r1, #9
 8003f6e:	4621      	mov	r1, r4
 8003f70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f74:	4621      	mov	r1, r4
 8003f76:	024a      	lsls	r2, r1, #9
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f7e:	2200      	movs	r2, #0
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f88:	f7fc f946 	bl	8000218 <__aeabi_uldivmod>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4613      	mov	r3, r2
 8003f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f94:	e058      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f96:	4b38      	ldr	r3, [pc, #224]	; (8004078 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	099b      	lsrs	r3, r3, #6
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fa6:	623b      	str	r3, [r7, #32]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	f04f 0000 	mov.w	r0, #0
 8003fb8:	f04f 0100 	mov.w	r1, #0
 8003fbc:	0159      	lsls	r1, r3, #5
 8003fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc2:	0150      	lsls	r0, r2, #5
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4641      	mov	r1, r8
 8003fca:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fce:	4649      	mov	r1, r9
 8003fd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fe0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fe4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fe8:	ebb2 040a 	subs.w	r4, r2, sl
 8003fec:	eb63 050b 	sbc.w	r5, r3, fp
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	00eb      	lsls	r3, r5, #3
 8003ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ffe:	00e2      	lsls	r2, r4, #3
 8004000:	4614      	mov	r4, r2
 8004002:	461d      	mov	r5, r3
 8004004:	4643      	mov	r3, r8
 8004006:	18e3      	adds	r3, r4, r3
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	464b      	mov	r3, r9
 800400c:	eb45 0303 	adc.w	r3, r5, r3
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800401e:	4629      	mov	r1, r5
 8004020:	028b      	lsls	r3, r1, #10
 8004022:	4621      	mov	r1, r4
 8004024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004028:	4621      	mov	r1, r4
 800402a:	028a      	lsls	r2, r1, #10
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004032:	2200      	movs	r2, #0
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	61fa      	str	r2, [r7, #28]
 8004038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800403c:	f7fc f8ec 	bl	8000218 <__aeabi_uldivmod>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4613      	mov	r3, r2
 8004046:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_GetSysClockFreq+0x200>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	3301      	adds	r3, #1
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004058:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800405a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004062:	e002      	b.n	800406a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCC_GetSysClockFreq+0x204>)
 8004066:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800406a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800406c:	4618      	mov	r0, r3
 800406e:	3750      	adds	r7, #80	; 0x50
 8004070:	46bd      	mov	sp, r7
 8004072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004076:	bf00      	nop
 8004078:	40023800 	.word	0x40023800
 800407c:	00f42400 	.word	0x00f42400
 8004080:	007a1200 	.word	0x007a1200

08004084 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004088:	4b03      	ldr	r3, [pc, #12]	; (8004098 <HAL_RCC_GetHCLKFreq+0x14>)
 800408a:	681b      	ldr	r3, [r3, #0]
}
 800408c:	4618      	mov	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20000020 	.word	0x20000020

0800409c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040a0:	f7ff fff0 	bl	8004084 <HAL_RCC_GetHCLKFreq>
 80040a4:	4602      	mov	r2, r0
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	0a9b      	lsrs	r3, r3, #10
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	4903      	ldr	r1, [pc, #12]	; (80040c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b2:	5ccb      	ldrb	r3, [r1, r3]
 80040b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40023800 	.word	0x40023800
 80040c0:	0800b2c8 	.word	0x0800b2c8

080040c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040c8:	f7ff ffdc 	bl	8004084 <HAL_RCC_GetHCLKFreq>
 80040cc:	4602      	mov	r2, r0
 80040ce:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	0b5b      	lsrs	r3, r3, #13
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	4903      	ldr	r1, [pc, #12]	; (80040e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040da:	5ccb      	ldrb	r3, [r1, r3]
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40023800 	.word	0x40023800
 80040e8:	0800b2c8 	.word	0x0800b2c8

080040ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d012      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004114:	4b69      	ldr	r3, [pc, #420]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4a68      	ldr	r2, [pc, #416]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800411e:	6093      	str	r3, [r2, #8]
 8004120:	4b66      	ldr	r3, [pc, #408]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004128:	4964      	ldr	r1, [pc, #400]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412a:	4313      	orrs	r3, r2
 800412c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004136:	2301      	movs	r3, #1
 8004138:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d017      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004146:	4b5d      	ldr	r3, [pc, #372]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800414c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004154:	4959      	ldr	r1, [pc, #356]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004164:	d101      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004166:	2301      	movs	r3, #1
 8004168:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004172:	2301      	movs	r3, #1
 8004174:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d017      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004182:	4b4e      	ldr	r3, [pc, #312]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004188:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	494a      	ldr	r1, [pc, #296]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a0:	d101      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041a2:	2301      	movs	r3, #1
 80041a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80041ae:	2301      	movs	r3, #1
 80041b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80041be:	2301      	movs	r3, #1
 80041c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 808b 	beq.w	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041d0:	4b3a      	ldr	r3, [pc, #232]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	4a39      	ldr	r2, [pc, #228]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041da:	6413      	str	r3, [r2, #64]	; 0x40
 80041dc:	4b37      	ldr	r3, [pc, #220]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041e8:	4b35      	ldr	r3, [pc, #212]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a34      	ldr	r2, [pc, #208]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f4:	f7fd f928 	bl	8001448 <HAL_GetTick>
 80041f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fc:	f7fd f924 	bl	8001448 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e357      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800420e:	4b2c      	ldr	r3, [pc, #176]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800421a:	4b28      	ldr	r3, [pc, #160]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004222:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d035      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	429a      	cmp	r2, r3
 8004236:	d02e      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004238:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004240:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004242:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a1d      	ldr	r2, [pc, #116]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a1a      	ldr	r2, [pc, #104]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004258:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800425a:	4a18      	ldr	r2, [pc, #96]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004260:	4b16      	ldr	r3, [pc, #88]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d114      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fd f8ec 	bl	8001448 <HAL_GetTick>
 8004270:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004272:	e00a      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004274:	f7fd f8e8 	bl	8001448 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e319      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428a:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0ee      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042a2:	d111      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042b2:	400b      	ands	r3, r1
 80042b4:	4901      	ldr	r1, [pc, #4]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
 80042ba:	e00b      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40007000 	.word	0x40007000
 80042c4:	0ffffcff 	.word	0x0ffffcff
 80042c8:	4baa      	ldr	r3, [pc, #680]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4aa9      	ldr	r2, [pc, #676]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042d2:	6093      	str	r3, [r2, #8]
 80042d4:	4ba7      	ldr	r3, [pc, #668]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e0:	49a4      	ldr	r1, [pc, #656]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d010      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042f2:	4ba0      	ldr	r3, [pc, #640]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f8:	4a9e      	ldr	r2, [pc, #632]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004302:	4b9c      	ldr	r3, [pc, #624]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004304:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	4999      	ldr	r1, [pc, #612]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004320:	4b94      	ldr	r3, [pc, #592]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004326:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800432e:	4991      	ldr	r1, [pc, #580]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004342:	4b8c      	ldr	r3, [pc, #560]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004348:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004350:	4988      	ldr	r1, [pc, #544]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004364:	4b83      	ldr	r3, [pc, #524]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004372:	4980      	ldr	r1, [pc, #512]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004386:	4b7b      	ldr	r3, [pc, #492]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004394:	4977      	ldr	r1, [pc, #476]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043a8:	4b72      	ldr	r3, [pc, #456]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ae:	f023 0203 	bic.w	r2, r3, #3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	496f      	ldr	r1, [pc, #444]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043ca:	4b6a      	ldr	r3, [pc, #424]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d0:	f023 020c 	bic.w	r2, r3, #12
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d8:	4966      	ldr	r1, [pc, #408]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043ec:	4b61      	ldr	r3, [pc, #388]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fa:	495e      	ldr	r1, [pc, #376]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800440e:	4b59      	ldr	r3, [pc, #356]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004414:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441c:	4955      	ldr	r1, [pc, #340]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004430:	4b50      	ldr	r3, [pc, #320]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	494d      	ldr	r1, [pc, #308]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004452:	4b48      	ldr	r3, [pc, #288]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004458:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	4944      	ldr	r1, [pc, #272]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004474:	4b3f      	ldr	r3, [pc, #252]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	493c      	ldr	r1, [pc, #240]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004496:	4b37      	ldr	r3, [pc, #220]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a4:	4933      	ldr	r1, [pc, #204]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044b8:	4b2e      	ldr	r3, [pc, #184]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c6:	492b      	ldr	r1, [pc, #172]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d011      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044da:	4b26      	ldr	r3, [pc, #152]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e8:	4922      	ldr	r1, [pc, #136]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044f8:	d101      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044fa:	2301      	movs	r3, #1
 80044fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800450a:	2301      	movs	r3, #1
 800450c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800451a:	4b16      	ldr	r3, [pc, #88]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800451c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004520:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004528:	4912      	ldr	r1, [pc, #72]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800453c:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800454c:	4909      	ldr	r1, [pc, #36]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d006      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 80d9 	beq.w	800471a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004568:	4b02      	ldr	r3, [pc, #8]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a01      	ldr	r2, [pc, #4]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800456e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004572:	e001      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004574:	40023800 	.word	0x40023800
 8004578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457a:	f7fc ff65 	bl	8001448 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004582:	f7fc ff61 	bl	8001448 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b64      	cmp	r3, #100	; 0x64
 800458e:	d901      	bls.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e194      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004594:	4b6c      	ldr	r3, [pc, #432]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f0      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d021      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d11d      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045b4:	4b64      	ldr	r3, [pc, #400]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ba:	0c1b      	lsrs	r3, r3, #16
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045c2:	4b61      	ldr	r3, [pc, #388]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c8:	0e1b      	lsrs	r3, r3, #24
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	019a      	lsls	r2, r3, #6
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	041b      	lsls	r3, r3, #16
 80045da:	431a      	orrs	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	071b      	lsls	r3, r3, #28
 80045e8:	4957      	ldr	r1, [pc, #348]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d004      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800460e:	2b00      	cmp	r3, #0
 8004610:	d02e      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800461a:	d129      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800461c:	4b4a      	ldr	r3, [pc, #296]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800461e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004622:	0c1b      	lsrs	r3, r3, #16
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800462a:	4b47      	ldr	r3, [pc, #284]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800462c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004630:	0f1b      	lsrs	r3, r3, #28
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	019a      	lsls	r2, r3, #6
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	061b      	lsls	r3, r3, #24
 800464a:	431a      	orrs	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	071b      	lsls	r3, r3, #28
 8004650:	493d      	ldr	r1, [pc, #244]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004658:	4b3b      	ldr	r3, [pc, #236]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800465a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800465e:	f023 021f 	bic.w	r2, r3, #31
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	3b01      	subs	r3, #1
 8004668:	4937      	ldr	r1, [pc, #220]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01d      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800467c:	4b32      	ldr	r3, [pc, #200]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800467e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004682:	0e1b      	lsrs	r3, r3, #24
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800468a:	4b2f      	ldr	r3, [pc, #188]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800468c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004690:	0f1b      	lsrs	r3, r3, #28
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	019a      	lsls	r2, r3, #6
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	041b      	lsls	r3, r3, #16
 80046a4:	431a      	orrs	r2, r3
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	061b      	lsls	r3, r3, #24
 80046aa:	431a      	orrs	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	071b      	lsls	r3, r3, #28
 80046b0:	4925      	ldr	r1, [pc, #148]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d011      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	019a      	lsls	r2, r3, #6
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	061b      	lsls	r3, r3, #24
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	071b      	lsls	r3, r3, #28
 80046e0:	4919      	ldr	r1, [pc, #100]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046e8:	4b17      	ldr	r3, [pc, #92]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a16      	ldr	r2, [pc, #88]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f4:	f7fc fea8 	bl	8001448 <HAL_GetTick>
 80046f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046fc:	f7fc fea4 	bl	8001448 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b64      	cmp	r3, #100	; 0x64
 8004708:	d901      	bls.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e0d7      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800470e:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	2b01      	cmp	r3, #1
 800471e:	f040 80cd 	bne.w	80048bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004722:	4b09      	ldr	r3, [pc, #36]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a08      	ldr	r2, [pc, #32]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472e:	f7fc fe8b 	bl	8001448 <HAL_GetTick>
 8004732:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004734:	e00a      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004736:	f7fc fe87 	bl	8001448 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b64      	cmp	r3, #100	; 0x64
 8004742:	d903      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e0ba      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004748:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800474c:	4b5e      	ldr	r3, [pc, #376]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004758:	d0ed      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004776:	2b00      	cmp	r3, #0
 8004778:	d02e      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d12a      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004782:	4b51      	ldr	r3, [pc, #324]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004788:	0c1b      	lsrs	r3, r3, #16
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004790:	4b4d      	ldr	r3, [pc, #308]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	0f1b      	lsrs	r3, r3, #28
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	019a      	lsls	r2, r3, #6
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	041b      	lsls	r3, r3, #16
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	061b      	lsls	r3, r3, #24
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	071b      	lsls	r3, r3, #28
 80047b6:	4944      	ldr	r1, [pc, #272]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047be:	4b42      	ldr	r3, [pc, #264]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	3b01      	subs	r3, #1
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	493d      	ldr	r1, [pc, #244]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d022      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ec:	d11d      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047ee:	4b36      	ldr	r3, [pc, #216]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f4:	0e1b      	lsrs	r3, r3, #24
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047fc:	4b32      	ldr	r3, [pc, #200]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004802:	0f1b      	lsrs	r3, r3, #28
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	019a      	lsls	r2, r3, #6
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	431a      	orrs	r2, r3
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	061b      	lsls	r3, r3, #24
 800481c:	431a      	orrs	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	071b      	lsls	r3, r3, #28
 8004822:	4929      	ldr	r1, [pc, #164]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d028      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004836:	4b24      	ldr	r3, [pc, #144]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483c:	0e1b      	lsrs	r3, r3, #24
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004844:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	0c1b      	lsrs	r3, r3, #16
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	019a      	lsls	r2, r3, #6
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	041b      	lsls	r3, r3, #16
 800485c:	431a      	orrs	r2, r3
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	061b      	lsls	r3, r3, #24
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	071b      	lsls	r3, r3, #28
 800486a:	4917      	ldr	r1, [pc, #92]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004878:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	4911      	ldr	r1, [pc, #68]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004888:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a0e      	ldr	r2, [pc, #56]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800488e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004894:	f7fc fdd8 	bl	8001448 <HAL_GetTick>
 8004898:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800489c:	f7fc fdd4 	bl	8001448 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	; 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e007      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ba:	d1ef      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3720      	adds	r7, #32
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800

080048cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e09d      	b.n	8004a1a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d108      	bne.n	80048f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ee:	d009      	beq.n	8004904 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	61da      	str	r2, [r3, #28]
 80048f6:	e005      	b.n	8004904 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fc f9f4 	bl	8000d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004944:	d902      	bls.n	800494c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	e002      	b.n	8004952 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800494c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004950:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800495a:	d007      	beq.n	800496c <HAL_SPI_Init+0xa0>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004964:	d002      	beq.n	800496c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ae:	ea42 0103 	orr.w	r1, r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	0c1b      	lsrs	r3, r3, #16
 80049c8:	f003 0204 	and.w	r2, r3, #4
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049e8:	ea42 0103 	orr.w	r1, r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69da      	ldr	r2, [r3, #28]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b088      	sub	sp, #32
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_SPI_Transmit+0x22>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e158      	b.n	8004cf6 <HAL_SPI_Transmit+0x2d4>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a4c:	f7fc fcfc 	bl	8001448 <HAL_GetTick>
 8004a50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d002      	beq.n	8004a68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a62:	2302      	movs	r3, #2
 8004a64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a66:	e13d      	b.n	8004ce4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_Transmit+0x52>
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a78:	e134      	b.n	8004ce4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	88fa      	ldrh	r2, [r7, #6]
 8004a92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	88fa      	ldrh	r2, [r7, #6]
 8004a98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac4:	d10f      	bne.n	8004ae6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ae4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af0:	2b40      	cmp	r3, #64	; 0x40
 8004af2:	d007      	beq.n	8004b04 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b0c:	d94b      	bls.n	8004ba6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_SPI_Transmit+0xfa>
 8004b16:	8afb      	ldrh	r3, [r7, #22]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d13e      	bne.n	8004b9a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	881a      	ldrh	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	1c9a      	adds	r2, r3, #2
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b40:	e02b      	b.n	8004b9a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d112      	bne.n	8004b76 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	881a      	ldrh	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	1c9a      	adds	r2, r3, #2
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b74:	e011      	b.n	8004b9a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b76:	f7fc fc67 	bl	8001448 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d803      	bhi.n	8004b8e <HAL_SPI_Transmit+0x16c>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d102      	bne.n	8004b94 <HAL_SPI_Transmit+0x172>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b98:	e0a4      	b.n	8004ce4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1ce      	bne.n	8004b42 <HAL_SPI_Transmit+0x120>
 8004ba4:	e07c      	b.n	8004ca0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_SPI_Transmit+0x192>
 8004bae:	8afb      	ldrh	r3, [r7, #22]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d170      	bne.n	8004c96 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d912      	bls.n	8004be4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	881a      	ldrh	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	1c9a      	adds	r2, r3, #2
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b02      	subs	r3, #2
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004be2:	e058      	b.n	8004c96 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	330c      	adds	r3, #12
 8004bee:	7812      	ldrb	r2, [r2, #0]
 8004bf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c0a:	e044      	b.n	8004c96 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d12b      	bne.n	8004c72 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d912      	bls.n	8004c4a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	881a      	ldrh	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	1c9a      	adds	r2, r3, #2
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b02      	subs	r3, #2
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c48:	e025      	b.n	8004c96 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	330c      	adds	r3, #12
 8004c54:	7812      	ldrb	r2, [r2, #0]
 8004c56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c70:	e011      	b.n	8004c96 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c72:	f7fc fbe9 	bl	8001448 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d803      	bhi.n	8004c8a <HAL_SPI_Transmit+0x268>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c88:	d102      	bne.n	8004c90 <HAL_SPI_Transmit+0x26e>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d102      	bne.n	8004c96 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c94:	e026      	b.n	8004ce4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1b5      	bne.n	8004c0c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	6839      	ldr	r1, [r7, #0]
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 fa5d 	bl	8005164 <SPI_EndRxTxTransaction>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	e000      	b.n	8004ce4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004ce2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3720      	adds	r7, #32
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10e      	bne.n	8004d40 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d009      	beq.n	8004d40 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d004      	beq.n	8004d40 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	4798      	blx	r3
    return;
 8004d3e:	e0ce      	b.n	8004ede <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_SPI_IRQHandler+0x5e>
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	4798      	blx	r3
    return;
 8004d5c:	e0bf      	b.n	8004ede <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <HAL_SPI_IRQHandler+0x7e>
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d105      	bne.n	8004d7e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80b0 	beq.w	8004ede <HAL_SPI_IRQHandler+0x1de>
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80aa 	beq.w	8004ede <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d023      	beq.n	8004ddc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d011      	beq.n	8004dc4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da4:	f043 0204 	orr.w	r2, r3, #4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	e00b      	b.n	8004ddc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	693b      	ldr	r3, [r7, #16]
        return;
 8004dda:	e080      	b.n	8004ede <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d014      	beq.n	8004e10 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dea:	f043 0201 	orr.w	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00c      	beq.n	8004e34 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e1e:	f043 0208 	orr.w	r2, r3, #8
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d04f      	beq.n	8004edc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e4a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d104      	bne.n	8004e68 <HAL_SPI_IRQHandler+0x168>
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d034      	beq.n	8004ed2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0203 	bic.w	r2, r2, #3
 8004e76:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d011      	beq.n	8004ea4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e84:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <HAL_SPI_IRQHandler+0x1e4>)
 8004e86:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fc fd3b 	bl	8001908 <HAL_DMA_Abort_IT>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d016      	beq.n	8004eda <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb0:	4a0c      	ldr	r2, [pc, #48]	; (8004ee4 <HAL_SPI_IRQHandler+0x1e4>)
 8004eb2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fc fd25 	bl	8001908 <HAL_DMA_Abort_IT>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004ed0:	e003      	b.n	8004eda <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f808 	bl	8004ee8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004ed8:	e000      	b.n	8004edc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004eda:	bf00      	nop
    return;
 8004edc:	bf00      	nop
  }
}
 8004ede:	3720      	adds	r7, #32
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	08004efd 	.word	0x08004efd

08004ee8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff ffe5 	bl	8004ee8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f1e:	bf00      	nop
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	4613      	mov	r3, r2
 8004f36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f38:	f7fc fa86 	bl	8001448 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	4413      	add	r3, r2
 8004f46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f48:	f7fc fa7e 	bl	8001448 <HAL_GetTick>
 8004f4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f4e:	4b39      	ldr	r3, [pc, #228]	; (8005034 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	015b      	lsls	r3, r3, #5
 8004f54:	0d1b      	lsrs	r3, r3, #20
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	fb02 f303 	mul.w	r3, r2, r3
 8004f5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f5e:	e054      	b.n	800500a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f66:	d050      	beq.n	800500a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f68:	f7fc fa6e 	bl	8001448 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d902      	bls.n	8004f7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d13d      	bne.n	8004ffa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f96:	d111      	bne.n	8004fbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa0:	d004      	beq.n	8004fac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004faa:	d107      	bne.n	8004fbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc4:	d10f      	bne.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e017      	b.n	800502a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	3b01      	subs	r3, #1
 8005008:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4013      	ands	r3, r2
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	429a      	cmp	r2, r3
 8005018:	bf0c      	ite	eq
 800501a:	2301      	moveq	r3, #1
 800501c:	2300      	movne	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	429a      	cmp	r2, r3
 8005026:	d19b      	bne.n	8004f60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3720      	adds	r7, #32
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20000020 	.word	0x20000020

08005038 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800504a:	f7fc f9fd 	bl	8001448 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	1a9b      	subs	r3, r3, r2
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	4413      	add	r3, r2
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800505a:	f7fc f9f5 	bl	8001448 <HAL_GetTick>
 800505e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005068:	4b3d      	ldr	r3, [pc, #244]	; (8005160 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	00da      	lsls	r2, r3, #3
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	0d1b      	lsrs	r3, r3, #20
 8005078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507a:	fb02 f303 	mul.w	r3, r2, r3
 800507e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005080:	e060      	b.n	8005144 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005088:	d107      	bne.n	800509a <SPI_WaitFifoStateUntilTimeout+0x62>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005098:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a0:	d050      	beq.n	8005144 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050a2:	f7fc f9d1 	bl	8001448 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d902      	bls.n	80050b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d13d      	bne.n	8005134 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050d0:	d111      	bne.n	80050f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050da:	d004      	beq.n	80050e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e4:	d107      	bne.n	80050f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fe:	d10f      	bne.n	8005120 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800511e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e010      	b.n	8005156 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	3b01      	subs	r3, #1
 8005142:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4013      	ands	r3, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	d196      	bne.n	8005082 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3728      	adds	r7, #40	; 0x28
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000020 	.word	0x20000020

08005164 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2200      	movs	r2, #0
 8005178:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7ff ff5b 	bl	8005038 <SPI_WaitFifoStateUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e046      	b.n	8005226 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005198:	4b25      	ldr	r3, [pc, #148]	; (8005230 <SPI_EndRxTxTransaction+0xcc>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a25      	ldr	r2, [pc, #148]	; (8005234 <SPI_EndRxTxTransaction+0xd0>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	0d5b      	lsrs	r3, r3, #21
 80051a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051a8:	fb02 f303 	mul.w	r3, r2, r3
 80051ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b6:	d112      	bne.n	80051de <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2200      	movs	r2, #0
 80051c0:	2180      	movs	r1, #128	; 0x80
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f7ff feb0 	bl	8004f28 <SPI_WaitFlagStateUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d016      	beq.n	80051fc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d2:	f043 0220 	orr.w	r2, r3, #32
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e023      	b.n	8005226 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	2b80      	cmp	r3, #128	; 0x80
 80051f6:	d0f2      	beq.n	80051de <SPI_EndRxTxTransaction+0x7a>
 80051f8:	e000      	b.n	80051fc <SPI_EndRxTxTransaction+0x98>
        break;
 80051fa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2200      	movs	r2, #0
 8005204:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f7ff ff15 	bl	8005038 <SPI_WaitFifoStateUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d007      	beq.n	8005224 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e000      	b.n	8005226 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20000020 	.word	0x20000020
 8005234:	165e9f81 	.word	0x165e9f81

08005238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e049      	b.n	80052de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fb fddc 	bl	8000e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f000 f986 	bl	8005588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d122      	bne.n	8005342 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b02      	cmp	r3, #2
 8005308:	d11b      	bne.n	8005342 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f06f 0202 	mvn.w	r2, #2
 8005312:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	f003 0303 	and.w	r3, r3, #3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f90f 	bl	800554c <HAL_TIM_IC_CaptureCallback>
 800532e:	e005      	b.n	800533c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f901 	bl	8005538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f912 	bl	8005560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b04      	cmp	r3, #4
 800534e:	d122      	bne.n	8005396 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b04      	cmp	r3, #4
 800535c:	d11b      	bne.n	8005396 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f06f 0204 	mvn.w	r2, #4
 8005366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f8e5 	bl	800554c <HAL_TIM_IC_CaptureCallback>
 8005382:	e005      	b.n	8005390 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f8d7 	bl	8005538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f8e8 	bl	8005560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d122      	bne.n	80053ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d11b      	bne.n	80053ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f06f 0208 	mvn.w	r2, #8
 80053ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2204      	movs	r2, #4
 80053c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f8bb 	bl	800554c <HAL_TIM_IC_CaptureCallback>
 80053d6:	e005      	b.n	80053e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f8ad 	bl	8005538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f8be 	bl	8005560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d122      	bne.n	800543e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f003 0310 	and.w	r3, r3, #16
 8005402:	2b10      	cmp	r3, #16
 8005404:	d11b      	bne.n	800543e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f06f 0210 	mvn.w	r2, #16
 800540e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2208      	movs	r2, #8
 8005414:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f891 	bl	800554c <HAL_TIM_IC_CaptureCallback>
 800542a:	e005      	b.n	8005438 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f883 	bl	8005538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f894 	bl	8005560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b01      	cmp	r3, #1
 800544a:	d10e      	bne.n	800546a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b01      	cmp	r3, #1
 8005458:	d107      	bne.n	800546a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f06f 0201 	mvn.w	r2, #1
 8005462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f85d 	bl	8005524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005474:	2b80      	cmp	r3, #128	; 0x80
 8005476:	d10e      	bne.n	8005496 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d107      	bne.n	8005496 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800548e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f923 	bl	80056dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a4:	d10e      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b0:	2b80      	cmp	r3, #128	; 0x80
 80054b2:	d107      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f916 	bl	80056f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b40      	cmp	r3, #64	; 0x40
 80054d0:	d10e      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054dc:	2b40      	cmp	r3, #64	; 0x40
 80054de:	d107      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f842 	bl	8005574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b20      	cmp	r3, #32
 80054fc:	d10e      	bne.n	800551c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	2b20      	cmp	r3, #32
 800550a:	d107      	bne.n	800551c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0220 	mvn.w	r2, #32
 8005514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f8d6 	bl	80056c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800551c:	bf00      	nop
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a40      	ldr	r2, [pc, #256]	; (800569c <TIM_Base_SetConfig+0x114>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d013      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a6:	d00f      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a3d      	ldr	r2, [pc, #244]	; (80056a0 <TIM_Base_SetConfig+0x118>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00b      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a3c      	ldr	r2, [pc, #240]	; (80056a4 <TIM_Base_SetConfig+0x11c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d007      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a3b      	ldr	r2, [pc, #236]	; (80056a8 <TIM_Base_SetConfig+0x120>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a3a      	ldr	r2, [pc, #232]	; (80056ac <TIM_Base_SetConfig+0x124>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d108      	bne.n	80055da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2f      	ldr	r2, [pc, #188]	; (800569c <TIM_Base_SetConfig+0x114>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d02b      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e8:	d027      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2c      	ldr	r2, [pc, #176]	; (80056a0 <TIM_Base_SetConfig+0x118>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d023      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a2b      	ldr	r2, [pc, #172]	; (80056a4 <TIM_Base_SetConfig+0x11c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d01f      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a2a      	ldr	r2, [pc, #168]	; (80056a8 <TIM_Base_SetConfig+0x120>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d01b      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a29      	ldr	r2, [pc, #164]	; (80056ac <TIM_Base_SetConfig+0x124>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d017      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a28      	ldr	r2, [pc, #160]	; (80056b0 <TIM_Base_SetConfig+0x128>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d013      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a27      	ldr	r2, [pc, #156]	; (80056b4 <TIM_Base_SetConfig+0x12c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00f      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a26      	ldr	r2, [pc, #152]	; (80056b8 <TIM_Base_SetConfig+0x130>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00b      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a25      	ldr	r2, [pc, #148]	; (80056bc <TIM_Base_SetConfig+0x134>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d007      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a24      	ldr	r2, [pc, #144]	; (80056c0 <TIM_Base_SetConfig+0x138>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d003      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a23      	ldr	r2, [pc, #140]	; (80056c4 <TIM_Base_SetConfig+0x13c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d108      	bne.n	800564c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a0a      	ldr	r2, [pc, #40]	; (800569c <TIM_Base_SetConfig+0x114>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d003      	beq.n	8005680 <TIM_Base_SetConfig+0xf8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a0c      	ldr	r2, [pc, #48]	; (80056ac <TIM_Base_SetConfig+0x124>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d103      	bne.n	8005688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	615a      	str	r2, [r3, #20]
}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40010000 	.word	0x40010000
 80056a0:	40000400 	.word	0x40000400
 80056a4:	40000800 	.word	0x40000800
 80056a8:	40000c00 	.word	0x40000c00
 80056ac:	40010400 	.word	0x40010400
 80056b0:	40014000 	.word	0x40014000
 80056b4:	40014400 	.word	0x40014400
 80056b8:	40014800 	.word	0x40014800
 80056bc:	40001800 	.word	0x40001800
 80056c0:	40001c00 	.word	0x40001c00
 80056c4:	40002000 	.word	0x40002000

080056c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e040      	b.n	8005798 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fb fb9e 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2224      	movs	r2, #36	; 0x24
 8005730:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fbe6 	bl	8005f14 <UART_SetConfig>
 8005748:	4603      	mov	r3, r0
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e022      	b.n	8005798 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fe3e 	bl	80063dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800576e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800577e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fec5 	bl	8006520 <UART_CheckIdleState>
 8005796:	4603      	mov	r3, r0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	; 0x28
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	4613      	mov	r3, r2
 80057ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d171      	bne.n	800589c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_UART_Transmit+0x24>
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e06a      	b.n	800589e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2221      	movs	r2, #33	; 0x21
 80057d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057d6:	f7fb fe37 	bl	8001448 <HAL_GetTick>
 80057da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	88fa      	ldrh	r2, [r7, #6]
 80057e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	88fa      	ldrh	r2, [r7, #6]
 80057e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f4:	d108      	bne.n	8005808 <HAL_UART_Transmit+0x68>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d104      	bne.n	8005808 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	61bb      	str	r3, [r7, #24]
 8005806:	e003      	b.n	8005810 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005810:	e02c      	b.n	800586c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2200      	movs	r2, #0
 800581a:	2180      	movs	r1, #128	; 0x80
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 feb6 	bl	800658e <UART_WaitOnFlagUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e038      	b.n	800589e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10b      	bne.n	800584a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005840:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	3302      	adds	r3, #2
 8005846:	61bb      	str	r3, [r7, #24]
 8005848:	e007      	b.n	800585a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	781a      	ldrb	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	3301      	adds	r3, #1
 8005858:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1cc      	bne.n	8005812 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2200      	movs	r2, #0
 8005880:	2140      	movs	r1, #64	; 0x40
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 fe83 	bl	800658e <UART_WaitOnFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e005      	b.n	800589e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	e000      	b.n	800589e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800589c:	2302      	movs	r3, #2
  }
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3720      	adds	r7, #32
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b08a      	sub	sp, #40	; 0x28
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	4613      	mov	r3, r2
 80058b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d132      	bne.n	8005924 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <HAL_UART_Receive_IT+0x24>
 80058c4:	88fb      	ldrh	r3, [r7, #6]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e02b      	b.n	8005926 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d018      	beq.n	8005914 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	e853 3f00 	ldrex	r3, [r3]
 80058ee:	613b      	str	r3, [r7, #16]
   return(result);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	461a      	mov	r2, r3
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	623b      	str	r3, [r7, #32]
 8005902:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005904:	69f9      	ldr	r1, [r7, #28]
 8005906:	6a3a      	ldr	r2, [r7, #32]
 8005908:	e841 2300 	strex	r3, r2, [r1]
 800590c:	61bb      	str	r3, [r7, #24]
   return(result);
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1e6      	bne.n	80058e2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005914:	88fb      	ldrh	r3, [r7, #6]
 8005916:	461a      	mov	r2, r3
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 fefe 	bl	800671c <UART_Start_Receive_IT>
 8005920:	4603      	mov	r3, r0
 8005922:	e000      	b.n	8005926 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005924:	2302      	movs	r3, #2
  }
}
 8005926:	4618      	mov	r0, r3
 8005928:	3728      	adds	r7, #40	; 0x28
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b0ba      	sub	sp, #232	; 0xe8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005956:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800595a:	f640 030f 	movw	r3, #2063	; 0x80f
 800595e:	4013      	ands	r3, r2
 8005960:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005968:	2b00      	cmp	r3, #0
 800596a:	d115      	bne.n	8005998 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800596c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00f      	beq.n	8005998 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d009      	beq.n	8005998 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8297 	beq.w	8005ebc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	4798      	blx	r3
      }
      return;
 8005996:	e291      	b.n	8005ebc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 8117 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80059a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80059ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80059b2:	4b85      	ldr	r3, [pc, #532]	; (8005bc8 <HAL_UART_IRQHandler+0x298>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 810a 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d011      	beq.n	80059ec <HAL_UART_IRQHandler+0xbc>
 80059c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00b      	beq.n	80059ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2201      	movs	r2, #1
 80059da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e2:	f043 0201 	orr.w	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d011      	beq.n	8005a1c <HAL_UART_IRQHandler+0xec>
 80059f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2202      	movs	r2, #2
 8005a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a12:	f043 0204 	orr.w	r2, r3, #4
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d011      	beq.n	8005a4c <HAL_UART_IRQHandler+0x11c>
 8005a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2204      	movs	r2, #4
 8005a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a42:	f043 0202 	orr.w	r2, r3, #2
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d017      	beq.n	8005a88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d105      	bne.n	8005a70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2208      	movs	r2, #8
 8005a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a7e:	f043 0208 	orr.w	r2, r3, #8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d012      	beq.n	8005aba <HAL_UART_IRQHandler+0x18a>
 8005a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00c      	beq.n	8005aba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab0:	f043 0220 	orr.w	r2, r3, #32
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 81fd 	beq.w	8005ec0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00d      	beq.n	8005aee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d005      	beq.n	8005b12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d04f      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fec8 	bl	80068a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b22:	2b40      	cmp	r3, #64	; 0x40
 8005b24:	d141      	bne.n	8005baa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1d9      	bne.n	8005b26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d013      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b7e:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <HAL_UART_IRQHandler+0x29c>)
 8005b80:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fb febe 	bl	8001908 <HAL_DMA_Abort_IT>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d017      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba0:	e00f      	b.n	8005bc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f9a0 	bl	8005ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba8:	e00b      	b.n	8005bc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f99c 	bl	8005ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb0:	e007      	b.n	8005bc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f998 	bl	8005ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005bc0:	e17e      	b.n	8005ec0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc2:	bf00      	nop
    return;
 8005bc4:	e17c      	b.n	8005ec0 <HAL_UART_IRQHandler+0x590>
 8005bc6:	bf00      	nop
 8005bc8:	04000120 	.word	0x04000120
 8005bcc:	08006971 	.word	0x08006971

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	f040 814c 	bne.w	8005e72 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 8145 	beq.w	8005e72 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 813e 	beq.w	8005e72 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2210      	movs	r2, #16
 8005bfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b40      	cmp	r3, #64	; 0x40
 8005c0a:	f040 80b6 	bne.w	8005d7a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 8150 	beq.w	8005ec4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	f080 8148 	bcs.w	8005ec4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c48:	f000 8086 	beq.w	8005d58 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c7a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1da      	bne.n	8005c4c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ca6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ca8:	f023 0301 	bic.w	r3, r3, #1
 8005cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e1      	bne.n	8005c96 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cf6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cf8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e3      	bne.n	8005cd2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d28:	f023 0310 	bic.w	r3, r3, #16
 8005d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e4      	bne.n	8005d18 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fb fd68 	bl	8001828 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	4619      	mov	r1, r3
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f8c2 	bl	8005efc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d78:	e0a4      	b.n	8005ec4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 8096 	beq.w	8005ec8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005d9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 8091 	beq.w	8005ec8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e4      	bne.n	8005da6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3308      	adds	r3, #8
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	623b      	str	r3, [r7, #32]
   return(result);
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	f023 0301 	bic.w	r3, r3, #1
 8005df2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e00:	633a      	str	r2, [r7, #48]	; 0x30
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e3      	bne.n	8005ddc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f023 0310 	bic.w	r3, r3, #16
 8005e3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	461a      	mov	r2, r3
 8005e46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e4a:	61fb      	str	r3, [r7, #28]
 8005e4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	69b9      	ldr	r1, [r7, #24]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	617b      	str	r3, [r7, #20]
   return(result);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e4      	bne.n	8005e28 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2202      	movs	r2, #2
 8005e62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f846 	bl	8005efc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e70:	e02a      	b.n	8005ec8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00e      	beq.n	8005e9c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d008      	beq.n	8005e9c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01c      	beq.n	8005ecc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	4798      	blx	r3
    }
    return;
 8005e9a:	e017      	b.n	8005ecc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d012      	beq.n	8005ece <HAL_UART_IRQHandler+0x59e>
 8005ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00c      	beq.n	8005ece <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fd71 	bl	800699c <UART_EndTransmit_IT>
    return;
 8005eba:	e008      	b.n	8005ece <HAL_UART_IRQHandler+0x59e>
      return;
 8005ebc:	bf00      	nop
 8005ebe:	e006      	b.n	8005ece <HAL_UART_IRQHandler+0x59e>
    return;
 8005ec0:	bf00      	nop
 8005ec2:	e004      	b.n	8005ece <HAL_UART_IRQHandler+0x59e>
      return;
 8005ec4:	bf00      	nop
 8005ec6:	e002      	b.n	8005ece <HAL_UART_IRQHandler+0x59e>
      return;
 8005ec8:	bf00      	nop
 8005eca:	e000      	b.n	8005ece <HAL_UART_IRQHandler+0x59e>
    return;
 8005ecc:	bf00      	nop
  }

}
 8005ece:	37e8      	adds	r7, #232	; 0xe8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4ba6      	ldr	r3, [pc, #664]	; (80061d8 <UART_SetConfig+0x2c4>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6812      	ldr	r2, [r2, #0]
 8005f46:	6979      	ldr	r1, [r7, #20]
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a94      	ldr	r2, [pc, #592]	; (80061dc <UART_SetConfig+0x2c8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d120      	bne.n	8005fd2 <UART_SetConfig+0xbe>
 8005f90:	4b93      	ldr	r3, [pc, #588]	; (80061e0 <UART_SetConfig+0x2cc>)
 8005f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d816      	bhi.n	8005fcc <UART_SetConfig+0xb8>
 8005f9e:	a201      	add	r2, pc, #4	; (adr r2, 8005fa4 <UART_SetConfig+0x90>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08005fb5 	.word	0x08005fb5
 8005fa8:	08005fc1 	.word	0x08005fc1
 8005fac:	08005fbb 	.word	0x08005fbb
 8005fb0:	08005fc7 	.word	0x08005fc7
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e150      	b.n	800625c <UART_SetConfig+0x348>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	77fb      	strb	r3, [r7, #31]
 8005fbe:	e14d      	b.n	800625c <UART_SetConfig+0x348>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e14a      	b.n	800625c <UART_SetConfig+0x348>
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	77fb      	strb	r3, [r7, #31]
 8005fca:	e147      	b.n	800625c <UART_SetConfig+0x348>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e144      	b.n	800625c <UART_SetConfig+0x348>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a83      	ldr	r2, [pc, #524]	; (80061e4 <UART_SetConfig+0x2d0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d132      	bne.n	8006042 <UART_SetConfig+0x12e>
 8005fdc:	4b80      	ldr	r3, [pc, #512]	; (80061e0 <UART_SetConfig+0x2cc>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe2:	f003 030c 	and.w	r3, r3, #12
 8005fe6:	2b0c      	cmp	r3, #12
 8005fe8:	d828      	bhi.n	800603c <UART_SetConfig+0x128>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <UART_SetConfig+0xdc>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	08006025 	.word	0x08006025
 8005ff4:	0800603d 	.word	0x0800603d
 8005ff8:	0800603d 	.word	0x0800603d
 8005ffc:	0800603d 	.word	0x0800603d
 8006000:	08006031 	.word	0x08006031
 8006004:	0800603d 	.word	0x0800603d
 8006008:	0800603d 	.word	0x0800603d
 800600c:	0800603d 	.word	0x0800603d
 8006010:	0800602b 	.word	0x0800602b
 8006014:	0800603d 	.word	0x0800603d
 8006018:	0800603d 	.word	0x0800603d
 800601c:	0800603d 	.word	0x0800603d
 8006020:	08006037 	.word	0x08006037
 8006024:	2300      	movs	r3, #0
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e118      	b.n	800625c <UART_SetConfig+0x348>
 800602a:	2302      	movs	r3, #2
 800602c:	77fb      	strb	r3, [r7, #31]
 800602e:	e115      	b.n	800625c <UART_SetConfig+0x348>
 8006030:	2304      	movs	r3, #4
 8006032:	77fb      	strb	r3, [r7, #31]
 8006034:	e112      	b.n	800625c <UART_SetConfig+0x348>
 8006036:	2308      	movs	r3, #8
 8006038:	77fb      	strb	r3, [r7, #31]
 800603a:	e10f      	b.n	800625c <UART_SetConfig+0x348>
 800603c:	2310      	movs	r3, #16
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e10c      	b.n	800625c <UART_SetConfig+0x348>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a68      	ldr	r2, [pc, #416]	; (80061e8 <UART_SetConfig+0x2d4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d120      	bne.n	800608e <UART_SetConfig+0x17a>
 800604c:	4b64      	ldr	r3, [pc, #400]	; (80061e0 <UART_SetConfig+0x2cc>)
 800604e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006052:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006056:	2b30      	cmp	r3, #48	; 0x30
 8006058:	d013      	beq.n	8006082 <UART_SetConfig+0x16e>
 800605a:	2b30      	cmp	r3, #48	; 0x30
 800605c:	d814      	bhi.n	8006088 <UART_SetConfig+0x174>
 800605e:	2b20      	cmp	r3, #32
 8006060:	d009      	beq.n	8006076 <UART_SetConfig+0x162>
 8006062:	2b20      	cmp	r3, #32
 8006064:	d810      	bhi.n	8006088 <UART_SetConfig+0x174>
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <UART_SetConfig+0x15c>
 800606a:	2b10      	cmp	r3, #16
 800606c:	d006      	beq.n	800607c <UART_SetConfig+0x168>
 800606e:	e00b      	b.n	8006088 <UART_SetConfig+0x174>
 8006070:	2300      	movs	r3, #0
 8006072:	77fb      	strb	r3, [r7, #31]
 8006074:	e0f2      	b.n	800625c <UART_SetConfig+0x348>
 8006076:	2302      	movs	r3, #2
 8006078:	77fb      	strb	r3, [r7, #31]
 800607a:	e0ef      	b.n	800625c <UART_SetConfig+0x348>
 800607c:	2304      	movs	r3, #4
 800607e:	77fb      	strb	r3, [r7, #31]
 8006080:	e0ec      	b.n	800625c <UART_SetConfig+0x348>
 8006082:	2308      	movs	r3, #8
 8006084:	77fb      	strb	r3, [r7, #31]
 8006086:	e0e9      	b.n	800625c <UART_SetConfig+0x348>
 8006088:	2310      	movs	r3, #16
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e0e6      	b.n	800625c <UART_SetConfig+0x348>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a56      	ldr	r2, [pc, #344]	; (80061ec <UART_SetConfig+0x2d8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d120      	bne.n	80060da <UART_SetConfig+0x1c6>
 8006098:	4b51      	ldr	r3, [pc, #324]	; (80061e0 <UART_SetConfig+0x2cc>)
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060a2:	2bc0      	cmp	r3, #192	; 0xc0
 80060a4:	d013      	beq.n	80060ce <UART_SetConfig+0x1ba>
 80060a6:	2bc0      	cmp	r3, #192	; 0xc0
 80060a8:	d814      	bhi.n	80060d4 <UART_SetConfig+0x1c0>
 80060aa:	2b80      	cmp	r3, #128	; 0x80
 80060ac:	d009      	beq.n	80060c2 <UART_SetConfig+0x1ae>
 80060ae:	2b80      	cmp	r3, #128	; 0x80
 80060b0:	d810      	bhi.n	80060d4 <UART_SetConfig+0x1c0>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <UART_SetConfig+0x1a8>
 80060b6:	2b40      	cmp	r3, #64	; 0x40
 80060b8:	d006      	beq.n	80060c8 <UART_SetConfig+0x1b4>
 80060ba:	e00b      	b.n	80060d4 <UART_SetConfig+0x1c0>
 80060bc:	2300      	movs	r3, #0
 80060be:	77fb      	strb	r3, [r7, #31]
 80060c0:	e0cc      	b.n	800625c <UART_SetConfig+0x348>
 80060c2:	2302      	movs	r3, #2
 80060c4:	77fb      	strb	r3, [r7, #31]
 80060c6:	e0c9      	b.n	800625c <UART_SetConfig+0x348>
 80060c8:	2304      	movs	r3, #4
 80060ca:	77fb      	strb	r3, [r7, #31]
 80060cc:	e0c6      	b.n	800625c <UART_SetConfig+0x348>
 80060ce:	2308      	movs	r3, #8
 80060d0:	77fb      	strb	r3, [r7, #31]
 80060d2:	e0c3      	b.n	800625c <UART_SetConfig+0x348>
 80060d4:	2310      	movs	r3, #16
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	e0c0      	b.n	800625c <UART_SetConfig+0x348>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a44      	ldr	r2, [pc, #272]	; (80061f0 <UART_SetConfig+0x2dc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d125      	bne.n	8006130 <UART_SetConfig+0x21c>
 80060e4:	4b3e      	ldr	r3, [pc, #248]	; (80061e0 <UART_SetConfig+0x2cc>)
 80060e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060f2:	d017      	beq.n	8006124 <UART_SetConfig+0x210>
 80060f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060f8:	d817      	bhi.n	800612a <UART_SetConfig+0x216>
 80060fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060fe:	d00b      	beq.n	8006118 <UART_SetConfig+0x204>
 8006100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006104:	d811      	bhi.n	800612a <UART_SetConfig+0x216>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <UART_SetConfig+0x1fe>
 800610a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800610e:	d006      	beq.n	800611e <UART_SetConfig+0x20a>
 8006110:	e00b      	b.n	800612a <UART_SetConfig+0x216>
 8006112:	2300      	movs	r3, #0
 8006114:	77fb      	strb	r3, [r7, #31]
 8006116:	e0a1      	b.n	800625c <UART_SetConfig+0x348>
 8006118:	2302      	movs	r3, #2
 800611a:	77fb      	strb	r3, [r7, #31]
 800611c:	e09e      	b.n	800625c <UART_SetConfig+0x348>
 800611e:	2304      	movs	r3, #4
 8006120:	77fb      	strb	r3, [r7, #31]
 8006122:	e09b      	b.n	800625c <UART_SetConfig+0x348>
 8006124:	2308      	movs	r3, #8
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e098      	b.n	800625c <UART_SetConfig+0x348>
 800612a:	2310      	movs	r3, #16
 800612c:	77fb      	strb	r3, [r7, #31]
 800612e:	e095      	b.n	800625c <UART_SetConfig+0x348>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a2f      	ldr	r2, [pc, #188]	; (80061f4 <UART_SetConfig+0x2e0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d125      	bne.n	8006186 <UART_SetConfig+0x272>
 800613a:	4b29      	ldr	r3, [pc, #164]	; (80061e0 <UART_SetConfig+0x2cc>)
 800613c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006140:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006144:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006148:	d017      	beq.n	800617a <UART_SetConfig+0x266>
 800614a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800614e:	d817      	bhi.n	8006180 <UART_SetConfig+0x26c>
 8006150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006154:	d00b      	beq.n	800616e <UART_SetConfig+0x25a>
 8006156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800615a:	d811      	bhi.n	8006180 <UART_SetConfig+0x26c>
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <UART_SetConfig+0x254>
 8006160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006164:	d006      	beq.n	8006174 <UART_SetConfig+0x260>
 8006166:	e00b      	b.n	8006180 <UART_SetConfig+0x26c>
 8006168:	2301      	movs	r3, #1
 800616a:	77fb      	strb	r3, [r7, #31]
 800616c:	e076      	b.n	800625c <UART_SetConfig+0x348>
 800616e:	2302      	movs	r3, #2
 8006170:	77fb      	strb	r3, [r7, #31]
 8006172:	e073      	b.n	800625c <UART_SetConfig+0x348>
 8006174:	2304      	movs	r3, #4
 8006176:	77fb      	strb	r3, [r7, #31]
 8006178:	e070      	b.n	800625c <UART_SetConfig+0x348>
 800617a:	2308      	movs	r3, #8
 800617c:	77fb      	strb	r3, [r7, #31]
 800617e:	e06d      	b.n	800625c <UART_SetConfig+0x348>
 8006180:	2310      	movs	r3, #16
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e06a      	b.n	800625c <UART_SetConfig+0x348>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1b      	ldr	r2, [pc, #108]	; (80061f8 <UART_SetConfig+0x2e4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d138      	bne.n	8006202 <UART_SetConfig+0x2ee>
 8006190:	4b13      	ldr	r3, [pc, #76]	; (80061e0 <UART_SetConfig+0x2cc>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800619a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800619e:	d017      	beq.n	80061d0 <UART_SetConfig+0x2bc>
 80061a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061a4:	d82a      	bhi.n	80061fc <UART_SetConfig+0x2e8>
 80061a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061aa:	d00b      	beq.n	80061c4 <UART_SetConfig+0x2b0>
 80061ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b0:	d824      	bhi.n	80061fc <UART_SetConfig+0x2e8>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <UART_SetConfig+0x2aa>
 80061b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ba:	d006      	beq.n	80061ca <UART_SetConfig+0x2b6>
 80061bc:	e01e      	b.n	80061fc <UART_SetConfig+0x2e8>
 80061be:	2300      	movs	r3, #0
 80061c0:	77fb      	strb	r3, [r7, #31]
 80061c2:	e04b      	b.n	800625c <UART_SetConfig+0x348>
 80061c4:	2302      	movs	r3, #2
 80061c6:	77fb      	strb	r3, [r7, #31]
 80061c8:	e048      	b.n	800625c <UART_SetConfig+0x348>
 80061ca:	2304      	movs	r3, #4
 80061cc:	77fb      	strb	r3, [r7, #31]
 80061ce:	e045      	b.n	800625c <UART_SetConfig+0x348>
 80061d0:	2308      	movs	r3, #8
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e042      	b.n	800625c <UART_SetConfig+0x348>
 80061d6:	bf00      	nop
 80061d8:	efff69f3 	.word	0xefff69f3
 80061dc:	40011000 	.word	0x40011000
 80061e0:	40023800 	.word	0x40023800
 80061e4:	40004400 	.word	0x40004400
 80061e8:	40004800 	.word	0x40004800
 80061ec:	40004c00 	.word	0x40004c00
 80061f0:	40005000 	.word	0x40005000
 80061f4:	40011400 	.word	0x40011400
 80061f8:	40007800 	.word	0x40007800
 80061fc:	2310      	movs	r3, #16
 80061fe:	77fb      	strb	r3, [r7, #31]
 8006200:	e02c      	b.n	800625c <UART_SetConfig+0x348>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a72      	ldr	r2, [pc, #456]	; (80063d0 <UART_SetConfig+0x4bc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d125      	bne.n	8006258 <UART_SetConfig+0x344>
 800620c:	4b71      	ldr	r3, [pc, #452]	; (80063d4 <UART_SetConfig+0x4c0>)
 800620e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006212:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006216:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800621a:	d017      	beq.n	800624c <UART_SetConfig+0x338>
 800621c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006220:	d817      	bhi.n	8006252 <UART_SetConfig+0x33e>
 8006222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006226:	d00b      	beq.n	8006240 <UART_SetConfig+0x32c>
 8006228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622c:	d811      	bhi.n	8006252 <UART_SetConfig+0x33e>
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <UART_SetConfig+0x326>
 8006232:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006236:	d006      	beq.n	8006246 <UART_SetConfig+0x332>
 8006238:	e00b      	b.n	8006252 <UART_SetConfig+0x33e>
 800623a:	2300      	movs	r3, #0
 800623c:	77fb      	strb	r3, [r7, #31]
 800623e:	e00d      	b.n	800625c <UART_SetConfig+0x348>
 8006240:	2302      	movs	r3, #2
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	e00a      	b.n	800625c <UART_SetConfig+0x348>
 8006246:	2304      	movs	r3, #4
 8006248:	77fb      	strb	r3, [r7, #31]
 800624a:	e007      	b.n	800625c <UART_SetConfig+0x348>
 800624c:	2308      	movs	r3, #8
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e004      	b.n	800625c <UART_SetConfig+0x348>
 8006252:	2310      	movs	r3, #16
 8006254:	77fb      	strb	r3, [r7, #31]
 8006256:	e001      	b.n	800625c <UART_SetConfig+0x348>
 8006258:	2310      	movs	r3, #16
 800625a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006264:	d15b      	bne.n	800631e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006266:	7ffb      	ldrb	r3, [r7, #31]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d828      	bhi.n	80062be <UART_SetConfig+0x3aa>
 800626c:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <UART_SetConfig+0x360>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	08006299 	.word	0x08006299
 8006278:	080062a1 	.word	0x080062a1
 800627c:	080062a9 	.word	0x080062a9
 8006280:	080062bf 	.word	0x080062bf
 8006284:	080062af 	.word	0x080062af
 8006288:	080062bf 	.word	0x080062bf
 800628c:	080062bf 	.word	0x080062bf
 8006290:	080062bf 	.word	0x080062bf
 8006294:	080062b7 	.word	0x080062b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006298:	f7fd ff00 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 800629c:	61b8      	str	r0, [r7, #24]
        break;
 800629e:	e013      	b.n	80062c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062a0:	f7fd ff10 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 80062a4:	61b8      	str	r0, [r7, #24]
        break;
 80062a6:	e00f      	b.n	80062c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a8:	4b4b      	ldr	r3, [pc, #300]	; (80063d8 <UART_SetConfig+0x4c4>)
 80062aa:	61bb      	str	r3, [r7, #24]
        break;
 80062ac:	e00c      	b.n	80062c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ae:	f7fd fde3 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 80062b2:	61b8      	str	r0, [r7, #24]
        break;
 80062b4:	e008      	b.n	80062c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ba:	61bb      	str	r3, [r7, #24]
        break;
 80062bc:	e004      	b.n	80062c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	77bb      	strb	r3, [r7, #30]
        break;
 80062c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d074      	beq.n	80063b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	005a      	lsls	r2, r3, #1
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	085b      	lsrs	r3, r3, #1
 80062d8:	441a      	add	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2b0f      	cmp	r3, #15
 80062e8:	d916      	bls.n	8006318 <UART_SetConfig+0x404>
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f0:	d212      	bcs.n	8006318 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	f023 030f 	bic.w	r3, r3, #15
 80062fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	b29b      	uxth	r3, r3
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	b29a      	uxth	r2, r3
 8006308:	89fb      	ldrh	r3, [r7, #14]
 800630a:	4313      	orrs	r3, r2
 800630c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	89fa      	ldrh	r2, [r7, #14]
 8006314:	60da      	str	r2, [r3, #12]
 8006316:	e04f      	b.n	80063b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	77bb      	strb	r3, [r7, #30]
 800631c:	e04c      	b.n	80063b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800631e:	7ffb      	ldrb	r3, [r7, #31]
 8006320:	2b08      	cmp	r3, #8
 8006322:	d828      	bhi.n	8006376 <UART_SetConfig+0x462>
 8006324:	a201      	add	r2, pc, #4	; (adr r2, 800632c <UART_SetConfig+0x418>)
 8006326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632a:	bf00      	nop
 800632c:	08006351 	.word	0x08006351
 8006330:	08006359 	.word	0x08006359
 8006334:	08006361 	.word	0x08006361
 8006338:	08006377 	.word	0x08006377
 800633c:	08006367 	.word	0x08006367
 8006340:	08006377 	.word	0x08006377
 8006344:	08006377 	.word	0x08006377
 8006348:	08006377 	.word	0x08006377
 800634c:	0800636f 	.word	0x0800636f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006350:	f7fd fea4 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 8006354:	61b8      	str	r0, [r7, #24]
        break;
 8006356:	e013      	b.n	8006380 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006358:	f7fd feb4 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 800635c:	61b8      	str	r0, [r7, #24]
        break;
 800635e:	e00f      	b.n	8006380 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006360:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <UART_SetConfig+0x4c4>)
 8006362:	61bb      	str	r3, [r7, #24]
        break;
 8006364:	e00c      	b.n	8006380 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006366:	f7fd fd87 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 800636a:	61b8      	str	r0, [r7, #24]
        break;
 800636c:	e008      	b.n	8006380 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800636e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006372:	61bb      	str	r3, [r7, #24]
        break;
 8006374:	e004      	b.n	8006380 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	77bb      	strb	r3, [r7, #30]
        break;
 800637e:	bf00      	nop
    }

    if (pclk != 0U)
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d018      	beq.n	80063b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	085a      	lsrs	r2, r3, #1
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	441a      	add	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	fbb2 f3f3 	udiv	r3, r2, r3
 8006398:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	2b0f      	cmp	r3, #15
 800639e:	d909      	bls.n	80063b4 <UART_SetConfig+0x4a0>
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a6:	d205      	bcs.n	80063b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60da      	str	r2, [r3, #12]
 80063b2:	e001      	b.n	80063b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80063c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3720      	adds	r7, #32
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40007c00 	.word	0x40007c00
 80063d4:	40023800 	.word	0x40023800
 80063d8:	00f42400 	.word	0x00f42400

080063dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00a      	beq.n	800644a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	f003 0310 	and.w	r3, r3, #16
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00a      	beq.n	800648e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01a      	beq.n	80064f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064da:	d10a      	bne.n	80064f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	605a      	str	r2, [r3, #4]
  }
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af02      	add	r7, sp, #8
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006530:	f7fa ff8a 	bl	8001448 <HAL_GetTick>
 8006534:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b08      	cmp	r3, #8
 8006542:	d10e      	bne.n	8006562 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006544:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f81b 	bl	800658e <UART_WaitOnFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e011      	b.n	8006586 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2220      	movs	r2, #32
 8006566:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b09c      	sub	sp, #112	; 0x70
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	603b      	str	r3, [r7, #0]
 800659a:	4613      	mov	r3, r2
 800659c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800659e:	e0a7      	b.n	80066f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	f000 80a3 	beq.w	80066f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065aa:	f7fa ff4d 	bl	8001448 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80065ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d13f      	bne.n	8006640 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065d4:	667b      	str	r3, [r7, #100]	; 0x64
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e6      	bne.n	80065c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3308      	adds	r3, #8
 80065f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	f023 0301 	bic.w	r3, r3, #1
 8006608:	663b      	str	r3, [r7, #96]	; 0x60
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3308      	adds	r3, #8
 8006610:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006612:	64ba      	str	r2, [r7, #72]	; 0x48
 8006614:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e5      	bne.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2220      	movs	r2, #32
 800662a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e068      	b.n	8006712 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	d050      	beq.n	80066f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800665c:	d148      	bne.n	80066f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006666:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800667c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006686:	637b      	str	r3, [r7, #52]	; 0x34
 8006688:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800668c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e6      	bne.n	8006668 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3308      	adds	r3, #8
 80066a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	613b      	str	r3, [r7, #16]
   return(result);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3308      	adds	r3, #8
 80066b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066ba:	623a      	str	r2, [r7, #32]
 80066bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	69f9      	ldr	r1, [r7, #28]
 80066c0:	6a3a      	ldr	r2, [r7, #32]
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e5      	bne.n	800669a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2220      	movs	r2, #32
 80066d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e010      	b.n	8006712 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	69da      	ldr	r2, [r3, #28]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4013      	ands	r3, r2
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	bf0c      	ite	eq
 8006700:	2301      	moveq	r3, #1
 8006702:	2300      	movne	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	461a      	mov	r2, r3
 8006708:	79fb      	ldrb	r3, [r7, #7]
 800670a:	429a      	cmp	r2, r3
 800670c:	f43f af48 	beq.w	80065a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3770      	adds	r7, #112	; 0x70
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800671c:	b480      	push	{r7}
 800671e:	b097      	sub	sp, #92	; 0x5c
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4613      	mov	r3, r2
 8006728:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	88fa      	ldrh	r2, [r7, #6]
 8006734:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	88fa      	ldrh	r2, [r7, #6]
 800673c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674e:	d10e      	bne.n	800676e <UART_Start_Receive_IT+0x52>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d105      	bne.n	8006764 <UART_Start_Receive_IT+0x48>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800675e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006762:	e02d      	b.n	80067c0 <UART_Start_Receive_IT+0xa4>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	22ff      	movs	r2, #255	; 0xff
 8006768:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800676c:	e028      	b.n	80067c0 <UART_Start_Receive_IT+0xa4>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10d      	bne.n	8006792 <UART_Start_Receive_IT+0x76>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d104      	bne.n	8006788 <UART_Start_Receive_IT+0x6c>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	22ff      	movs	r2, #255	; 0xff
 8006782:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006786:	e01b      	b.n	80067c0 <UART_Start_Receive_IT+0xa4>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	227f      	movs	r2, #127	; 0x7f
 800678c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006790:	e016      	b.n	80067c0 <UART_Start_Receive_IT+0xa4>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800679a:	d10d      	bne.n	80067b8 <UART_Start_Receive_IT+0x9c>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d104      	bne.n	80067ae <UART_Start_Receive_IT+0x92>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	227f      	movs	r2, #127	; 0x7f
 80067a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067ac:	e008      	b.n	80067c0 <UART_Start_Receive_IT+0xa4>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	223f      	movs	r2, #63	; 0x3f
 80067b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067b6:	e003      	b.n	80067c0 <UART_Start_Receive_IT+0xa4>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2222      	movs	r2, #34	; 0x22
 80067cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3308      	adds	r3, #8
 80067d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067da:	e853 3f00 	ldrex	r3, [r3]
 80067de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e2:	f043 0301 	orr.w	r3, r3, #1
 80067e6:	657b      	str	r3, [r7, #84]	; 0x54
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3308      	adds	r3, #8
 80067ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067f0:	64ba      	str	r2, [r7, #72]	; 0x48
 80067f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e5      	bne.n	80067d0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680c:	d107      	bne.n	800681e <UART_Start_Receive_IT+0x102>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d103      	bne.n	800681e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4a21      	ldr	r2, [pc, #132]	; (80068a0 <UART_Start_Receive_IT+0x184>)
 800681a:	669a      	str	r2, [r3, #104]	; 0x68
 800681c:	e002      	b.n	8006824 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4a20      	ldr	r2, [pc, #128]	; (80068a4 <UART_Start_Receive_IT+0x188>)
 8006822:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d019      	beq.n	8006860 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006840:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684a:	637b      	str	r3, [r7, #52]	; 0x34
 800684c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e6      	bne.n	800682c <UART_Start_Receive_IT+0x110>
 800685e:	e018      	b.n	8006892 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	613b      	str	r3, [r7, #16]
   return(result);
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f043 0320 	orr.w	r3, r3, #32
 8006874:	653b      	str	r3, [r7, #80]	; 0x50
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800687e:	623b      	str	r3, [r7, #32]
 8006880:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	69f9      	ldr	r1, [r7, #28]
 8006884:	6a3a      	ldr	r2, [r7, #32]
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	61bb      	str	r3, [r7, #24]
   return(result);
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e6      	bne.n	8006860 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	375c      	adds	r7, #92	; 0x5c
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	08006b57 	.word	0x08006b57
 80068a4:	080069f1 	.word	0x080069f1

080068a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b095      	sub	sp, #84	; 0x54
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ce:	643b      	str	r3, [r7, #64]	; 0x40
 80068d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e6      	bne.n	80068b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3308      	adds	r3, #8
 80068e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3308      	adds	r3, #8
 8006900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006902:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e5      	bne.n	80068e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691a:	2b01      	cmp	r3, #1
 800691c:	d118      	bne.n	8006950 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	e853 3f00 	ldrex	r3, [r3]
 800692a:	60bb      	str	r3, [r7, #8]
   return(result);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f023 0310 	bic.w	r3, r3, #16
 8006932:	647b      	str	r3, [r7, #68]	; 0x44
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6979      	ldr	r1, [r7, #20]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	613b      	str	r3, [r7, #16]
   return(result);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e6      	bne.n	800691e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006964:	bf00      	nop
 8006966:	3754      	adds	r7, #84	; 0x54
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f7ff faaa 	bl	8005ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006994:	bf00      	nop
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	61bb      	str	r3, [r7, #24]
 80069c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	6979      	ldr	r1, [r7, #20]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	613b      	str	r3, [r7, #16]
   return(result);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e6      	bne.n	80069a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff fa76 	bl	8005ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e8:	bf00      	nop
 80069ea:	3720      	adds	r7, #32
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b096      	sub	sp, #88	; 0x58
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a08:	2b22      	cmp	r3, #34	; 0x22
 8006a0a:	f040 8098 	bne.w	8006b3e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a18:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006a1c:	b2d9      	uxtb	r1, r3
 8006a1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a28:	400a      	ands	r2, r1
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d17b      	bne.n	8006b4e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	461a      	mov	r2, r3
 8006a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a74:	647b      	str	r3, [r7, #68]	; 0x44
 8006a76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e6      	bne.n	8006a56 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	623b      	str	r3, [r7, #32]
   return(result);
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	f023 0301 	bic.w	r3, r3, #1
 8006a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006aa8:	633a      	str	r2, [r7, #48]	; 0x30
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e5      	bne.n	8006a88 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d12e      	bne.n	8006b36 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f023 0310 	bic.w	r3, r3, #16
 8006af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	69b9      	ldr	r1, [r7, #24]
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	617b      	str	r3, [r7, #20]
   return(result);
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e6      	bne.n	8006ade <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	2b10      	cmp	r3, #16
 8006b1c:	d103      	bne.n	8006b26 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2210      	movs	r2, #16
 8006b24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff f9e4 	bl	8005efc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b34:	e00b      	b.n	8006b4e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7fa f87e 	bl	8000c38 <HAL_UART_RxCpltCallback>
}
 8006b3c:	e007      	b.n	8006b4e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f042 0208 	orr.w	r2, r2, #8
 8006b4c:	619a      	str	r2, [r3, #24]
}
 8006b4e:	bf00      	nop
 8006b50:	3758      	adds	r7, #88	; 0x58
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b096      	sub	sp, #88	; 0x58
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b6e:	2b22      	cmp	r3, #34	; 0x22
 8006b70:	f040 8098 	bne.w	8006ca4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b84:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006b88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b92:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b98:	1c9a      	adds	r2, r3, #2
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d17b      	bne.n	8006cb4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bda:	643b      	str	r3, [r7, #64]	; 0x40
 8006bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e6      	bne.n	8006bbc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	f023 0301 	bic.w	r3, r3, #1
 8006c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d12e      	bne.n	8006c9c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	f023 0310 	bic.w	r3, r3, #16
 8006c58:	647b      	str	r3, [r7, #68]	; 0x44
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c62:	61bb      	str	r3, [r7, #24]
 8006c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6979      	ldr	r1, [r7, #20]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e6      	bne.n	8006c44 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	f003 0310 	and.w	r3, r3, #16
 8006c80:	2b10      	cmp	r3, #16
 8006c82:	d103      	bne.n	8006c8c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2210      	movs	r2, #16
 8006c8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff f931 	bl	8005efc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c9a:	e00b      	b.n	8006cb4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7f9 ffcb 	bl	8000c38 <HAL_UART_RxCpltCallback>
}
 8006ca2:	e007      	b.n	8006cb4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0208 	orr.w	r2, r2, #8
 8006cb2:	619a      	str	r2, [r3, #24]
}
 8006cb4:	bf00      	nop
 8006cb6:	3758      	adds	r7, #88	; 0x58
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	f107 001c 	add.w	r0, r7, #28
 8006cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d120      	bne.n	8006d16 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	4b20      	ldr	r3, [pc, #128]	; (8006d68 <USB_CoreInit+0xac>)
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d105      	bne.n	8006d0a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 fbee 	bl	80084ec <USB_CoreReset>
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]
 8006d14:	e010      	b.n	8006d38 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 fbe2 	bl	80084ec <USB_CoreReset>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d10b      	bne.n	8006d56 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f043 0206 	orr.w	r2, r3, #6
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f043 0220 	orr.w	r2, r3, #32
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d62:	b004      	add	sp, #16
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	ffbdffbf 	.word	0xffbdffbf

08006d6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	4613      	mov	r3, r2
 8006d78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d165      	bne.n	8006e4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4a41      	ldr	r2, [pc, #260]	; (8006e88 <USB_SetTurnaroundTime+0x11c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d906      	bls.n	8006d96 <USB_SetTurnaroundTime+0x2a>
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4a40      	ldr	r2, [pc, #256]	; (8006e8c <USB_SetTurnaroundTime+0x120>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d202      	bcs.n	8006d96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d90:	230f      	movs	r3, #15
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	e062      	b.n	8006e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	4a3c      	ldr	r2, [pc, #240]	; (8006e8c <USB_SetTurnaroundTime+0x120>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d306      	bcc.n	8006dac <USB_SetTurnaroundTime+0x40>
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	4a3b      	ldr	r2, [pc, #236]	; (8006e90 <USB_SetTurnaroundTime+0x124>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d202      	bcs.n	8006dac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006da6:	230e      	movs	r3, #14
 8006da8:	617b      	str	r3, [r7, #20]
 8006daa:	e057      	b.n	8006e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4a38      	ldr	r2, [pc, #224]	; (8006e90 <USB_SetTurnaroundTime+0x124>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d306      	bcc.n	8006dc2 <USB_SetTurnaroundTime+0x56>
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	4a37      	ldr	r2, [pc, #220]	; (8006e94 <USB_SetTurnaroundTime+0x128>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d202      	bcs.n	8006dc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006dbc:	230d      	movs	r3, #13
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	e04c      	b.n	8006e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	4a33      	ldr	r2, [pc, #204]	; (8006e94 <USB_SetTurnaroundTime+0x128>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d306      	bcc.n	8006dd8 <USB_SetTurnaroundTime+0x6c>
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	4a32      	ldr	r2, [pc, #200]	; (8006e98 <USB_SetTurnaroundTime+0x12c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d802      	bhi.n	8006dd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006dd2:	230c      	movs	r3, #12
 8006dd4:	617b      	str	r3, [r7, #20]
 8006dd6:	e041      	b.n	8006e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	4a2f      	ldr	r2, [pc, #188]	; (8006e98 <USB_SetTurnaroundTime+0x12c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d906      	bls.n	8006dee <USB_SetTurnaroundTime+0x82>
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4a2e      	ldr	r2, [pc, #184]	; (8006e9c <USB_SetTurnaroundTime+0x130>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d802      	bhi.n	8006dee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006de8:	230b      	movs	r3, #11
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	e036      	b.n	8006e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4a2a      	ldr	r2, [pc, #168]	; (8006e9c <USB_SetTurnaroundTime+0x130>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d906      	bls.n	8006e04 <USB_SetTurnaroundTime+0x98>
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	4a29      	ldr	r2, [pc, #164]	; (8006ea0 <USB_SetTurnaroundTime+0x134>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d802      	bhi.n	8006e04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006dfe:	230a      	movs	r3, #10
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	e02b      	b.n	8006e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	4a26      	ldr	r2, [pc, #152]	; (8006ea0 <USB_SetTurnaroundTime+0x134>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d906      	bls.n	8006e1a <USB_SetTurnaroundTime+0xae>
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	4a25      	ldr	r2, [pc, #148]	; (8006ea4 <USB_SetTurnaroundTime+0x138>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d202      	bcs.n	8006e1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006e14:	2309      	movs	r3, #9
 8006e16:	617b      	str	r3, [r7, #20]
 8006e18:	e020      	b.n	8006e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4a21      	ldr	r2, [pc, #132]	; (8006ea4 <USB_SetTurnaroundTime+0x138>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d306      	bcc.n	8006e30 <USB_SetTurnaroundTime+0xc4>
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	4a20      	ldr	r2, [pc, #128]	; (8006ea8 <USB_SetTurnaroundTime+0x13c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d802      	bhi.n	8006e30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006e2a:	2308      	movs	r3, #8
 8006e2c:	617b      	str	r3, [r7, #20]
 8006e2e:	e015      	b.n	8006e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4a1d      	ldr	r2, [pc, #116]	; (8006ea8 <USB_SetTurnaroundTime+0x13c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d906      	bls.n	8006e46 <USB_SetTurnaroundTime+0xda>
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4a1c      	ldr	r2, [pc, #112]	; (8006eac <USB_SetTurnaroundTime+0x140>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d202      	bcs.n	8006e46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006e40:	2307      	movs	r3, #7
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	e00a      	b.n	8006e5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006e46:	2306      	movs	r3, #6
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	e007      	b.n	8006e5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006e4c:	79fb      	ldrb	r3, [r7, #7]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d102      	bne.n	8006e58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006e52:	2309      	movs	r3, #9
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	e001      	b.n	8006e5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006e58:	2309      	movs	r3, #9
 8006e5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	029b      	lsls	r3, r3, #10
 8006e70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006e74:	431a      	orrs	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	371c      	adds	r7, #28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	00d8acbf 	.word	0x00d8acbf
 8006e8c:	00e4e1c0 	.word	0x00e4e1c0
 8006e90:	00f42400 	.word	0x00f42400
 8006e94:	01067380 	.word	0x01067380
 8006e98:	011a499f 	.word	0x011a499f
 8006e9c:	01312cff 	.word	0x01312cff
 8006ea0:	014ca43f 	.word	0x014ca43f
 8006ea4:	016e3600 	.word	0x016e3600
 8006ea8:	01a6ab1f 	.word	0x01a6ab1f
 8006eac:	01e84800 	.word	0x01e84800

08006eb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f043 0201 	orr.w	r2, r3, #1
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f023 0201 	bic.w	r2, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d115      	bne.n	8006f42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f22:	2001      	movs	r0, #1
 8006f24:	f7fa fa9c 	bl	8001460 <HAL_Delay>
      ms++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f001 fa4b 	bl	80083ca <USB_GetMode>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d01e      	beq.n	8006f78 <USB_SetCurrentMode+0x84>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b31      	cmp	r3, #49	; 0x31
 8006f3e:	d9f0      	bls.n	8006f22 <USB_SetCurrentMode+0x2e>
 8006f40:	e01a      	b.n	8006f78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f42:	78fb      	ldrb	r3, [r7, #3]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d115      	bne.n	8006f74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f54:	2001      	movs	r0, #1
 8006f56:	f7fa fa83 	bl	8001460 <HAL_Delay>
      ms++;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 fa32 	bl	80083ca <USB_GetMode>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <USB_SetCurrentMode+0x84>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b31      	cmp	r3, #49	; 0x31
 8006f70:	d9f0      	bls.n	8006f54 <USB_SetCurrentMode+0x60>
 8006f72:	e001      	b.n	8006f78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e005      	b.n	8006f84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b32      	cmp	r3, #50	; 0x32
 8006f7c:	d101      	bne.n	8006f82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b086      	sub	sp, #24
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	613b      	str	r3, [r7, #16]
 8006faa:	e009      	b.n	8006fc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	3340      	adds	r3, #64	; 0x40
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	2b0e      	cmp	r3, #14
 8006fc4:	d9f2      	bls.n	8006fac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d11c      	bne.n	8007006 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fda:	f043 0302 	orr.w	r3, r3, #2
 8006fde:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	e005      	b.n	8007012 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007018:	461a      	mov	r2, r3
 800701a:	2300      	movs	r3, #0
 800701c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007024:	4619      	mov	r1, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702c:	461a      	mov	r2, r3
 800702e:	680b      	ldr	r3, [r1, #0]
 8007030:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	2b01      	cmp	r3, #1
 8007036:	d10c      	bne.n	8007052 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d104      	bne.n	8007048 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800703e:	2100      	movs	r1, #0
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f965 	bl	8007310 <USB_SetDevSpeed>
 8007046:	e008      	b.n	800705a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007048:	2101      	movs	r1, #1
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f960 	bl	8007310 <USB_SetDevSpeed>
 8007050:	e003      	b.n	800705a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007052:	2103      	movs	r1, #3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f95b 	bl	8007310 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800705a:	2110      	movs	r1, #16
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f8f3 	bl	8007248 <USB_FlushTxFifo>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f91f 	bl	80072b0 <USB_FlushRxFifo>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007082:	461a      	mov	r2, r3
 8007084:	2300      	movs	r3, #0
 8007086:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708e:	461a      	mov	r2, r3
 8007090:	2300      	movs	r3, #0
 8007092:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709a:	461a      	mov	r2, r3
 800709c:	2300      	movs	r3, #0
 800709e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070a0:	2300      	movs	r3, #0
 80070a2:	613b      	str	r3, [r7, #16]
 80070a4:	e043      	b.n	800712e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070bc:	d118      	bne.n	80070f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10a      	bne.n	80070da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d0:	461a      	mov	r2, r3
 80070d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	e013      	b.n	8007102 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e6:	461a      	mov	r2, r3
 80070e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	e008      	b.n	8007102 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fc:	461a      	mov	r2, r3
 80070fe:	2300      	movs	r3, #0
 8007100:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710e:	461a      	mov	r2, r3
 8007110:	2300      	movs	r3, #0
 8007112:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007120:	461a      	mov	r2, r3
 8007122:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007126:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	3301      	adds	r3, #1
 800712c:	613b      	str	r3, [r7, #16]
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	429a      	cmp	r2, r3
 8007134:	d3b7      	bcc.n	80070a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007136:	2300      	movs	r3, #0
 8007138:	613b      	str	r3, [r7, #16]
 800713a:	e043      	b.n	80071c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800714e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007152:	d118      	bne.n	8007186 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007166:	461a      	mov	r2, r3
 8007168:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	e013      	b.n	8007198 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717c:	461a      	mov	r2, r3
 800717e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	e008      	b.n	8007198 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007192:	461a      	mov	r2, r3
 8007194:	2300      	movs	r3, #0
 8007196:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a4:	461a      	mov	r2, r3
 80071a6:	2300      	movs	r3, #0
 80071a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b6:	461a      	mov	r2, r3
 80071b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	3301      	adds	r3, #1
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d3b7      	bcc.n	800713c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d105      	bne.n	8007200 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	f043 0210 	orr.w	r2, r3, #16
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699a      	ldr	r2, [r3, #24]
 8007204:	4b0e      	ldr	r3, [pc, #56]	; (8007240 <USB_DevInit+0x2b4>)
 8007206:	4313      	orrs	r3, r2
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800720c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720e:	2b00      	cmp	r3, #0
 8007210:	d005      	beq.n	800721e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f043 0208 	orr.w	r2, r3, #8
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800721e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007220:	2b01      	cmp	r3, #1
 8007222:	d105      	bne.n	8007230 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699a      	ldr	r2, [r3, #24]
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <USB_DevInit+0x2b8>)
 800722a:	4313      	orrs	r3, r2
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007230:	7dfb      	ldrb	r3, [r7, #23]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800723c:	b004      	add	sp, #16
 800723e:	4770      	bx	lr
 8007240:	803c3800 	.word	0x803c3800
 8007244:	40000004 	.word	0x40000004

08007248 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3301      	adds	r3, #1
 800725a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4a13      	ldr	r2, [pc, #76]	; (80072ac <USB_FlushTxFifo+0x64>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d901      	bls.n	8007268 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e01b      	b.n	80072a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	daf2      	bge.n	8007256 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	019b      	lsls	r3, r3, #6
 8007278:	f043 0220 	orr.w	r2, r3, #32
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3301      	adds	r3, #1
 8007284:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4a08      	ldr	r2, [pc, #32]	; (80072ac <USB_FlushTxFifo+0x64>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d901      	bls.n	8007292 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e006      	b.n	80072a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b20      	cmp	r3, #32
 800729c:	d0f0      	beq.n	8007280 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	00030d40 	.word	0x00030d40

080072b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4a11      	ldr	r2, [pc, #68]	; (800730c <USB_FlushRxFifo+0x5c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d901      	bls.n	80072ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e018      	b.n	8007300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	daf2      	bge.n	80072bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2210      	movs	r2, #16
 80072de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3301      	adds	r3, #1
 80072e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	4a08      	ldr	r2, [pc, #32]	; (800730c <USB_FlushRxFifo+0x5c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d901      	bls.n	80072f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e006      	b.n	8007300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f003 0310 	and.w	r3, r3, #16
 80072fa:	2b10      	cmp	r3, #16
 80072fc:	d0f0      	beq.n	80072e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	00030d40 	.word	0x00030d40

08007310 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	68f9      	ldr	r1, [r7, #12]
 800732c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007330:	4313      	orrs	r3, r2
 8007332:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007342:	b480      	push	{r7}
 8007344:	b087      	sub	sp, #28
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 0306 	and.w	r3, r3, #6
 800735a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d102      	bne.n	8007368 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007362:	2300      	movs	r3, #0
 8007364:	75fb      	strb	r3, [r7, #23]
 8007366:	e00a      	b.n	800737e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b02      	cmp	r3, #2
 800736c:	d002      	beq.n	8007374 <USB_GetDevSpeed+0x32>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b06      	cmp	r3, #6
 8007372:	d102      	bne.n	800737a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007374:	2302      	movs	r3, #2
 8007376:	75fb      	strb	r3, [r7, #23]
 8007378:	e001      	b.n	800737e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800737a:	230f      	movs	r3, #15
 800737c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800737e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007380:	4618      	mov	r0, r3
 8007382:	371c      	adds	r7, #28
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d139      	bne.n	800741c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ae:	69da      	ldr	r2, [r3, #28]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	2101      	movs	r1, #1
 80073ba:	fa01 f303 	lsl.w	r3, r1, r3
 80073be:	b29b      	uxth	r3, r3
 80073c0:	68f9      	ldr	r1, [r7, #12]
 80073c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073c6:	4313      	orrs	r3, r2
 80073c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d153      	bne.n	8007488 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	791b      	ldrb	r3, [r3, #4]
 80073fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	059b      	lsls	r3, r3, #22
 8007402:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007404:	431a      	orrs	r2, r3
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	0159      	lsls	r1, r3, #5
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	440b      	add	r3, r1
 800740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007412:	4619      	mov	r1, r3
 8007414:	4b20      	ldr	r3, [pc, #128]	; (8007498 <USB_ActivateEndpoint+0x10c>)
 8007416:	4313      	orrs	r3, r2
 8007418:	600b      	str	r3, [r1, #0]
 800741a:	e035      	b.n	8007488 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007422:	69da      	ldr	r2, [r3, #28]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	2101      	movs	r1, #1
 800742e:	fa01 f303 	lsl.w	r3, r1, r3
 8007432:	041b      	lsls	r3, r3, #16
 8007434:	68f9      	ldr	r1, [r7, #12]
 8007436:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800743a:	4313      	orrs	r3, r2
 800743c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d119      	bne.n	8007488 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4413      	add	r3, r2
 800745c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	791b      	ldrb	r3, [r3, #4]
 800746e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007470:	430b      	orrs	r3, r1
 8007472:	431a      	orrs	r2, r3
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	0159      	lsls	r1, r3, #5
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	440b      	add	r3, r1
 800747c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007480:	4619      	mov	r1, r3
 8007482:	4b05      	ldr	r3, [pc, #20]	; (8007498 <USB_ActivateEndpoint+0x10c>)
 8007484:	4313      	orrs	r3, r2
 8007486:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	10008000 	.word	0x10008000

0800749c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	785b      	ldrb	r3, [r3, #1]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d161      	bne.n	800757c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074ce:	d11f      	bne.n	8007510 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	0151      	lsls	r1, r2, #5
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	440a      	add	r2, r1
 80074e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	0151      	lsls	r1, r2, #5
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	440a      	add	r2, r1
 8007506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800750a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800750e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	f003 030f 	and.w	r3, r3, #15
 8007520:	2101      	movs	r1, #1
 8007522:	fa01 f303 	lsl.w	r3, r1, r3
 8007526:	b29b      	uxth	r3, r3
 8007528:	43db      	mvns	r3, r3
 800752a:	68f9      	ldr	r1, [r7, #12]
 800752c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007530:	4013      	ands	r3, r2
 8007532:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753a:	69da      	ldr	r2, [r3, #28]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	f003 030f 	and.w	r3, r3, #15
 8007544:	2101      	movs	r1, #1
 8007546:	fa01 f303 	lsl.w	r3, r1, r3
 800754a:	b29b      	uxth	r3, r3
 800754c:	43db      	mvns	r3, r3
 800754e:	68f9      	ldr	r1, [r7, #12]
 8007550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007554:	4013      	ands	r3, r2
 8007556:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	0159      	lsls	r1, r3, #5
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	440b      	add	r3, r1
 800756e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007572:	4619      	mov	r1, r3
 8007574:	4b35      	ldr	r3, [pc, #212]	; (800764c <USB_DeactivateEndpoint+0x1b0>)
 8007576:	4013      	ands	r3, r2
 8007578:	600b      	str	r3, [r1, #0]
 800757a:	e060      	b.n	800763e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4413      	add	r3, r2
 8007584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800758e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007592:	d11f      	bne.n	80075d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	0151      	lsls	r1, r2, #5
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	440a      	add	r2, r1
 80075aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	0151      	lsls	r1, r2, #5
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	440a      	add	r2, r1
 80075ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	f003 030f 	and.w	r3, r3, #15
 80075e4:	2101      	movs	r1, #1
 80075e6:	fa01 f303 	lsl.w	r3, r1, r3
 80075ea:	041b      	lsls	r3, r3, #16
 80075ec:	43db      	mvns	r3, r3
 80075ee:	68f9      	ldr	r1, [r7, #12]
 80075f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075f4:	4013      	ands	r3, r2
 80075f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fe:	69da      	ldr	r2, [r3, #28]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	f003 030f 	and.w	r3, r3, #15
 8007608:	2101      	movs	r1, #1
 800760a:	fa01 f303 	lsl.w	r3, r1, r3
 800760e:	041b      	lsls	r3, r3, #16
 8007610:	43db      	mvns	r3, r3
 8007612:	68f9      	ldr	r1, [r7, #12]
 8007614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007618:	4013      	ands	r3, r2
 800761a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	0159      	lsls	r1, r3, #5
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	440b      	add	r3, r1
 8007632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007636:	4619      	mov	r1, r3
 8007638:	4b05      	ldr	r3, [pc, #20]	; (8007650 <USB_DeactivateEndpoint+0x1b4>)
 800763a:	4013      	ands	r3, r2
 800763c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	ec337800 	.word	0xec337800
 8007650:	eff37800 	.word	0xeff37800

08007654 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08a      	sub	sp, #40	; 0x28
 8007658:	af02      	add	r7, sp, #8
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	4613      	mov	r3, r2
 8007660:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	785b      	ldrb	r3, [r3, #1]
 8007670:	2b01      	cmp	r3, #1
 8007672:	f040 8163 	bne.w	800793c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d132      	bne.n	80076e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	0159      	lsls	r1, r3, #5
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	440b      	add	r3, r1
 8007694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007698:	4619      	mov	r1, r3
 800769a:	4ba5      	ldr	r3, [pc, #660]	; (8007930 <USB_EPStartXfer+0x2dc>)
 800769c:	4013      	ands	r3, r2
 800769e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	0151      	lsls	r1, r2, #5
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	440a      	add	r2, r1
 80076b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076cc:	691a      	ldr	r2, [r3, #16]
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	0159      	lsls	r1, r3, #5
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	440b      	add	r3, r1
 80076d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076da:	4619      	mov	r1, r3
 80076dc:	4b95      	ldr	r3, [pc, #596]	; (8007934 <USB_EPStartXfer+0x2e0>)
 80076de:	4013      	ands	r3, r2
 80076e0:	610b      	str	r3, [r1, #16]
 80076e2:	e074      	b.n	80077ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f0:	691a      	ldr	r2, [r3, #16]
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	0159      	lsls	r1, r3, #5
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	440b      	add	r3, r1
 80076fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fe:	4619      	mov	r1, r3
 8007700:	4b8c      	ldr	r3, [pc, #560]	; (8007934 <USB_EPStartXfer+0x2e0>)
 8007702:	4013      	ands	r3, r2
 8007704:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	0159      	lsls	r1, r3, #5
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	440b      	add	r3, r1
 800771c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007720:	4619      	mov	r1, r3
 8007722:	4b83      	ldr	r3, [pc, #524]	; (8007930 <USB_EPStartXfer+0x2dc>)
 8007724:	4013      	ands	r3, r2
 8007726:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	6999      	ldr	r1, [r3, #24]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	440b      	add	r3, r1
 8007740:	1e59      	subs	r1, r3, #1
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	fbb1 f3f3 	udiv	r3, r1, r3
 800774a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800774c:	4b7a      	ldr	r3, [pc, #488]	; (8007938 <USB_EPStartXfer+0x2e4>)
 800774e:	400b      	ands	r3, r1
 8007750:	69b9      	ldr	r1, [r7, #24]
 8007752:	0148      	lsls	r0, r1, #5
 8007754:	69f9      	ldr	r1, [r7, #28]
 8007756:	4401      	add	r1, r0
 8007758:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800775c:	4313      	orrs	r3, r2
 800775e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776c:	691a      	ldr	r2, [r3, #16]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007776:	69b9      	ldr	r1, [r7, #24]
 8007778:	0148      	lsls	r0, r1, #5
 800777a:	69f9      	ldr	r1, [r7, #28]
 800777c:	4401      	add	r1, r0
 800777e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007782:	4313      	orrs	r3, r2
 8007784:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	791b      	ldrb	r3, [r3, #4]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d11f      	bne.n	80077ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	015a      	lsls	r2, r3, #5
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	4413      	add	r3, r2
 8007796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	0151      	lsls	r1, r2, #5
 80077a0:	69fa      	ldr	r2, [r7, #28]
 80077a2:	440a      	add	r2, r1
 80077a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80077ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	0151      	lsls	r1, r2, #5
 80077c0:	69fa      	ldr	r2, [r7, #28]
 80077c2:	440a      	add	r2, r1
 80077c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d14b      	bne.n	800786c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d009      	beq.n	80077f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e8:	461a      	mov	r2, r3
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	791b      	ldrb	r3, [r3, #4]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d128      	bne.n	800784a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007804:	2b00      	cmp	r3, #0
 8007806:	d110      	bne.n	800782a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	0151      	lsls	r1, r2, #5
 800781a:	69fa      	ldr	r2, [r7, #28]
 800781c:	440a      	add	r2, r1
 800781e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007822:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	e00f      	b.n	800784a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	0151      	lsls	r1, r2, #5
 800783c:	69fa      	ldr	r2, [r7, #28]
 800783e:	440a      	add	r2, r1
 8007840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007848:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	0151      	lsls	r1, r2, #5
 800785c:	69fa      	ldr	r2, [r7, #28]
 800785e:	440a      	add	r2, r1
 8007860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007864:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	e137      	b.n	8007adc <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007886:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800788a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	791b      	ldrb	r3, [r3, #4]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d015      	beq.n	80078c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 811f 	beq.w	8007adc <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	2101      	movs	r1, #1
 80078b0:	fa01 f303 	lsl.w	r3, r1, r3
 80078b4:	69f9      	ldr	r1, [r7, #28]
 80078b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078ba:	4313      	orrs	r3, r2
 80078bc:	634b      	str	r3, [r1, #52]	; 0x34
 80078be:	e10d      	b.n	8007adc <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d110      	bne.n	80078f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	0151      	lsls	r1, r2, #5
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	440a      	add	r2, r1
 80078e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	e00f      	b.n	8007912 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	0151      	lsls	r1, r2, #5
 8007904:	69fa      	ldr	r2, [r7, #28]
 8007906:	440a      	add	r2, r1
 8007908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800790c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007910:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	6919      	ldr	r1, [r3, #16]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	781a      	ldrb	r2, [r3, #0]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	b298      	uxth	r0, r3
 8007920:	79fb      	ldrb	r3, [r7, #7]
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	4603      	mov	r3, r0
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 faea 	bl	8007f00 <USB_WritePacket>
 800792c:	e0d6      	b.n	8007adc <USB_EPStartXfer+0x488>
 800792e:	bf00      	nop
 8007930:	e007ffff 	.word	0xe007ffff
 8007934:	fff80000 	.word	0xfff80000
 8007938:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	0159      	lsls	r1, r3, #5
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	440b      	add	r3, r1
 8007952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007956:	4619      	mov	r1, r3
 8007958:	4b63      	ldr	r3, [pc, #396]	; (8007ae8 <USB_EPStartXfer+0x494>)
 800795a:	4013      	ands	r3, r2
 800795c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	4413      	add	r3, r2
 8007966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	0159      	lsls	r1, r3, #5
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	440b      	add	r3, r1
 8007974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007978:	4619      	mov	r1, r3
 800797a:	4b5c      	ldr	r3, [pc, #368]	; (8007aec <USB_EPStartXfer+0x498>)
 800797c:	4013      	ands	r3, r2
 800797e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d123      	bne.n	80079d0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007994:	691a      	ldr	r2, [r3, #16]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800799e:	69b9      	ldr	r1, [r7, #24]
 80079a0:	0148      	lsls	r0, r1, #5
 80079a2:	69f9      	ldr	r1, [r7, #28]
 80079a4:	4401      	add	r1, r0
 80079a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079aa:	4313      	orrs	r3, r2
 80079ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	0151      	lsls	r1, r2, #5
 80079c0:	69fa      	ldr	r2, [r7, #28]
 80079c2:	440a      	add	r2, r1
 80079c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079cc:	6113      	str	r3, [r2, #16]
 80079ce:	e037      	b.n	8007a40 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	699a      	ldr	r2, [r3, #24]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	4413      	add	r3, r2
 80079da:	1e5a      	subs	r2, r3, #1
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	8afa      	ldrh	r2, [r7, #22]
 80079ec:	fb03 f202 	mul.w	r2, r3, r2
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a00:	691a      	ldr	r2, [r3, #16]
 8007a02:	8afb      	ldrh	r3, [r7, #22]
 8007a04:	04d9      	lsls	r1, r3, #19
 8007a06:	4b3a      	ldr	r3, [pc, #232]	; (8007af0 <USB_EPStartXfer+0x49c>)
 8007a08:	400b      	ands	r3, r1
 8007a0a:	69b9      	ldr	r1, [r7, #24]
 8007a0c:	0148      	lsls	r0, r1, #5
 8007a0e:	69f9      	ldr	r1, [r7, #28]
 8007a10:	4401      	add	r1, r0
 8007a12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a16:	4313      	orrs	r3, r2
 8007a18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a26:	691a      	ldr	r2, [r3, #16]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a30:	69b9      	ldr	r1, [r7, #24]
 8007a32:	0148      	lsls	r0, r1, #5
 8007a34:	69f9      	ldr	r1, [r7, #28]
 8007a36:	4401      	add	r1, r0
 8007a38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007a40:	79fb      	ldrb	r3, [r7, #7]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d10d      	bne.n	8007a62 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d009      	beq.n	8007a62 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	6919      	ldr	r1, [r3, #16]
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5e:	460a      	mov	r2, r1
 8007a60:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	791b      	ldrb	r3, [r3, #4]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d128      	bne.n	8007abc <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d110      	bne.n	8007a9c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	0151      	lsls	r1, r2, #5
 8007a8c:	69fa      	ldr	r2, [r7, #28]
 8007a8e:	440a      	add	r2, r1
 8007a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	e00f      	b.n	8007abc <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	0151      	lsls	r1, r2, #5
 8007ace:	69fa      	ldr	r2, [r7, #28]
 8007ad0:	440a      	add	r2, r1
 8007ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ada:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3720      	adds	r7, #32
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	fff80000 	.word	0xfff80000
 8007aec:	e007ffff 	.word	0xe007ffff
 8007af0:	1ff80000 	.word	0x1ff80000

08007af4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	4613      	mov	r3, r2
 8007b00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	785b      	ldrb	r3, [r3, #1]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	f040 80ce 	bne.w	8007cb2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d132      	bne.n	8007b84 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2a:	691a      	ldr	r2, [r3, #16]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	0159      	lsls	r1, r3, #5
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	440b      	add	r3, r1
 8007b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4b9a      	ldr	r3, [pc, #616]	; (8007da4 <USB_EP0StartXfer+0x2b0>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6c:	691a      	ldr	r2, [r3, #16]
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	0159      	lsls	r1, r3, #5
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	440b      	add	r3, r1
 8007b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4b8a      	ldr	r3, [pc, #552]	; (8007da8 <USB_EP0StartXfer+0x2b4>)
 8007b7e:	4013      	ands	r3, r2
 8007b80:	610b      	str	r3, [r1, #16]
 8007b82:	e04e      	b.n	8007c22 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b90:	691a      	ldr	r2, [r3, #16]
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	0159      	lsls	r1, r3, #5
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	440b      	add	r3, r1
 8007b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4b81      	ldr	r3, [pc, #516]	; (8007da8 <USB_EP0StartXfer+0x2b4>)
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb2:	691a      	ldr	r2, [r3, #16]
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	0159      	lsls	r1, r3, #5
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	440b      	add	r3, r1
 8007bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4b78      	ldr	r3, [pc, #480]	; (8007da4 <USB_EP0StartXfer+0x2b0>)
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	699a      	ldr	r2, [r3, #24]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d903      	bls.n	8007bdc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	0151      	lsls	r1, r2, #5
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	440a      	add	r2, r1
 8007bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c08:	691a      	ldr	r2, [r3, #16]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c12:	6939      	ldr	r1, [r7, #16]
 8007c14:	0148      	lsls	r0, r1, #5
 8007c16:	6979      	ldr	r1, [r7, #20]
 8007c18:	4401      	add	r1, r0
 8007c1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d11e      	bne.n	8007c66 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d009      	beq.n	8007c44 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	0151      	lsls	r1, r2, #5
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	440a      	add	r2, r1
 8007c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c62:	6013      	str	r3, [r2, #0]
 8007c64:	e097      	b.n	8007d96 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	0151      	lsls	r1, r2, #5
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	440a      	add	r2, r1
 8007c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c84:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8083 	beq.w	8007d96 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	f003 030f 	and.w	r3, r3, #15
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca6:	6979      	ldr	r1, [r7, #20]
 8007ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cac:	4313      	orrs	r3, r2
 8007cae:	634b      	str	r3, [r1, #52]	; 0x34
 8007cb0:	e071      	b.n	8007d96 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbe:	691a      	ldr	r2, [r3, #16]
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	0159      	lsls	r1, r3, #5
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	440b      	add	r3, r1
 8007cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4b36      	ldr	r3, [pc, #216]	; (8007da8 <USB_EP0StartXfer+0x2b4>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	0159      	lsls	r1, r3, #5
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	440b      	add	r3, r1
 8007cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4b2c      	ldr	r3, [pc, #176]	; (8007da4 <USB_EP0StartXfer+0x2b0>)
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	0151      	lsls	r1, r2, #5
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	440a      	add	r2, r1
 8007d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d3a:	691a      	ldr	r2, [r3, #16]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d44:	6939      	ldr	r1, [r7, #16]
 8007d46:	0148      	lsls	r0, r1, #5
 8007d48:	6979      	ldr	r1, [r7, #20]
 8007d4a:	4401      	add	r1, r0
 8007d4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d50:	4313      	orrs	r3, r2
 8007d52:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007d54:	79fb      	ldrb	r3, [r7, #7]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d10d      	bne.n	8007d76 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	6919      	ldr	r1, [r3, #16]
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d72:	460a      	mov	r2, r1
 8007d74:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	0151      	lsls	r1, r2, #5
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	440a      	add	r2, r1
 8007d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	e007ffff 	.word	0xe007ffff
 8007da8:	fff80000 	.word	0xfff80000

08007dac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	785b      	ldrb	r3, [r3, #1]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d14a      	bne.n	8007e60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007de2:	f040 8086 	bne.w	8007ef2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	7812      	ldrb	r2, [r2, #0]
 8007dfa:	0151      	lsls	r1, r2, #5
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	440a      	add	r2, r1
 8007e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	7812      	ldrb	r2, [r2, #0]
 8007e1e:	0151      	lsls	r1, r2, #5
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	440a      	add	r2, r1
 8007e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3301      	adds	r3, #1
 8007e32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d902      	bls.n	8007e44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	75fb      	strb	r3, [r7, #23]
          break;
 8007e42:	e056      	b.n	8007ef2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e5c:	d0e7      	beq.n	8007e2e <USB_EPStopXfer+0x82>
 8007e5e:	e048      	b.n	8007ef2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e78:	d13b      	bne.n	8007ef2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	7812      	ldrb	r2, [r2, #0]
 8007e8e:	0151      	lsls	r1, r2, #5
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	440a      	add	r2, r1
 8007e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	7812      	ldrb	r2, [r2, #0]
 8007eb2:	0151      	lsls	r1, r2, #5
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	440a      	add	r2, r1
 8007eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ebc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ec0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f242 7210 	movw	r2, #10000	; 0x2710
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d902      	bls.n	8007ed8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ed6:	e00c      	b.n	8007ef2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ef0:	d0e7      	beq.n	8007ec2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	371c      	adds	r7, #28
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b089      	sub	sp, #36	; 0x24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	460b      	mov	r3, r1
 8007f10:	71fb      	strb	r3, [r7, #7]
 8007f12:	4613      	mov	r3, r2
 8007f14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007f1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d123      	bne.n	8007f6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f26:	88bb      	ldrh	r3, [r7, #4]
 8007f28:	3303      	adds	r3, #3
 8007f2a:	089b      	lsrs	r3, r3, #2
 8007f2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f2e:	2300      	movs	r3, #0
 8007f30:	61bb      	str	r3, [r7, #24]
 8007f32:	e018      	b.n	8007f66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f34:	79fb      	ldrb	r3, [r7, #7]
 8007f36:	031a      	lsls	r2, r3, #12
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f40:	461a      	mov	r2, r3
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	3301      	adds	r3, #1
 8007f52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	3301      	adds	r3, #1
 8007f58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	3301      	adds	r3, #1
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d3e2      	bcc.n	8007f34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3724      	adds	r7, #36	; 0x24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b08b      	sub	sp, #44	; 0x2c
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	4613      	mov	r3, r2
 8007f88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f92:	88fb      	ldrh	r3, [r7, #6]
 8007f94:	089b      	lsrs	r3, r3, #2
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f9a:	88fb      	ldrh	r3, [r7, #6]
 8007f9c:	f003 0303 	and.w	r3, r3, #3
 8007fa0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	623b      	str	r3, [r7, #32]
 8007fa6:	e014      	b.n	8007fd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	3301      	adds	r3, #1
 8007fca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	623b      	str	r3, [r7, #32]
 8007fd2:	6a3a      	ldr	r2, [r7, #32]
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d3e6      	bcc.n	8007fa8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007fda:	8bfb      	ldrh	r3, [r7, #30]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d01e      	beq.n	800801e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fea:	461a      	mov	r2, r3
 8007fec:	f107 0310 	add.w	r3, r7, #16
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8008000:	b2da      	uxtb	r2, r3
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	701a      	strb	r2, [r3, #0]
      i++;
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	3301      	adds	r3, #1
 800800a:	623b      	str	r3, [r7, #32]
      pDest++;
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	3301      	adds	r3, #1
 8008010:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008012:	8bfb      	ldrh	r3, [r7, #30]
 8008014:	3b01      	subs	r3, #1
 8008016:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008018:	8bfb      	ldrh	r3, [r7, #30]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1ea      	bne.n	8007ff4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008020:	4618      	mov	r0, r3
 8008022:	372c      	adds	r7, #44	; 0x2c
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	785b      	ldrb	r3, [r3, #1]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d12c      	bne.n	80080a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	db12      	blt.n	8008080 <USB_EPSetStall+0x54>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00f      	beq.n	8008080 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	0151      	lsls	r1, r2, #5
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	440a      	add	r2, r1
 8008076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800807a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800807e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	0151      	lsls	r1, r2, #5
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	440a      	add	r2, r1
 8008096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800809a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800809e:	6013      	str	r3, [r2, #0]
 80080a0:	e02b      	b.n	80080fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	db12      	blt.n	80080da <USB_EPSetStall+0xae>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00f      	beq.n	80080da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	0151      	lsls	r1, r2, #5
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	440a      	add	r2, r1
 80080d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80080d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	0151      	lsls	r1, r2, #5
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	440a      	add	r2, r1
 80080f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d128      	bne.n	8008176 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4413      	add	r3, r2
 800812c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	0151      	lsls	r1, r2, #5
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	440a      	add	r2, r1
 800813a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800813e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008142:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	791b      	ldrb	r3, [r3, #4]
 8008148:	2b03      	cmp	r3, #3
 800814a:	d003      	beq.n	8008154 <USB_EPClearStall+0x4c>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	791b      	ldrb	r3, [r3, #4]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d138      	bne.n	80081c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	015a      	lsls	r2, r3, #5
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4413      	add	r3, r2
 800815c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	0151      	lsls	r1, r2, #5
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	440a      	add	r2, r1
 800816a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800816e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008172:	6013      	str	r3, [r2, #0]
 8008174:	e027      	b.n	80081c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	0151      	lsls	r1, r2, #5
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	440a      	add	r2, r1
 800818c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008190:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008194:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	791b      	ldrb	r3, [r3, #4]
 800819a:	2b03      	cmp	r3, #3
 800819c:	d003      	beq.n	80081a6 <USB_EPClearStall+0x9e>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	791b      	ldrb	r3, [r3, #4]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d10f      	bne.n	80081c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	0151      	lsls	r1, r2, #5
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	440a      	add	r2, r1
 80081bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80081f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	78fb      	ldrb	r3, [r7, #3]
 8008202:	011b      	lsls	r3, r3, #4
 8008204:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008208:	68f9      	ldr	r1, [r7, #12]
 800820a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800820e:	4313      	orrs	r3, r2
 8008210:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800823a:	f023 0303 	bic.w	r3, r3, #3
 800823e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800824e:	f023 0302 	bic.w	r3, r3, #2
 8008252:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008262:	b480      	push	{r7}
 8008264:	b085      	sub	sp, #20
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800827c:	f023 0303 	bic.w	r3, r3, #3
 8008280:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008290:	f043 0302 	orr.w	r3, r3, #2
 8008294:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4013      	ands	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80082bc:	68fb      	ldr	r3, [r7, #12]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b085      	sub	sp, #20
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	4013      	ands	r3, r2
 80082ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	0c1b      	lsrs	r3, r3, #16
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	4013      	ands	r3, r2
 8008320:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	b29b      	uxth	r3, r3
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008332:	b480      	push	{r7}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	460b      	mov	r3, r1
 800833c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008342:	78fb      	ldrb	r3, [r7, #3]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	4413      	add	r3, r2
 800834a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	4013      	ands	r3, r2
 800835e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008360:	68bb      	ldr	r3, [r7, #8]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800836e:	b480      	push	{r7}
 8008370:	b087      	sub	sp, #28
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	460b      	mov	r3, r1
 8008378:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800838e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008390:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	f003 030f 	and.w	r3, r3, #15
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	fa22 f303 	lsr.w	r3, r2, r3
 800839e:	01db      	lsls	r3, r3, #7
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80083a8:	78fb      	ldrb	r3, [r7, #3]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	4013      	ands	r3, r2
 80083ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083bc:	68bb      	ldr	r3, [r7, #8]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	371c      	adds	r7, #28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	f003 0301 	and.w	r3, r3, #1
}
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
	...

080083e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008402:	4619      	mov	r1, r3
 8008404:	4b09      	ldr	r3, [pc, #36]	; (800842c <USB_ActivateSetup+0x44>)
 8008406:	4013      	ands	r3, r2
 8008408:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800841c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr
 800842c:	fffff800 	.word	0xfffff800

08008430 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	460b      	mov	r3, r1
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	333c      	adds	r3, #60	; 0x3c
 8008446:	3304      	adds	r3, #4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	4a26      	ldr	r2, [pc, #152]	; (80084e8 <USB_EP0_OutStart+0xb8>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d90a      	bls.n	800846a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008464:	d101      	bne.n	800846a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	e037      	b.n	80084da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008470:	461a      	mov	r2, r3
 8008472:	2300      	movs	r3, #0
 8008474:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008488:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008498:	f043 0318 	orr.w	r3, r3, #24
 800849c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80084b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80084b2:	7afb      	ldrb	r3, [r7, #11]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d10f      	bne.n	80084d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084be:	461a      	mov	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80084d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	4f54300a 	.word	0x4f54300a

080084ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3301      	adds	r3, #1
 80084fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4a13      	ldr	r2, [pc, #76]	; (8008550 <USB_CoreReset+0x64>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d901      	bls.n	800850a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e01b      	b.n	8008542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	daf2      	bge.n	80084f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	f043 0201 	orr.w	r2, r3, #1
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3301      	adds	r3, #1
 8008526:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4a09      	ldr	r2, [pc, #36]	; (8008550 <USB_CoreReset+0x64>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d901      	bls.n	8008534 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008530:	2303      	movs	r3, #3
 8008532:	e006      	b.n	8008542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b01      	cmp	r3, #1
 800853e:	d0f0      	beq.n	8008522 <USB_CoreReset+0x36>

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	00030d40 	.word	0x00030d40

08008554 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008560:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008564:	f002 fd12 	bl	800af8c <malloc>
 8008568:	4603      	mov	r3, r0
 800856a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d109      	bne.n	8008586 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	32b0      	adds	r2, #176	; 0xb0
 800857c:	2100      	movs	r1, #0
 800857e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008582:	2302      	movs	r3, #2
 8008584:	e0d4      	b.n	8008730 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008586:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800858a:	2100      	movs	r1, #0
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f002 fdb9 	bl	800b104 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	32b0      	adds	r2, #176	; 0xb0
 800859c:	68f9      	ldr	r1, [r7, #12]
 800859e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	32b0      	adds	r2, #176	; 0xb0
 80085ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	7c1b      	ldrb	r3, [r3, #16]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d138      	bne.n	8008630 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80085be:	4b5e      	ldr	r3, [pc, #376]	; (8008738 <USBD_CDC_Init+0x1e4>)
 80085c0:	7819      	ldrb	r1, [r3, #0]
 80085c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085c6:	2202      	movs	r2, #2
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f002 fb3c 	bl	800ac46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80085ce:	4b5a      	ldr	r3, [pc, #360]	; (8008738 <USBD_CDC_Init+0x1e4>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	f003 020f 	and.w	r2, r3, #15
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4613      	mov	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	3324      	adds	r3, #36	; 0x24
 80085e4:	2201      	movs	r2, #1
 80085e6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80085e8:	4b54      	ldr	r3, [pc, #336]	; (800873c <USBD_CDC_Init+0x1e8>)
 80085ea:	7819      	ldrb	r1, [r3, #0]
 80085ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085f0:	2202      	movs	r2, #2
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f002 fb27 	bl	800ac46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80085f8:	4b50      	ldr	r3, [pc, #320]	; (800873c <USBD_CDC_Init+0x1e8>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	f003 020f 	and.w	r2, r3, #15
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	4613      	mov	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	440b      	add	r3, r1
 800860c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008610:	2201      	movs	r2, #1
 8008612:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008614:	4b4a      	ldr	r3, [pc, #296]	; (8008740 <USBD_CDC_Init+0x1ec>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	f003 020f 	and.w	r2, r3, #15
 800861c:	6879      	ldr	r1, [r7, #4]
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	440b      	add	r3, r1
 8008628:	3326      	adds	r3, #38	; 0x26
 800862a:	2210      	movs	r2, #16
 800862c:	801a      	strh	r2, [r3, #0]
 800862e:	e035      	b.n	800869c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008630:	4b41      	ldr	r3, [pc, #260]	; (8008738 <USBD_CDC_Init+0x1e4>)
 8008632:	7819      	ldrb	r1, [r3, #0]
 8008634:	2340      	movs	r3, #64	; 0x40
 8008636:	2202      	movs	r2, #2
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f002 fb04 	bl	800ac46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800863e:	4b3e      	ldr	r3, [pc, #248]	; (8008738 <USBD_CDC_Init+0x1e4>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	f003 020f 	and.w	r2, r3, #15
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	440b      	add	r3, r1
 8008652:	3324      	adds	r3, #36	; 0x24
 8008654:	2201      	movs	r2, #1
 8008656:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008658:	4b38      	ldr	r3, [pc, #224]	; (800873c <USBD_CDC_Init+0x1e8>)
 800865a:	7819      	ldrb	r1, [r3, #0]
 800865c:	2340      	movs	r3, #64	; 0x40
 800865e:	2202      	movs	r2, #2
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f002 faf0 	bl	800ac46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008666:	4b35      	ldr	r3, [pc, #212]	; (800873c <USBD_CDC_Init+0x1e8>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	f003 020f 	and.w	r2, r3, #15
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	4613      	mov	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	440b      	add	r3, r1
 800867a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800867e:	2201      	movs	r2, #1
 8008680:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008682:	4b2f      	ldr	r3, [pc, #188]	; (8008740 <USBD_CDC_Init+0x1ec>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	f003 020f 	and.w	r2, r3, #15
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	440b      	add	r3, r1
 8008696:	3326      	adds	r3, #38	; 0x26
 8008698:	2210      	movs	r2, #16
 800869a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800869c:	4b28      	ldr	r3, [pc, #160]	; (8008740 <USBD_CDC_Init+0x1ec>)
 800869e:	7819      	ldrb	r1, [r3, #0]
 80086a0:	2308      	movs	r3, #8
 80086a2:	2203      	movs	r2, #3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f002 face 	bl	800ac46 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80086aa:	4b25      	ldr	r3, [pc, #148]	; (8008740 <USBD_CDC_Init+0x1ec>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	f003 020f 	and.w	r2, r3, #15
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	4613      	mov	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	440b      	add	r3, r1
 80086be:	3324      	adds	r3, #36	; 0x24
 80086c0:	2201      	movs	r2, #1
 80086c2:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	33b0      	adds	r3, #176	; 0xb0
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80086fa:	2302      	movs	r3, #2
 80086fc:	e018      	b.n	8008730 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	7c1b      	ldrb	r3, [r3, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10a      	bne.n	800871c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008706:	4b0d      	ldr	r3, [pc, #52]	; (800873c <USBD_CDC_Init+0x1e8>)
 8008708:	7819      	ldrb	r1, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f002 fb85 	bl	800ae24 <USBD_LL_PrepareReceive>
 800871a:	e008      	b.n	800872e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800871c:	4b07      	ldr	r3, [pc, #28]	; (800873c <USBD_CDC_Init+0x1e8>)
 800871e:	7819      	ldrb	r1, [r3, #0]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008726:	2340      	movs	r3, #64	; 0x40
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f002 fb7b 	bl	800ae24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	200000b3 	.word	0x200000b3
 800873c:	200000b4 	.word	0x200000b4
 8008740:	200000b5 	.word	0x200000b5

08008744 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	460b      	mov	r3, r1
 800874e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008750:	4b3a      	ldr	r3, [pc, #232]	; (800883c <USBD_CDC_DeInit+0xf8>)
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f002 fa9b 	bl	800ac92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800875c:	4b37      	ldr	r3, [pc, #220]	; (800883c <USBD_CDC_DeInit+0xf8>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	f003 020f 	and.w	r2, r3, #15
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4613      	mov	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	3324      	adds	r3, #36	; 0x24
 8008772:	2200      	movs	r2, #0
 8008774:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008776:	4b32      	ldr	r3, [pc, #200]	; (8008840 <USBD_CDC_DeInit+0xfc>)
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f002 fa88 	bl	800ac92 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008782:	4b2f      	ldr	r3, [pc, #188]	; (8008840 <USBD_CDC_DeInit+0xfc>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	f003 020f 	and.w	r2, r3, #15
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	4613      	mov	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	440b      	add	r3, r1
 8008796:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800879a:	2200      	movs	r2, #0
 800879c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800879e:	4b29      	ldr	r3, [pc, #164]	; (8008844 <USBD_CDC_DeInit+0x100>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f002 fa74 	bl	800ac92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80087aa:	4b26      	ldr	r3, [pc, #152]	; (8008844 <USBD_CDC_DeInit+0x100>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	f003 020f 	and.w	r2, r3, #15
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	4613      	mov	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	440b      	add	r3, r1
 80087be:	3324      	adds	r3, #36	; 0x24
 80087c0:	2200      	movs	r2, #0
 80087c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80087c4:	4b1f      	ldr	r3, [pc, #124]	; (8008844 <USBD_CDC_DeInit+0x100>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	f003 020f 	and.w	r2, r3, #15
 80087cc:	6879      	ldr	r1, [r7, #4]
 80087ce:	4613      	mov	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4413      	add	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	440b      	add	r3, r1
 80087d8:	3326      	adds	r3, #38	; 0x26
 80087da:	2200      	movs	r2, #0
 80087dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	32b0      	adds	r2, #176	; 0xb0
 80087e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01f      	beq.n	8008830 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	33b0      	adds	r3, #176	; 0xb0
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	32b0      	adds	r2, #176	; 0xb0
 800880e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008812:	4618      	mov	r0, r3
 8008814:	f002 fbc2 	bl	800af9c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	32b0      	adds	r2, #176	; 0xb0
 8008822:	2100      	movs	r1, #0
 8008824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	200000b3 	.word	0x200000b3
 8008840:	200000b4 	.word	0x200000b4
 8008844:	200000b5 	.word	0x200000b5

08008848 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	32b0      	adds	r2, #176	; 0xb0
 800885c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008860:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008862:	2300      	movs	r3, #0
 8008864:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008874:	2303      	movs	r3, #3
 8008876:	e0bf      	b.n	80089f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008880:	2b00      	cmp	r3, #0
 8008882:	d050      	beq.n	8008926 <USBD_CDC_Setup+0xde>
 8008884:	2b20      	cmp	r3, #32
 8008886:	f040 80af 	bne.w	80089e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	88db      	ldrh	r3, [r3, #6]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d03a      	beq.n	8008908 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	b25b      	sxtb	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	da1b      	bge.n	80088d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	33b0      	adds	r3, #176	; 0xb0
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80088b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	88d2      	ldrh	r2, [r2, #6]
 80088b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	88db      	ldrh	r3, [r3, #6]
 80088be:	2b07      	cmp	r3, #7
 80088c0:	bf28      	it	cs
 80088c2:	2307      	movcs	r3, #7
 80088c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	89fa      	ldrh	r2, [r7, #14]
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f001 fd6d 	bl	800a3ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80088d2:	e090      	b.n	80089f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	785a      	ldrb	r2, [r3, #1]
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	88db      	ldrh	r3, [r3, #6]
 80088e2:	2b3f      	cmp	r3, #63	; 0x3f
 80088e4:	d803      	bhi.n	80088ee <USBD_CDC_Setup+0xa6>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	88db      	ldrh	r3, [r3, #6]
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	e000      	b.n	80088f0 <USBD_CDC_Setup+0xa8>
 80088ee:	2240      	movs	r2, #64	; 0x40
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80088f6:	6939      	ldr	r1, [r7, #16]
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80088fe:	461a      	mov	r2, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 fd7f 	bl	800a404 <USBD_CtlPrepareRx>
      break;
 8008906:	e076      	b.n	80089f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	33b0      	adds	r3, #176	; 0xb0
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	7850      	ldrb	r0, [r2, #1]
 800891e:	2200      	movs	r2, #0
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	4798      	blx	r3
      break;
 8008924:	e067      	b.n	80089f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	785b      	ldrb	r3, [r3, #1]
 800892a:	2b0b      	cmp	r3, #11
 800892c:	d851      	bhi.n	80089d2 <USBD_CDC_Setup+0x18a>
 800892e:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <USBD_CDC_Setup+0xec>)
 8008930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008934:	08008965 	.word	0x08008965
 8008938:	080089e1 	.word	0x080089e1
 800893c:	080089d3 	.word	0x080089d3
 8008940:	080089d3 	.word	0x080089d3
 8008944:	080089d3 	.word	0x080089d3
 8008948:	080089d3 	.word	0x080089d3
 800894c:	080089d3 	.word	0x080089d3
 8008950:	080089d3 	.word	0x080089d3
 8008954:	080089d3 	.word	0x080089d3
 8008958:	080089d3 	.word	0x080089d3
 800895c:	0800898f 	.word	0x0800898f
 8008960:	080089b9 	.word	0x080089b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b03      	cmp	r3, #3
 800896e:	d107      	bne.n	8008980 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008970:	f107 030a 	add.w	r3, r7, #10
 8008974:	2202      	movs	r2, #2
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 fd17 	bl	800a3ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800897e:	e032      	b.n	80089e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f001 fca1 	bl	800a2ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008988:	2303      	movs	r3, #3
 800898a:	75fb      	strb	r3, [r7, #23]
          break;
 800898c:	e02b      	b.n	80089e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b03      	cmp	r3, #3
 8008998:	d107      	bne.n	80089aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800899a:	f107 030d 	add.w	r3, r7, #13
 800899e:	2201      	movs	r2, #1
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f001 fd02 	bl	800a3ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089a8:	e01d      	b.n	80089e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 fc8c 	bl	800a2ca <USBD_CtlError>
            ret = USBD_FAIL;
 80089b2:	2303      	movs	r3, #3
 80089b4:	75fb      	strb	r3, [r7, #23]
          break;
 80089b6:	e016      	b.n	80089e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b03      	cmp	r3, #3
 80089c2:	d00f      	beq.n	80089e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 fc7f 	bl	800a2ca <USBD_CtlError>
            ret = USBD_FAIL;
 80089cc:	2303      	movs	r3, #3
 80089ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80089d0:	e008      	b.n	80089e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f001 fc78 	bl	800a2ca <USBD_CtlError>
          ret = USBD_FAIL;
 80089da:	2303      	movs	r3, #3
 80089dc:	75fb      	strb	r3, [r7, #23]
          break;
 80089de:	e002      	b.n	80089e6 <USBD_CDC_Setup+0x19e>
          break;
 80089e0:	bf00      	nop
 80089e2:	e008      	b.n	80089f6 <USBD_CDC_Setup+0x1ae>
          break;
 80089e4:	bf00      	nop
      }
      break;
 80089e6:	e006      	b.n	80089f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f001 fc6d 	bl	800a2ca <USBD_CtlError>
      ret = USBD_FAIL;
 80089f0:	2303      	movs	r3, #3
 80089f2:	75fb      	strb	r3, [r7, #23]
      break;
 80089f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3718      	adds	r7, #24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	32b0      	adds	r2, #176	; 0xb0
 8008a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e065      	b.n	8008af6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	32b0      	adds	r2, #176	; 0xb0
 8008a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a3a:	78fb      	ldrb	r3, [r7, #3]
 8008a3c:	f003 020f 	and.w	r2, r3, #15
 8008a40:	6879      	ldr	r1, [r7, #4]
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	440b      	add	r3, r1
 8008a4c:	3318      	adds	r3, #24
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d02f      	beq.n	8008ab4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008a54:	78fb      	ldrb	r3, [r7, #3]
 8008a56:	f003 020f 	and.w	r2, r3, #15
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4413      	add	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	440b      	add	r3, r1
 8008a66:	3318      	adds	r3, #24
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	f003 010f 	and.w	r1, r3, #15
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	460b      	mov	r3, r1
 8008a74:	00db      	lsls	r3, r3, #3
 8008a76:	440b      	add	r3, r1
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4403      	add	r3, r0
 8008a7c:	3348      	adds	r3, #72	; 0x48
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a84:	fb01 f303 	mul.w	r3, r1, r3
 8008a88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d112      	bne.n	8008ab4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008a8e:	78fb      	ldrb	r3, [r7, #3]
 8008a90:	f003 020f 	and.w	r2, r3, #15
 8008a94:	6879      	ldr	r1, [r7, #4]
 8008a96:	4613      	mov	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	440b      	add	r3, r1
 8008aa0:	3318      	adds	r3, #24
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008aa6:	78f9      	ldrb	r1, [r7, #3]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	2200      	movs	r2, #0
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f002 f998 	bl	800ade2 <USBD_LL_Transmit>
 8008ab2:	e01f      	b.n	8008af4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	33b0      	adds	r3, #176	; 0xb0
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d010      	beq.n	8008af4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	33b0      	adds	r3, #176	; 0xb0
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008af0:	78fa      	ldrb	r2, [r7, #3]
 8008af2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	460b      	mov	r3, r1
 8008b08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	32b0      	adds	r2, #176	; 0xb0
 8008b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	32b0      	adds	r2, #176	; 0xb0
 8008b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e01a      	b.n	8008b66 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f002 f996 	bl	800ae66 <USBD_LL_GetRxDataSize>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	33b0      	adds	r3, #176	; 0xb0
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008b60:	4611      	mov	r1, r2
 8008b62:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	32b0      	adds	r2, #176	; 0xb0
 8008b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e025      	b.n	8008bdc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	33b0      	adds	r3, #176	; 0xb0
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d01a      	beq.n	8008bda <USBD_CDC_EP0_RxReady+0x6c>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008baa:	2bff      	cmp	r3, #255	; 0xff
 8008bac:	d015      	beq.n	8008bda <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	33b0      	adds	r3, #176	; 0xb0
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008bc6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008bce:	b292      	uxth	r2, r2
 8008bd0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	22ff      	movs	r2, #255	; 0xff
 8008bd6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008bec:	2182      	movs	r1, #130	; 0x82
 8008bee:	4818      	ldr	r0, [pc, #96]	; (8008c50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008bf0:	f000 fd09 	bl	8009606 <USBD_GetEpDesc>
 8008bf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008bf6:	2101      	movs	r1, #1
 8008bf8:	4815      	ldr	r0, [pc, #84]	; (8008c50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008bfa:	f000 fd04 	bl	8009606 <USBD_GetEpDesc>
 8008bfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c00:	2181      	movs	r1, #129	; 0x81
 8008c02:	4813      	ldr	r0, [pc, #76]	; (8008c50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c04:	f000 fcff 	bl	8009606 <USBD_GetEpDesc>
 8008c08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	2210      	movs	r2, #16
 8008c14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d006      	beq.n	8008c2a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c24:	711a      	strb	r2, [r3, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d006      	beq.n	8008c3e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c38:	711a      	strb	r2, [r3, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2243      	movs	r2, #67	; 0x43
 8008c42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c44:	4b02      	ldr	r3, [pc, #8]	; (8008c50 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	20000070 	.word	0x20000070

08008c54 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c5c:	2182      	movs	r1, #130	; 0x82
 8008c5e:	4818      	ldr	r0, [pc, #96]	; (8008cc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c60:	f000 fcd1 	bl	8009606 <USBD_GetEpDesc>
 8008c64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c66:	2101      	movs	r1, #1
 8008c68:	4815      	ldr	r0, [pc, #84]	; (8008cc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c6a:	f000 fccc 	bl	8009606 <USBD_GetEpDesc>
 8008c6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c70:	2181      	movs	r1, #129	; 0x81
 8008c72:	4813      	ldr	r0, [pc, #76]	; (8008cc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c74:	f000 fcc7 	bl	8009606 <USBD_GetEpDesc>
 8008c78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	2210      	movs	r2, #16
 8008c84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d006      	beq.n	8008c9a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	711a      	strb	r2, [r3, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f042 0202 	orr.w	r2, r2, #2
 8008c98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d006      	beq.n	8008cae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	711a      	strb	r2, [r3, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f042 0202 	orr.w	r2, r2, #2
 8008cac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2243      	movs	r2, #67	; 0x43
 8008cb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008cb4:	4b02      	ldr	r3, [pc, #8]	; (8008cc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000070 	.word	0x20000070

08008cc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ccc:	2182      	movs	r1, #130	; 0x82
 8008cce:	4818      	ldr	r0, [pc, #96]	; (8008d30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008cd0:	f000 fc99 	bl	8009606 <USBD_GetEpDesc>
 8008cd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	4815      	ldr	r0, [pc, #84]	; (8008d30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008cda:	f000 fc94 	bl	8009606 <USBD_GetEpDesc>
 8008cde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ce0:	2181      	movs	r1, #129	; 0x81
 8008ce2:	4813      	ldr	r0, [pc, #76]	; (8008d30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ce4:	f000 fc8f 	bl	8009606 <USBD_GetEpDesc>
 8008ce8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2210      	movs	r2, #16
 8008cf4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d006      	beq.n	8008d0a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d04:	711a      	strb	r2, [r3, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d006      	beq.n	8008d1e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d18:	711a      	strb	r2, [r3, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2243      	movs	r2, #67	; 0x43
 8008d22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d24:	4b02      	ldr	r3, [pc, #8]	; (8008d30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	20000070 	.word	0x20000070

08008d34 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	220a      	movs	r2, #10
 8008d40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d42:	4b03      	ldr	r3, [pc, #12]	; (8008d50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	2000002c 	.word	0x2000002c

08008d54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e009      	b.n	8008d7c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	33b0      	adds	r3, #176	; 0xb0
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	32b0      	adds	r2, #176	; 0xb0
 8008d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e008      	b.n	8008dc0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	371c      	adds	r7, #28
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	32b0      	adds	r2, #176	; 0xb0
 8008de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e004      	b.n	8008dfa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
	...

08008e08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	32b0      	adds	r2, #176	; 0xb0
 8008e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	32b0      	adds	r2, #176	; 0xb0
 8008e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e018      	b.n	8008e68 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	7c1b      	ldrb	r3, [r3, #16]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10a      	bne.n	8008e54 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e3e:	4b0c      	ldr	r3, [pc, #48]	; (8008e70 <USBD_CDC_ReceivePacket+0x68>)
 8008e40:	7819      	ldrb	r1, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f001 ffe9 	bl	800ae24 <USBD_LL_PrepareReceive>
 8008e52:	e008      	b.n	8008e66 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e54:	4b06      	ldr	r3, [pc, #24]	; (8008e70 <USBD_CDC_ReceivePacket+0x68>)
 8008e56:	7819      	ldrb	r1, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e5e:	2340      	movs	r3, #64	; 0x40
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 ffdf 	bl	800ae24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	200000b4 	.word	0x200000b4

08008e74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d101      	bne.n	8008e8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e01f      	b.n	8008ecc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	79fa      	ldrb	r2, [r7, #7]
 8008ebe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f001 fe59 	bl	800ab78 <USBD_LL_Init>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3718      	adds	r7, #24
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d101      	bne.n	8008eec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e025      	b.n	8008f38 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	32ae      	adds	r2, #174	; 0xae
 8008efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00f      	beq.n	8008f28 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	32ae      	adds	r2, #174	; 0xae
 8008f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	f107 020e 	add.w	r2, r7, #14
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	4798      	blx	r3
 8008f20:	4602      	mov	r2, r0
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008f2e:	1c5a      	adds	r2, r3, #1
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 fe61 	bl	800ac10 <USBD_LL_Start>
 8008f4e:	4603      	mov	r3, r0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f60:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	460b      	mov	r3, r1
 8008f78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d009      	beq.n	8008f9c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	78fa      	ldrb	r2, [r7, #3]
 8008f92:	4611      	mov	r1, r2
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	4798      	blx	r3
 8008f98:	4603      	mov	r3, r0
 8008f9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b084      	sub	sp, #16
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	460b      	mov	r3, r1
 8008fb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	78fa      	ldrb	r2, [r7, #3]
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	4798      	blx	r3
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d001      	beq.n	8008fd0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f001 f932 	bl	800a256 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009000:	461a      	mov	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800900e:	f003 031f 	and.w	r3, r3, #31
 8009012:	2b02      	cmp	r3, #2
 8009014:	d01a      	beq.n	800904c <USBD_LL_SetupStage+0x72>
 8009016:	2b02      	cmp	r3, #2
 8009018:	d822      	bhi.n	8009060 <USBD_LL_SetupStage+0x86>
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <USBD_LL_SetupStage+0x4a>
 800901e:	2b01      	cmp	r3, #1
 8009020:	d00a      	beq.n	8009038 <USBD_LL_SetupStage+0x5e>
 8009022:	e01d      	b.n	8009060 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fb5f 	bl	80096f0 <USBD_StdDevReq>
 8009032:	4603      	mov	r3, r0
 8009034:	73fb      	strb	r3, [r7, #15]
      break;
 8009036:	e020      	b.n	800907a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fbc7 	bl	80097d4 <USBD_StdItfReq>
 8009046:	4603      	mov	r3, r0
 8009048:	73fb      	strb	r3, [r7, #15]
      break;
 800904a:	e016      	b.n	800907a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fc29 	bl	80098ac <USBD_StdEPReq>
 800905a:	4603      	mov	r3, r0
 800905c:	73fb      	strb	r3, [r7, #15]
      break;
 800905e:	e00c      	b.n	800907a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009066:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800906a:	b2db      	uxtb	r3, r3
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 fe2e 	bl	800acd0 <USBD_LL_StallEP>
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]
      break;
 8009078:	bf00      	nop
  }

  return ret;
 800907a:	7bfb      	ldrb	r3, [r7, #15]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	460b      	mov	r3, r1
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009096:	7afb      	ldrb	r3, [r7, #11]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d16e      	bne.n	800917a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80090a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	f040 8098 	bne.w	80091e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	689a      	ldr	r2, [r3, #8]
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d913      	bls.n	80090e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	689a      	ldr	r2, [r3, #8]
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	1ad2      	subs	r2, r2, r3
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	68da      	ldr	r2, [r3, #12]
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	4293      	cmp	r3, r2
 80090d4:	bf28      	it	cs
 80090d6:	4613      	movcs	r3, r2
 80090d8:	461a      	mov	r2, r3
 80090da:	6879      	ldr	r1, [r7, #4]
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f001 f9ae 	bl	800a43e <USBD_CtlContinueRx>
 80090e2:	e07d      	b.n	80091e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80090ea:	f003 031f 	and.w	r3, r3, #31
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d014      	beq.n	800911c <USBD_LL_DataOutStage+0x98>
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d81d      	bhi.n	8009132 <USBD_LL_DataOutStage+0xae>
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d002      	beq.n	8009100 <USBD_LL_DataOutStage+0x7c>
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d003      	beq.n	8009106 <USBD_LL_DataOutStage+0x82>
 80090fe:	e018      	b.n	8009132 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	75bb      	strb	r3, [r7, #22]
            break;
 8009104:	e018      	b.n	8009138 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800910c:	b2db      	uxtb	r3, r3
 800910e:	4619      	mov	r1, r3
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 fa5e 	bl	80095d2 <USBD_CoreFindIF>
 8009116:	4603      	mov	r3, r0
 8009118:	75bb      	strb	r3, [r7, #22]
            break;
 800911a:	e00d      	b.n	8009138 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009122:	b2db      	uxtb	r3, r3
 8009124:	4619      	mov	r1, r3
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 fa60 	bl	80095ec <USBD_CoreFindEP>
 800912c:	4603      	mov	r3, r0
 800912e:	75bb      	strb	r3, [r7, #22]
            break;
 8009130:	e002      	b.n	8009138 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	75bb      	strb	r3, [r7, #22]
            break;
 8009136:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009138:	7dbb      	ldrb	r3, [r7, #22]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d119      	bne.n	8009172 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b03      	cmp	r3, #3
 8009148:	d113      	bne.n	8009172 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800914a:	7dba      	ldrb	r2, [r7, #22]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	32ae      	adds	r2, #174	; 0xae
 8009150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00b      	beq.n	8009172 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800915a:	7dba      	ldrb	r2, [r7, #22]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009162:	7dba      	ldrb	r2, [r7, #22]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	32ae      	adds	r2, #174	; 0xae
 8009168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f001 f974 	bl	800a460 <USBD_CtlSendStatus>
 8009178:	e032      	b.n	80091e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800917a:	7afb      	ldrb	r3, [r7, #11]
 800917c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009180:	b2db      	uxtb	r3, r3
 8009182:	4619      	mov	r1, r3
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f000 fa31 	bl	80095ec <USBD_CoreFindEP>
 800918a:	4603      	mov	r3, r0
 800918c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800918e:	7dbb      	ldrb	r3, [r7, #22]
 8009190:	2bff      	cmp	r3, #255	; 0xff
 8009192:	d025      	beq.n	80091e0 <USBD_LL_DataOutStage+0x15c>
 8009194:	7dbb      	ldrb	r3, [r7, #22]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d122      	bne.n	80091e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	d117      	bne.n	80091d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80091a6:	7dba      	ldrb	r2, [r7, #22]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	32ae      	adds	r2, #174	; 0xae
 80091ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00f      	beq.n	80091d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80091b6:	7dba      	ldrb	r2, [r7, #22]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80091be:	7dba      	ldrb	r2, [r7, #22]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	32ae      	adds	r2, #174	; 0xae
 80091c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	7afa      	ldrb	r2, [r7, #11]
 80091cc:	4611      	mov	r1, r2
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	4798      	blx	r3
 80091d2:	4603      	mov	r3, r0
 80091d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	e000      	b.n	80091e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b086      	sub	sp, #24
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	460b      	mov	r3, r1
 80091f4:	607a      	str	r2, [r7, #4]
 80091f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80091f8:	7afb      	ldrb	r3, [r7, #11]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d16f      	bne.n	80092de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3314      	adds	r3, #20
 8009202:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800920a:	2b02      	cmp	r3, #2
 800920c:	d15a      	bne.n	80092c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	689a      	ldr	r2, [r3, #8]
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	429a      	cmp	r2, r3
 8009218:	d914      	bls.n	8009244 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	1ad2      	subs	r2, r2, r3
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	461a      	mov	r2, r3
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f001 f8d6 	bl	800a3e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009236:	2300      	movs	r3, #0
 8009238:	2200      	movs	r2, #0
 800923a:	2100      	movs	r1, #0
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f001 fdf1 	bl	800ae24 <USBD_LL_PrepareReceive>
 8009242:	e03f      	b.n	80092c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	68da      	ldr	r2, [r3, #12]
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	429a      	cmp	r2, r3
 800924e:	d11c      	bne.n	800928a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009258:	429a      	cmp	r2, r3
 800925a:	d316      	bcc.n	800928a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009266:	429a      	cmp	r2, r3
 8009268:	d20f      	bcs.n	800928a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800926a:	2200      	movs	r2, #0
 800926c:	2100      	movs	r1, #0
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f001 f8b7 	bl	800a3e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800927c:	2300      	movs	r3, #0
 800927e:	2200      	movs	r2, #0
 8009280:	2100      	movs	r1, #0
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f001 fdce 	bl	800ae24 <USBD_LL_PrepareReceive>
 8009288:	e01c      	b.n	80092c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b03      	cmp	r3, #3
 8009294:	d10f      	bne.n	80092b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d009      	beq.n	80092b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80092b6:	2180      	movs	r1, #128	; 0x80
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f001 fd09 	bl	800acd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f001 f8e1 	bl	800a486 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d03a      	beq.n	8009344 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f7ff fe42 	bl	8008f58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80092dc:	e032      	b.n	8009344 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80092de:	7afb      	ldrb	r3, [r7, #11]
 80092e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	4619      	mov	r1, r3
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 f97f 	bl	80095ec <USBD_CoreFindEP>
 80092ee:	4603      	mov	r3, r0
 80092f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092f2:	7dfb      	ldrb	r3, [r7, #23]
 80092f4:	2bff      	cmp	r3, #255	; 0xff
 80092f6:	d025      	beq.n	8009344 <USBD_LL_DataInStage+0x15a>
 80092f8:	7dfb      	ldrb	r3, [r7, #23]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d122      	bne.n	8009344 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b03      	cmp	r3, #3
 8009308:	d11c      	bne.n	8009344 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800930a:	7dfa      	ldrb	r2, [r7, #23]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	32ae      	adds	r2, #174	; 0xae
 8009310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d014      	beq.n	8009344 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800931a:	7dfa      	ldrb	r2, [r7, #23]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009322:	7dfa      	ldrb	r2, [r7, #23]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	32ae      	adds	r2, #174	; 0xae
 8009328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	7afa      	ldrb	r2, [r7, #11]
 8009330:	4611      	mov	r1, r2
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	4798      	blx	r3
 8009336:	4603      	mov	r3, r0
 8009338:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800933a:	7dbb      	ldrb	r3, [r7, #22]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009340:	7dbb      	ldrb	r3, [r7, #22]
 8009342:	e000      	b.n	8009346 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009386:	2b00      	cmp	r3, #0
 8009388:	d014      	beq.n	80093b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00e      	beq.n	80093b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	6852      	ldr	r2, [r2, #4]
 80093a2:	b2d2      	uxtb	r2, r2
 80093a4:	4611      	mov	r1, r2
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	4798      	blx	r3
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80093b0:	2303      	movs	r3, #3
 80093b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093b4:	2340      	movs	r3, #64	; 0x40
 80093b6:	2200      	movs	r2, #0
 80093b8:	2100      	movs	r1, #0
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f001 fc43 	bl	800ac46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2240      	movs	r2, #64	; 0x40
 80093cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093d0:	2340      	movs	r3, #64	; 0x40
 80093d2:	2200      	movs	r2, #0
 80093d4:	2180      	movs	r1, #128	; 0x80
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fc35 	bl	800ac46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2240      	movs	r2, #64	; 0x40
 80093e6:	621a      	str	r2, [r3, #32]

  return ret;
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	460b      	mov	r3, r1
 80093fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	78fa      	ldrb	r2, [r7, #3]
 8009402:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009420:	b2da      	uxtb	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2204      	movs	r2, #4
 800942c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b04      	cmp	r3, #4
 8009450:	d106      	bne.n	8009460 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009458:	b2da      	uxtb	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b03      	cmp	r3, #3
 8009480:	d110      	bne.n	80094a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00b      	beq.n	80094a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d005      	beq.n	80094a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b082      	sub	sp, #8
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	460b      	mov	r3, r1
 80094b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	32ae      	adds	r2, #174	; 0xae
 80094c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e01c      	b.n	800950a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d115      	bne.n	8009508 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	32ae      	adds	r2, #174	; 0xae
 80094e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ea:	6a1b      	ldr	r3, [r3, #32]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00b      	beq.n	8009508 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	32ae      	adds	r2, #174	; 0xae
 80094fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094fe:	6a1b      	ldr	r3, [r3, #32]
 8009500:	78fa      	ldrb	r2, [r7, #3]
 8009502:	4611      	mov	r1, r2
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	460b      	mov	r3, r1
 800951c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	32ae      	adds	r2, #174	; 0xae
 8009528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009530:	2303      	movs	r3, #3
 8009532:	e01c      	b.n	800956e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800953a:	b2db      	uxtb	r3, r3
 800953c:	2b03      	cmp	r3, #3
 800953e:	d115      	bne.n	800956c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	32ae      	adds	r2, #174	; 0xae
 800954a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00b      	beq.n	800956c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	32ae      	adds	r2, #174	; 0xae
 800955e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009564:	78fa      	ldrb	r2, [r7, #3]
 8009566:	4611      	mov	r1, r2
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009576:	b480      	push	{r7}
 8009578:	b083      	sub	sp, #12
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00e      	beq.n	80095c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	6852      	ldr	r2, [r2, #4]
 80095b6:	b2d2      	uxtb	r2, r2
 80095b8:	4611      	mov	r1, r2
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	4798      	blx	r3
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80095c4:	2303      	movs	r3, #3
 80095c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b083      	sub	sp, #12
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	460b      	mov	r3, r1
 80095dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	460b      	mov	r3, r1
 80095f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b086      	sub	sp, #24
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	460b      	mov	r3, r1
 8009610:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800961a:	2300      	movs	r3, #0
 800961c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	885b      	ldrh	r3, [r3, #2]
 8009622:	b29a      	uxth	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	b29b      	uxth	r3, r3
 800962a:	429a      	cmp	r2, r3
 800962c:	d920      	bls.n	8009670 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	b29b      	uxth	r3, r3
 8009634:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009636:	e013      	b.n	8009660 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009638:	f107 030a 	add.w	r3, r7, #10
 800963c:	4619      	mov	r1, r3
 800963e:	6978      	ldr	r0, [r7, #20]
 8009640:	f000 f81b 	bl	800967a <USBD_GetNextDesc>
 8009644:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	785b      	ldrb	r3, [r3, #1]
 800964a:	2b05      	cmp	r3, #5
 800964c:	d108      	bne.n	8009660 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	789b      	ldrb	r3, [r3, #2]
 8009656:	78fa      	ldrb	r2, [r7, #3]
 8009658:	429a      	cmp	r2, r3
 800965a:	d008      	beq.n	800966e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800965c:	2300      	movs	r3, #0
 800965e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	885b      	ldrh	r3, [r3, #2]
 8009664:	b29a      	uxth	r2, r3
 8009666:	897b      	ldrh	r3, [r7, #10]
 8009668:	429a      	cmp	r2, r3
 800966a:	d8e5      	bhi.n	8009638 <USBD_GetEpDesc+0x32>
 800966c:	e000      	b.n	8009670 <USBD_GetEpDesc+0x6a>
          break;
 800966e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009670:	693b      	ldr	r3, [r7, #16]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800967a:	b480      	push	{r7}
 800967c:	b085      	sub	sp, #20
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	881a      	ldrh	r2, [r3, #0]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	b29b      	uxth	r3, r3
 8009692:	4413      	add	r3, r2
 8009694:	b29a      	uxth	r2, r3
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4413      	add	r3, r2
 80096a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80096a6:	68fb      	ldr	r3, [r7, #12]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	3301      	adds	r3, #1
 80096ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80096d2:	8a3b      	ldrh	r3, [r7, #16]
 80096d4:	021b      	lsls	r3, r3, #8
 80096d6:	b21a      	sxth	r2, r3
 80096d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80096dc:	4313      	orrs	r3, r2
 80096de:	b21b      	sxth	r3, r3
 80096e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80096e2:	89fb      	ldrh	r3, [r7, #14]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	371c      	adds	r7, #28
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009706:	2b40      	cmp	r3, #64	; 0x40
 8009708:	d005      	beq.n	8009716 <USBD_StdDevReq+0x26>
 800970a:	2b40      	cmp	r3, #64	; 0x40
 800970c:	d857      	bhi.n	80097be <USBD_StdDevReq+0xce>
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00f      	beq.n	8009732 <USBD_StdDevReq+0x42>
 8009712:	2b20      	cmp	r3, #32
 8009714:	d153      	bne.n	80097be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	32ae      	adds	r2, #174	; 0xae
 8009720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	4798      	blx	r3
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]
      break;
 8009730:	e04a      	b.n	80097c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	785b      	ldrb	r3, [r3, #1]
 8009736:	2b09      	cmp	r3, #9
 8009738:	d83b      	bhi.n	80097b2 <USBD_StdDevReq+0xc2>
 800973a:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <USBD_StdDevReq+0x50>)
 800973c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009740:	08009795 	.word	0x08009795
 8009744:	080097a9 	.word	0x080097a9
 8009748:	080097b3 	.word	0x080097b3
 800974c:	0800979f 	.word	0x0800979f
 8009750:	080097b3 	.word	0x080097b3
 8009754:	08009773 	.word	0x08009773
 8009758:	08009769 	.word	0x08009769
 800975c:	080097b3 	.word	0x080097b3
 8009760:	0800978b 	.word	0x0800978b
 8009764:	0800977d 	.word	0x0800977d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fa3c 	bl	8009be8 <USBD_GetDescriptor>
          break;
 8009770:	e024      	b.n	80097bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fbcb 	bl	8009f10 <USBD_SetAddress>
          break;
 800977a:	e01f      	b.n	80097bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fc0a 	bl	8009f98 <USBD_SetConfig>
 8009784:	4603      	mov	r3, r0
 8009786:	73fb      	strb	r3, [r7, #15]
          break;
 8009788:	e018      	b.n	80097bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fcad 	bl	800a0ec <USBD_GetConfig>
          break;
 8009792:	e013      	b.n	80097bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fcde 	bl	800a158 <USBD_GetStatus>
          break;
 800979c:	e00e      	b.n	80097bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fd0d 	bl	800a1c0 <USBD_SetFeature>
          break;
 80097a6:	e009      	b.n	80097bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fd31 	bl	800a212 <USBD_ClrFeature>
          break;
 80097b0:	e004      	b.n	80097bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fd88 	bl	800a2ca <USBD_CtlError>
          break;
 80097ba:	bf00      	nop
      }
      break;
 80097bc:	e004      	b.n	80097c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fd82 	bl	800a2ca <USBD_CtlError>
      break;
 80097c6:	bf00      	nop
  }

  return ret;
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop

080097d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097ea:	2b40      	cmp	r3, #64	; 0x40
 80097ec:	d005      	beq.n	80097fa <USBD_StdItfReq+0x26>
 80097ee:	2b40      	cmp	r3, #64	; 0x40
 80097f0:	d852      	bhi.n	8009898 <USBD_StdItfReq+0xc4>
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <USBD_StdItfReq+0x26>
 80097f6:	2b20      	cmp	r3, #32
 80097f8:	d14e      	bne.n	8009898 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009800:	b2db      	uxtb	r3, r3
 8009802:	3b01      	subs	r3, #1
 8009804:	2b02      	cmp	r3, #2
 8009806:	d840      	bhi.n	800988a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	889b      	ldrh	r3, [r3, #4]
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b01      	cmp	r3, #1
 8009810:	d836      	bhi.n	8009880 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	889b      	ldrh	r3, [r3, #4]
 8009816:	b2db      	uxtb	r3, r3
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7ff fed9 	bl	80095d2 <USBD_CoreFindIF>
 8009820:	4603      	mov	r3, r0
 8009822:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009824:	7bbb      	ldrb	r3, [r7, #14]
 8009826:	2bff      	cmp	r3, #255	; 0xff
 8009828:	d01d      	beq.n	8009866 <USBD_StdItfReq+0x92>
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d11a      	bne.n	8009866 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009830:	7bba      	ldrb	r2, [r7, #14]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	32ae      	adds	r2, #174	; 0xae
 8009836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00f      	beq.n	8009860 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009840:	7bba      	ldrb	r2, [r7, #14]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009848:	7bba      	ldrb	r2, [r7, #14]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	32ae      	adds	r2, #174	; 0xae
 800984e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	4798      	blx	r3
 800985a:	4603      	mov	r3, r0
 800985c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800985e:	e004      	b.n	800986a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009860:	2303      	movs	r3, #3
 8009862:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009864:	e001      	b.n	800986a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009866:	2303      	movs	r3, #3
 8009868:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	88db      	ldrh	r3, [r3, #6]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d110      	bne.n	8009894 <USBD_StdItfReq+0xc0>
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10d      	bne.n	8009894 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fdf1 	bl	800a460 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800987e:	e009      	b.n	8009894 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fd21 	bl	800a2ca <USBD_CtlError>
          break;
 8009888:	e004      	b.n	8009894 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fd1c 	bl	800a2ca <USBD_CtlError>
          break;
 8009892:	e000      	b.n	8009896 <USBD_StdItfReq+0xc2>
          break;
 8009894:	bf00      	nop
      }
      break;
 8009896:	e004      	b.n	80098a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fd15 	bl	800a2ca <USBD_CtlError>
      break;
 80098a0:	bf00      	nop
  }

  return ret;
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	889b      	ldrh	r3, [r3, #4]
 80098be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098c8:	2b40      	cmp	r3, #64	; 0x40
 80098ca:	d007      	beq.n	80098dc <USBD_StdEPReq+0x30>
 80098cc:	2b40      	cmp	r3, #64	; 0x40
 80098ce:	f200 817f 	bhi.w	8009bd0 <USBD_StdEPReq+0x324>
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d02a      	beq.n	800992c <USBD_StdEPReq+0x80>
 80098d6:	2b20      	cmp	r3, #32
 80098d8:	f040 817a 	bne.w	8009bd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7ff fe83 	bl	80095ec <USBD_CoreFindEP>
 80098e6:	4603      	mov	r3, r0
 80098e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098ea:	7b7b      	ldrb	r3, [r7, #13]
 80098ec:	2bff      	cmp	r3, #255	; 0xff
 80098ee:	f000 8174 	beq.w	8009bda <USBD_StdEPReq+0x32e>
 80098f2:	7b7b      	ldrb	r3, [r7, #13]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f040 8170 	bne.w	8009bda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80098fa:	7b7a      	ldrb	r2, [r7, #13]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009902:	7b7a      	ldrb	r2, [r7, #13]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	32ae      	adds	r2, #174	; 0xae
 8009908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 8163 	beq.w	8009bda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009914:	7b7a      	ldrb	r2, [r7, #13]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	32ae      	adds	r2, #174	; 0xae
 800991a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	4798      	blx	r3
 8009926:	4603      	mov	r3, r0
 8009928:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800992a:	e156      	b.n	8009bda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	785b      	ldrb	r3, [r3, #1]
 8009930:	2b03      	cmp	r3, #3
 8009932:	d008      	beq.n	8009946 <USBD_StdEPReq+0x9a>
 8009934:	2b03      	cmp	r3, #3
 8009936:	f300 8145 	bgt.w	8009bc4 <USBD_StdEPReq+0x318>
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 809b 	beq.w	8009a76 <USBD_StdEPReq+0x1ca>
 8009940:	2b01      	cmp	r3, #1
 8009942:	d03c      	beq.n	80099be <USBD_StdEPReq+0x112>
 8009944:	e13e      	b.n	8009bc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800994c:	b2db      	uxtb	r3, r3
 800994e:	2b02      	cmp	r3, #2
 8009950:	d002      	beq.n	8009958 <USBD_StdEPReq+0xac>
 8009952:	2b03      	cmp	r3, #3
 8009954:	d016      	beq.n	8009984 <USBD_StdEPReq+0xd8>
 8009956:	e02c      	b.n	80099b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00d      	beq.n	800997a <USBD_StdEPReq+0xce>
 800995e:	7bbb      	ldrb	r3, [r7, #14]
 8009960:	2b80      	cmp	r3, #128	; 0x80
 8009962:	d00a      	beq.n	800997a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009964:	7bbb      	ldrb	r3, [r7, #14]
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f001 f9b1 	bl	800acd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800996e:	2180      	movs	r1, #128	; 0x80
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f001 f9ad 	bl	800acd0 <USBD_LL_StallEP>
 8009976:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009978:	e020      	b.n	80099bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fca4 	bl	800a2ca <USBD_CtlError>
              break;
 8009982:	e01b      	b.n	80099bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	885b      	ldrh	r3, [r3, #2]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10e      	bne.n	80099aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800998c:	7bbb      	ldrb	r3, [r7, #14]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00b      	beq.n	80099aa <USBD_StdEPReq+0xfe>
 8009992:	7bbb      	ldrb	r3, [r7, #14]
 8009994:	2b80      	cmp	r3, #128	; 0x80
 8009996:	d008      	beq.n	80099aa <USBD_StdEPReq+0xfe>
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	88db      	ldrh	r3, [r3, #6]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d104      	bne.n	80099aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80099a0:	7bbb      	ldrb	r3, [r7, #14]
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 f993 	bl	800acd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fd58 	bl	800a460 <USBD_CtlSendStatus>

              break;
 80099b0:	e004      	b.n	80099bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fc88 	bl	800a2ca <USBD_CtlError>
              break;
 80099ba:	bf00      	nop
          }
          break;
 80099bc:	e107      	b.n	8009bce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d002      	beq.n	80099d0 <USBD_StdEPReq+0x124>
 80099ca:	2b03      	cmp	r3, #3
 80099cc:	d016      	beq.n	80099fc <USBD_StdEPReq+0x150>
 80099ce:	e04b      	b.n	8009a68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00d      	beq.n	80099f2 <USBD_StdEPReq+0x146>
 80099d6:	7bbb      	ldrb	r3, [r7, #14]
 80099d8:	2b80      	cmp	r3, #128	; 0x80
 80099da:	d00a      	beq.n	80099f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
 80099de:	4619      	mov	r1, r3
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f001 f975 	bl	800acd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80099e6:	2180      	movs	r1, #128	; 0x80
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f001 f971 	bl	800acd0 <USBD_LL_StallEP>
 80099ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099f0:	e040      	b.n	8009a74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fc68 	bl	800a2ca <USBD_CtlError>
              break;
 80099fa:	e03b      	b.n	8009a74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	885b      	ldrh	r3, [r3, #2]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d136      	bne.n	8009a72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a04:	7bbb      	ldrb	r3, [r7, #14]
 8009a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d004      	beq.n	8009a18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	4619      	mov	r1, r3
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f001 f97b 	bl	800ad0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fd21 	bl	800a460 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7ff fde2 	bl	80095ec <USBD_CoreFindEP>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a2c:	7b7b      	ldrb	r3, [r7, #13]
 8009a2e:	2bff      	cmp	r3, #255	; 0xff
 8009a30:	d01f      	beq.n	8009a72 <USBD_StdEPReq+0x1c6>
 8009a32:	7b7b      	ldrb	r3, [r7, #13]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d11c      	bne.n	8009a72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009a38:	7b7a      	ldrb	r2, [r7, #13]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009a40:	7b7a      	ldrb	r2, [r7, #13]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	32ae      	adds	r2, #174	; 0xae
 8009a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d010      	beq.n	8009a72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a50:	7b7a      	ldrb	r2, [r7, #13]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	32ae      	adds	r2, #174	; 0xae
 8009a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	4798      	blx	r3
 8009a62:	4603      	mov	r3, r0
 8009a64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009a66:	e004      	b.n	8009a72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fc2d 	bl	800a2ca <USBD_CtlError>
              break;
 8009a70:	e000      	b.n	8009a74 <USBD_StdEPReq+0x1c8>
              break;
 8009a72:	bf00      	nop
          }
          break;
 8009a74:	e0ab      	b.n	8009bce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d002      	beq.n	8009a88 <USBD_StdEPReq+0x1dc>
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d032      	beq.n	8009aec <USBD_StdEPReq+0x240>
 8009a86:	e097      	b.n	8009bb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d007      	beq.n	8009a9e <USBD_StdEPReq+0x1f2>
 8009a8e:	7bbb      	ldrb	r3, [r7, #14]
 8009a90:	2b80      	cmp	r3, #128	; 0x80
 8009a92:	d004      	beq.n	8009a9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fc17 	bl	800a2ca <USBD_CtlError>
                break;
 8009a9c:	e091      	b.n	8009bc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	da0b      	bge.n	8009abe <USBD_StdEPReq+0x212>
 8009aa6:	7bbb      	ldrb	r3, [r7, #14]
 8009aa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	3310      	adds	r3, #16
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	4413      	add	r3, r2
 8009aba:	3304      	adds	r3, #4
 8009abc:	e00b      	b.n	8009ad6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
 8009ac0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fc61 	bl	800a3ac <USBD_CtlSendData>
              break;
 8009aea:	e06a      	b.n	8009bc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	da11      	bge.n	8009b18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	f003 020f 	and.w	r2, r3, #15
 8009afa:	6879      	ldr	r1, [r7, #4]
 8009afc:	4613      	mov	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4413      	add	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	440b      	add	r3, r1
 8009b06:	3324      	adds	r3, #36	; 0x24
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d117      	bne.n	8009b3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fbda 	bl	800a2ca <USBD_CtlError>
                  break;
 8009b16:	e054      	b.n	8009bc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	f003 020f 	and.w	r2, r3, #15
 8009b1e:	6879      	ldr	r1, [r7, #4]
 8009b20:	4613      	mov	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	440b      	add	r3, r1
 8009b2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d104      	bne.n	8009b3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fbc7 	bl	800a2ca <USBD_CtlError>
                  break;
 8009b3c:	e041      	b.n	8009bc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	da0b      	bge.n	8009b5e <USBD_StdEPReq+0x2b2>
 8009b46:	7bbb      	ldrb	r3, [r7, #14]
 8009b48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	3310      	adds	r3, #16
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	4413      	add	r3, r2
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	e00b      	b.n	8009b76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b5e:	7bbb      	ldrb	r3, [r7, #14]
 8009b60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	4413      	add	r3, r2
 8009b74:	3304      	adds	r3, #4
 8009b76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b78:	7bbb      	ldrb	r3, [r7, #14]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <USBD_StdEPReq+0x2d8>
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
 8009b80:	2b80      	cmp	r3, #128	; 0x80
 8009b82:	d103      	bne.n	8009b8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2200      	movs	r2, #0
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	e00e      	b.n	8009baa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b8c:	7bbb      	ldrb	r3, [r7, #14]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f001 f8db 	bl	800ad4c <USBD_LL_IsStallEP>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d003      	beq.n	8009ba4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	e002      	b.n	8009baa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2202      	movs	r2, #2
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fbfb 	bl	800a3ac <USBD_CtlSendData>
              break;
 8009bb6:	e004      	b.n	8009bc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009bb8:	6839      	ldr	r1, [r7, #0]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fb85 	bl	800a2ca <USBD_CtlError>
              break;
 8009bc0:	bf00      	nop
          }
          break;
 8009bc2:	e004      	b.n	8009bce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fb7f 	bl	800a2ca <USBD_CtlError>
          break;
 8009bcc:	bf00      	nop
      }
      break;
 8009bce:	e005      	b.n	8009bdc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009bd0:	6839      	ldr	r1, [r7, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 fb79 	bl	800a2ca <USBD_CtlError>
      break;
 8009bd8:	e000      	b.n	8009bdc <USBD_StdEPReq+0x330>
      break;
 8009bda:	bf00      	nop
  }

  return ret;
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
	...

08009be8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	885b      	ldrh	r3, [r3, #2]
 8009c02:	0a1b      	lsrs	r3, r3, #8
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	2b0e      	cmp	r3, #14
 8009c0a:	f200 8152 	bhi.w	8009eb2 <USBD_GetDescriptor+0x2ca>
 8009c0e:	a201      	add	r2, pc, #4	; (adr r2, 8009c14 <USBD_GetDescriptor+0x2c>)
 8009c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c14:	08009c85 	.word	0x08009c85
 8009c18:	08009c9d 	.word	0x08009c9d
 8009c1c:	08009cdd 	.word	0x08009cdd
 8009c20:	08009eb3 	.word	0x08009eb3
 8009c24:	08009eb3 	.word	0x08009eb3
 8009c28:	08009e53 	.word	0x08009e53
 8009c2c:	08009e7f 	.word	0x08009e7f
 8009c30:	08009eb3 	.word	0x08009eb3
 8009c34:	08009eb3 	.word	0x08009eb3
 8009c38:	08009eb3 	.word	0x08009eb3
 8009c3c:	08009eb3 	.word	0x08009eb3
 8009c40:	08009eb3 	.word	0x08009eb3
 8009c44:	08009eb3 	.word	0x08009eb3
 8009c48:	08009eb3 	.word	0x08009eb3
 8009c4c:	08009c51 	.word	0x08009c51
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00b      	beq.n	8009c74 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c62:	69db      	ldr	r3, [r3, #28]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	7c12      	ldrb	r2, [r2, #16]
 8009c68:	f107 0108 	add.w	r1, r7, #8
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4798      	blx	r3
 8009c70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c72:	e126      	b.n	8009ec2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fb27 	bl	800a2ca <USBD_CtlError>
        err++;
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	72fb      	strb	r3, [r7, #11]
      break;
 8009c82:	e11e      	b.n	8009ec2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	7c12      	ldrb	r2, [r2, #16]
 8009c90:	f107 0108 	add.w	r1, r7, #8
 8009c94:	4610      	mov	r0, r2
 8009c96:	4798      	blx	r3
 8009c98:	60f8      	str	r0, [r7, #12]
      break;
 8009c9a:	e112      	b.n	8009ec2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	7c1b      	ldrb	r3, [r3, #16]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10d      	bne.n	8009cc0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cac:	f107 0208 	add.w	r2, r7, #8
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	4798      	blx	r3
 8009cb4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	2202      	movs	r2, #2
 8009cbc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009cbe:	e100      	b.n	8009ec2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc8:	f107 0208 	add.w	r2, r7, #8
 8009ccc:	4610      	mov	r0, r2
 8009cce:	4798      	blx	r3
 8009cd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	701a      	strb	r2, [r3, #0]
      break;
 8009cda:	e0f2      	b.n	8009ec2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	885b      	ldrh	r3, [r3, #2]
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b05      	cmp	r3, #5
 8009ce4:	f200 80ac 	bhi.w	8009e40 <USBD_GetDescriptor+0x258>
 8009ce8:	a201      	add	r2, pc, #4	; (adr r2, 8009cf0 <USBD_GetDescriptor+0x108>)
 8009cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cee:	bf00      	nop
 8009cf0:	08009d09 	.word	0x08009d09
 8009cf4:	08009d3d 	.word	0x08009d3d
 8009cf8:	08009d71 	.word	0x08009d71
 8009cfc:	08009da5 	.word	0x08009da5
 8009d00:	08009dd9 	.word	0x08009dd9
 8009d04:	08009e0d 	.word	0x08009e0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00b      	beq.n	8009d2c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	7c12      	ldrb	r2, [r2, #16]
 8009d20:	f107 0108 	add.w	r1, r7, #8
 8009d24:	4610      	mov	r0, r2
 8009d26:	4798      	blx	r3
 8009d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d2a:	e091      	b.n	8009e50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 facb 	bl	800a2ca <USBD_CtlError>
            err++;
 8009d34:	7afb      	ldrb	r3, [r7, #11]
 8009d36:	3301      	adds	r3, #1
 8009d38:	72fb      	strb	r3, [r7, #11]
          break;
 8009d3a:	e089      	b.n	8009e50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00b      	beq.n	8009d60 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	7c12      	ldrb	r2, [r2, #16]
 8009d54:	f107 0108 	add.w	r1, r7, #8
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4798      	blx	r3
 8009d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d5e:	e077      	b.n	8009e50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fab1 	bl	800a2ca <USBD_CtlError>
            err++;
 8009d68:	7afb      	ldrb	r3, [r7, #11]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d6e:	e06f      	b.n	8009e50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00b      	beq.n	8009d94 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	7c12      	ldrb	r2, [r2, #16]
 8009d88:	f107 0108 	add.w	r1, r7, #8
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	4798      	blx	r3
 8009d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d92:	e05d      	b.n	8009e50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fa97 	bl	800a2ca <USBD_CtlError>
            err++;
 8009d9c:	7afb      	ldrb	r3, [r7, #11]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	72fb      	strb	r3, [r7, #11]
          break;
 8009da2:	e055      	b.n	8009e50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009daa:	691b      	ldr	r3, [r3, #16]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00b      	beq.n	8009dc8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	7c12      	ldrb	r2, [r2, #16]
 8009dbc:	f107 0108 	add.w	r1, r7, #8
 8009dc0:	4610      	mov	r0, r2
 8009dc2:	4798      	blx	r3
 8009dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dc6:	e043      	b.n	8009e50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009dc8:	6839      	ldr	r1, [r7, #0]
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fa7d 	bl	800a2ca <USBD_CtlError>
            err++;
 8009dd0:	7afb      	ldrb	r3, [r7, #11]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8009dd6:	e03b      	b.n	8009e50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dde:	695b      	ldr	r3, [r3, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00b      	beq.n	8009dfc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dea:	695b      	ldr	r3, [r3, #20]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	7c12      	ldrb	r2, [r2, #16]
 8009df0:	f107 0108 	add.w	r1, r7, #8
 8009df4:	4610      	mov	r0, r2
 8009df6:	4798      	blx	r3
 8009df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dfa:	e029      	b.n	8009e50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fa63 	bl	800a2ca <USBD_CtlError>
            err++;
 8009e04:	7afb      	ldrb	r3, [r7, #11]
 8009e06:	3301      	adds	r3, #1
 8009e08:	72fb      	strb	r3, [r7, #11]
          break;
 8009e0a:	e021      	b.n	8009e50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00b      	beq.n	8009e30 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	7c12      	ldrb	r2, [r2, #16]
 8009e24:	f107 0108 	add.w	r1, r7, #8
 8009e28:	4610      	mov	r0, r2
 8009e2a:	4798      	blx	r3
 8009e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e2e:	e00f      	b.n	8009e50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e30:	6839      	ldr	r1, [r7, #0]
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fa49 	bl	800a2ca <USBD_CtlError>
            err++;
 8009e38:	7afb      	ldrb	r3, [r7, #11]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e3e:	e007      	b.n	8009e50 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fa41 	bl	800a2ca <USBD_CtlError>
          err++;
 8009e48:	7afb      	ldrb	r3, [r7, #11]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009e4e:	bf00      	nop
      }
      break;
 8009e50:	e037      	b.n	8009ec2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	7c1b      	ldrb	r3, [r3, #16]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d109      	bne.n	8009e6e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e62:	f107 0208 	add.w	r2, r7, #8
 8009e66:	4610      	mov	r0, r2
 8009e68:	4798      	blx	r3
 8009e6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e6c:	e029      	b.n	8009ec2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fa2a 	bl	800a2ca <USBD_CtlError>
        err++;
 8009e76:	7afb      	ldrb	r3, [r7, #11]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e7c:	e021      	b.n	8009ec2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	7c1b      	ldrb	r3, [r3, #16]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10d      	bne.n	8009ea2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8e:	f107 0208 	add.w	r2, r7, #8
 8009e92:	4610      	mov	r0, r2
 8009e94:	4798      	blx	r3
 8009e96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	2207      	movs	r2, #7
 8009e9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ea0:	e00f      	b.n	8009ec2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fa10 	bl	800a2ca <USBD_CtlError>
        err++;
 8009eaa:	7afb      	ldrb	r3, [r7, #11]
 8009eac:	3301      	adds	r3, #1
 8009eae:	72fb      	strb	r3, [r7, #11]
      break;
 8009eb0:	e007      	b.n	8009ec2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fa08 	bl	800a2ca <USBD_CtlError>
      err++;
 8009eba:	7afb      	ldrb	r3, [r7, #11]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8009ec0:	bf00      	nop
  }

  if (err != 0U)
 8009ec2:	7afb      	ldrb	r3, [r7, #11]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d11e      	bne.n	8009f06 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	88db      	ldrh	r3, [r3, #6]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d016      	beq.n	8009efe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009ed0:	893b      	ldrh	r3, [r7, #8]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00e      	beq.n	8009ef4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	88da      	ldrh	r2, [r3, #6]
 8009eda:	893b      	ldrh	r3, [r7, #8]
 8009edc:	4293      	cmp	r3, r2
 8009ede:	bf28      	it	cs
 8009ee0:	4613      	movcs	r3, r2
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ee6:	893b      	ldrh	r3, [r7, #8]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	68f9      	ldr	r1, [r7, #12]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fa5d 	bl	800a3ac <USBD_CtlSendData>
 8009ef2:	e009      	b.n	8009f08 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f9e7 	bl	800a2ca <USBD_CtlError>
 8009efc:	e004      	b.n	8009f08 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 faae 	bl	800a460 <USBD_CtlSendStatus>
 8009f04:	e000      	b.n	8009f08 <USBD_GetDescriptor+0x320>
    return;
 8009f06:	bf00      	nop
  }
}
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop

08009f10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	889b      	ldrh	r3, [r3, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d131      	bne.n	8009f86 <USBD_SetAddress+0x76>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	88db      	ldrh	r3, [r3, #6]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d12d      	bne.n	8009f86 <USBD_SetAddress+0x76>
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	885b      	ldrh	r3, [r3, #2]
 8009f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8009f30:	d829      	bhi.n	8009f86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	885b      	ldrh	r3, [r3, #2]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	2b03      	cmp	r3, #3
 8009f48:	d104      	bne.n	8009f54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f9bc 	bl	800a2ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f52:	e01d      	b.n	8009f90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	7bfa      	ldrb	r2, [r7, #15]
 8009f58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 ff1f 	bl	800ada4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fa7a 	bl	800a460 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d004      	beq.n	8009f7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2202      	movs	r2, #2
 8009f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f7a:	e009      	b.n	8009f90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f84:	e004      	b.n	8009f90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f99e 	bl	800a2ca <USBD_CtlError>
  }
}
 8009f8e:	bf00      	nop
 8009f90:	bf00      	nop
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	885b      	ldrh	r3, [r3, #2]
 8009faa:	b2da      	uxtb	r2, r3
 8009fac:	4b4e      	ldr	r3, [pc, #312]	; (800a0e8 <USBD_SetConfig+0x150>)
 8009fae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009fb0:	4b4d      	ldr	r3, [pc, #308]	; (800a0e8 <USBD_SetConfig+0x150>)
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d905      	bls.n	8009fc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f985 	bl	800a2ca <USBD_CtlError>
    return USBD_FAIL;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e08c      	b.n	800a0de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d002      	beq.n	8009fd6 <USBD_SetConfig+0x3e>
 8009fd0:	2b03      	cmp	r3, #3
 8009fd2:	d029      	beq.n	800a028 <USBD_SetConfig+0x90>
 8009fd4:	e075      	b.n	800a0c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009fd6:	4b44      	ldr	r3, [pc, #272]	; (800a0e8 <USBD_SetConfig+0x150>)
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d020      	beq.n	800a020 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009fde:	4b42      	ldr	r3, [pc, #264]	; (800a0e8 <USBD_SetConfig+0x150>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fe8:	4b3f      	ldr	r3, [pc, #252]	; (800a0e8 <USBD_SetConfig+0x150>)
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7fe ffbd 	bl	8008f6e <USBD_SetClassConfig>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d008      	beq.n	800a010 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f962 	bl	800a2ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2202      	movs	r2, #2
 800a00a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a00e:	e065      	b.n	800a0dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fa25 	bl	800a460 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2203      	movs	r2, #3
 800a01a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a01e:	e05d      	b.n	800a0dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fa1d 	bl	800a460 <USBD_CtlSendStatus>
      break;
 800a026:	e059      	b.n	800a0dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a028:	4b2f      	ldr	r3, [pc, #188]	; (800a0e8 <USBD_SetConfig+0x150>)
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d112      	bne.n	800a056 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2202      	movs	r2, #2
 800a034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a038:	4b2b      	ldr	r3, [pc, #172]	; (800a0e8 <USBD_SetConfig+0x150>)
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	461a      	mov	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a042:	4b29      	ldr	r3, [pc, #164]	; (800a0e8 <USBD_SetConfig+0x150>)
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7fe ffac 	bl	8008fa6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fa06 	bl	800a460 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a054:	e042      	b.n	800a0dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a056:	4b24      	ldr	r3, [pc, #144]	; (800a0e8 <USBD_SetConfig+0x150>)
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	461a      	mov	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	429a      	cmp	r2, r3
 800a062:	d02a      	beq.n	800a0ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	4619      	mov	r1, r3
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7fe ff9a 	bl	8008fa6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a072:	4b1d      	ldr	r3, [pc, #116]	; (800a0e8 <USBD_SetConfig+0x150>)
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	461a      	mov	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a07c:	4b1a      	ldr	r3, [pc, #104]	; (800a0e8 <USBD_SetConfig+0x150>)
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	4619      	mov	r1, r3
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f7fe ff73 	bl	8008f6e <USBD_SetClassConfig>
 800a088:	4603      	mov	r3, r0
 800a08a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00f      	beq.n	800a0b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a092:	6839      	ldr	r1, [r7, #0]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 f918 	bl	800a2ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7fe ff7f 	bl	8008fa6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2202      	movs	r2, #2
 800a0ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a0b0:	e014      	b.n	800a0dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f9d4 	bl	800a460 <USBD_CtlSendStatus>
      break;
 800a0b8:	e010      	b.n	800a0dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f9d0 	bl	800a460 <USBD_CtlSendStatus>
      break;
 800a0c0:	e00c      	b.n	800a0dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a0c2:	6839      	ldr	r1, [r7, #0]
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f900 	bl	800a2ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0ca:	4b07      	ldr	r3, [pc, #28]	; (800a0e8 <USBD_SetConfig+0x150>)
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7fe ff68 	bl	8008fa6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a0da:	bf00      	nop
  }

  return ret;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	2000072c 	.word	0x2000072c

0800a0ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	88db      	ldrh	r3, [r3, #6]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d004      	beq.n	800a108 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a0fe:	6839      	ldr	r1, [r7, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f8e2 	bl	800a2ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a106:	e023      	b.n	800a150 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b02      	cmp	r3, #2
 800a112:	dc02      	bgt.n	800a11a <USBD_GetConfig+0x2e>
 800a114:	2b00      	cmp	r3, #0
 800a116:	dc03      	bgt.n	800a120 <USBD_GetConfig+0x34>
 800a118:	e015      	b.n	800a146 <USBD_GetConfig+0x5a>
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	d00b      	beq.n	800a136 <USBD_GetConfig+0x4a>
 800a11e:	e012      	b.n	800a146 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3308      	adds	r3, #8
 800a12a:	2201      	movs	r2, #1
 800a12c:	4619      	mov	r1, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f93c 	bl	800a3ac <USBD_CtlSendData>
        break;
 800a134:	e00c      	b.n	800a150 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	3304      	adds	r3, #4
 800a13a:	2201      	movs	r2, #1
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f934 	bl	800a3ac <USBD_CtlSendData>
        break;
 800a144:	e004      	b.n	800a150 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f8be 	bl	800a2ca <USBD_CtlError>
        break;
 800a14e:	bf00      	nop
}
 800a150:	bf00      	nop
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	3b01      	subs	r3, #1
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d81e      	bhi.n	800a1ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	88db      	ldrh	r3, [r3, #6]
 800a174:	2b02      	cmp	r3, #2
 800a176:	d004      	beq.n	800a182 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a178:	6839      	ldr	r1, [r7, #0]
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f8a5 	bl	800a2ca <USBD_CtlError>
        break;
 800a180:	e01a      	b.n	800a1b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d005      	beq.n	800a19e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	f043 0202 	orr.w	r2, r3, #2
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	330c      	adds	r3, #12
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f900 	bl	800a3ac <USBD_CtlSendData>
      break;
 800a1ac:	e004      	b.n	800a1b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f88a 	bl	800a2ca <USBD_CtlError>
      break;
 800a1b6:	bf00      	nop
  }
}
 800a1b8:	bf00      	nop
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	885b      	ldrh	r3, [r3, #2]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d107      	bne.n	800a1e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 f940 	bl	800a460 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a1e0:	e013      	b.n	800a20a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	885b      	ldrh	r3, [r3, #2]
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d10b      	bne.n	800a202 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	889b      	ldrh	r3, [r3, #4]
 800a1ee:	0a1b      	lsrs	r3, r3, #8
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f930 	bl	800a460 <USBD_CtlSendStatus>
}
 800a200:	e003      	b.n	800a20a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a202:	6839      	ldr	r1, [r7, #0]
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 f860 	bl	800a2ca <USBD_CtlError>
}
 800a20a:	bf00      	nop
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b082      	sub	sp, #8
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
 800a21a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a222:	b2db      	uxtb	r3, r3
 800a224:	3b01      	subs	r3, #1
 800a226:	2b02      	cmp	r3, #2
 800a228:	d80b      	bhi.n	800a242 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	885b      	ldrh	r3, [r3, #2]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d10c      	bne.n	800a24c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f910 	bl	800a460 <USBD_CtlSendStatus>
      }
      break;
 800a240:	e004      	b.n	800a24c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f840 	bl	800a2ca <USBD_CtlError>
      break;
 800a24a:	e000      	b.n	800a24e <USBD_ClrFeature+0x3c>
      break;
 800a24c:	bf00      	nop
  }
}
 800a24e:	bf00      	nop
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b084      	sub	sp, #16
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	781a      	ldrb	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	3301      	adds	r3, #1
 800a270:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	781a      	ldrb	r2, [r3, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3301      	adds	r3, #1
 800a27e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f7ff fa17 	bl	80096b4 <SWAPBYTE>
 800a286:	4603      	mov	r3, r0
 800a288:	461a      	mov	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3301      	adds	r3, #1
 800a292:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	3301      	adds	r3, #1
 800a298:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7ff fa0a 	bl	80096b4 <SWAPBYTE>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f7ff f9fd 	bl	80096b4 <SWAPBYTE>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	461a      	mov	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	80da      	strh	r2, [r3, #6]
}
 800a2c2:	bf00      	nop
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b082      	sub	sp, #8
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2d4:	2180      	movs	r1, #128	; 0x80
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fcfa 	bl	800acd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a2dc:	2100      	movs	r1, #0
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fcf6 	bl	800acd0 <USBD_LL_StallEP>
}
 800a2e4:	bf00      	nop
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d036      	beq.n	800a370 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a306:	6938      	ldr	r0, [r7, #16]
 800a308:	f000 f836 	bl	800a378 <USBD_GetLen>
 800a30c:	4603      	mov	r3, r0
 800a30e:	3301      	adds	r3, #1
 800a310:	b29b      	uxth	r3, r3
 800a312:	005b      	lsls	r3, r3, #1
 800a314:	b29a      	uxth	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	4413      	add	r3, r2
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	7812      	ldrb	r2, [r2, #0]
 800a324:	701a      	strb	r2, [r3, #0]
  idx++;
 800a326:	7dfb      	ldrb	r3, [r7, #23]
 800a328:	3301      	adds	r3, #1
 800a32a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a32c:	7dfb      	ldrb	r3, [r7, #23]
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	4413      	add	r3, r2
 800a332:	2203      	movs	r2, #3
 800a334:	701a      	strb	r2, [r3, #0]
  idx++;
 800a336:	7dfb      	ldrb	r3, [r7, #23]
 800a338:	3301      	adds	r3, #1
 800a33a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a33c:	e013      	b.n	800a366 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a33e:	7dfb      	ldrb	r3, [r7, #23]
 800a340:	68ba      	ldr	r2, [r7, #8]
 800a342:	4413      	add	r3, r2
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	7812      	ldrb	r2, [r2, #0]
 800a348:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	3301      	adds	r3, #1
 800a34e:	613b      	str	r3, [r7, #16]
    idx++;
 800a350:	7dfb      	ldrb	r3, [r7, #23]
 800a352:	3301      	adds	r3, #1
 800a354:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a356:	7dfb      	ldrb	r3, [r7, #23]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	4413      	add	r3, r2
 800a35c:	2200      	movs	r2, #0
 800a35e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a360:	7dfb      	ldrb	r3, [r7, #23]
 800a362:	3301      	adds	r3, #1
 800a364:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1e7      	bne.n	800a33e <USBD_GetString+0x52>
 800a36e:	e000      	b.n	800a372 <USBD_GetString+0x86>
    return;
 800a370:	bf00      	nop
  }
}
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a380:	2300      	movs	r3, #0
 800a382:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a388:	e005      	b.n	800a396 <USBD_GetLen+0x1e>
  {
    len++;
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	3301      	adds	r3, #1
 800a38e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	3301      	adds	r3, #1
 800a394:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1f5      	bne.n	800a38a <USBD_GetLen+0x12>
  }

  return len;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f000 fd05 	bl	800ade2 <USBD_LL_Transmit>

  return USBD_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	60b9      	str	r1, [r7, #8]
 800a3ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f000 fcf4 	bl	800ade2 <USBD_LL_Transmit>

  return USBD_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2203      	movs	r2, #3
 800a414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	2100      	movs	r1, #0
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f000 fcf8 	bl	800ae24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b084      	sub	sp, #16
 800a442:	af00      	add	r7, sp, #0
 800a444:	60f8      	str	r0, [r7, #12]
 800a446:	60b9      	str	r1, [r7, #8]
 800a448:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	2100      	movs	r1, #0
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 fce7 	bl	800ae24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2204      	movs	r2, #4
 800a46c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a470:	2300      	movs	r3, #0
 800a472:	2200      	movs	r2, #0
 800a474:	2100      	movs	r1, #0
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fcb3 	bl	800ade2 <USBD_LL_Transmit>

  return USBD_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b082      	sub	sp, #8
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2205      	movs	r2, #5
 800a492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a496:	2300      	movs	r3, #0
 800a498:	2200      	movs	r2, #0
 800a49a:	2100      	movs	r1, #0
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fcc1 	bl	800ae24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	4912      	ldr	r1, [pc, #72]	; (800a4fc <MX_USB_DEVICE_Init+0x50>)
 800a4b4:	4812      	ldr	r0, [pc, #72]	; (800a500 <MX_USB_DEVICE_Init+0x54>)
 800a4b6:	f7fe fcdd 	bl	8008e74 <USBD_Init>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a4c0:	f7f6 fbfa 	bl	8000cb8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a4c4:	490f      	ldr	r1, [pc, #60]	; (800a504 <MX_USB_DEVICE_Init+0x58>)
 800a4c6:	480e      	ldr	r0, [pc, #56]	; (800a500 <MX_USB_DEVICE_Init+0x54>)
 800a4c8:	f7fe fd04 	bl	8008ed4 <USBD_RegisterClass>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a4d2:	f7f6 fbf1 	bl	8000cb8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a4d6:	490c      	ldr	r1, [pc, #48]	; (800a508 <MX_USB_DEVICE_Init+0x5c>)
 800a4d8:	4809      	ldr	r0, [pc, #36]	; (800a500 <MX_USB_DEVICE_Init+0x54>)
 800a4da:	f7fe fc3b 	bl	8008d54 <USBD_CDC_RegisterInterface>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a4e4:	f7f6 fbe8 	bl	8000cb8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a4e8:	4805      	ldr	r0, [pc, #20]	; (800a500 <MX_USB_DEVICE_Init+0x54>)
 800a4ea:	f7fe fd29 	bl	8008f40 <USBD_Start>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a4f4:	f7f6 fbe0 	bl	8000cb8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a4f8:	bf00      	nop
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	200000cc 	.word	0x200000cc
 800a500:	20000730 	.word	0x20000730
 800a504:	20000038 	.word	0x20000038
 800a508:	200000b8 	.word	0x200000b8

0800a50c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a510:	2200      	movs	r2, #0
 800a512:	4905      	ldr	r1, [pc, #20]	; (800a528 <CDC_Init_FS+0x1c>)
 800a514:	4805      	ldr	r0, [pc, #20]	; (800a52c <CDC_Init_FS+0x20>)
 800a516:	f7fe fc37 	bl	8008d88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a51a:	4905      	ldr	r1, [pc, #20]	; (800a530 <CDC_Init_FS+0x24>)
 800a51c:	4803      	ldr	r0, [pc, #12]	; (800a52c <CDC_Init_FS+0x20>)
 800a51e:	f7fe fc55 	bl	8008dcc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a522:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a524:	4618      	mov	r0, r3
 800a526:	bd80      	pop	{r7, pc}
 800a528:	2000120c 	.word	0x2000120c
 800a52c:	20000730 	.word	0x20000730
 800a530:	20000a0c 	.word	0x20000a0c

0800a534 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a534:	b480      	push	{r7}
 800a536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a538:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	6039      	str	r1, [r7, #0]
 800a54e:	71fb      	strb	r3, [r7, #7]
 800a550:	4613      	mov	r3, r2
 800a552:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a554:	79fb      	ldrb	r3, [r7, #7]
 800a556:	2b23      	cmp	r3, #35	; 0x23
 800a558:	d84a      	bhi.n	800a5f0 <CDC_Control_FS+0xac>
 800a55a:	a201      	add	r2, pc, #4	; (adr r2, 800a560 <CDC_Control_FS+0x1c>)
 800a55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a560:	0800a5f1 	.word	0x0800a5f1
 800a564:	0800a5f1 	.word	0x0800a5f1
 800a568:	0800a5f1 	.word	0x0800a5f1
 800a56c:	0800a5f1 	.word	0x0800a5f1
 800a570:	0800a5f1 	.word	0x0800a5f1
 800a574:	0800a5f1 	.word	0x0800a5f1
 800a578:	0800a5f1 	.word	0x0800a5f1
 800a57c:	0800a5f1 	.word	0x0800a5f1
 800a580:	0800a5f1 	.word	0x0800a5f1
 800a584:	0800a5f1 	.word	0x0800a5f1
 800a588:	0800a5f1 	.word	0x0800a5f1
 800a58c:	0800a5f1 	.word	0x0800a5f1
 800a590:	0800a5f1 	.word	0x0800a5f1
 800a594:	0800a5f1 	.word	0x0800a5f1
 800a598:	0800a5f1 	.word	0x0800a5f1
 800a59c:	0800a5f1 	.word	0x0800a5f1
 800a5a0:	0800a5f1 	.word	0x0800a5f1
 800a5a4:	0800a5f1 	.word	0x0800a5f1
 800a5a8:	0800a5f1 	.word	0x0800a5f1
 800a5ac:	0800a5f1 	.word	0x0800a5f1
 800a5b0:	0800a5f1 	.word	0x0800a5f1
 800a5b4:	0800a5f1 	.word	0x0800a5f1
 800a5b8:	0800a5f1 	.word	0x0800a5f1
 800a5bc:	0800a5f1 	.word	0x0800a5f1
 800a5c0:	0800a5f1 	.word	0x0800a5f1
 800a5c4:	0800a5f1 	.word	0x0800a5f1
 800a5c8:	0800a5f1 	.word	0x0800a5f1
 800a5cc:	0800a5f1 	.word	0x0800a5f1
 800a5d0:	0800a5f1 	.word	0x0800a5f1
 800a5d4:	0800a5f1 	.word	0x0800a5f1
 800a5d8:	0800a5f1 	.word	0x0800a5f1
 800a5dc:	0800a5f1 	.word	0x0800a5f1
 800a5e0:	0800a5f1 	.word	0x0800a5f1
 800a5e4:	0800a5f1 	.word	0x0800a5f1
 800a5e8:	0800a5f1 	.word	0x0800a5f1
 800a5ec:	0800a5f1 	.word	0x0800a5f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a5f0:	bf00      	nop
  }

  return (USBD_OK);
 800a5f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a60a:	6879      	ldr	r1, [r7, #4]
 800a60c:	4805      	ldr	r0, [pc, #20]	; (800a624 <CDC_Receive_FS+0x24>)
 800a60e:	f7fe fbdd 	bl	8008dcc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a612:	4804      	ldr	r0, [pc, #16]	; (800a624 <CDC_Receive_FS+0x24>)
 800a614:	f7fe fbf8 	bl	8008e08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a618:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	20000730 	.word	0x20000730

0800a628 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	4613      	mov	r3, r2
 800a634:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a63a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	371c      	adds	r7, #28
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
	...

0800a64c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	4603      	mov	r3, r0
 800a654:	6039      	str	r1, [r7, #0]
 800a656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	2212      	movs	r2, #18
 800a65c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a65e:	4b03      	ldr	r3, [pc, #12]	; (800a66c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	200000ec 	.word	0x200000ec

0800a670 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	4603      	mov	r3, r0
 800a678:	6039      	str	r1, [r7, #0]
 800a67a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2204      	movs	r2, #4
 800a680:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a682:	4b03      	ldr	r3, [pc, #12]	; (800a690 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a684:	4618      	mov	r0, r3
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	2000010c 	.word	0x2000010c

0800a694 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	4603      	mov	r3, r0
 800a69c:	6039      	str	r1, [r7, #0]
 800a69e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6a0:	79fb      	ldrb	r3, [r7, #7]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d105      	bne.n	800a6b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	4907      	ldr	r1, [pc, #28]	; (800a6c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a6aa:	4808      	ldr	r0, [pc, #32]	; (800a6cc <USBD_FS_ProductStrDescriptor+0x38>)
 800a6ac:	f7ff fe1e 	bl	800a2ec <USBD_GetString>
 800a6b0:	e004      	b.n	800a6bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	4904      	ldr	r1, [pc, #16]	; (800a6c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a6b6:	4805      	ldr	r0, [pc, #20]	; (800a6cc <USBD_FS_ProductStrDescriptor+0x38>)
 800a6b8:	f7ff fe18 	bl	800a2ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6bc:	4b02      	ldr	r3, [pc, #8]	; (800a6c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3708      	adds	r7, #8
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20001a0c 	.word	0x20001a0c
 800a6cc:	0800b260 	.word	0x0800b260

0800a6d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	6039      	str	r1, [r7, #0]
 800a6da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	4904      	ldr	r1, [pc, #16]	; (800a6f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a6e0:	4804      	ldr	r0, [pc, #16]	; (800a6f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a6e2:	f7ff fe03 	bl	800a2ec <USBD_GetString>
  return USBD_StrDesc;
 800a6e6:	4b02      	ldr	r3, [pc, #8]	; (800a6f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	20001a0c 	.word	0x20001a0c
 800a6f4:	0800b278 	.word	0x0800b278

0800a6f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	4603      	mov	r3, r0
 800a700:	6039      	str	r1, [r7, #0]
 800a702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	221a      	movs	r2, #26
 800a708:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a70a:	f000 f855 	bl	800a7b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a70e:	4b02      	ldr	r3, [pc, #8]	; (800a718 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a710:	4618      	mov	r0, r3
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	20000110 	.word	0x20000110

0800a71c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	4603      	mov	r3, r0
 800a724:	6039      	str	r1, [r7, #0]
 800a726:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a728:	79fb      	ldrb	r3, [r7, #7]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d105      	bne.n	800a73a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	4907      	ldr	r1, [pc, #28]	; (800a750 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a732:	4808      	ldr	r0, [pc, #32]	; (800a754 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a734:	f7ff fdda 	bl	800a2ec <USBD_GetString>
 800a738:	e004      	b.n	800a744 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	4904      	ldr	r1, [pc, #16]	; (800a750 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a73e:	4805      	ldr	r0, [pc, #20]	; (800a754 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a740:	f7ff fdd4 	bl	800a2ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800a744:	4b02      	ldr	r3, [pc, #8]	; (800a750 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a746:	4618      	mov	r0, r3
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	20001a0c 	.word	0x20001a0c
 800a754:	0800b28c 	.word	0x0800b28c

0800a758 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	4603      	mov	r3, r0
 800a760:	6039      	str	r1, [r7, #0]
 800a762:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a764:	79fb      	ldrb	r3, [r7, #7]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d105      	bne.n	800a776 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	4907      	ldr	r1, [pc, #28]	; (800a78c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a76e:	4808      	ldr	r0, [pc, #32]	; (800a790 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a770:	f7ff fdbc 	bl	800a2ec <USBD_GetString>
 800a774:	e004      	b.n	800a780 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	4904      	ldr	r1, [pc, #16]	; (800a78c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a77a:	4805      	ldr	r0, [pc, #20]	; (800a790 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a77c:	f7ff fdb6 	bl	800a2ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800a780:	4b02      	ldr	r3, [pc, #8]	; (800a78c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a782:	4618      	mov	r0, r3
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	20001a0c 	.word	0x20001a0c
 800a790:	0800b298 	.word	0x0800b298

0800a794 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	4603      	mov	r3, r0
 800a79c:	6039      	str	r1, [r7, #0]
 800a79e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	220c      	movs	r2, #12
 800a7a4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a7a6:	4b03      	ldr	r3, [pc, #12]	; (800a7b4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	20000100 	.word	0x20000100

0800a7b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a7be:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <Get_SerialNum+0x44>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a7c4:	4b0e      	ldr	r3, [pc, #56]	; (800a800 <Get_SerialNum+0x48>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a7ca:	4b0e      	ldr	r3, [pc, #56]	; (800a804 <Get_SerialNum+0x4c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d009      	beq.n	800a7f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a7de:	2208      	movs	r2, #8
 800a7e0:	4909      	ldr	r1, [pc, #36]	; (800a808 <Get_SerialNum+0x50>)
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f000 f814 	bl	800a810 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a7e8:	2204      	movs	r2, #4
 800a7ea:	4908      	ldr	r1, [pc, #32]	; (800a80c <Get_SerialNum+0x54>)
 800a7ec:	68b8      	ldr	r0, [r7, #8]
 800a7ee:	f000 f80f 	bl	800a810 <IntToUnicode>
  }
}
 800a7f2:	bf00      	nop
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	1ff0f420 	.word	0x1ff0f420
 800a800:	1ff0f424 	.word	0x1ff0f424
 800a804:	1ff0f428 	.word	0x1ff0f428
 800a808:	20000112 	.word	0x20000112
 800a80c:	20000122 	.word	0x20000122

0800a810 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a810:	b480      	push	{r7}
 800a812:	b087      	sub	sp, #28
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	4613      	mov	r3, r2
 800a81c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a81e:	2300      	movs	r3, #0
 800a820:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a822:	2300      	movs	r3, #0
 800a824:	75fb      	strb	r3, [r7, #23]
 800a826:	e027      	b.n	800a878 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	0f1b      	lsrs	r3, r3, #28
 800a82c:	2b09      	cmp	r3, #9
 800a82e:	d80b      	bhi.n	800a848 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	0f1b      	lsrs	r3, r3, #28
 800a834:	b2da      	uxtb	r2, r3
 800a836:	7dfb      	ldrb	r3, [r7, #23]
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	4619      	mov	r1, r3
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	440b      	add	r3, r1
 800a840:	3230      	adds	r2, #48	; 0x30
 800a842:	b2d2      	uxtb	r2, r2
 800a844:	701a      	strb	r2, [r3, #0]
 800a846:	e00a      	b.n	800a85e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	0f1b      	lsrs	r3, r3, #28
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	7dfb      	ldrb	r3, [r7, #23]
 800a850:	005b      	lsls	r3, r3, #1
 800a852:	4619      	mov	r1, r3
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	440b      	add	r3, r1
 800a858:	3237      	adds	r2, #55	; 0x37
 800a85a:	b2d2      	uxtb	r2, r2
 800a85c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	011b      	lsls	r3, r3, #4
 800a862:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a864:	7dfb      	ldrb	r3, [r7, #23]
 800a866:	005b      	lsls	r3, r3, #1
 800a868:	3301      	adds	r3, #1
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	4413      	add	r3, r2
 800a86e:	2200      	movs	r2, #0
 800a870:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a872:	7dfb      	ldrb	r3, [r7, #23]
 800a874:	3301      	adds	r3, #1
 800a876:	75fb      	strb	r3, [r7, #23]
 800a878:	7dfa      	ldrb	r2, [r7, #23]
 800a87a:	79fb      	ldrb	r3, [r7, #7]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d3d3      	bcc.n	800a828 <IntToUnicode+0x18>
  }
}
 800a880:	bf00      	nop
 800a882:	bf00      	nop
 800a884:	371c      	adds	r7, #28
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
	...

0800a890 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b0ac      	sub	sp, #176	; 0xb0
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a898:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a89c:	2200      	movs	r2, #0
 800a89e:	601a      	str	r2, [r3, #0]
 800a8a0:	605a      	str	r2, [r3, #4]
 800a8a2:	609a      	str	r2, [r3, #8]
 800a8a4:	60da      	str	r2, [r3, #12]
 800a8a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a8a8:	f107 0318 	add.w	r3, r7, #24
 800a8ac:	2284      	movs	r2, #132	; 0x84
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f000 fc27 	bl	800b104 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8be:	d161      	bne.n	800a984 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a8c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a8c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a8cc:	f107 0318 	add.w	r3, r7, #24
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7f9 fc0b 	bl	80040ec <HAL_RCCEx_PeriphCLKConfig>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a8dc:	f7f6 f9ec 	bl	8000cb8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8e0:	4b2a      	ldr	r3, [pc, #168]	; (800a98c <HAL_PCD_MspInit+0xfc>)
 800a8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e4:	4a29      	ldr	r2, [pc, #164]	; (800a98c <HAL_PCD_MspInit+0xfc>)
 800a8e6:	f043 0301 	orr.w	r3, r3, #1
 800a8ea:	6313      	str	r3, [r2, #48]	; 0x30
 800a8ec:	4b27      	ldr	r3, [pc, #156]	; (800a98c <HAL_PCD_MspInit+0xfc>)
 800a8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f0:	f003 0301 	and.w	r3, r3, #1
 800a8f4:	617b      	str	r3, [r7, #20]
 800a8f6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a8f8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a8fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a900:	2302      	movs	r3, #2
 800a902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a906:	2300      	movs	r3, #0
 800a908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a90c:	2303      	movs	r3, #3
 800a90e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a912:	230a      	movs	r3, #10
 800a914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a918:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a91c:	4619      	mov	r1, r3
 800a91e:	481c      	ldr	r0, [pc, #112]	; (800a990 <HAL_PCD_MspInit+0x100>)
 800a920:	f7f7 fa50 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a924:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a92c:	2300      	movs	r3, #0
 800a92e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a932:	2300      	movs	r3, #0
 800a934:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a938:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a93c:	4619      	mov	r1, r3
 800a93e:	4814      	ldr	r0, [pc, #80]	; (800a990 <HAL_PCD_MspInit+0x100>)
 800a940:	f7f7 fa40 	bl	8001dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a944:	4b11      	ldr	r3, [pc, #68]	; (800a98c <HAL_PCD_MspInit+0xfc>)
 800a946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a948:	4a10      	ldr	r2, [pc, #64]	; (800a98c <HAL_PCD_MspInit+0xfc>)
 800a94a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a94e:	6353      	str	r3, [r2, #52]	; 0x34
 800a950:	4b0e      	ldr	r3, [pc, #56]	; (800a98c <HAL_PCD_MspInit+0xfc>)
 800a952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a958:	613b      	str	r3, [r7, #16]
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	4b0b      	ldr	r3, [pc, #44]	; (800a98c <HAL_PCD_MspInit+0xfc>)
 800a95e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a960:	4a0a      	ldr	r2, [pc, #40]	; (800a98c <HAL_PCD_MspInit+0xfc>)
 800a962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a966:	6453      	str	r3, [r2, #68]	; 0x44
 800a968:	4b08      	ldr	r3, [pc, #32]	; (800a98c <HAL_PCD_MspInit+0xfc>)
 800a96a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a96c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a970:	60fb      	str	r3, [r7, #12]
 800a972:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a974:	2200      	movs	r2, #0
 800a976:	2100      	movs	r1, #0
 800a978:	2043      	movs	r0, #67	; 0x43
 800a97a:	f7f6 fe70 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a97e:	2043      	movs	r0, #67	; 0x43
 800a980:	f7f6 fe89 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a984:	bf00      	nop
 800a986:	37b0      	adds	r7, #176	; 0xb0
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	40023800 	.word	0x40023800
 800a990:	40020000 	.word	0x40020000

0800a994 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	f7fe fb15 	bl	8008fda <USBD_LL_SetupStage>
}
 800a9b0:	bf00      	nop
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800a9ca:	78fa      	ldrb	r2, [r7, #3]
 800a9cc:	6879      	ldr	r1, [r7, #4]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	00db      	lsls	r3, r3, #3
 800a9d2:	4413      	add	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	440b      	add	r3, r1
 800a9d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	78fb      	ldrb	r3, [r7, #3]
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	f7fe fb4f 	bl	8009084 <USBD_LL_DataOutStage>
}
 800a9e6:	bf00      	nop
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b082      	sub	sp, #8
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800aa00:	78fa      	ldrb	r2, [r7, #3]
 800aa02:	6879      	ldr	r1, [r7, #4]
 800aa04:	4613      	mov	r3, r2
 800aa06:	00db      	lsls	r3, r3, #3
 800aa08:	4413      	add	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	440b      	add	r3, r1
 800aa0e:	334c      	adds	r3, #76	; 0x4c
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	78fb      	ldrb	r3, [r7, #3]
 800aa14:	4619      	mov	r1, r3
 800aa16:	f7fe fbe8 	bl	80091ea <USBD_LL_DataInStage>
}
 800aa1a:	bf00      	nop
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b082      	sub	sp, #8
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fe fd1c 	bl	800946e <USBD_LL_SOF>
}
 800aa36:	bf00      	nop
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b084      	sub	sp, #16
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa46:	2301      	movs	r3, #1
 800aa48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d102      	bne.n	800aa58 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aa52:	2300      	movs	r3, #0
 800aa54:	73fb      	strb	r3, [r7, #15]
 800aa56:	e008      	b.n	800aa6a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d102      	bne.n	800aa66 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aa60:	2301      	movs	r3, #1
 800aa62:	73fb      	strb	r3, [r7, #15]
 800aa64:	e001      	b.n	800aa6a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aa66:	f7f6 f927 	bl	8000cb8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa70:	7bfa      	ldrb	r2, [r7, #15]
 800aa72:	4611      	mov	r1, r2
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7fe fcbc 	bl	80093f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fe fc64 	bl	800934e <USBD_LL_Reset>
}
 800aa86:	bf00      	nop
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
	...

0800aa90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fcb7 	bl	8009412 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	6812      	ldr	r2, [r2, #0]
 800aab2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aab6:	f043 0301 	orr.w	r3, r3, #1
 800aaba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d005      	beq.n	800aad0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aac4:	4b04      	ldr	r3, [pc, #16]	; (800aad8 <HAL_PCD_SuspendCallback+0x48>)
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	4a03      	ldr	r2, [pc, #12]	; (800aad8 <HAL_PCD_SuspendCallback+0x48>)
 800aaca:	f043 0306 	orr.w	r3, r3, #6
 800aace:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aad0:	bf00      	nop
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	e000ed00 	.word	0xe000ed00

0800aadc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fca7 	bl	800943e <USBD_LL_Resume>
}
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	460b      	mov	r3, r1
 800ab02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ab0a:	78fa      	ldrb	r2, [r7, #3]
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7fe fcff 	bl	8009512 <USBD_LL_IsoOUTIncomplete>
}
 800ab14:	bf00      	nop
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	460b      	mov	r3, r1
 800ab26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ab2e:	78fa      	ldrb	r2, [r7, #3]
 800ab30:	4611      	mov	r1, r2
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fe fcbb 	bl	80094ae <USBD_LL_IsoINIncomplete>
}
 800ab38:	bf00      	nop
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fe fd11 	bl	8009576 <USBD_LL_DevConnected>
}
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe fd0e 	bl	800958c <USBD_LL_DevDisconnected>
}
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d13c      	bne.n	800ac02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ab88:	4a20      	ldr	r2, [pc, #128]	; (800ac0c <USBD_LL_Init+0x94>)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a1e      	ldr	r2, [pc, #120]	; (800ac0c <USBD_LL_Init+0x94>)
 800ab94:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab98:	4b1c      	ldr	r3, [pc, #112]	; (800ac0c <USBD_LL_Init+0x94>)
 800ab9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800aba0:	4b1a      	ldr	r3, [pc, #104]	; (800ac0c <USBD_LL_Init+0x94>)
 800aba2:	2206      	movs	r2, #6
 800aba4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aba6:	4b19      	ldr	r3, [pc, #100]	; (800ac0c <USBD_LL_Init+0x94>)
 800aba8:	2202      	movs	r2, #2
 800abaa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800abac:	4b17      	ldr	r3, [pc, #92]	; (800ac0c <USBD_LL_Init+0x94>)
 800abae:	2200      	movs	r2, #0
 800abb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800abb2:	4b16      	ldr	r3, [pc, #88]	; (800ac0c <USBD_LL_Init+0x94>)
 800abb4:	2202      	movs	r2, #2
 800abb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800abb8:	4b14      	ldr	r3, [pc, #80]	; (800ac0c <USBD_LL_Init+0x94>)
 800abba:	2200      	movs	r2, #0
 800abbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800abbe:	4b13      	ldr	r3, [pc, #76]	; (800ac0c <USBD_LL_Init+0x94>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800abc4:	4b11      	ldr	r3, [pc, #68]	; (800ac0c <USBD_LL_Init+0x94>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800abca:	4b10      	ldr	r3, [pc, #64]	; (800ac0c <USBD_LL_Init+0x94>)
 800abcc:	2200      	movs	r2, #0
 800abce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800abd0:	4b0e      	ldr	r3, [pc, #56]	; (800ac0c <USBD_LL_Init+0x94>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800abd6:	480d      	ldr	r0, [pc, #52]	; (800ac0c <USBD_LL_Init+0x94>)
 800abd8:	f7f7 faf5 	bl	80021c6 <HAL_PCD_Init>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800abe2:	f7f6 f869 	bl	8000cb8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800abe6:	2180      	movs	r1, #128	; 0x80
 800abe8:	4808      	ldr	r0, [pc, #32]	; (800ac0c <USBD_LL_Init+0x94>)
 800abea:	f7f8 fd70 	bl	80036ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800abee:	2240      	movs	r2, #64	; 0x40
 800abf0:	2100      	movs	r1, #0
 800abf2:	4806      	ldr	r0, [pc, #24]	; (800ac0c <USBD_LL_Init+0x94>)
 800abf4:	f7f8 fd24 	bl	8003640 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800abf8:	2280      	movs	r2, #128	; 0x80
 800abfa:	2101      	movs	r1, #1
 800abfc:	4803      	ldr	r0, [pc, #12]	; (800ac0c <USBD_LL_Init+0x94>)
 800abfe:	f7f8 fd1f 	bl	8003640 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	20001c0c 	.word	0x20001c0c

0800ac10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7f7 fbf1 	bl	800240e <HAL_PCD_Start>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 f97e 	bl	800af34 <USBD_Get_USB_Status>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b084      	sub	sp, #16
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	4608      	mov	r0, r1
 800ac50:	4611      	mov	r1, r2
 800ac52:	461a      	mov	r2, r3
 800ac54:	4603      	mov	r3, r0
 800ac56:	70fb      	strb	r3, [r7, #3]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	70bb      	strb	r3, [r7, #2]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac60:	2300      	movs	r3, #0
 800ac62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac64:	2300      	movs	r3, #0
 800ac66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ac6e:	78bb      	ldrb	r3, [r7, #2]
 800ac70:	883a      	ldrh	r2, [r7, #0]
 800ac72:	78f9      	ldrb	r1, [r7, #3]
 800ac74:	f7f8 f8de 	bl	8002e34 <HAL_PCD_EP_Open>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac7c:	7bfb      	ldrb	r3, [r7, #15]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 f958 	bl	800af34 <USBD_Get_USB_Status>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b084      	sub	sp, #16
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aca2:	2300      	movs	r3, #0
 800aca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acac:	78fa      	ldrb	r2, [r7, #3]
 800acae:	4611      	mov	r1, r2
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7f8 f927 	bl	8002f04 <HAL_PCD_EP_Close>
 800acb6:	4603      	mov	r3, r0
 800acb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acba:	7bfb      	ldrb	r3, [r7, #15]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 f939 	bl	800af34 <USBD_Get_USB_Status>
 800acc2:	4603      	mov	r3, r0
 800acc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	460b      	mov	r3, r1
 800acda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acea:	78fa      	ldrb	r2, [r7, #3]
 800acec:	4611      	mov	r1, r2
 800acee:	4618      	mov	r0, r3
 800acf0:	f7f8 f9ff 	bl	80030f2 <HAL_PCD_EP_SetStall>
 800acf4:	4603      	mov	r3, r0
 800acf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f000 f91a 	bl	800af34 <USBD_Get_USB_Status>
 800ad00:	4603      	mov	r3, r0
 800ad02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b084      	sub	sp, #16
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	460b      	mov	r3, r1
 800ad18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad28:	78fa      	ldrb	r2, [r7, #3]
 800ad2a:	4611      	mov	r1, r2
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7f8 fa44 	bl	80031ba <HAL_PCD_EP_ClrStall>
 800ad32:	4603      	mov	r3, r0
 800ad34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f000 f8fb 	bl	800af34 <USBD_Get_USB_Status>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	460b      	mov	r3, r1
 800ad56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	da0b      	bge.n	800ad80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad68:	78fb      	ldrb	r3, [r7, #3]
 800ad6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad6e:	68f9      	ldr	r1, [r7, #12]
 800ad70:	4613      	mov	r3, r2
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	4413      	add	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	440b      	add	r3, r1
 800ad7a:	333e      	adds	r3, #62	; 0x3e
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	e00b      	b.n	800ad98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad80:	78fb      	ldrb	r3, [r7, #3]
 800ad82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad86:	68f9      	ldr	r1, [r7, #12]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	4413      	add	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	440b      	add	r3, r1
 800ad92:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ad96:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3714      	adds	r7, #20
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	460b      	mov	r3, r1
 800adae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adb4:	2300      	movs	r3, #0
 800adb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800adbe:	78fa      	ldrb	r2, [r7, #3]
 800adc0:	4611      	mov	r1, r2
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7f8 f811 	bl	8002dea <HAL_PCD_SetAddress>
 800adc8:	4603      	mov	r3, r0
 800adca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
 800adce:	4618      	mov	r0, r3
 800add0:	f000 f8b0 	bl	800af34 <USBD_Get_USB_Status>
 800add4:	4603      	mov	r3, r0
 800add6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800add8:	7bbb      	ldrb	r3, [r7, #14]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b086      	sub	sp, #24
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	60f8      	str	r0, [r7, #12]
 800adea:	607a      	str	r2, [r7, #4]
 800adec:	603b      	str	r3, [r7, #0]
 800adee:	460b      	mov	r3, r1
 800adf0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adf2:	2300      	movs	r3, #0
 800adf4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ae00:	7af9      	ldrb	r1, [r7, #11]
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	f7f8 f92a 	bl	800305e <HAL_PCD_EP_Transmit>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae0e:	7dfb      	ldrb	r3, [r7, #23]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 f88f 	bl	800af34 <USBD_Get_USB_Status>
 800ae16:	4603      	mov	r3, r0
 800ae18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae1a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3718      	adds	r7, #24
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	607a      	str	r2, [r7, #4]
 800ae2e:	603b      	str	r3, [r7, #0]
 800ae30:	460b      	mov	r3, r1
 800ae32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ae42:	7af9      	ldrb	r1, [r7, #11]
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	f7f8 f8a6 	bl	8002f98 <HAL_PCD_EP_Receive>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae50:	7dfb      	ldrb	r3, [r7, #23]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 f86e 	bl	800af34 <USBD_Get_USB_Status>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae5c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3718      	adds	r7, #24
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	460b      	mov	r3, r1
 800ae70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae78:	78fa      	ldrb	r2, [r7, #3]
 800ae7a:	4611      	mov	r1, r2
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7f8 f8d6 	bl	800302e <HAL_PCD_EP_GetRxCount>
 800ae82:	4603      	mov	r3, r0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	460b      	mov	r3, r1
 800ae96:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ae98:	78fb      	ldrb	r3, [r7, #3]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d002      	beq.n	800aea4 <HAL_PCDEx_LPM_Callback+0x18>
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d01f      	beq.n	800aee2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800aea2:	e03b      	b.n	800af1c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6a1b      	ldr	r3, [r3, #32]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d007      	beq.n	800aebc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800aeac:	f000 f83c 	bl	800af28 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aeb0:	4b1c      	ldr	r3, [pc, #112]	; (800af24 <HAL_PCDEx_LPM_Callback+0x98>)
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	4a1b      	ldr	r2, [pc, #108]	; (800af24 <HAL_PCDEx_LPM_Callback+0x98>)
 800aeb6:	f023 0306 	bic.w	r3, r3, #6
 800aeba:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	6812      	ldr	r2, [r2, #0]
 800aeca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aece:	f023 0301 	bic.w	r3, r3, #1
 800aed2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fe faaf 	bl	800943e <USBD_LL_Resume>
    break;
 800aee0:	e01c      	b.n	800af1c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	6812      	ldr	r2, [r2, #0]
 800aef0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aef4:	f043 0301 	orr.w	r3, r3, #1
 800aef8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af00:	4618      	mov	r0, r3
 800af02:	f7fe fa86 	bl	8009412 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d005      	beq.n	800af1a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af0e:	4b05      	ldr	r3, [pc, #20]	; (800af24 <HAL_PCDEx_LPM_Callback+0x98>)
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	4a04      	ldr	r2, [pc, #16]	; (800af24 <HAL_PCDEx_LPM_Callback+0x98>)
 800af14:	f043 0306 	orr.w	r3, r3, #6
 800af18:	6113      	str	r3, [r2, #16]
    break;
 800af1a:	bf00      	nop
}
 800af1c:	bf00      	nop
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	e000ed00 	.word	0xe000ed00

0800af28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800af2c:	f7f5 fca6 	bl	800087c <SystemClock_Config>
}
 800af30:	bf00      	nop
 800af32:	bd80      	pop	{r7, pc}

0800af34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af42:	79fb      	ldrb	r3, [r7, #7]
 800af44:	2b03      	cmp	r3, #3
 800af46:	d817      	bhi.n	800af78 <USBD_Get_USB_Status+0x44>
 800af48:	a201      	add	r2, pc, #4	; (adr r2, 800af50 <USBD_Get_USB_Status+0x1c>)
 800af4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4e:	bf00      	nop
 800af50:	0800af61 	.word	0x0800af61
 800af54:	0800af67 	.word	0x0800af67
 800af58:	0800af6d 	.word	0x0800af6d
 800af5c:	0800af73 	.word	0x0800af73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af60:	2300      	movs	r3, #0
 800af62:	73fb      	strb	r3, [r7, #15]
    break;
 800af64:	e00b      	b.n	800af7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af66:	2303      	movs	r3, #3
 800af68:	73fb      	strb	r3, [r7, #15]
    break;
 800af6a:	e008      	b.n	800af7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af6c:	2301      	movs	r3, #1
 800af6e:	73fb      	strb	r3, [r7, #15]
    break;
 800af70:	e005      	b.n	800af7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af72:	2303      	movs	r3, #3
 800af74:	73fb      	strb	r3, [r7, #15]
    break;
 800af76:	e002      	b.n	800af7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af78:	2303      	movs	r3, #3
 800af7a:	73fb      	strb	r3, [r7, #15]
    break;
 800af7c:	bf00      	nop
  }
  return usb_status;
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <malloc>:
 800af8c:	4b02      	ldr	r3, [pc, #8]	; (800af98 <malloc+0xc>)
 800af8e:	4601      	mov	r1, r0
 800af90:	6818      	ldr	r0, [r3, #0]
 800af92:	f000 b82b 	b.w	800afec <_malloc_r>
 800af96:	bf00      	nop
 800af98:	20000178 	.word	0x20000178

0800af9c <free>:
 800af9c:	4b02      	ldr	r3, [pc, #8]	; (800afa8 <free+0xc>)
 800af9e:	4601      	mov	r1, r0
 800afa0:	6818      	ldr	r0, [r3, #0]
 800afa2:	f000 b8f3 	b.w	800b18c <_free_r>
 800afa6:	bf00      	nop
 800afa8:	20000178 	.word	0x20000178

0800afac <sbrk_aligned>:
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	4e0e      	ldr	r6, [pc, #56]	; (800afe8 <sbrk_aligned+0x3c>)
 800afb0:	460c      	mov	r4, r1
 800afb2:	6831      	ldr	r1, [r6, #0]
 800afb4:	4605      	mov	r5, r0
 800afb6:	b911      	cbnz	r1, 800afbe <sbrk_aligned+0x12>
 800afb8:	f000 f8ac 	bl	800b114 <_sbrk_r>
 800afbc:	6030      	str	r0, [r6, #0]
 800afbe:	4621      	mov	r1, r4
 800afc0:	4628      	mov	r0, r5
 800afc2:	f000 f8a7 	bl	800b114 <_sbrk_r>
 800afc6:	1c43      	adds	r3, r0, #1
 800afc8:	d00a      	beq.n	800afe0 <sbrk_aligned+0x34>
 800afca:	1cc4      	adds	r4, r0, #3
 800afcc:	f024 0403 	bic.w	r4, r4, #3
 800afd0:	42a0      	cmp	r0, r4
 800afd2:	d007      	beq.n	800afe4 <sbrk_aligned+0x38>
 800afd4:	1a21      	subs	r1, r4, r0
 800afd6:	4628      	mov	r0, r5
 800afd8:	f000 f89c 	bl	800b114 <_sbrk_r>
 800afdc:	3001      	adds	r0, #1
 800afde:	d101      	bne.n	800afe4 <sbrk_aligned+0x38>
 800afe0:	f04f 34ff 	mov.w	r4, #4294967295
 800afe4:	4620      	mov	r0, r4
 800afe6:	bd70      	pop	{r4, r5, r6, pc}
 800afe8:	20002118 	.word	0x20002118

0800afec <_malloc_r>:
 800afec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aff0:	1ccd      	adds	r5, r1, #3
 800aff2:	f025 0503 	bic.w	r5, r5, #3
 800aff6:	3508      	adds	r5, #8
 800aff8:	2d0c      	cmp	r5, #12
 800affa:	bf38      	it	cc
 800affc:	250c      	movcc	r5, #12
 800affe:	2d00      	cmp	r5, #0
 800b000:	4607      	mov	r7, r0
 800b002:	db01      	blt.n	800b008 <_malloc_r+0x1c>
 800b004:	42a9      	cmp	r1, r5
 800b006:	d905      	bls.n	800b014 <_malloc_r+0x28>
 800b008:	230c      	movs	r3, #12
 800b00a:	603b      	str	r3, [r7, #0]
 800b00c:	2600      	movs	r6, #0
 800b00e:	4630      	mov	r0, r6
 800b010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b014:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b0e8 <_malloc_r+0xfc>
 800b018:	f000 f868 	bl	800b0ec <__malloc_lock>
 800b01c:	f8d8 3000 	ldr.w	r3, [r8]
 800b020:	461c      	mov	r4, r3
 800b022:	bb5c      	cbnz	r4, 800b07c <_malloc_r+0x90>
 800b024:	4629      	mov	r1, r5
 800b026:	4638      	mov	r0, r7
 800b028:	f7ff ffc0 	bl	800afac <sbrk_aligned>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	4604      	mov	r4, r0
 800b030:	d155      	bne.n	800b0de <_malloc_r+0xf2>
 800b032:	f8d8 4000 	ldr.w	r4, [r8]
 800b036:	4626      	mov	r6, r4
 800b038:	2e00      	cmp	r6, #0
 800b03a:	d145      	bne.n	800b0c8 <_malloc_r+0xdc>
 800b03c:	2c00      	cmp	r4, #0
 800b03e:	d048      	beq.n	800b0d2 <_malloc_r+0xe6>
 800b040:	6823      	ldr	r3, [r4, #0]
 800b042:	4631      	mov	r1, r6
 800b044:	4638      	mov	r0, r7
 800b046:	eb04 0903 	add.w	r9, r4, r3
 800b04a:	f000 f863 	bl	800b114 <_sbrk_r>
 800b04e:	4581      	cmp	r9, r0
 800b050:	d13f      	bne.n	800b0d2 <_malloc_r+0xe6>
 800b052:	6821      	ldr	r1, [r4, #0]
 800b054:	1a6d      	subs	r5, r5, r1
 800b056:	4629      	mov	r1, r5
 800b058:	4638      	mov	r0, r7
 800b05a:	f7ff ffa7 	bl	800afac <sbrk_aligned>
 800b05e:	3001      	adds	r0, #1
 800b060:	d037      	beq.n	800b0d2 <_malloc_r+0xe6>
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	442b      	add	r3, r5
 800b066:	6023      	str	r3, [r4, #0]
 800b068:	f8d8 3000 	ldr.w	r3, [r8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d038      	beq.n	800b0e2 <_malloc_r+0xf6>
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	42a2      	cmp	r2, r4
 800b074:	d12b      	bne.n	800b0ce <_malloc_r+0xe2>
 800b076:	2200      	movs	r2, #0
 800b078:	605a      	str	r2, [r3, #4]
 800b07a:	e00f      	b.n	800b09c <_malloc_r+0xb0>
 800b07c:	6822      	ldr	r2, [r4, #0]
 800b07e:	1b52      	subs	r2, r2, r5
 800b080:	d41f      	bmi.n	800b0c2 <_malloc_r+0xd6>
 800b082:	2a0b      	cmp	r2, #11
 800b084:	d917      	bls.n	800b0b6 <_malloc_r+0xca>
 800b086:	1961      	adds	r1, r4, r5
 800b088:	42a3      	cmp	r3, r4
 800b08a:	6025      	str	r5, [r4, #0]
 800b08c:	bf18      	it	ne
 800b08e:	6059      	strne	r1, [r3, #4]
 800b090:	6863      	ldr	r3, [r4, #4]
 800b092:	bf08      	it	eq
 800b094:	f8c8 1000 	streq.w	r1, [r8]
 800b098:	5162      	str	r2, [r4, r5]
 800b09a:	604b      	str	r3, [r1, #4]
 800b09c:	4638      	mov	r0, r7
 800b09e:	f104 060b 	add.w	r6, r4, #11
 800b0a2:	f000 f829 	bl	800b0f8 <__malloc_unlock>
 800b0a6:	f026 0607 	bic.w	r6, r6, #7
 800b0aa:	1d23      	adds	r3, r4, #4
 800b0ac:	1af2      	subs	r2, r6, r3
 800b0ae:	d0ae      	beq.n	800b00e <_malloc_r+0x22>
 800b0b0:	1b9b      	subs	r3, r3, r6
 800b0b2:	50a3      	str	r3, [r4, r2]
 800b0b4:	e7ab      	b.n	800b00e <_malloc_r+0x22>
 800b0b6:	42a3      	cmp	r3, r4
 800b0b8:	6862      	ldr	r2, [r4, #4]
 800b0ba:	d1dd      	bne.n	800b078 <_malloc_r+0x8c>
 800b0bc:	f8c8 2000 	str.w	r2, [r8]
 800b0c0:	e7ec      	b.n	800b09c <_malloc_r+0xb0>
 800b0c2:	4623      	mov	r3, r4
 800b0c4:	6864      	ldr	r4, [r4, #4]
 800b0c6:	e7ac      	b.n	800b022 <_malloc_r+0x36>
 800b0c8:	4634      	mov	r4, r6
 800b0ca:	6876      	ldr	r6, [r6, #4]
 800b0cc:	e7b4      	b.n	800b038 <_malloc_r+0x4c>
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	e7cc      	b.n	800b06c <_malloc_r+0x80>
 800b0d2:	230c      	movs	r3, #12
 800b0d4:	603b      	str	r3, [r7, #0]
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	f000 f80e 	bl	800b0f8 <__malloc_unlock>
 800b0dc:	e797      	b.n	800b00e <_malloc_r+0x22>
 800b0de:	6025      	str	r5, [r4, #0]
 800b0e0:	e7dc      	b.n	800b09c <_malloc_r+0xb0>
 800b0e2:	605b      	str	r3, [r3, #4]
 800b0e4:	deff      	udf	#255	; 0xff
 800b0e6:	bf00      	nop
 800b0e8:	20002114 	.word	0x20002114

0800b0ec <__malloc_lock>:
 800b0ec:	4801      	ldr	r0, [pc, #4]	; (800b0f4 <__malloc_lock+0x8>)
 800b0ee:	f000 b84b 	b.w	800b188 <__retarget_lock_acquire_recursive>
 800b0f2:	bf00      	nop
 800b0f4:	20002258 	.word	0x20002258

0800b0f8 <__malloc_unlock>:
 800b0f8:	4801      	ldr	r0, [pc, #4]	; (800b100 <__malloc_unlock+0x8>)
 800b0fa:	f000 b846 	b.w	800b18a <__retarget_lock_release_recursive>
 800b0fe:	bf00      	nop
 800b100:	20002258 	.word	0x20002258

0800b104 <memset>:
 800b104:	4402      	add	r2, r0
 800b106:	4603      	mov	r3, r0
 800b108:	4293      	cmp	r3, r2
 800b10a:	d100      	bne.n	800b10e <memset+0xa>
 800b10c:	4770      	bx	lr
 800b10e:	f803 1b01 	strb.w	r1, [r3], #1
 800b112:	e7f9      	b.n	800b108 <memset+0x4>

0800b114 <_sbrk_r>:
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	4d06      	ldr	r5, [pc, #24]	; (800b130 <_sbrk_r+0x1c>)
 800b118:	2300      	movs	r3, #0
 800b11a:	4604      	mov	r4, r0
 800b11c:	4608      	mov	r0, r1
 800b11e:	602b      	str	r3, [r5, #0]
 800b120:	f7f6 f8d0 	bl	80012c4 <_sbrk>
 800b124:	1c43      	adds	r3, r0, #1
 800b126:	d102      	bne.n	800b12e <_sbrk_r+0x1a>
 800b128:	682b      	ldr	r3, [r5, #0]
 800b12a:	b103      	cbz	r3, 800b12e <_sbrk_r+0x1a>
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	bd38      	pop	{r3, r4, r5, pc}
 800b130:	20002254 	.word	0x20002254

0800b134 <__errno>:
 800b134:	4b01      	ldr	r3, [pc, #4]	; (800b13c <__errno+0x8>)
 800b136:	6818      	ldr	r0, [r3, #0]
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	20000178 	.word	0x20000178

0800b140 <__libc_init_array>:
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	4d0d      	ldr	r5, [pc, #52]	; (800b178 <__libc_init_array+0x38>)
 800b144:	4c0d      	ldr	r4, [pc, #52]	; (800b17c <__libc_init_array+0x3c>)
 800b146:	1b64      	subs	r4, r4, r5
 800b148:	10a4      	asrs	r4, r4, #2
 800b14a:	2600      	movs	r6, #0
 800b14c:	42a6      	cmp	r6, r4
 800b14e:	d109      	bne.n	800b164 <__libc_init_array+0x24>
 800b150:	4d0b      	ldr	r5, [pc, #44]	; (800b180 <__libc_init_array+0x40>)
 800b152:	4c0c      	ldr	r4, [pc, #48]	; (800b184 <__libc_init_array+0x44>)
 800b154:	f000 f866 	bl	800b224 <_init>
 800b158:	1b64      	subs	r4, r4, r5
 800b15a:	10a4      	asrs	r4, r4, #2
 800b15c:	2600      	movs	r6, #0
 800b15e:	42a6      	cmp	r6, r4
 800b160:	d105      	bne.n	800b16e <__libc_init_array+0x2e>
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	f855 3b04 	ldr.w	r3, [r5], #4
 800b168:	4798      	blx	r3
 800b16a:	3601      	adds	r6, #1
 800b16c:	e7ee      	b.n	800b14c <__libc_init_array+0xc>
 800b16e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b172:	4798      	blx	r3
 800b174:	3601      	adds	r6, #1
 800b176:	e7f2      	b.n	800b15e <__libc_init_array+0x1e>
 800b178:	0800b2e0 	.word	0x0800b2e0
 800b17c:	0800b2e0 	.word	0x0800b2e0
 800b180:	0800b2e0 	.word	0x0800b2e0
 800b184:	0800b2e4 	.word	0x0800b2e4

0800b188 <__retarget_lock_acquire_recursive>:
 800b188:	4770      	bx	lr

0800b18a <__retarget_lock_release_recursive>:
 800b18a:	4770      	bx	lr

0800b18c <_free_r>:
 800b18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b18e:	2900      	cmp	r1, #0
 800b190:	d044      	beq.n	800b21c <_free_r+0x90>
 800b192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b196:	9001      	str	r0, [sp, #4]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f1a1 0404 	sub.w	r4, r1, #4
 800b19e:	bfb8      	it	lt
 800b1a0:	18e4      	addlt	r4, r4, r3
 800b1a2:	f7ff ffa3 	bl	800b0ec <__malloc_lock>
 800b1a6:	4a1e      	ldr	r2, [pc, #120]	; (800b220 <_free_r+0x94>)
 800b1a8:	9801      	ldr	r0, [sp, #4]
 800b1aa:	6813      	ldr	r3, [r2, #0]
 800b1ac:	b933      	cbnz	r3, 800b1bc <_free_r+0x30>
 800b1ae:	6063      	str	r3, [r4, #4]
 800b1b0:	6014      	str	r4, [r2, #0]
 800b1b2:	b003      	add	sp, #12
 800b1b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1b8:	f7ff bf9e 	b.w	800b0f8 <__malloc_unlock>
 800b1bc:	42a3      	cmp	r3, r4
 800b1be:	d908      	bls.n	800b1d2 <_free_r+0x46>
 800b1c0:	6825      	ldr	r5, [r4, #0]
 800b1c2:	1961      	adds	r1, r4, r5
 800b1c4:	428b      	cmp	r3, r1
 800b1c6:	bf01      	itttt	eq
 800b1c8:	6819      	ldreq	r1, [r3, #0]
 800b1ca:	685b      	ldreq	r3, [r3, #4]
 800b1cc:	1949      	addeq	r1, r1, r5
 800b1ce:	6021      	streq	r1, [r4, #0]
 800b1d0:	e7ed      	b.n	800b1ae <_free_r+0x22>
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	b10b      	cbz	r3, 800b1dc <_free_r+0x50>
 800b1d8:	42a3      	cmp	r3, r4
 800b1da:	d9fa      	bls.n	800b1d2 <_free_r+0x46>
 800b1dc:	6811      	ldr	r1, [r2, #0]
 800b1de:	1855      	adds	r5, r2, r1
 800b1e0:	42a5      	cmp	r5, r4
 800b1e2:	d10b      	bne.n	800b1fc <_free_r+0x70>
 800b1e4:	6824      	ldr	r4, [r4, #0]
 800b1e6:	4421      	add	r1, r4
 800b1e8:	1854      	adds	r4, r2, r1
 800b1ea:	42a3      	cmp	r3, r4
 800b1ec:	6011      	str	r1, [r2, #0]
 800b1ee:	d1e0      	bne.n	800b1b2 <_free_r+0x26>
 800b1f0:	681c      	ldr	r4, [r3, #0]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	6053      	str	r3, [r2, #4]
 800b1f6:	440c      	add	r4, r1
 800b1f8:	6014      	str	r4, [r2, #0]
 800b1fa:	e7da      	b.n	800b1b2 <_free_r+0x26>
 800b1fc:	d902      	bls.n	800b204 <_free_r+0x78>
 800b1fe:	230c      	movs	r3, #12
 800b200:	6003      	str	r3, [r0, #0]
 800b202:	e7d6      	b.n	800b1b2 <_free_r+0x26>
 800b204:	6825      	ldr	r5, [r4, #0]
 800b206:	1961      	adds	r1, r4, r5
 800b208:	428b      	cmp	r3, r1
 800b20a:	bf04      	itt	eq
 800b20c:	6819      	ldreq	r1, [r3, #0]
 800b20e:	685b      	ldreq	r3, [r3, #4]
 800b210:	6063      	str	r3, [r4, #4]
 800b212:	bf04      	itt	eq
 800b214:	1949      	addeq	r1, r1, r5
 800b216:	6021      	streq	r1, [r4, #0]
 800b218:	6054      	str	r4, [r2, #4]
 800b21a:	e7ca      	b.n	800b1b2 <_free_r+0x26>
 800b21c:	b003      	add	sp, #12
 800b21e:	bd30      	pop	{r4, r5, pc}
 800b220:	20002114 	.word	0x20002114

0800b224 <_init>:
 800b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b226:	bf00      	nop
 800b228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22a:	bc08      	pop	{r3}
 800b22c:	469e      	mov	lr, r3
 800b22e:	4770      	bx	lr

0800b230 <_fini>:
 800b230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b232:	bf00      	nop
 800b234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b236:	bc08      	pop	{r3}
 800b238:	469e      	mov	lr, r3
 800b23a:	4770      	bx	lr
