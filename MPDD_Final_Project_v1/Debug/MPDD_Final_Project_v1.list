
MPDD_Final_Project_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000814c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  0800831c  0800831c  0001831c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b64  08008b64  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008b64  08008b64  00018b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b6c  08008b6c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b6c  08008b6c  00018b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b70  08008b70  00018b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dc64  2000008c  08008c00  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000dcf0  08008c00  0002dcf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011bd5  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029e6  00000000  00000000  00031cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  000346c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f1a  00000000  00000000  000354d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001406c  00000000  00000000  0005b3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea54a  00000000  00000000  0006f45e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000ad9  00000000  00000000  001599a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ed8  00000000  00000000  0015a484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0015e35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008304 	.word	0x08008304

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	08008304 	.word	0x08008304

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005ce:	f002 fef3 	bl	80033b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005da:	f002 feed 	bl	80033b8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 80005de:	1df9      	adds	r1, r7, #7
 80005e0:	2300      	movs	r3, #0
 80005e2:	2201      	movs	r2, #1
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <ILI9163_writeCommand+0x48>)
 80005e6:	f005 f908 	bl	80057fa <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005f2:	f002 fee1 	bl	80033b8 <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020400 	.word	0x40020400
 8000604:	2000a134 	.word	0x2000a134

08000608 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <ILI9163_writeData+0x44>)
 800061a:	f002 fecd 	bl	80033b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <ILI9163_writeData+0x44>)
 8000626:	f002 fec7 	bl	80033b8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 800062a:	1df9      	adds	r1, r7, #7
 800062c:	2300      	movs	r3, #0
 800062e:	2201      	movs	r2, #1
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <ILI9163_writeData+0x48>)
 8000632:	f005 f8e2 	bl	80057fa <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <ILI9163_writeData+0x44>)
 800063e:	f002 febb 	bl	80033b8 <HAL_GPIO_WritePin>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40020400 	.word	0x40020400
 8000650:	2000a134 	.word	0x2000a134

08000654 <ILI9163_writeData16>:

void ILI9163_writeData16(uint16_t word) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	4810      	ldr	r0, [pc, #64]	; (80006a8 <ILI9163_writeData16+0x54>)
 8000666:	f002 fea7 	bl	80033b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <ILI9163_writeData16+0x54>)
 8000672:	f002 fea1 	bl	80033b8 <HAL_GPIO_WritePin>

	uint8_t data [2] = {(word >> 8) & 0x00FF, word & 0x00FF};
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	b29b      	uxth	r3, r3
 800067c:	b2db      	uxtb	r3, r3
 800067e:	733b      	strb	r3, [r7, #12]
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&DISP_SPI, data, 2, 0);
 8000686:	f107 010c 	add.w	r1, r7, #12
 800068a:	2300      	movs	r3, #0
 800068c:	2202      	movs	r2, #2
 800068e:	4807      	ldr	r0, [pc, #28]	; (80006ac <ILI9163_writeData16+0x58>)
 8000690:	f005 f8b3 	bl	80057fa <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <ILI9163_writeData16+0x54>)
 800069c:	f002 fe8c 	bl	80033b8 <HAL_GPIO_WritePin>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40020400 	.word	0x40020400
 80006ac:	2000a134 	.word	0x2000a134

080006b0 <ILI9163_setAddress>:

void ILI9163_setAddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4604      	mov	r4, r0
 80006b8:	4608      	mov	r0, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	461a      	mov	r2, r3
 80006be:	4623      	mov	r3, r4
 80006c0:	80fb      	strh	r3, [r7, #6]
 80006c2:	4603      	mov	r3, r0
 80006c4:	80bb      	strh	r3, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	807b      	strh	r3, [r7, #2]
 80006ca:	4613      	mov	r3, r2
 80006cc:	803b      	strh	r3, [r7, #0]
	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 80006ce:	202a      	movs	r0, #42	; 0x2a
 80006d0:	f7ff ff74 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData16(x1);
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffbc 	bl	8000654 <ILI9163_writeData16>
	ILI9163_writeData16(x2);
 80006dc:	887b      	ldrh	r3, [r7, #2]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffb8 	bl	8000654 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80006e4:	202b      	movs	r0, #43	; 0x2b
 80006e6:	f7ff ff69 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData16(y1);
 80006ea:	88bb      	ldrh	r3, [r7, #4]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffb1 	bl	8000654 <ILI9163_writeData16>
	ILI9163_writeData16(y2);
 80006f2:	883b      	ldrh	r3, [r7, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ffad 	bl	8000654 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80006fa:	202c      	movs	r0, #44	; 0x2c
 80006fc:	f7ff ff5e 	bl	80005bc <ILI9163_writeCommand>
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	bd90      	pop	{r4, r7, pc}

08000708 <ILI9163_reset>:

void ILI9163_reset(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000712:	4808      	ldr	r0, [pc, #32]	; (8000734 <ILI9163_reset+0x2c>)
 8000714:	f002 fe50 	bl	80033b8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000718:	2032      	movs	r0, #50	; 0x32
 800071a:	f001 ff49 	bl	80025b0 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000724:	4803      	ldr	r0, [pc, #12]	; (8000734 <ILI9163_reset+0x2c>)
 8000726:	f002 fe47 	bl	80033b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800072a:	2064      	movs	r0, #100	; 0x64
 800072c:	f001 ff40 	bl	80025b0 <HAL_Delay>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40020c00 	.word	0x40020c00

08000738 <ILI9163_init>:

void ILI9163_init(int rotation) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	486e      	ldr	r0, [pc, #440]	; (8000900 <ILI9163_init+0x1c8>)
 8000748:	f002 fe36 	bl	80033b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000752:	486c      	ldr	r0, [pc, #432]	; (8000904 <ILI9163_init+0x1cc>)
 8000754:	f002 fe30 	bl	80033b8 <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 8000758:	f7ff ffd6 	bl	8000708 <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 800075c:	2011      	movs	r0, #17
 800075e:	f7ff ff2d 	bl	80005bc <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 8000762:	2005      	movs	r0, #5
 8000764:	f001 ff24 	bl	80025b0 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 8000768:	203a      	movs	r0, #58	; 0x3a
 800076a:	f7ff ff27 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 800076e:	2005      	movs	r0, #5
 8000770:	f7ff ff4a 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 8000774:	2026      	movs	r0, #38	; 0x26
 8000776:	f7ff ff21 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 800077a:	2004      	movs	r0, #4
 800077c:	f7ff ff44 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8000780:	20f2      	movs	r0, #242	; 0xf2
 8000782:	f7ff ff1b 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff ff3e 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 800078c:	20e0      	movs	r0, #224	; 0xe0
 800078e:	f7ff ff15 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 8000792:	203f      	movs	r0, #63	; 0x3f
 8000794:	f7ff ff38 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 8000798:	2025      	movs	r0, #37	; 0x25
 800079a:	f7ff ff35 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 800079e:	201c      	movs	r0, #28
 80007a0:	f7ff ff32 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 80007a4:	201e      	movs	r0, #30
 80007a6:	f7ff ff2f 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007aa:	2020      	movs	r0, #32
 80007ac:	f7ff ff2c 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 80007b0:	2012      	movs	r0, #18
 80007b2:	f7ff ff29 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 80007b6:	202a      	movs	r0, #42	; 0x2a
 80007b8:	f7ff ff26 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 80007bc:	2090      	movs	r0, #144	; 0x90
 80007be:	f7ff ff23 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 80007c2:	2024      	movs	r0, #36	; 0x24
 80007c4:	f7ff ff20 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 80007c8:	2011      	movs	r0, #17
 80007ca:	f7ff ff1d 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ff1a 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff ff17 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff14 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ff11 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff ff0e 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 80007ec:	20e1      	movs	r0, #225	; 0xe1
 80007ee:	f7ff fee5 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 80007f2:	2020      	movs	r0, #32
 80007f4:	f7ff ff08 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007f8:	2020      	movs	r0, #32
 80007fa:	f7ff ff05 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007fe:	2020      	movs	r0, #32
 8000800:	f7ff ff02 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8000804:	2020      	movs	r0, #32
 8000806:	f7ff feff 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 800080a:	2005      	movs	r0, #5
 800080c:	f7ff fefc 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fef9 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 8000816:	2015      	movs	r0, #21
 8000818:	f7ff fef6 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 800081c:	20a7      	movs	r0, #167	; 0xa7
 800081e:	f7ff fef3 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 8000822:	203d      	movs	r0, #61	; 0x3d
 8000824:	f7ff fef0 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 8000828:	2018      	movs	r0, #24
 800082a:	f7ff feed 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800082e:	2025      	movs	r0, #37	; 0x25
 8000830:	f7ff feea 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 8000834:	202a      	movs	r0, #42	; 0x2a
 8000836:	f7ff fee7 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 800083a:	202b      	movs	r0, #43	; 0x2b
 800083c:	f7ff fee4 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 8000840:	202b      	movs	r0, #43	; 0x2b
 8000842:	f7ff fee1 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 8000846:	203a      	movs	r0, #58	; 0x3a
 8000848:	f7ff fede 	bl	8000608 <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 800084c:	20b1      	movs	r0, #177	; 0xb1
 800084e:	f7ff feb5 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000852:	2008      	movs	r0, #8
 8000854:	f7ff fed8 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8000858:	2002      	movs	r0, #2
 800085a:	f7ff fed5 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 800085e:	20b2      	movs	r0, #178	; 0xb2
 8000860:	f7ff feac 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000864:	2008      	movs	r0, #8
 8000866:	f7ff fecf 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800086a:	2002      	movs	r0, #2
 800086c:	f7ff fecc 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8000870:	20b3      	movs	r0, #179	; 0xb3
 8000872:	f7ff fea3 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000876:	2008      	movs	r0, #8
 8000878:	f7ff fec6 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800087c:	2002      	movs	r0, #2
 800087e:	f7ff fec3 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8000882:	20b4      	movs	r0, #180	; 0xb4
 8000884:	f7ff fe9a 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8000888:	2007      	movs	r0, #7
 800088a:	f7ff febd 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 800088e:	202a      	movs	r0, #42	; 0x2a
 8000890:	f7ff fe94 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff feb7 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff feb4 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff feb1 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 80008a6:	207f      	movs	r0, #127	; 0x7f
 80008a8:	f7ff feae 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80008ac:	202b      	movs	r0, #43	; 0x2b
 80008ae:	f7ff fe85 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fea8 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff fea5 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff fea2 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 80008c4:	209f      	movs	r0, #159	; 0x9f
 80008c6:	f7ff fe9f 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 80008ca:	2036      	movs	r0, #54	; 0x36
 80008cc:	f7ff fe76 	bl	80005bc <ILI9163_writeCommand>
	if(rotation)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d003      	beq.n	80008de <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 80008d6:	20a8      	movs	r0, #168	; 0xa8
 80008d8:	f7ff fe96 	bl	8000608 <ILI9163_writeData>
 80008dc:	e002      	b.n	80008e4 <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 80008de:	2068      	movs	r0, #104	; 0x68
 80008e0:	f7ff fe92 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 80008e4:	2013      	movs	r0, #19
 80008e6:	f7ff fe69 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 80008ea:	2029      	movs	r0, #41	; 0x29
 80008ec:	f7ff fe66 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80008f0:	202c      	movs	r0, #44	; 0x2c
 80008f2:	f7ff fe63 	bl	80005bc <ILI9163_writeCommand>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400
 8000904:	40020c00 	.word	0x40020c00

08000908 <ILI9163_newFrame>:

void ILI9163_newFrame()
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	e008      	b.n	8000926 <ILI9163_newFrame+0x1e>
		frameBuffer[i] = 0xFFFF;
 8000914:	4a09      	ldr	r2, [pc, #36]	; (800093c <ILI9163_newFrame+0x34>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800091c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800092c:	d3f2      	bcc.n	8000914 <ILI9163_newFrame+0xc>

}
 800092e:	bf00      	nop
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	200000a8 	.word	0x200000a8

08000940 <ILI9163_render>:

void ILI9163_render()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	ILI9163_setAddress(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT);
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	22a0      	movs	r2, #160	; 0xa0
 8000948:	2100      	movs	r1, #0
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff feb0 	bl	80006b0 <ILI9163_setAddress>
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <ILI9163_render+0x4c>)
 8000958:	f002 fd2e 	bl	80033b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000962:	480a      	ldr	r0, [pc, #40]	; (800098c <ILI9163_render+0x4c>)
 8000964:	f002 fd28 	bl	80033b8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&DISP_SPI, (uint8_t*)frameBuffer, BUFSIZE*2);
 8000968:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800096c:	4908      	ldr	r1, [pc, #32]	; (8000990 <ILI9163_render+0x50>)
 800096e:	4809      	ldr	r0, [pc, #36]	; (8000994 <ILI9163_render+0x54>)
 8000970:	f005 f8b2 	bl	8005ad8 <HAL_SPI_Transmit_DMA>

	SPI_DMA_FL=0;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <ILI9163_render+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
while(!SPI_DMA_FL) {} // This can be commented out if your thread sends new frames slower than SPI transmits them. Otherwise, memory havoc. See README.md
 800097a:	bf00      	nop
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <ILI9163_render+0x58>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0fb      	beq.n	800097c <ILI9163_render+0x3c>
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020400 	.word	0x40020400
 8000990:	200000a8 	.word	0x200000a8
 8000994:	2000a134 	.word	0x2000a134
 8000998:	2000a280 	.word	0x2000a280

0800099c <ILI9163_drawPixel>:

void ILI9163_drawPixel(uint8_t x, uint8_t y, uint16_t color) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
 80009a6:	460b      	mov	r3, r1
 80009a8:	71bb      	strb	r3, [r7, #6]
 80009aa:	4613      	mov	r3, r2
 80009ac:	80bb      	strh	r3, [r7, #4]
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b9f      	cmp	r3, #159	; 0x9f
 80009b2:	d80f      	bhi.n	80009d4 <ILI9163_drawPixel+0x38>
 80009b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0b      	blt.n	80009d4 <ILI9163_drawPixel+0x38>
	frameBuffer[((x)+(y*ILI9163_WIDTH))] = color;// >> 8;
 80009bc:	79f9      	ldrb	r1, [r7, #7]
 80009be:	79ba      	ldrb	r2, [r7, #6]
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	015b      	lsls	r3, r3, #5
 80009c8:	440b      	add	r3, r1
 80009ca:	4905      	ldr	r1, [pc, #20]	; (80009e0 <ILI9163_drawPixel+0x44>)
 80009cc:	88ba      	ldrh	r2, [r7, #4]
 80009ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80009d2:	e000      	b.n	80009d6 <ILI9163_drawPixel+0x3a>
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 80009d4:	bf00      	nop
}
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	200000a8 	.word	0x200000a8

080009e4 <ILI9163_drawChar>:

void ILI9163_fillDisplay(uint16_t color) {
	ILI9163_fillRect(0,0, ILI9163_WIDTH, ILI9163_HEIGHT, color);
}

void ILI9163_drawChar(uint8_t x, uint8_t y, char ch, FontDef font, uint16_t color) {
 80009e4:	b082      	sub	sp, #8
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b084      	sub	sp, #16
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	61fb      	str	r3, [r7, #28]
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	460b      	mov	r3, r1
 80009f4:	71bb      	strb	r3, [r7, #6]
 80009f6:	4613      	mov	r3, r2
 80009f8:	717b      	strb	r3, [r7, #5]
	uint16_t i, b, j;
	for(i = 0; i < font.height; i++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	81fb      	strh	r3, [r7, #14]
 80009fe:	e02f      	b.n	8000a60 <ILI9163_drawChar+0x7c>
		b = font.data[(ch - 32) * font.height + i];
 8000a00:	6a3a      	ldr	r2, [r7, #32]
 8000a02:	797b      	ldrb	r3, [r7, #5]
 8000a04:	3b20      	subs	r3, #32
 8000a06:	7f79      	ldrb	r1, [r7, #29]
 8000a08:	fb03 f101 	mul.w	r1, r3, r1
 8000a0c:	89fb      	ldrh	r3, [r7, #14]
 8000a0e:	440b      	add	r3, r1
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	817b      	strh	r3, [r7, #10]
		for(j = 0; j < font.width; j++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	81bb      	strh	r3, [r7, #12]
 8000a1c:	e018      	b.n	8000a50 <ILI9163_drawChar+0x6c>
			if((b << j) & 0x8000)  {
 8000a1e:	897a      	ldrh	r2, [r7, #10]
 8000a20:	89bb      	ldrh	r3, [r7, #12]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00d      	beq.n	8000a4a <ILI9163_drawChar+0x66>
				ILI9163_drawPixel(x + j, y + i, color);
 8000a2e:	89bb      	ldrh	r3, [r7, #12]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4413      	add	r3, r2
 8000a36:	b2d8      	uxtb	r0, r3
 8000a38:	89fb      	ldrh	r3, [r7, #14]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	4413      	add	r3, r2
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	f7ff ffa9 	bl	800099c <ILI9163_drawPixel>
		for(j = 0; j < font.width; j++) {
 8000a4a:	89bb      	ldrh	r3, [r7, #12]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	81bb      	strh	r3, [r7, #12]
 8000a50:	7f3b      	ldrb	r3, [r7, #28]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	89ba      	ldrh	r2, [r7, #12]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d3e1      	bcc.n	8000a1e <ILI9163_drawChar+0x3a>
	for(i = 0; i < font.height; i++) {
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	81fb      	strh	r3, [r7, #14]
 8000a60:	7f7b      	ldrb	r3, [r7, #29]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	89fa      	ldrh	r2, [r7, #14]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d3ca      	bcc.n	8000a00 <ILI9163_drawChar+0x1c>
			}
		}
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a76:	b002      	add	sp, #8
 8000a78:	4770      	bx	lr

08000a7a <ILI9163_drawString>:

void ILI9163_drawString(uint8_t x, uint8_t y, FontDef font, uint16_t color, const char *string) {
 8000a7a:	b590      	push	{r4, r7, lr}
 8000a7c:	b087      	sub	sp, #28
 8000a7e:	af02      	add	r7, sp, #8
 8000a80:	4604      	mov	r4, r0
 8000a82:	4608      	mov	r0, r1
 8000a84:	1d39      	adds	r1, r7, #4
 8000a86:	e881 000c 	stmia.w	r1, {r2, r3}
 8000a8a:	4623      	mov	r3, r4
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	4603      	mov	r3, r0
 8000a90:	73bb      	strb	r3, [r7, #14]
	while(*string) {
 8000a92:	e029      	b.n	8000ae8 <ILI9163_drawString+0x6e>
		if(x + font.width >= ILI9163_WIDTH) {
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	793a      	ldrb	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	2b9f      	cmp	r3, #159	; 0x9f
 8000a9c:	dd12      	ble.n	8000ac4 <ILI9163_drawString+0x4a>
			x = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]
			y += font.height;
 8000aa2:	797a      	ldrb	r2, [r7, #5]
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	73bb      	strb	r3, [r7, #14]
			if(y + font.height >= ILI9163_HEIGHT)
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	797a      	ldrb	r2, [r7, #5]
 8000aae:	4413      	add	r3, r2
 8000ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab2:	dc1e      	bgt.n	8000af2 <ILI9163_drawString+0x78>
				break;

			if(*string == ' ') {
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b20      	cmp	r3, #32
 8000aba:	d103      	bne.n	8000ac4 <ILI9163_drawString+0x4a>
				// skip spaces in the beginning of the new line
				string++;
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	3301      	adds	r3, #1
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8000ac2:	e011      	b.n	8000ae8 <ILI9163_drawString+0x6e>
			}
		}

		ILI9163_drawChar(x, y, *string, font, color);
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	7bb9      	ldrb	r1, [r7, #14]
 8000aca:	7bf8      	ldrb	r0, [r7, #15]
 8000acc:	8c3b      	ldrh	r3, [r7, #32]
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f7ff ff85 	bl	80009e4 <ILI9163_drawChar>

		x += font.width;
 8000ada:	793a      	ldrb	r2, [r7, #4]
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	4413      	add	r3, r2
 8000ae0:	73fb      	strb	r3, [r7, #15]
		string++;
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
	while(*string) {
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1d1      	bne.n	8000a94 <ILI9163_drawString+0x1a>
	}
}
 8000af0:	e000      	b.n	8000af4 <ILI9163_drawString+0x7a>
				break;
 8000af2:	bf00      	nop
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd90      	pop	{r4, r7, pc}

08000afc <ILI9163_drawStringF>:

void ILI9163_drawStringF(uint8_t x, uint8_t y, FontDef font, uint16_t color, char *szFormat, ...) {
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b099      	sub	sp, #100	; 0x64
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	4604      	mov	r4, r0
 8000b04:	4608      	mov	r0, r1
 8000b06:	1d39      	adds	r1, r7, #4
 8000b08:	e881 000c 	stmia.w	r1, {r2, r3}
 8000b0c:	4623      	mov	r3, r4
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	4603      	mov	r3, r0
 8000b12:	73bb      	strb	r3, [r7, #14]
	char szBuffer[64];
	va_list pArgs;
	va_start(pArgs, szFormat);
 8000b14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b18:	617b      	str	r3, [r7, #20]
	vsnprintf(szBuffer, 63, szFormat, pArgs);
 8000b1a:	f107 0018 	add.w	r0, r7, #24
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b22:	213f      	movs	r1, #63	; 0x3f
 8000b24:	f006 ff5c 	bl	80079e0 <vsniprintf>
	va_end(pArgs);

	ILI9163_drawString(x, y, font, color, szBuffer);
 8000b28:	7bb9      	ldrb	r1, [r7, #14]
 8000b2a:	7bf8      	ldrb	r0, [r7, #15]
 8000b2c:	f107 0318 	add.w	r3, r7, #24
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	cb0c      	ldmia	r3, {r2, r3}
 8000b3c:	f7ff ff9d 	bl	8000a7a <ILI9163_drawString>
}
 8000b40:	bf00      	nop
 8000b42:	375c      	adds	r7, #92	; 0x5c
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd90      	pop	{r4, r7, pc}

08000b48 <updateScreen>:

char writeString[50] = "";
extern flag;
int counter = 0;
int pos = 5;
void updateScreen(char* writeString) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	6078      	str	r0, [r7, #4]
		ILI9163_newFrame();
 8000b50:	f7ff feda 	bl	8000908 <ILI9163_newFrame>
		ILI9163_drawStringF(5, 10, Font_7x10, BLACK, writeString);
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <updateScreen+0x2c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	ca0c      	ldmia	r2, {r2, r3}
 8000b60:	210a      	movs	r1, #10
 8000b62:	2005      	movs	r0, #5
 8000b64:	f7ff ffca 	bl	8000afc <ILI9163_drawStringF>
		ILI9163_render();
 8000b68:	f7ff feea 	bl	8000940 <ILI9163_render>
	}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000000 	.word	0x20000000

08000b78 <key_pad>:

void key_pad(char keyChar){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	switch(keyChar) {
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	3b23      	subs	r3, #35	; 0x23
 8000b86:	2b34      	cmp	r3, #52	; 0x34
 8000b88:	f200 8506 	bhi.w	8001598 <key_pad+0xa20>
 8000b8c:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <key_pad+0x1c>)
 8000b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b92:	bf00      	nop
 8000b94:	08001505 	.word	0x08001505
 8000b98:	08001599 	.word	0x08001599
 8000b9c:	08001599 	.word	0x08001599
 8000ba0:	08001599 	.word	0x08001599
 8000ba4:	08001599 	.word	0x08001599
 8000ba8:	08001599 	.word	0x08001599
 8000bac:	08001599 	.word	0x08001599
 8000bb0:	08001591 	.word	0x08001591
 8000bb4:	08001599 	.word	0x08001599
 8000bb8:	08001599 	.word	0x08001599
 8000bbc:	08001599 	.word	0x08001599
 8000bc0:	08001599 	.word	0x08001599
 8000bc4:	08001599 	.word	0x08001599
 8000bc8:	08001599 	.word	0x08001599
 8000bcc:	08001599 	.word	0x08001599
 8000bd0:	08001599 	.word	0x08001599
 8000bd4:	08001599 	.word	0x08001599
 8000bd8:	08001599 	.word	0x08001599
 8000bdc:	08001599 	.word	0x08001599
 8000be0:	08001599 	.word	0x08001599
 8000be4:	08001599 	.word	0x08001599
 8000be8:	08001599 	.word	0x08001599
 8000bec:	08001599 	.word	0x08001599
 8000bf0:	08001599 	.word	0x08001599
 8000bf4:	08001599 	.word	0x08001599
 8000bf8:	08001599 	.word	0x08001599
 8000bfc:	08001599 	.word	0x08001599
 8000c00:	08001599 	.word	0x08001599
 8000c04:	08001599 	.word	0x08001599
 8000c08:	08001599 	.word	0x08001599
 8000c0c:	08000c69 	.word	0x08000c69
 8000c10:	08001549 	.word	0x08001549
 8000c14:	08001579 	.word	0x08001579
 8000c18:	08000d5b 	.word	0x08000d5b
 8000c1c:	08001599 	.word	0x08001599
 8000c20:	08001599 	.word	0x08001599
 8000c24:	08000e4b 	.word	0x08000e4b
 8000c28:	08001599 	.word	0x08001599
 8000c2c:	08001599 	.word	0x08001599
 8000c30:	08000f65 	.word	0x08000f65
 8000c34:	08001599 	.word	0x08001599
 8000c38:	08001599 	.word	0x08001599
 8000c3c:	08001055 	.word	0x08001055
 8000c40:	08001599 	.word	0x08001599
 8000c44:	08001599 	.word	0x08001599
 8000c48:	08001145 	.word	0x08001145
 8000c4c:	08001599 	.word	0x08001599
 8000c50:	08001599 	.word	0x08001599
 8000c54:	08001599 	.word	0x08001599
 8000c58:	080012ad 	.word	0x080012ad
 8000c5c:	08001599 	.word	0x08001599
 8000c60:	08001599 	.word	0x08001599
 8000c64:	0800139d 	.word	0x0800139d
				case 'A':
					if(counter == 0){
 8000c68:	4ba0      	ldr	r3, [pc, #640]	; (8000eec <key_pad+0x374>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d123      	bne.n	8000cb8 <key_pad+0x140>
						if(strlen(writeString) > 0) {
 8000c70:	4b9f      	ldr	r3, [pc, #636]	; (8000ef0 <key_pad+0x378>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00a      	beq.n	8000c8e <key_pad+0x116>
							writeString[strlen(writeString) - 1] = '\0';
 8000c78:	489d      	ldr	r0, [pc, #628]	; (8000ef0 <key_pad+0x378>)
 8000c7a:	f7ff fac9 	bl	8000210 <strlen>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	3b01      	subs	r3, #1
 8000c82:	4a9b      	ldr	r2, [pc, #620]	; (8000ef0 <key_pad+0x378>)
 8000c84:	2100      	movs	r1, #0
 8000c86:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000c88:	4899      	ldr	r0, [pc, #612]	; (8000ef0 <key_pad+0x378>)
 8000c8a:	f7ff ff5d 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "A");
 8000c8e:	4898      	ldr	r0, [pc, #608]	; (8000ef0 <key_pad+0x378>)
 8000c90:	f7ff fabe 	bl	8000210 <strlen>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b95      	ldr	r3, [pc, #596]	; (8000ef0 <key_pad+0x378>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4995      	ldr	r1, [pc, #596]	; (8000ef4 <key_pad+0x37c>)
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000ca6:	4892      	ldr	r0, [pc, #584]	; (8000ef0 <key_pad+0x378>)
 8000ca8:	f7ff ff4e 	bl	8000b48 <updateScreen>
						counter ++;
 8000cac:	4b8f      	ldr	r3, [pc, #572]	; (8000eec <key_pad+0x374>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	4a8e      	ldr	r2, [pc, #568]	; (8000eec <key_pad+0x374>)
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	e04c      	b.n	8000d52 <key_pad+0x1da>

					}

					else if(counter == 1){
 8000cb8:	4b8c      	ldr	r3, [pc, #560]	; (8000eec <key_pad+0x374>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d123      	bne.n	8000d08 <key_pad+0x190>
						if(strlen(writeString) > 0) {
 8000cc0:	4b8b      	ldr	r3, [pc, #556]	; (8000ef0 <key_pad+0x378>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d00a      	beq.n	8000cde <key_pad+0x166>
							writeString[strlen(writeString) - 1] = '\0';
 8000cc8:	4889      	ldr	r0, [pc, #548]	; (8000ef0 <key_pad+0x378>)
 8000cca:	f7ff faa1 	bl	8000210 <strlen>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	4a87      	ldr	r2, [pc, #540]	; (8000ef0 <key_pad+0x378>)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000cd8:	4885      	ldr	r0, [pc, #532]	; (8000ef0 <key_pad+0x378>)
 8000cda:	f7ff ff35 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "B");
 8000cde:	4884      	ldr	r0, [pc, #528]	; (8000ef0 <key_pad+0x378>)
 8000ce0:	f7ff fa96 	bl	8000210 <strlen>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b81      	ldr	r3, [pc, #516]	; (8000ef0 <key_pad+0x378>)
 8000cea:	4413      	add	r3, r2
 8000cec:	4982      	ldr	r1, [pc, #520]	; (8000ef8 <key_pad+0x380>)
 8000cee:	461a      	mov	r2, r3
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000cf6:	487e      	ldr	r0, [pc, #504]	; (8000ef0 <key_pad+0x378>)
 8000cf8:	f7ff ff26 	bl	8000b48 <updateScreen>
						counter ++;
 8000cfc:	4b7b      	ldr	r3, [pc, #492]	; (8000eec <key_pad+0x374>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a7a      	ldr	r2, [pc, #488]	; (8000eec <key_pad+0x374>)
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e024      	b.n	8000d52 <key_pad+0x1da>
					}

					else if(counter == 2){
 8000d08:	4b78      	ldr	r3, [pc, #480]	; (8000eec <key_pad+0x374>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d120      	bne.n	8000d52 <key_pad+0x1da>
						if(strlen(writeString) > 0) {
 8000d10:	4b77      	ldr	r3, [pc, #476]	; (8000ef0 <key_pad+0x378>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00a      	beq.n	8000d2e <key_pad+0x1b6>
							writeString[strlen(writeString) - 1] = '\0';
 8000d18:	4875      	ldr	r0, [pc, #468]	; (8000ef0 <key_pad+0x378>)
 8000d1a:	f7ff fa79 	bl	8000210 <strlen>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	3b01      	subs	r3, #1
 8000d22:	4a73      	ldr	r2, [pc, #460]	; (8000ef0 <key_pad+0x378>)
 8000d24:	2100      	movs	r1, #0
 8000d26:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000d28:	4871      	ldr	r0, [pc, #452]	; (8000ef0 <key_pad+0x378>)
 8000d2a:	f7ff ff0d 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "C");
 8000d2e:	4870      	ldr	r0, [pc, #448]	; (8000ef0 <key_pad+0x378>)
 8000d30:	f7ff fa6e 	bl	8000210 <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b6d      	ldr	r3, [pc, #436]	; (8000ef0 <key_pad+0x378>)
 8000d3a:	4413      	add	r3, r2
 8000d3c:	496f      	ldr	r1, [pc, #444]	; (8000efc <key_pad+0x384>)
 8000d3e:	461a      	mov	r2, r3
 8000d40:	460b      	mov	r3, r1
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000d46:	486a      	ldr	r0, [pc, #424]	; (8000ef0 <key_pad+0x378>)
 8000d48:	f7ff fefe 	bl	8000b48 <updateScreen>
						counter = 0;
 8000d4c:	4b67      	ldr	r3, [pc, #412]	; (8000eec <key_pad+0x374>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	71fb      	strb	r3, [r7, #7]
					break;
 8000d56:	f000 bc1f 	b.w	8001598 <key_pad+0xa20>

				case 'D':
					if(counter == 0){
 8000d5a:	4b64      	ldr	r3, [pc, #400]	; (8000eec <key_pad+0x374>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d123      	bne.n	8000daa <key_pad+0x232>
						if(strlen(writeString) > 0) {
 8000d62:	4b63      	ldr	r3, [pc, #396]	; (8000ef0 <key_pad+0x378>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00a      	beq.n	8000d80 <key_pad+0x208>
							writeString[strlen(writeString) - 1] = '\0';
 8000d6a:	4861      	ldr	r0, [pc, #388]	; (8000ef0 <key_pad+0x378>)
 8000d6c:	f7ff fa50 	bl	8000210 <strlen>
 8000d70:	4603      	mov	r3, r0
 8000d72:	3b01      	subs	r3, #1
 8000d74:	4a5e      	ldr	r2, [pc, #376]	; (8000ef0 <key_pad+0x378>)
 8000d76:	2100      	movs	r1, #0
 8000d78:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000d7a:	485d      	ldr	r0, [pc, #372]	; (8000ef0 <key_pad+0x378>)
 8000d7c:	f7ff fee4 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "D");
 8000d80:	485b      	ldr	r0, [pc, #364]	; (8000ef0 <key_pad+0x378>)
 8000d82:	f7ff fa45 	bl	8000210 <strlen>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b59      	ldr	r3, [pc, #356]	; (8000ef0 <key_pad+0x378>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	495c      	ldr	r1, [pc, #368]	; (8000f00 <key_pad+0x388>)
 8000d90:	461a      	mov	r2, r3
 8000d92:	460b      	mov	r3, r1
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000d98:	4855      	ldr	r0, [pc, #340]	; (8000ef0 <key_pad+0x378>)
 8000d9a:	f7ff fed5 	bl	8000b48 <updateScreen>
						counter ++;
 8000d9e:	4b53      	ldr	r3, [pc, #332]	; (8000eec <key_pad+0x374>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a51      	ldr	r2, [pc, #324]	; (8000eec <key_pad+0x374>)
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e04c      	b.n	8000e44 <key_pad+0x2cc>
					}

					else if(counter == 1){
 8000daa:	4b50      	ldr	r3, [pc, #320]	; (8000eec <key_pad+0x374>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d123      	bne.n	8000dfa <key_pad+0x282>
						if(strlen(writeString) > 0) {
 8000db2:	4b4f      	ldr	r3, [pc, #316]	; (8000ef0 <key_pad+0x378>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00a      	beq.n	8000dd0 <key_pad+0x258>
							writeString[strlen(writeString) - 1] = '\0';
 8000dba:	484d      	ldr	r0, [pc, #308]	; (8000ef0 <key_pad+0x378>)
 8000dbc:	f7ff fa28 	bl	8000210 <strlen>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <key_pad+0x378>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000dca:	4849      	ldr	r0, [pc, #292]	; (8000ef0 <key_pad+0x378>)
 8000dcc:	f7ff febc 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "E");
 8000dd0:	4847      	ldr	r0, [pc, #284]	; (8000ef0 <key_pad+0x378>)
 8000dd2:	f7ff fa1d 	bl	8000210 <strlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <key_pad+0x378>)
 8000ddc:	4413      	add	r3, r2
 8000dde:	4949      	ldr	r1, [pc, #292]	; (8000f04 <key_pad+0x38c>)
 8000de0:	461a      	mov	r2, r3
 8000de2:	460b      	mov	r3, r1
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000de8:	4841      	ldr	r0, [pc, #260]	; (8000ef0 <key_pad+0x378>)
 8000dea:	f7ff fead 	bl	8000b48 <updateScreen>
						counter ++;
 8000dee:	4b3f      	ldr	r3, [pc, #252]	; (8000eec <key_pad+0x374>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	4a3d      	ldr	r2, [pc, #244]	; (8000eec <key_pad+0x374>)
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	e024      	b.n	8000e44 <key_pad+0x2cc>
					}

					else if(counter == 2){
 8000dfa:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <key_pad+0x374>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d120      	bne.n	8000e44 <key_pad+0x2cc>
						if(strlen(writeString) > 0) {
 8000e02:	4b3b      	ldr	r3, [pc, #236]	; (8000ef0 <key_pad+0x378>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00a      	beq.n	8000e20 <key_pad+0x2a8>
							writeString[strlen(writeString) - 1] = '\0';
 8000e0a:	4839      	ldr	r0, [pc, #228]	; (8000ef0 <key_pad+0x378>)
 8000e0c:	f7ff fa00 	bl	8000210 <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	3b01      	subs	r3, #1
 8000e14:	4a36      	ldr	r2, [pc, #216]	; (8000ef0 <key_pad+0x378>)
 8000e16:	2100      	movs	r1, #0
 8000e18:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000e1a:	4835      	ldr	r0, [pc, #212]	; (8000ef0 <key_pad+0x378>)
 8000e1c:	f7ff fe94 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "F");
 8000e20:	4833      	ldr	r0, [pc, #204]	; (8000ef0 <key_pad+0x378>)
 8000e22:	f7ff f9f5 	bl	8000210 <strlen>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <key_pad+0x378>)
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4936      	ldr	r1, [pc, #216]	; (8000f08 <key_pad+0x390>)
 8000e30:	461a      	mov	r2, r3
 8000e32:	460b      	mov	r3, r1
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000e38:	482d      	ldr	r0, [pc, #180]	; (8000ef0 <key_pad+0x378>)
 8000e3a:	f7ff fe85 	bl	8000b48 <updateScreen>
						counter = 0;
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <key_pad+0x374>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	71fb      	strb	r3, [r7, #7]
					break;
 8000e48:	e3a6      	b.n	8001598 <key_pad+0xa20>

				case 'G':
					if(counter == 0){
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <key_pad+0x374>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d123      	bne.n	8000e9a <key_pad+0x322>
						if(strlen(writeString) > 0) {
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <key_pad+0x378>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00a      	beq.n	8000e70 <key_pad+0x2f8>
							writeString[strlen(writeString) - 1] = '\0';
 8000e5a:	4825      	ldr	r0, [pc, #148]	; (8000ef0 <key_pad+0x378>)
 8000e5c:	f7ff f9d8 	bl	8000210 <strlen>
 8000e60:	4603      	mov	r3, r0
 8000e62:	3b01      	subs	r3, #1
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <key_pad+0x378>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000e6a:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <key_pad+0x378>)
 8000e6c:	f7ff fe6c 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "G");
 8000e70:	481f      	ldr	r0, [pc, #124]	; (8000ef0 <key_pad+0x378>)
 8000e72:	f7ff f9cd 	bl	8000210 <strlen>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <key_pad+0x378>)
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4923      	ldr	r1, [pc, #140]	; (8000f0c <key_pad+0x394>)
 8000e80:	461a      	mov	r2, r3
 8000e82:	460b      	mov	r3, r1
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000e88:	4819      	ldr	r0, [pc, #100]	; (8000ef0 <key_pad+0x378>)
 8000e8a:	f7ff fe5d 	bl	8000b48 <updateScreen>
						counter ++;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <key_pad+0x374>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	4a15      	ldr	r2, [pc, #84]	; (8000eec <key_pad+0x374>)
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e061      	b.n	8000f5e <key_pad+0x3e6>
					}

					else if(counter == 1){
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <key_pad+0x374>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d138      	bne.n	8000f14 <key_pad+0x39c>
						if(strlen(writeString) > 0) {
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <key_pad+0x378>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00a      	beq.n	8000ec0 <key_pad+0x348>
							writeString[strlen(writeString) - 1] = '\0';
 8000eaa:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <key_pad+0x378>)
 8000eac:	f7ff f9b0 	bl	8000210 <strlen>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <key_pad+0x378>)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <key_pad+0x378>)
 8000ebc:	f7ff fe44 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "H");
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <key_pad+0x378>)
 8000ec2:	f7ff f9a5 	bl	8000210 <strlen>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <key_pad+0x378>)
 8000ecc:	4413      	add	r3, r2
 8000ece:	4910      	ldr	r1, [pc, #64]	; (8000f10 <key_pad+0x398>)
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <key_pad+0x378>)
 8000eda:	f7ff fe35 	bl	8000b48 <updateScreen>
						counter ++;
 8000ede:	4b03      	ldr	r3, [pc, #12]	; (8000eec <key_pad+0x374>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a01      	ldr	r2, [pc, #4]	; (8000eec <key_pad+0x374>)
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	e039      	b.n	8000f5e <key_pad+0x3e6>
 8000eea:	bf00      	nop
 8000eec:	2000a0dc 	.word	0x2000a0dc
 8000ef0:	2000a0a8 	.word	0x2000a0a8
 8000ef4:	0800831c 	.word	0x0800831c
 8000ef8:	08008320 	.word	0x08008320
 8000efc:	08008324 	.word	0x08008324
 8000f00:	08008328 	.word	0x08008328
 8000f04:	0800832c 	.word	0x0800832c
 8000f08:	08008330 	.word	0x08008330
 8000f0c:	08008334 	.word	0x08008334
 8000f10:	08008338 	.word	0x08008338
					}

					else if(counter == 2){
 8000f14:	4b9f      	ldr	r3, [pc, #636]	; (8001194 <key_pad+0x61c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d120      	bne.n	8000f5e <key_pad+0x3e6>
						if(strlen(writeString) > 0) {
 8000f1c:	4b9e      	ldr	r3, [pc, #632]	; (8001198 <key_pad+0x620>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00a      	beq.n	8000f3a <key_pad+0x3c2>
							writeString[strlen(writeString) - 1] = '\0';
 8000f24:	489c      	ldr	r0, [pc, #624]	; (8001198 <key_pad+0x620>)
 8000f26:	f7ff f973 	bl	8000210 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	4a9a      	ldr	r2, [pc, #616]	; (8001198 <key_pad+0x620>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000f34:	4898      	ldr	r0, [pc, #608]	; (8001198 <key_pad+0x620>)
 8000f36:	f7ff fe07 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "I");
 8000f3a:	4897      	ldr	r0, [pc, #604]	; (8001198 <key_pad+0x620>)
 8000f3c:	f7ff f968 	bl	8000210 <strlen>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b94      	ldr	r3, [pc, #592]	; (8001198 <key_pad+0x620>)
 8000f46:	4413      	add	r3, r2
 8000f48:	4994      	ldr	r1, [pc, #592]	; (800119c <key_pad+0x624>)
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000f52:	4891      	ldr	r0, [pc, #580]	; (8001198 <key_pad+0x620>)
 8000f54:	f7ff fdf8 	bl	8000b48 <updateScreen>
						counter = 0;
 8000f58:	4b8e      	ldr	r3, [pc, #568]	; (8001194 <key_pad+0x61c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	71fb      	strb	r3, [r7, #7]
					break;
 8000f62:	e319      	b.n	8001598 <key_pad+0xa20>

				case 'J':
					if(counter == 0){
 8000f64:	4b8b      	ldr	r3, [pc, #556]	; (8001194 <key_pad+0x61c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d123      	bne.n	8000fb4 <key_pad+0x43c>
						if(strlen(writeString) > 0) {
 8000f6c:	4b8a      	ldr	r3, [pc, #552]	; (8001198 <key_pad+0x620>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00a      	beq.n	8000f8a <key_pad+0x412>
							writeString[strlen(writeString) - 1] = '\0';
 8000f74:	4888      	ldr	r0, [pc, #544]	; (8001198 <key_pad+0x620>)
 8000f76:	f7ff f94b 	bl	8000210 <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	4a86      	ldr	r2, [pc, #536]	; (8001198 <key_pad+0x620>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000f84:	4884      	ldr	r0, [pc, #528]	; (8001198 <key_pad+0x620>)
 8000f86:	f7ff fddf 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "J");
 8000f8a:	4883      	ldr	r0, [pc, #524]	; (8001198 <key_pad+0x620>)
 8000f8c:	f7ff f940 	bl	8000210 <strlen>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b80      	ldr	r3, [pc, #512]	; (8001198 <key_pad+0x620>)
 8000f96:	4413      	add	r3, r2
 8000f98:	4981      	ldr	r1, [pc, #516]	; (80011a0 <key_pad+0x628>)
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000fa2:	487d      	ldr	r0, [pc, #500]	; (8001198 <key_pad+0x620>)
 8000fa4:	f7ff fdd0 	bl	8000b48 <updateScreen>
						counter ++;
 8000fa8:	4b7a      	ldr	r3, [pc, #488]	; (8001194 <key_pad+0x61c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a79      	ldr	r2, [pc, #484]	; (8001194 <key_pad+0x61c>)
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e04c      	b.n	800104e <key_pad+0x4d6>
					}

					else if(counter == 1){
 8000fb4:	4b77      	ldr	r3, [pc, #476]	; (8001194 <key_pad+0x61c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d123      	bne.n	8001004 <key_pad+0x48c>
						if(strlen(writeString) > 0) {
 8000fbc:	4b76      	ldr	r3, [pc, #472]	; (8001198 <key_pad+0x620>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00a      	beq.n	8000fda <key_pad+0x462>
							writeString[strlen(writeString) - 1] = '\0';
 8000fc4:	4874      	ldr	r0, [pc, #464]	; (8001198 <key_pad+0x620>)
 8000fc6:	f7ff f923 	bl	8000210 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	4a72      	ldr	r2, [pc, #456]	; (8001198 <key_pad+0x620>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000fd4:	4870      	ldr	r0, [pc, #448]	; (8001198 <key_pad+0x620>)
 8000fd6:	f7ff fdb7 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "K");
 8000fda:	486f      	ldr	r0, [pc, #444]	; (8001198 <key_pad+0x620>)
 8000fdc:	f7ff f918 	bl	8000210 <strlen>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b6c      	ldr	r3, [pc, #432]	; (8001198 <key_pad+0x620>)
 8000fe6:	4413      	add	r3, r2
 8000fe8:	496e      	ldr	r1, [pc, #440]	; (80011a4 <key_pad+0x62c>)
 8000fea:	461a      	mov	r2, r3
 8000fec:	460b      	mov	r3, r1
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000ff2:	4869      	ldr	r0, [pc, #420]	; (8001198 <key_pad+0x620>)
 8000ff4:	f7ff fda8 	bl	8000b48 <updateScreen>
						counter ++;
 8000ff8:	4b66      	ldr	r3, [pc, #408]	; (8001194 <key_pad+0x61c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a65      	ldr	r2, [pc, #404]	; (8001194 <key_pad+0x61c>)
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e024      	b.n	800104e <key_pad+0x4d6>
					}

					else if(counter == 2){
 8001004:	4b63      	ldr	r3, [pc, #396]	; (8001194 <key_pad+0x61c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d120      	bne.n	800104e <key_pad+0x4d6>
						if(strlen(writeString) > 0) {
 800100c:	4b62      	ldr	r3, [pc, #392]	; (8001198 <key_pad+0x620>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00a      	beq.n	800102a <key_pad+0x4b2>
							writeString[strlen(writeString) - 1] = '\0';
 8001014:	4860      	ldr	r0, [pc, #384]	; (8001198 <key_pad+0x620>)
 8001016:	f7ff f8fb 	bl	8000210 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	3b01      	subs	r3, #1
 800101e:	4a5e      	ldr	r2, [pc, #376]	; (8001198 <key_pad+0x620>)
 8001020:	2100      	movs	r1, #0
 8001022:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001024:	485c      	ldr	r0, [pc, #368]	; (8001198 <key_pad+0x620>)
 8001026:	f7ff fd8f 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "L");
 800102a:	485b      	ldr	r0, [pc, #364]	; (8001198 <key_pad+0x620>)
 800102c:	f7ff f8f0 	bl	8000210 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b58      	ldr	r3, [pc, #352]	; (8001198 <key_pad+0x620>)
 8001036:	4413      	add	r3, r2
 8001038:	495b      	ldr	r1, [pc, #364]	; (80011a8 <key_pad+0x630>)
 800103a:	461a      	mov	r2, r3
 800103c:	460b      	mov	r3, r1
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8001042:	4855      	ldr	r0, [pc, #340]	; (8001198 <key_pad+0x620>)
 8001044:	f7ff fd80 	bl	8000b48 <updateScreen>
						counter = 0;
 8001048:	4b52      	ldr	r3, [pc, #328]	; (8001194 <key_pad+0x61c>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	71fb      	strb	r3, [r7, #7]
					break;
 8001052:	e2a1      	b.n	8001598 <key_pad+0xa20>

				case 'M':
					if(counter == 0){
 8001054:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <key_pad+0x61c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d123      	bne.n	80010a4 <key_pad+0x52c>
						if(strlen(writeString) > 0) {
 800105c:	4b4e      	ldr	r3, [pc, #312]	; (8001198 <key_pad+0x620>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00a      	beq.n	800107a <key_pad+0x502>
							writeString[strlen(writeString) - 1] = '\0';
 8001064:	484c      	ldr	r0, [pc, #304]	; (8001198 <key_pad+0x620>)
 8001066:	f7ff f8d3 	bl	8000210 <strlen>
 800106a:	4603      	mov	r3, r0
 800106c:	3b01      	subs	r3, #1
 800106e:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <key_pad+0x620>)
 8001070:	2100      	movs	r1, #0
 8001072:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001074:	4848      	ldr	r0, [pc, #288]	; (8001198 <key_pad+0x620>)
 8001076:	f7ff fd67 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "M");
 800107a:	4847      	ldr	r0, [pc, #284]	; (8001198 <key_pad+0x620>)
 800107c:	f7ff f8c8 	bl	8000210 <strlen>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b44      	ldr	r3, [pc, #272]	; (8001198 <key_pad+0x620>)
 8001086:	4413      	add	r3, r2
 8001088:	4948      	ldr	r1, [pc, #288]	; (80011ac <key_pad+0x634>)
 800108a:	461a      	mov	r2, r3
 800108c:	460b      	mov	r3, r1
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8001092:	4841      	ldr	r0, [pc, #260]	; (8001198 <key_pad+0x620>)
 8001094:	f7ff fd58 	bl	8000b48 <updateScreen>
						counter ++;
 8001098:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <key_pad+0x61c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	4a3d      	ldr	r2, [pc, #244]	; (8001194 <key_pad+0x61c>)
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e04c      	b.n	800113e <key_pad+0x5c6>
					}

					else if(counter == 1){
 80010a4:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <key_pad+0x61c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d123      	bne.n	80010f4 <key_pad+0x57c>
						if(strlen(writeString) > 0) {
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <key_pad+0x620>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00a      	beq.n	80010ca <key_pad+0x552>
							writeString[strlen(writeString) - 1] = '\0';
 80010b4:	4838      	ldr	r0, [pc, #224]	; (8001198 <key_pad+0x620>)
 80010b6:	f7ff f8ab 	bl	8000210 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	3b01      	subs	r3, #1
 80010be:	4a36      	ldr	r2, [pc, #216]	; (8001198 <key_pad+0x620>)
 80010c0:	2100      	movs	r1, #0
 80010c2:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80010c4:	4834      	ldr	r0, [pc, #208]	; (8001198 <key_pad+0x620>)
 80010c6:	f7ff fd3f 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "N");
 80010ca:	4833      	ldr	r0, [pc, #204]	; (8001198 <key_pad+0x620>)
 80010cc:	f7ff f8a0 	bl	8000210 <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b30      	ldr	r3, [pc, #192]	; (8001198 <key_pad+0x620>)
 80010d6:	4413      	add	r3, r2
 80010d8:	4935      	ldr	r1, [pc, #212]	; (80011b0 <key_pad+0x638>)
 80010da:	461a      	mov	r2, r3
 80010dc:	460b      	mov	r3, r1
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80010e2:	482d      	ldr	r0, [pc, #180]	; (8001198 <key_pad+0x620>)
 80010e4:	f7ff fd30 	bl	8000b48 <updateScreen>
						counter ++;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <key_pad+0x61c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a29      	ldr	r2, [pc, #164]	; (8001194 <key_pad+0x61c>)
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e024      	b.n	800113e <key_pad+0x5c6>
					}

					else if(counter == 2){
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <key_pad+0x61c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d120      	bne.n	800113e <key_pad+0x5c6>
						if(strlen(writeString) > 0) {
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <key_pad+0x620>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00a      	beq.n	800111a <key_pad+0x5a2>
							writeString[strlen(writeString) - 1] = '\0';
 8001104:	4824      	ldr	r0, [pc, #144]	; (8001198 <key_pad+0x620>)
 8001106:	f7ff f883 	bl	8000210 <strlen>
 800110a:	4603      	mov	r3, r0
 800110c:	3b01      	subs	r3, #1
 800110e:	4a22      	ldr	r2, [pc, #136]	; (8001198 <key_pad+0x620>)
 8001110:	2100      	movs	r1, #0
 8001112:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001114:	4820      	ldr	r0, [pc, #128]	; (8001198 <key_pad+0x620>)
 8001116:	f7ff fd17 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "O");
 800111a:	481f      	ldr	r0, [pc, #124]	; (8001198 <key_pad+0x620>)
 800111c:	f7ff f878 	bl	8000210 <strlen>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <key_pad+0x620>)
 8001126:	4413      	add	r3, r2
 8001128:	4922      	ldr	r1, [pc, #136]	; (80011b4 <key_pad+0x63c>)
 800112a:	461a      	mov	r2, r3
 800112c:	460b      	mov	r3, r1
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8001132:	4819      	ldr	r0, [pc, #100]	; (8001198 <key_pad+0x620>)
 8001134:	f7ff fd08 	bl	8000b48 <updateScreen>
						counter = 0;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <key_pad+0x61c>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]
					break;
 8001142:	e229      	b.n	8001598 <key_pad+0xa20>

				case 'P':
					if(counter == 0){
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <key_pad+0x61c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d137      	bne.n	80011bc <key_pad+0x644>
						if(strlen(writeString) > 0) {
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <key_pad+0x620>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00a      	beq.n	800116a <key_pad+0x5f2>
							writeString[strlen(writeString) - 1] = '\0';
 8001154:	4810      	ldr	r0, [pc, #64]	; (8001198 <key_pad+0x620>)
 8001156:	f7ff f85b 	bl	8000210 <strlen>
 800115a:	4603      	mov	r3, r0
 800115c:	3b01      	subs	r3, #1
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <key_pad+0x620>)
 8001160:	2100      	movs	r1, #0
 8001162:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <key_pad+0x620>)
 8001166:	f7ff fcef 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "P");
 800116a:	480b      	ldr	r0, [pc, #44]	; (8001198 <key_pad+0x620>)
 800116c:	f7ff f850 	bl	8000210 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <key_pad+0x620>)
 8001176:	4413      	add	r3, r2
 8001178:	490f      	ldr	r1, [pc, #60]	; (80011b8 <key_pad+0x640>)
 800117a:	461a      	mov	r2, r3
 800117c:	460b      	mov	r3, r1
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <key_pad+0x620>)
 8001184:	f7ff fce0 	bl	8000b48 <updateScreen>
						counter ++;
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <key_pad+0x61c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	4a01      	ldr	r2, [pc, #4]	; (8001194 <key_pad+0x61c>)
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e088      	b.n	80012a6 <key_pad+0x72e>
 8001194:	2000a0dc 	.word	0x2000a0dc
 8001198:	2000a0a8 	.word	0x2000a0a8
 800119c:	0800833c 	.word	0x0800833c
 80011a0:	08008340 	.word	0x08008340
 80011a4:	08008344 	.word	0x08008344
 80011a8:	08008348 	.word	0x08008348
 80011ac:	0800834c 	.word	0x0800834c
 80011b0:	08008350 	.word	0x08008350
 80011b4:	08008354 	.word	0x08008354
 80011b8:	08008358 	.word	0x08008358
					}

					else if(counter == 1){
 80011bc:	4b9f      	ldr	r3, [pc, #636]	; (800143c <key_pad+0x8c4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d123      	bne.n	800120c <key_pad+0x694>
						if(strlen(writeString) > 0) {
 80011c4:	4b9e      	ldr	r3, [pc, #632]	; (8001440 <key_pad+0x8c8>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00a      	beq.n	80011e2 <key_pad+0x66a>
							writeString[strlen(writeString) - 1] = '\0';
 80011cc:	489c      	ldr	r0, [pc, #624]	; (8001440 <key_pad+0x8c8>)
 80011ce:	f7ff f81f 	bl	8000210 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	3b01      	subs	r3, #1
 80011d6:	4a9a      	ldr	r2, [pc, #616]	; (8001440 <key_pad+0x8c8>)
 80011d8:	2100      	movs	r1, #0
 80011da:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80011dc:	4898      	ldr	r0, [pc, #608]	; (8001440 <key_pad+0x8c8>)
 80011de:	f7ff fcb3 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "Q");
 80011e2:	4897      	ldr	r0, [pc, #604]	; (8001440 <key_pad+0x8c8>)
 80011e4:	f7ff f814 	bl	8000210 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b94      	ldr	r3, [pc, #592]	; (8001440 <key_pad+0x8c8>)
 80011ee:	4413      	add	r3, r2
 80011f0:	4994      	ldr	r1, [pc, #592]	; (8001444 <key_pad+0x8cc>)
 80011f2:	461a      	mov	r2, r3
 80011f4:	460b      	mov	r3, r1
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80011fa:	4891      	ldr	r0, [pc, #580]	; (8001440 <key_pad+0x8c8>)
 80011fc:	f7ff fca4 	bl	8000b48 <updateScreen>
						counter ++;
 8001200:	4b8e      	ldr	r3, [pc, #568]	; (800143c <key_pad+0x8c4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a8d      	ldr	r2, [pc, #564]	; (800143c <key_pad+0x8c4>)
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e04c      	b.n	80012a6 <key_pad+0x72e>
					}

					else if(counter == 2){
 800120c:	4b8b      	ldr	r3, [pc, #556]	; (800143c <key_pad+0x8c4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <key_pad+0x6e4>
						if(strlen(writeString) > 0) {
 8001214:	4b8a      	ldr	r3, [pc, #552]	; (8001440 <key_pad+0x8c8>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00a      	beq.n	8001232 <key_pad+0x6ba>
							writeString[strlen(writeString) - 1] = '\0';
 800121c:	4888      	ldr	r0, [pc, #544]	; (8001440 <key_pad+0x8c8>)
 800121e:	f7fe fff7 	bl	8000210 <strlen>
 8001222:	4603      	mov	r3, r0
 8001224:	3b01      	subs	r3, #1
 8001226:	4a86      	ldr	r2, [pc, #536]	; (8001440 <key_pad+0x8c8>)
 8001228:	2100      	movs	r1, #0
 800122a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800122c:	4884      	ldr	r0, [pc, #528]	; (8001440 <key_pad+0x8c8>)
 800122e:	f7ff fc8b 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "R");
 8001232:	4883      	ldr	r0, [pc, #524]	; (8001440 <key_pad+0x8c8>)
 8001234:	f7fe ffec 	bl	8000210 <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b80      	ldr	r3, [pc, #512]	; (8001440 <key_pad+0x8c8>)
 800123e:	4413      	add	r3, r2
 8001240:	4981      	ldr	r1, [pc, #516]	; (8001448 <key_pad+0x8d0>)
 8001242:	461a      	mov	r2, r3
 8001244:	460b      	mov	r3, r1
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800124a:	487d      	ldr	r0, [pc, #500]	; (8001440 <key_pad+0x8c8>)
 800124c:	f7ff fc7c 	bl	8000b48 <updateScreen>
						counter ++;
 8001250:	4b7a      	ldr	r3, [pc, #488]	; (800143c <key_pad+0x8c4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	4a79      	ldr	r2, [pc, #484]	; (800143c <key_pad+0x8c4>)
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e024      	b.n	80012a6 <key_pad+0x72e>
					}
					else if(counter == 3){
 800125c:	4b77      	ldr	r3, [pc, #476]	; (800143c <key_pad+0x8c4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d120      	bne.n	80012a6 <key_pad+0x72e>
						if(strlen(writeString) > 0) {
 8001264:	4b76      	ldr	r3, [pc, #472]	; (8001440 <key_pad+0x8c8>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00a      	beq.n	8001282 <key_pad+0x70a>
							writeString[strlen(writeString) - 1] = '\0';
 800126c:	4874      	ldr	r0, [pc, #464]	; (8001440 <key_pad+0x8c8>)
 800126e:	f7fe ffcf 	bl	8000210 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	3b01      	subs	r3, #1
 8001276:	4a72      	ldr	r2, [pc, #456]	; (8001440 <key_pad+0x8c8>)
 8001278:	2100      	movs	r1, #0
 800127a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800127c:	4870      	ldr	r0, [pc, #448]	; (8001440 <key_pad+0x8c8>)
 800127e:	f7ff fc63 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "S");
 8001282:	486f      	ldr	r0, [pc, #444]	; (8001440 <key_pad+0x8c8>)
 8001284:	f7fe ffc4 	bl	8000210 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b6c      	ldr	r3, [pc, #432]	; (8001440 <key_pad+0x8c8>)
 800128e:	4413      	add	r3, r2
 8001290:	496e      	ldr	r1, [pc, #440]	; (800144c <key_pad+0x8d4>)
 8001292:	461a      	mov	r2, r3
 8001294:	460b      	mov	r3, r1
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800129a:	4869      	ldr	r0, [pc, #420]	; (8001440 <key_pad+0x8c8>)
 800129c:	f7ff fc54 	bl	8000b48 <updateScreen>
						counter = 0;
 80012a0:	4b66      	ldr	r3, [pc, #408]	; (800143c <key_pad+0x8c4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	71fb      	strb	r3, [r7, #7]
					break;
 80012aa:	e175      	b.n	8001598 <key_pad+0xa20>

				case 'T':
					if(counter == 0){
 80012ac:	4b63      	ldr	r3, [pc, #396]	; (800143c <key_pad+0x8c4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d123      	bne.n	80012fc <key_pad+0x784>
						if(strlen(writeString) > 0) {
 80012b4:	4b62      	ldr	r3, [pc, #392]	; (8001440 <key_pad+0x8c8>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00a      	beq.n	80012d2 <key_pad+0x75a>
							writeString[strlen(writeString) - 1] = '\0';
 80012bc:	4860      	ldr	r0, [pc, #384]	; (8001440 <key_pad+0x8c8>)
 80012be:	f7fe ffa7 	bl	8000210 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	3b01      	subs	r3, #1
 80012c6:	4a5e      	ldr	r2, [pc, #376]	; (8001440 <key_pad+0x8c8>)
 80012c8:	2100      	movs	r1, #0
 80012ca:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80012cc:	485c      	ldr	r0, [pc, #368]	; (8001440 <key_pad+0x8c8>)
 80012ce:	f7ff fc3b 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "T");
 80012d2:	485b      	ldr	r0, [pc, #364]	; (8001440 <key_pad+0x8c8>)
 80012d4:	f7fe ff9c 	bl	8000210 <strlen>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b58      	ldr	r3, [pc, #352]	; (8001440 <key_pad+0x8c8>)
 80012de:	4413      	add	r3, r2
 80012e0:	495b      	ldr	r1, [pc, #364]	; (8001450 <key_pad+0x8d8>)
 80012e2:	461a      	mov	r2, r3
 80012e4:	460b      	mov	r3, r1
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80012ea:	4855      	ldr	r0, [pc, #340]	; (8001440 <key_pad+0x8c8>)
 80012ec:	f7ff fc2c 	bl	8000b48 <updateScreen>
						counter ++;
 80012f0:	4b52      	ldr	r3, [pc, #328]	; (800143c <key_pad+0x8c4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	4a51      	ldr	r2, [pc, #324]	; (800143c <key_pad+0x8c4>)
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e04c      	b.n	8001396 <key_pad+0x81e>
					}

					else if(counter == 1){
 80012fc:	4b4f      	ldr	r3, [pc, #316]	; (800143c <key_pad+0x8c4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d123      	bne.n	800134c <key_pad+0x7d4>
						if(strlen(writeString) > 0) {
 8001304:	4b4e      	ldr	r3, [pc, #312]	; (8001440 <key_pad+0x8c8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00a      	beq.n	8001322 <key_pad+0x7aa>
							writeString[strlen(writeString) - 1] = '\0';
 800130c:	484c      	ldr	r0, [pc, #304]	; (8001440 <key_pad+0x8c8>)
 800130e:	f7fe ff7f 	bl	8000210 <strlen>
 8001312:	4603      	mov	r3, r0
 8001314:	3b01      	subs	r3, #1
 8001316:	4a4a      	ldr	r2, [pc, #296]	; (8001440 <key_pad+0x8c8>)
 8001318:	2100      	movs	r1, #0
 800131a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800131c:	4848      	ldr	r0, [pc, #288]	; (8001440 <key_pad+0x8c8>)
 800131e:	f7ff fc13 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "U");
 8001322:	4847      	ldr	r0, [pc, #284]	; (8001440 <key_pad+0x8c8>)
 8001324:	f7fe ff74 	bl	8000210 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b44      	ldr	r3, [pc, #272]	; (8001440 <key_pad+0x8c8>)
 800132e:	4413      	add	r3, r2
 8001330:	4948      	ldr	r1, [pc, #288]	; (8001454 <key_pad+0x8dc>)
 8001332:	461a      	mov	r2, r3
 8001334:	460b      	mov	r3, r1
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800133a:	4841      	ldr	r0, [pc, #260]	; (8001440 <key_pad+0x8c8>)
 800133c:	f7ff fc04 	bl	8000b48 <updateScreen>
						counter ++;
 8001340:	4b3e      	ldr	r3, [pc, #248]	; (800143c <key_pad+0x8c4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a3d      	ldr	r2, [pc, #244]	; (800143c <key_pad+0x8c4>)
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e024      	b.n	8001396 <key_pad+0x81e>
					}

					else if(counter == 2){
 800134c:	4b3b      	ldr	r3, [pc, #236]	; (800143c <key_pad+0x8c4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d120      	bne.n	8001396 <key_pad+0x81e>
						if(strlen(writeString) > 0) {
 8001354:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <key_pad+0x8c8>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00a      	beq.n	8001372 <key_pad+0x7fa>
							writeString[strlen(writeString) - 1] = '\0';
 800135c:	4838      	ldr	r0, [pc, #224]	; (8001440 <key_pad+0x8c8>)
 800135e:	f7fe ff57 	bl	8000210 <strlen>
 8001362:	4603      	mov	r3, r0
 8001364:	3b01      	subs	r3, #1
 8001366:	4a36      	ldr	r2, [pc, #216]	; (8001440 <key_pad+0x8c8>)
 8001368:	2100      	movs	r1, #0
 800136a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800136c:	4834      	ldr	r0, [pc, #208]	; (8001440 <key_pad+0x8c8>)
 800136e:	f7ff fbeb 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "V");
 8001372:	4833      	ldr	r0, [pc, #204]	; (8001440 <key_pad+0x8c8>)
 8001374:	f7fe ff4c 	bl	8000210 <strlen>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	4b30      	ldr	r3, [pc, #192]	; (8001440 <key_pad+0x8c8>)
 800137e:	4413      	add	r3, r2
 8001380:	4935      	ldr	r1, [pc, #212]	; (8001458 <key_pad+0x8e0>)
 8001382:	461a      	mov	r2, r3
 8001384:	460b      	mov	r3, r1
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800138a:	482d      	ldr	r0, [pc, #180]	; (8001440 <key_pad+0x8c8>)
 800138c:	f7ff fbdc 	bl	8000b48 <updateScreen>
						counter = 0;
 8001390:	4b2a      	ldr	r3, [pc, #168]	; (800143c <key_pad+0x8c4>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	71fb      	strb	r3, [r7, #7]
					break;
 800139a:	e0fd      	b.n	8001598 <key_pad+0xa20>

				case 'W':
					if(counter == 0){
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <key_pad+0x8c4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d123      	bne.n	80013ec <key_pad+0x874>
						if(strlen(writeString) > 0) {
 80013a4:	4b26      	ldr	r3, [pc, #152]	; (8001440 <key_pad+0x8c8>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00a      	beq.n	80013c2 <key_pad+0x84a>
							writeString[strlen(writeString) - 1] = '\0';
 80013ac:	4824      	ldr	r0, [pc, #144]	; (8001440 <key_pad+0x8c8>)
 80013ae:	f7fe ff2f 	bl	8000210 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	3b01      	subs	r3, #1
 80013b6:	4a22      	ldr	r2, [pc, #136]	; (8001440 <key_pad+0x8c8>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80013bc:	4820      	ldr	r0, [pc, #128]	; (8001440 <key_pad+0x8c8>)
 80013be:	f7ff fbc3 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "W");
 80013c2:	481f      	ldr	r0, [pc, #124]	; (8001440 <key_pad+0x8c8>)
 80013c4:	f7fe ff24 	bl	8000210 <strlen>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <key_pad+0x8c8>)
 80013ce:	4413      	add	r3, r2
 80013d0:	4922      	ldr	r1, [pc, #136]	; (800145c <key_pad+0x8e4>)
 80013d2:	461a      	mov	r2, r3
 80013d4:	460b      	mov	r3, r1
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80013da:	4819      	ldr	r0, [pc, #100]	; (8001440 <key_pad+0x8c8>)
 80013dc:	f7ff fbb4 	bl	8000b48 <updateScreen>
						counter ++;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <key_pad+0x8c4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	4a15      	ldr	r2, [pc, #84]	; (800143c <key_pad+0x8c4>)
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e088      	b.n	80014fe <key_pad+0x986>
					}

					else if(counter == 1){
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <key_pad+0x8c4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d137      	bne.n	8001464 <key_pad+0x8ec>
						if(strlen(writeString) > 0) {
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <key_pad+0x8c8>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00a      	beq.n	8001412 <key_pad+0x89a>
							writeString[strlen(writeString) - 1] = '\0';
 80013fc:	4810      	ldr	r0, [pc, #64]	; (8001440 <key_pad+0x8c8>)
 80013fe:	f7fe ff07 	bl	8000210 <strlen>
 8001402:	4603      	mov	r3, r0
 8001404:	3b01      	subs	r3, #1
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <key_pad+0x8c8>)
 8001408:	2100      	movs	r1, #0
 800140a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <key_pad+0x8c8>)
 800140e:	f7ff fb9b 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "X");
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <key_pad+0x8c8>)
 8001414:	f7fe fefc 	bl	8000210 <strlen>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <key_pad+0x8c8>)
 800141e:	4413      	add	r3, r2
 8001420:	490f      	ldr	r1, [pc, #60]	; (8001460 <key_pad+0x8e8>)
 8001422:	461a      	mov	r2, r3
 8001424:	460b      	mov	r3, r1
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <key_pad+0x8c8>)
 800142c:	f7ff fb8c 	bl	8000b48 <updateScreen>
						counter ++;
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <key_pad+0x8c4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	4a01      	ldr	r2, [pc, #4]	; (800143c <key_pad+0x8c4>)
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e060      	b.n	80014fe <key_pad+0x986>
 800143c:	2000a0dc 	.word	0x2000a0dc
 8001440:	2000a0a8 	.word	0x2000a0a8
 8001444:	0800835c 	.word	0x0800835c
 8001448:	08008360 	.word	0x08008360
 800144c:	08008364 	.word	0x08008364
 8001450:	08008368 	.word	0x08008368
 8001454:	0800836c 	.word	0x0800836c
 8001458:	08008370 	.word	0x08008370
 800145c:	08008374 	.word	0x08008374
 8001460:	08008378 	.word	0x08008378
					}

					else if(counter == 2){
 8001464:	4b4e      	ldr	r3, [pc, #312]	; (80015a0 <key_pad+0xa28>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d123      	bne.n	80014b4 <key_pad+0x93c>
						if(strlen(writeString) > 0) {
 800146c:	4b4d      	ldr	r3, [pc, #308]	; (80015a4 <key_pad+0xa2c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00a      	beq.n	800148a <key_pad+0x912>
							writeString[strlen(writeString) - 1] = '\0';
 8001474:	484b      	ldr	r0, [pc, #300]	; (80015a4 <key_pad+0xa2c>)
 8001476:	f7fe fecb 	bl	8000210 <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	3b01      	subs	r3, #1
 800147e:	4a49      	ldr	r2, [pc, #292]	; (80015a4 <key_pad+0xa2c>)
 8001480:	2100      	movs	r1, #0
 8001482:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001484:	4847      	ldr	r0, [pc, #284]	; (80015a4 <key_pad+0xa2c>)
 8001486:	f7ff fb5f 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "Y");
 800148a:	4846      	ldr	r0, [pc, #280]	; (80015a4 <key_pad+0xa2c>)
 800148c:	f7fe fec0 	bl	8000210 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <key_pad+0xa2c>)
 8001496:	4413      	add	r3, r2
 8001498:	4943      	ldr	r1, [pc, #268]	; (80015a8 <key_pad+0xa30>)
 800149a:	461a      	mov	r2, r3
 800149c:	460b      	mov	r3, r1
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80014a2:	4840      	ldr	r0, [pc, #256]	; (80015a4 <key_pad+0xa2c>)
 80014a4:	f7ff fb50 	bl	8000b48 <updateScreen>
						counter ++;
 80014a8:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <key_pad+0xa28>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a3c      	ldr	r2, [pc, #240]	; (80015a0 <key_pad+0xa28>)
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e024      	b.n	80014fe <key_pad+0x986>
					}

					else if(counter == 3){
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <key_pad+0xa28>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d120      	bne.n	80014fe <key_pad+0x986>
						if(strlen(writeString) > 0) {
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <key_pad+0xa2c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00a      	beq.n	80014da <key_pad+0x962>
							writeString[strlen(writeString) - 1] = '\0';
 80014c4:	4837      	ldr	r0, [pc, #220]	; (80015a4 <key_pad+0xa2c>)
 80014c6:	f7fe fea3 	bl	8000210 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	3b01      	subs	r3, #1
 80014ce:	4a35      	ldr	r2, [pc, #212]	; (80015a4 <key_pad+0xa2c>)
 80014d0:	2100      	movs	r1, #0
 80014d2:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80014d4:	4833      	ldr	r0, [pc, #204]	; (80015a4 <key_pad+0xa2c>)
 80014d6:	f7ff fb37 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "Z");
 80014da:	4832      	ldr	r0, [pc, #200]	; (80015a4 <key_pad+0xa2c>)
 80014dc:	f7fe fe98 	bl	8000210 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <key_pad+0xa2c>)
 80014e6:	4413      	add	r3, r2
 80014e8:	4930      	ldr	r1, [pc, #192]	; (80015ac <key_pad+0xa34>)
 80014ea:	461a      	mov	r2, r3
 80014ec:	460b      	mov	r3, r1
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80014f2:	482c      	ldr	r0, [pc, #176]	; (80015a4 <key_pad+0xa2c>)
 80014f4:	f7ff fb28 	bl	8000b48 <updateScreen>
						counter = 0;
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <key_pad+0xa28>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	71fb      	strb	r3, [r7, #7]
					break;
 8001502:	e049      	b.n	8001598 <key_pad+0xa20>

				case '#':
					strcat(writeString, " ");
 8001504:	4827      	ldr	r0, [pc, #156]	; (80015a4 <key_pad+0xa2c>)
 8001506:	f7fe fe83 	bl	8000210 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <key_pad+0xa2c>)
 8001510:	4413      	add	r3, r2
 8001512:	4927      	ldr	r1, [pc, #156]	; (80015b0 <key_pad+0xa38>)
 8001514:	461a      	mov	r2, r3
 8001516:	460b      	mov	r3, r1
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	8013      	strh	r3, [r2, #0]
					writeString[strlen(writeString) + 1] = '\0';
 800151c:	4821      	ldr	r0, [pc, #132]	; (80015a4 <key_pad+0xa2c>)
 800151e:	f7fe fe77 	bl	8000210 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	3301      	adds	r3, #1
 8001526:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <key_pad+0xa2c>)
 8001528:	2100      	movs	r1, #0
 800152a:	54d1      	strb	r1, [r2, r3]
					updateScreen(writeString);
 800152c:	481d      	ldr	r0, [pc, #116]	; (80015a4 <key_pad+0xa2c>)
 800152e:	f7ff fb0b 	bl	8000b48 <updateScreen>
					counter = 0;
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <key_pad+0xa28>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
					keyChar = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	71fb      	strb	r3, [r7, #7]
					pos += 10;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <key_pad+0xa3c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	330a      	adds	r3, #10
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <key_pad+0xa3c>)
 8001544:	6013      	str	r3, [r2, #0]
					break;
 8001546:	e027      	b.n	8001598 <key_pad+0xa20>

				case 'B':
					if(strlen(writeString) > 0) {
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <key_pad+0xa2c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00d      	beq.n	800156c <key_pad+0x9f4>
						writeString[strlen(writeString) - 1] = '\0';
 8001550:	4814      	ldr	r0, [pc, #80]	; (80015a4 <key_pad+0xa2c>)
 8001552:	f7fe fe5d 	bl	8000210 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	3b01      	subs	r3, #1
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <key_pad+0xa2c>)
 800155c:	2100      	movs	r1, #0
 800155e:	54d1      	strb	r1, [r2, r3]
						updateScreen(writeString);
 8001560:	4810      	ldr	r0, [pc, #64]	; (80015a4 <key_pad+0xa2c>)
 8001562:	f7ff faf1 	bl	8000b48 <updateScreen>
						strcat(writeString, "");
						updateScreen(writeString);
 8001566:	480f      	ldr	r0, [pc, #60]	; (80015a4 <key_pad+0xa2c>)
 8001568:	f7ff faee 	bl	8000b48 <updateScreen>
					}
					counter = 0;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <key_pad+0xa28>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
					keyChar = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	71fb      	strb	r3, [r7, #7]
					break;
 8001576:	e00f      	b.n	8001598 <key_pad+0xa20>

				case 'C':
					writeString[0] = '\0';
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <key_pad+0xa2c>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
					updateScreen(writeString);
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <key_pad+0xa2c>)
 8001580:	f7ff fae2 	bl	8000b48 <updateScreen>
					counter = 0;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <key_pad+0xa28>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
					keyChar = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	71fb      	strb	r3, [r7, #7]
					break;
 800158e:	e003      	b.n	8001598 <key_pad+0xa20>

				case '*':
					flag = 1;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <key_pad+0xa40>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

					break;
 8001596:	bf00      	nop
	}
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000a0dc 	.word	0x2000a0dc
 80015a4:	2000a0a8 	.word	0x2000a0a8
 80015a8:	0800837c 	.word	0x0800837c
 80015ac:	08008380 	.word	0x08008380
 80015b0:	08008384 	.word	0x08008384
 80015b4:	20000008 	.word	0x20000008
 80015b8:	2000b615 	.word	0x2000b615

080015bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b09c      	sub	sp, #112	; 0x70
 80015c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c2:	f000 ff98 	bl	80024f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c6:	f000 f88b 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ca:	f000 f9bd 	bl	8001948 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ce:	f000 f99d 	bl	800190c <MX_DMA_Init>
  MX_SPI1_Init();
 80015d2:	f000 f92d 	bl	8001830 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80015d6:	f000 f969 	bl	80018ac <MX_USART6_UART_Init>
  MX_I2C2_Init();
 80015da:	f000 f8e9 	bl	80017b0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ILI9163_init(0);
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff f8aa 	bl	8000738 <ILI9163_init>

  //HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
   //uint8_t dataToSend[] = "How are you?";
   HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
 80015e4:	2201      	movs	r2, #1
 80015e6:	4931      	ldr	r1, [pc, #196]	; (80016ac <main+0xf0>)
 80015e8:	4831      	ldr	r0, [pc, #196]	; (80016b0 <main+0xf4>)
 80015ea:	f004 ffa2 	bl	8006532 <HAL_UART_Receive_IT>
   MPU6050_Init(&hi2c2);
 80015ee:	4831      	ldr	r0, [pc, #196]	; (80016b4 <main+0xf8>)
 80015f0:	f000 faea 	bl	8001bc8 <MPU6050_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  	  	  readGyroData(&hi2c2, &gyroX, &gyroY, &gyroZ);
 80015f4:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <main+0xfc>)
 80015f6:	4a31      	ldr	r2, [pc, #196]	; (80016bc <main+0x100>)
 80015f8:	4931      	ldr	r1, [pc, #196]	; (80016c0 <main+0x104>)
 80015fa:	482e      	ldr	r0, [pc, #184]	; (80016b4 <main+0xf8>)
 80015fc:	f000 fb32 	bl	8001c64 <readGyroData>

	  	          char str_buffer[100];  // Made the buffer bigger just in case

	  	          // Format gyro data into a comma-separated list
	  	          sprintf(str_buffer, "[%d,%d,%d]\n", gyroX, gyroY, gyroZ);
 8001600:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <main+0x104>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	461a      	mov	r2, r3
 8001608:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <main+0x100>)
 800160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160e:	4619      	mov	r1, r3
 8001610:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <main+0xfc>)
 8001612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001616:	1d38      	adds	r0, r7, #4
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	460b      	mov	r3, r1
 800161c:	4929      	ldr	r1, [pc, #164]	; (80016c4 <main+0x108>)
 800161e:	f006 f993 	bl	8007948 <siprintf>

	  	          // Transmit the formatted string over CDC
	  	        HAL_UART_Transmit(&huart6,(uint8_t*)str_buffer, strlen(str_buffer), 1000);
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe fdf3 	bl	8000210 <strlen>
 800162a:	4603      	mov	r3, r0
 800162c:	b29a      	uxth	r2, r3
 800162e:	1d39      	adds	r1, r7, #4
 8001630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001634:	481e      	ldr	r0, [pc, #120]	; (80016b0 <main+0xf4>)
 8001636:	f004 fef9 	bl	800642c <HAL_UART_Transmit>
	  	          HAL_Delay(50);
 800163a:	2032      	movs	r0, #50	; 0x32
 800163c:	f000 ffb8 	bl	80025b0 <HAL_Delay>


	  if(keyChar != 0){
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <main+0x10c>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <main+0x9c>
		  key_pad(keyChar);
 8001648:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <main+0x10c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fa93 	bl	8000b78 <key_pad>
		  keyChar = 0;
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <main+0x10c>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
	  }
	  if(flag == 1){
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <main+0x110>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d10d      	bne.n	800167c <main+0xc0>
		  HAL_UART_Transmit(&huart6, writeString, strlen(writeString), 1000);
 8001660:	481b      	ldr	r0, [pc, #108]	; (80016d0 <main+0x114>)
 8001662:	f7fe fdd5 	bl	8000210 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	4918      	ldr	r1, [pc, #96]	; (80016d0 <main+0x114>)
 8001670:	480f      	ldr	r0, [pc, #60]	; (80016b0 <main+0xf4>)
 8001672:	f004 fedb 	bl	800642c <HAL_UART_Transmit>
		  flag = 0;
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <main+0x110>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
	  }
	  if (messageReady) {
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <main+0x118>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0b6      	beq.n	80015f4 <main+0x38>
	     // Process the complete message
	     ILI9163_newFrame();
 8001686:	f7ff f93f 	bl	8000908 <ILI9163_newFrame>
	     ILI9163_drawString(5, 5, Font_7x10, BLUE, receivedData);
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <main+0x11c>)
 800168c:	4a13      	ldr	r2, [pc, #76]	; (80016dc <main+0x120>)
 800168e:	9201      	str	r2, [sp, #4]
 8001690:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001694:	9200      	str	r2, [sp, #0]
 8001696:	cb0c      	ldmia	r3, {r2, r3}
 8001698:	2105      	movs	r1, #5
 800169a:	2005      	movs	r0, #5
 800169c:	f7ff f9ed 	bl	8000a7a <ILI9163_drawString>
	     ILI9163_render();
 80016a0:	f7ff f94e 	bl	8000940 <ILI9163_render>

	     messageReady = 0; // Reset the flag
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <main+0x118>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
  {
 80016aa:	e7a3      	b.n	80015f4 <main+0x38>
 80016ac:	2000a288 	.word	0x2000a288
 80016b0:	2000a1f8 	.word	0x2000a1f8
 80016b4:	2000a0e0 	.word	0x2000a0e0
 80016b8:	2000b61a 	.word	0x2000b61a
 80016bc:	2000b618 	.word	0x2000b618
 80016c0:	2000b616 	.word	0x2000b616
 80016c4:	08008388 	.word	0x08008388
 80016c8:	2000a282 	.word	0x2000a282
 80016cc:	2000b615 	.word	0x2000b615
 80016d0:	2000a0a8 	.word	0x2000a0a8
 80016d4:	2000a281 	.word	0x2000a281
 80016d8:	20000000 	.word	0x20000000
 80016dc:	2000a28c 	.word	0x2000a28c

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b094      	sub	sp, #80	; 0x50
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0320 	add.w	r3, r7, #32
 80016ea:	2230      	movs	r2, #48	; 0x30
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f006 f984 	bl	80079fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001704:	f002 ff04 	bl	8004510 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <SystemClock_Config+0xc8>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <SystemClock_Config+0xc8>)
 800170e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001712:	6413      	str	r3, [r2, #64]	; 0x40
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <SystemClock_Config+0xc8>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <SystemClock_Config+0xcc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001728:	4a20      	ldr	r2, [pc, #128]	; (80017ac <SystemClock_Config+0xcc>)
 800172a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <SystemClock_Config+0xcc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800173c:	2301      	movs	r3, #1
 800173e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001740:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001746:	2302      	movs	r3, #2
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001750:	2304      	movs	r3, #4
 8001752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001754:	2348      	movs	r3, #72	; 0x48
 8001756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001758:	2302      	movs	r3, #2
 800175a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800175c:	2303      	movs	r3, #3
 800175e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001760:	f107 0320 	add.w	r3, r7, #32
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fee3 	bl	8004530 <HAL_RCC_OscConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001770:	f000 fa24 	bl	8001bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001774:	230f      	movs	r3, #15
 8001776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001778:	2302      	movs	r3, #2
 800177a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	2102      	movs	r1, #2
 8001790:	4618      	mov	r0, r3
 8001792:	f003 f971 	bl	8004a78 <HAL_RCC_ClockConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800179c:	f000 fa0e 	bl	8001bbc <Error_Handler>
  }
}
 80017a0:	bf00      	nop
 80017a2:	3750      	adds	r7, #80	; 0x50
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000

080017b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MX_I2C2_Init+0x74>)
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <MX_I2C2_Init+0x78>)
 80017b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_I2C2_Init+0x74>)
 80017bc:	4a1b      	ldr	r2, [pc, #108]	; (800182c <MX_I2C2_Init+0x7c>)
 80017be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_I2C2_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_I2C2_Init+0x74>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_I2C2_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_I2C2_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MX_I2C2_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_I2C2_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_I2C2_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017ea:	480e      	ldr	r0, [pc, #56]	; (8001824 <MX_I2C2_Init+0x74>)
 80017ec:	f001 fe3c 	bl	8003468 <HAL_I2C_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017f6:	f000 f9e1 	bl	8001bbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017fa:	2100      	movs	r1, #0
 80017fc:	4809      	ldr	r0, [pc, #36]	; (8001824 <MX_I2C2_Init+0x74>)
 80017fe:	f002 fdef 	bl	80043e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001808:	f000 f9d8 	bl	8001bbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800180c:	2100      	movs	r1, #0
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_I2C2_Init+0x74>)
 8001810:	f002 fe31 	bl	8004476 <HAL_I2CEx_ConfigDigitalFilter>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800181a:	f000 f9cf 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000a0e0 	.word	0x2000a0e0
 8001828:	40005800 	.word	0x40005800
 800182c:	00808cd2 	.word	0x00808cd2

08001830 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <MX_SPI1_Init+0x74>)
 8001836:	4a1c      	ldr	r2, [pc, #112]	; (80018a8 <MX_SPI1_Init+0x78>)
 8001838:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <MX_SPI1_Init+0x74>)
 800183c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001840:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <MX_SPI1_Init+0x74>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_SPI1_Init+0x74>)
 800184a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800184e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_SPI1_Init+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <MX_SPI1_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_SPI1_Init+0x74>)
 800185e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001862:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_SPI1_Init+0x74>)
 8001866:	2208      	movs	r2, #8
 8001868:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_SPI1_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_SPI1_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <MX_SPI1_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_SPI1_Init+0x74>)
 800187e:	2207      	movs	r2, #7
 8001880:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <MX_SPI1_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_SPI1_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_SPI1_Init+0x74>)
 8001890:	f003 ff08 	bl	80056a4 <HAL_SPI_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800189a:	f000 f98f 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000a134 	.word	0x2000a134
 80018a8:	40013000 	.word	0x40013000

080018ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_USART6_UART_Init+0x58>)
 80018b2:	4a15      	ldr	r2, [pc, #84]	; (8001908 <MX_USART6_UART_Init+0x5c>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <MX_USART6_UART_Init+0x58>)
 80018b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_USART6_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_USART6_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_USART6_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_USART6_UART_Init+0x58>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <MX_USART6_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_USART6_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <MX_USART6_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_USART6_UART_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_USART6_UART_Init+0x58>)
 80018f0:	f004 fd4e 	bl	8006390 <HAL_UART_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80018fa:	f000 f95f 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000a1f8 	.word	0x2000a1f8
 8001908:	40011400 	.word	0x40011400

0800190c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_DMA_Init+0x38>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <MX_DMA_Init+0x38>)
 8001918:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_DMA_Init+0x38>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	203b      	movs	r0, #59	; 0x3b
 8001930:	f000 ff3d 	bl	80027ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001934:	203b      	movs	r0, #59	; 0x3b
 8001936:	f000 ff56 	bl	80027e6 <HAL_NVIC_EnableIRQ>

}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800

08001948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08c      	sub	sp, #48	; 0x30
 800194c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800195e:	4b64      	ldr	r3, [pc, #400]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a63      	ldr	r2, [pc, #396]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 8001964:	f043 0310 	orr.w	r3, r3, #16
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	61bb      	str	r3, [r7, #24]
 8001974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a5d      	ldr	r2, [pc, #372]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800198e:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a57      	ldr	r2, [pc, #348]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 8001994:	f043 0320 	orr.w	r3, r3, #32
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b55      	ldr	r3, [pc, #340]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a6:	4b52      	ldr	r3, [pc, #328]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a51      	ldr	r2, [pc, #324]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 80019ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b4f      	ldr	r3, [pc, #316]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a4b      	ldr	r2, [pc, #300]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	4b46      	ldr	r3, [pc, #280]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a45      	ldr	r2, [pc, #276]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ee:	4b40      	ldr	r3, [pc, #256]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a3f      	ldr	r2, [pc, #252]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 80019f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <MX_GPIO_Init+0x1a8>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13
 8001a06:	2200      	movs	r2, #0
 8001a08:	f64a 3103 	movw	r1, #43779	; 0xab03
 8001a0c:	4839      	ldr	r0, [pc, #228]	; (8001af4 <MX_GPIO_Init+0x1ac>)
 8001a0e:	f001 fcd3 	bl	80033b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a12:	2320      	movs	r3, #32
 8001a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a16:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4619      	mov	r1, r3
 8001a26:	4834      	ldr	r0, [pc, #208]	; (8001af8 <MX_GPIO_Init+0x1b0>)
 8001a28:	f001 fb02 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 8001a2c:	f240 3301 	movw	r3, #769	; 0x301
 8001a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	482b      	ldr	r0, [pc, #172]	; (8001af4 <MX_GPIO_Init+0x1ac>)
 8001a46:	f001 faf3 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB11 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 8001a4a:	f64a 0302 	movw	r3, #43010	; 0xa802
 8001a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a54:	2302      	movs	r3, #2
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	4619      	mov	r1, r3
 8001a62:	4824      	ldr	r0, [pc, #144]	; (8001af4 <MX_GPIO_Init+0x1ac>)
 8001a64:	f001 fae4 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : ble_state_Pin */
  GPIO_InitStruct.Pin = ble_state_Pin;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ble_state_GPIO_Port, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4820      	ldr	r0, [pc, #128]	; (8001afc <MX_GPIO_Init+0x1b4>)
 8001a7c:	f001 fad8 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001a80:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	481a      	ldr	r0, [pc, #104]	; (8001b00 <MX_GPIO_Init+0x1b8>)
 8001a98:	f001 faca 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a9c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001aae:	230a      	movs	r3, #10
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4812      	ldr	r0, [pc, #72]	; (8001b04 <MX_GPIO_Init+0x1bc>)
 8001aba:	f001 fab9 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480c      	ldr	r0, [pc, #48]	; (8001b04 <MX_GPIO_Init+0x1bc>)
 8001ad4:	f001 faac 	bl	8003030 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	2017      	movs	r0, #23
 8001ade:	f000 fe66 	bl	80027ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ae2:	2017      	movs	r0, #23
 8001ae4:	f000 fe7f 	bl	80027e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae8:	bf00      	nop
 8001aea:	3730      	adds	r7, #48	; 0x30
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020400 	.word	0x40020400
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40021800 	.word	0x40021800
 8001b00:	40020800 	.word	0x40020800
 8001b04:	40020000 	.word	0x40020000

08001b08 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) // Your TxCpltCallback
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	SPI_DMA_CNT--;
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_SPI_TxCpltCallback+0x34>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_SPI_TxCpltCallback+0x34>)
 8001b18:	6013      	str	r3, [r2, #0]
	if(SPI_DMA_CNT==0)
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_SPI_TxCpltCallback+0x34>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d108      	bne.n	8001b34 <HAL_SPI_TxCpltCallback+0x2c>
	{
		HAL_SPI_DMAStop(&hspi1);
 8001b22:	4807      	ldr	r0, [pc, #28]	; (8001b40 <HAL_SPI_TxCpltCallback+0x38>)
 8001b24:	f004 f8cc 	bl	8005cc0 <HAL_SPI_DMAStop>
		SPI_DMA_CNT=1;
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <HAL_SPI_TxCpltCallback+0x34>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
		SPI_DMA_FL=1;
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_SPI_TxCpltCallback+0x3c>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
	}
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000000c 	.word	0x2000000c
 8001b40:	2000a134 	.word	0x2000a134
 8001b44:	2000a280 	.word	0x2000a280

08001b48 <HAL_UART_RxCpltCallback>:
	HAL_UART_Transmit(huart, data, size, 1000); // 1000 is timeout duration
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <HAL_UART_RxCpltCallback+0x5c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d120      	bne.n	8001b9c <HAL_UART_RxCpltCallback+0x54>
    if (receiveBuffer[0] != '\n' && receivedDataIndex < sizeof(receivedData) - 1) {
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_UART_RxCpltCallback+0x60>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b0a      	cmp	r3, #10
 8001b60:	d00b      	beq.n	8001b7a <HAL_UART_RxCpltCallback+0x32>
      receivedData[receivedDataIndex++] = receiveBuffer[0];
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_UART_RxCpltCallback+0x64>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	b2d1      	uxtb	r1, r2
 8001b6a:	4a10      	ldr	r2, [pc, #64]	; (8001bac <HAL_UART_RxCpltCallback+0x64>)
 8001b6c:	7011      	strb	r1, [r2, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_UART_RxCpltCallback+0x60>)
 8001b72:	7819      	ldrb	r1, [r3, #0]
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_UART_RxCpltCallback+0x68>)
 8001b76:	5499      	strb	r1, [r3, r2]
 8001b78:	e00b      	b.n	8001b92 <HAL_UART_RxCpltCallback+0x4a>
    } else {
      receivedData[receivedDataIndex] = '\0'; // Null-terminate
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_UART_RxCpltCallback+0x64>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_UART_RxCpltCallback+0x68>)
 8001b82:	2100      	movs	r1, #0
 8001b84:	5499      	strb	r1, [r3, r2]
      messageReady = 1; // Set the flag
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_UART_RxCpltCallback+0x6c>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
      receivedDataIndex = 0;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_UART_RxCpltCallback+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
      //memset(receivedData, 0, sizeof(receivedData));
    }
    HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
 8001b92:	2201      	movs	r2, #1
 8001b94:	4904      	ldr	r1, [pc, #16]	; (8001ba8 <HAL_UART_RxCpltCallback+0x60>)
 8001b96:	4808      	ldr	r0, [pc, #32]	; (8001bb8 <HAL_UART_RxCpltCallback+0x70>)
 8001b98:	f004 fccb 	bl	8006532 <HAL_UART_Receive_IT>
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40011400 	.word	0x40011400
 8001ba8:	2000a288 	.word	0x2000a288
 8001bac:	2000b614 	.word	0x2000b614
 8001bb0:	2000a28c 	.word	0x2000a28c
 8001bb4:	2000a281 	.word	0x2000a281
 8001bb8:	2000a1f8 	.word	0x2000a1f8

08001bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc0:	b672      	cpsid	i
}
 8001bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <Error_Handler+0x8>
	...

08001bc8 <MPU6050_Init>:
    int16_t z;
} GyroData;


void MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af04      	add	r7, sp, #16
 8001bce:	6078      	str	r0, [r7, #4]
	uint8_t wakeUp = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];
    uint8_t readback = 0;  // Variable to store read back value
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	72fb      	strb	r3, [r7, #11]

    // wake up the MPU
    HAL_I2C_Mem_Write(hi2c, MPU6050_I2C_ADDRESS, 0x6B, 1,&wakeUp, 1, 1000);
 8001bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bdc:	9302      	str	r3, [sp, #8]
 8001bde:	2301      	movs	r3, #1
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	f107 030f 	add.w	r3, r7, #15
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2301      	movs	r3, #1
 8001bea:	226b      	movs	r2, #107	; 0x6b
 8001bec:	21d0      	movs	r1, #208	; 0xd0
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f001 feb4 	bl	800395c <HAL_I2C_Mem_Write>

    // Configure the INT pin behavior in INT_PIN_CFG register
    data[0] = 0x37;  // INT_PIN_CFG register address
 8001bf4:	2337      	movs	r3, #55	; 0x37
 8001bf6:	733b      	strb	r3, [r7, #12]
    data[1] = 0x20;  // Set LATCH_INT_EN, and leave other bits as default
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, MPU6050_I2C_ADDRESS, data, 2, HAL_MAX_DELAY);
 8001bfc:	f107 020c 	add.w	r2, r7, #12
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2302      	movs	r3, #2
 8001c08:	21d0      	movs	r1, #208	; 0xd0
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f001 fcbc 	bl	8003588 <HAL_I2C_Master_Transmit>

    // Read back the register value
    HAL_I2C_Master_Transmit(hi2c, MPU6050_I2C_ADDRESS, &data[0], 1, HAL_MAX_DELAY);  // Send register address
 8001c10:	f107 020c 	add.w	r2, r7, #12
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	21d0      	movs	r1, #208	; 0xd0
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f001 fcb2 	bl	8003588 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(hi2c, MPU6050_I2C_ADDRESS, &readback, 1, HAL_MAX_DELAY);  // Receive data from register
 8001c24:	f107 020b 	add.w	r2, r7, #11
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	21d0      	movs	r1, #208	; 0xd0
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f001 fd9c 	bl	8003770 <HAL_I2C_Master_Receive>

    // Compare the read back value with the written value
    if (readback == data[1])
 8001c38:	7b7a      	ldrb	r2, [r7, #13]
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d10b      	bne.n	8001c58 <MPU6050_Init+0x90>
    {
        // Blink blue LED to indicate success
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Assuming GPIOB, GPIO_PIN_7 is the blue LED pin
 8001c40:	2180      	movs	r1, #128	; 0x80
 8001c42:	4807      	ldr	r0, [pc, #28]	; (8001c60 <MPU6050_Init+0x98>)
 8001c44:	f001 fbd1 	bl	80033ea <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 8001c48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c4c:	f000 fcb0 	bl	80025b0 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Turn off the LED
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	4803      	ldr	r0, [pc, #12]	; (8001c60 <MPU6050_Init+0x98>)
 8001c54:	f001 fbc9 	bl	80033ea <HAL_GPIO_TogglePin>
    }
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40020400 	.word	0x40020400

08001c64 <readGyroData>:
int16_t x_buffer[N] = {0};
int16_t y_buffer[N] = {0};
int16_t z_buffer[N] = {0};
int buffer_index = 0;

void readGyroData(I2C_HandleTypeDef *hi2c, int16_t* x, int16_t* y, int16_t* z) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08e      	sub	sp, #56	; 0x38
 8001c68:	af04      	add	r7, sp, #16
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
    uint8_t rawData[6];

    // Read gyro data
    HAL_I2C_Mem_Read(hi2c, MPU6050_I2C_ADDRESS, GYRO_XOUT_H, 1, &rawData[0], 2, HAL_MAX_DELAY);
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	9302      	str	r3, [sp, #8]
 8001c78:	2302      	movs	r3, #2
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2301      	movs	r3, #1
 8001c84:	2243      	movs	r2, #67	; 0x43
 8001c86:	21d0      	movs	r1, #208	; 0xd0
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f001 ff7b 	bl	8003b84 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(hi2c, MPU6050_I2C_ADDRESS, GYRO_YOUT_H, 1, &rawData[2], 2, HAL_MAX_DELAY);
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	9302      	str	r3, [sp, #8]
 8001c94:	2302      	movs	r3, #2
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	2245      	movs	r2, #69	; 0x45
 8001ca4:	21d0      	movs	r1, #208	; 0xd0
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f001 ff6c 	bl	8003b84 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(hi2c, MPU6050_I2C_ADDRESS, GYRO_ZOUT_H, 1, &rawData[4], 2, HAL_MAX_DELAY);
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	f107 0310 	add.w	r3, r7, #16
 8001cba:	3304      	adds	r3, #4
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	2247      	movs	r2, #71	; 0x47
 8001cc2:	21d0      	movs	r1, #208	; 0xd0
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f001 ff5d 	bl	8003b84 <HAL_I2C_Mem_Read>

    // Convert to 16-bit values
    x_buffer[buffer_index] = (int16_t)((rawData[0] << 8) | rawData[1]);
 8001cca:	7c3b      	ldrb	r3, [r7, #16]
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	b219      	sxth	r1, r3
 8001cd0:	7c7b      	ldrb	r3, [r7, #17]
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <readGyroData+0x164>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	b211      	sxth	r1, r2
 8001cdc:	4a3b      	ldr	r2, [pc, #236]	; (8001dcc <readGyroData+0x168>)
 8001cde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    y_buffer[buffer_index] = (int16_t)((rawData[2] << 8) | rawData[3]);
 8001ce2:	7cbb      	ldrb	r3, [r7, #18]
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	b219      	sxth	r1, r3
 8001ce8:	7cfb      	ldrb	r3, [r7, #19]
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <readGyroData+0x164>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	b211      	sxth	r1, r2
 8001cf4:	4a36      	ldr	r2, [pc, #216]	; (8001dd0 <readGyroData+0x16c>)
 8001cf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    z_buffer[buffer_index] = (int16_t)((rawData[4] << 8) | rawData[5]);
 8001cfa:	7d3b      	ldrb	r3, [r7, #20]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	b219      	sxth	r1, r3
 8001d00:	7d7b      	ldrb	r3, [r7, #21]
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <readGyroData+0x164>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	b211      	sxth	r1, r2
 8001d0c:	4a31      	ldr	r2, [pc, #196]	; (8001dd4 <readGyroData+0x170>)
 8001d0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    // Compute the average of the last N readings
    int32_t x_sum = 0, y_sum = 0, z_sum = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < N; i++) {
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	e01a      	b.n	8001d5a <readGyroData+0xf6>
        x_sum += x_buffer[i];
 8001d24:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <readGyroData+0x168>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	4413      	add	r3, r2
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
        y_sum += -y_buffer[i];
 8001d34:	4a26      	ldr	r2, [pc, #152]	; (8001dd0 <readGyroData+0x16c>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	623b      	str	r3, [r7, #32]
        z_sum += z_buffer[i];
 8001d44:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <readGyroData+0x170>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	4413      	add	r3, r2
 8001d52:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < N; i++) {
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	3301      	adds	r3, #1
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001d60:	dbe0      	blt.n	8001d24 <readGyroData+0xc0>
    }

    *x = x_sum / N;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	4a1c      	ldr	r2, [pc, #112]	; (8001dd8 <readGyroData+0x174>)
 8001d66:	fb82 1203 	smull	r1, r2, r2, r3
 8001d6a:	1252      	asrs	r2, r2, #9
 8001d6c:	17db      	asrs	r3, r3, #31
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	b21a      	sxth	r2, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	801a      	strh	r2, [r3, #0]
    *y = y_sum / N;
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <readGyroData+0x174>)
 8001d7a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d7e:	1252      	asrs	r2, r2, #9
 8001d80:	17db      	asrs	r3, r3, #31
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	801a      	strh	r2, [r3, #0]
    *z = z_sum / N;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <readGyroData+0x174>)
 8001d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d92:	1252      	asrs	r2, r2, #9
 8001d94:	17db      	asrs	r3, r3, #31
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	801a      	strh	r2, [r3, #0]

    // Update buffer index
    buffer_index = (buffer_index + 1) % N;
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <readGyroData+0x164>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <readGyroData+0x174>)
 8001da6:	fb83 1302 	smull	r1, r3, r3, r2
 8001daa:	1259      	asrs	r1, r3, #9
 8001dac:	17d3      	asrs	r3, r2, #31
 8001dae:	1acb      	subs	r3, r1, r3
 8001db0:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	4a03      	ldr	r2, [pc, #12]	; (8001dc8 <readGyroData+0x164>)
 8001dbc:	6013      	str	r3, [r2, #0]

    return;
 8001dbe:	bf00      	nop
}
 8001dc0:	3728      	adds	r7, #40	; 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000db9c 	.word	0x2000db9c
 8001dcc:	2000b61c 	.word	0x2000b61c
 8001dd0:	2000c29c 	.word	0x2000c29c
 8001dd4:	2000cf1c 	.word	0x2000cf1c
 8001dd8:	51eb851f 	.word	0x51eb851f

08001ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_MspInit+0x44>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <HAL_MspInit+0x44>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_MspInit+0x44>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_MspInit+0x44>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_MspInit+0x44>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_MspInit+0x44>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b0aa      	sub	sp, #168	; 0xa8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	2284      	movs	r2, #132	; 0x84
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f005 fdd9 	bl	80079fc <memset>
  if(hi2c->Instance==I2C2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <HAL_I2C_MspInit+0xb0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d13b      	bne.n	8001ecc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e5e:	f107 0310 	add.w	r3, r7, #16
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 f82e 	bl	8004ec4 <HAL_RCCEx_PeriphCLKConfig>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e6e:	f7ff fea5 	bl	8001bbc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_I2C_MspInit+0xb4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <HAL_I2C_MspInit+0xb4>)
 8001e78:	f043 0320 	orr.w	r3, r3, #32
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_I2C_MspInit+0xb4>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e90:	2312      	movs	r3, #18
 8001e92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ea8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001eac:	4619      	mov	r1, r3
 8001eae:	480b      	ldr	r0, [pc, #44]	; (8001edc <HAL_I2C_MspInit+0xb8>)
 8001eb0:	f001 f8be 	bl	8003030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_I2C_MspInit+0xb4>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <HAL_I2C_MspInit+0xb4>)
 8001eba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_I2C_MspInit+0xb4>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ecc:	bf00      	nop
 8001ece:	37a8      	adds	r7, #168	; 0xa8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40005800 	.word	0x40005800
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40021400 	.word	0x40021400

08001ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a37      	ldr	r2, [pc, #220]	; (8001fdc <HAL_SPI_MspInit+0xfc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d168      	bne.n	8001fd4 <HAL_SPI_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f02:	4b37      	ldr	r3, [pc, #220]	; (8001fe0 <HAL_SPI_MspInit+0x100>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a36      	ldr	r2, [pc, #216]	; (8001fe0 <HAL_SPI_MspInit+0x100>)
 8001f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <HAL_SPI_MspInit+0x100>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	4b31      	ldr	r3, [pc, #196]	; (8001fe0 <HAL_SPI_MspInit+0x100>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a30      	ldr	r2, [pc, #192]	; (8001fe0 <HAL_SPI_MspInit+0x100>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b2e      	ldr	r3, [pc, #184]	; (8001fe0 <HAL_SPI_MspInit+0x100>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f32:	23e0      	movs	r3, #224	; 0xe0
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f42:	2305      	movs	r3, #5
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4825      	ldr	r0, [pc, #148]	; (8001fe4 <HAL_SPI_MspInit+0x104>)
 8001f4e:	f001 f86f 	bl	8003030 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001f54:	4a25      	ldr	r2, [pc, #148]	; (8001fec <HAL_SPI_MspInit+0x10c>)
 8001f56:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001f5a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f5e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f60:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001f62:	2240      	movs	r2, #64	; 0x40
 8001f64:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f72:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f74:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f7a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f82:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001f92:	2204      	movs	r2, #4
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001fa8:	480f      	ldr	r0, [pc, #60]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001faa:	f000 fc37 	bl	800281c <HAL_DMA_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_SPI_MspInit+0xd8>
    {
      Error_Handler();
 8001fb4:	f7ff fe02 	bl	8001bbc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_SPI_MspInit+0x108>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	2023      	movs	r0, #35	; 0x23
 8001fca:	f000 fbf0 	bl	80027ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fce:	2023      	movs	r0, #35	; 0x23
 8001fd0:	f000 fc09 	bl	80027e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40013000 	.word	0x40013000
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	2000a198 	.word	0x2000a198
 8001fec:	40026458 	.word	0x40026458

08001ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0aa      	sub	sp, #168	; 0xa8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	2284      	movs	r2, #132	; 0x84
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f005 fcf3 	bl	80079fc <memset>
  if(huart->Instance==USART6)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <HAL_UART_MspInit+0xc4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d144      	bne.n	80020aa <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002020:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002024:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002026:	2300      	movs	r3, #0
 8002028:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800202a:	f107 0310 	add.w	r3, r7, #16
 800202e:	4618      	mov	r0, r3
 8002030:	f002 ff48 	bl	8004ec4 <HAL_RCCEx_PeriphCLKConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800203a:	f7ff fdbf 	bl	8001bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <HAL_UART_MspInit+0xc8>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <HAL_UART_MspInit+0xc8>)
 8002044:	f043 0320 	orr.w	r3, r3, #32
 8002048:	6453      	str	r3, [r2, #68]	; 0x44
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_UART_MspInit+0xc8>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_UART_MspInit+0xc8>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_UART_MspInit+0xc8>)
 800205c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_UART_MspInit+0xc8>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800206e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002088:	2308      	movs	r3, #8
 800208a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800208e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002092:	4619      	mov	r1, r3
 8002094:	4809      	ldr	r0, [pc, #36]	; (80020bc <HAL_UART_MspInit+0xcc>)
 8002096:	f000 ffcb 	bl	8003030 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	2047      	movs	r0, #71	; 0x47
 80020a0:	f000 fb85 	bl	80027ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80020a4:	2047      	movs	r0, #71	; 0x47
 80020a6:	f000 fb9e 	bl	80027e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	37a8      	adds	r7, #168	; 0xa8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40011400 	.word	0x40011400
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40021800 	.word	0x40021800

080020c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <MemManage_Handler+0x4>

080020da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <BusFault_Handler+0x4>

080020e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <UsageFault_Handler+0x4>

080020e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002114:	f000 fa2c 	bl	8002570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

		key = 0;
 8002122:	4b51      	ldr	r3, [pc, #324]	; (8002268 <EXTI9_5_IRQHandler+0x14c>)
 8002124:	2200      	movs	r2, #0
 8002126:	801a      	strh	r2, [r3, #0]
		for(uint8_t c=0 ; c<4 ; c++){
 8002128:	2300      	movs	r3, #0
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	e075      	b.n	800221a <EXTI9_5_IRQHandler+0xfe>
			for(uint8_t i=0 ; i<4 ; i++){
 800212e:	2300      	movs	r3, #0
 8002130:	71bb      	strb	r3, [r7, #6]
 8002132:	e00e      	b.n	8002152 <EXTI9_5_IRQHandler+0x36>
				HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8002134:	79bb      	ldrb	r3, [r7, #6]
 8002136:	4a4d      	ldr	r2, [pc, #308]	; (800226c <EXTI9_5_IRQHandler+0x150>)
 8002138:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800213c:	79bb      	ldrb	r3, [r7, #6]
 800213e:	4a4c      	ldr	r2, [pc, #304]	; (8002270 <EXTI9_5_IRQHandler+0x154>)
 8002140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002144:	2201      	movs	r2, #1
 8002146:	4619      	mov	r1, r3
 8002148:	f001 f936 	bl	80033b8 <HAL_GPIO_WritePin>
			for(uint8_t i=0 ; i<4 ; i++){
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	3301      	adds	r3, #1
 8002150:	71bb      	strb	r3, [r7, #6]
 8002152:	79bb      	ldrb	r3, [r7, #6]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d9ed      	bls.n	8002134 <EXTI9_5_IRQHandler+0x18>
			}
			HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	4a44      	ldr	r2, [pc, #272]	; (800226c <EXTI9_5_IRQHandler+0x150>)
 800215c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	4a43      	ldr	r2, [pc, #268]	; (8002270 <EXTI9_5_IRQHandler+0x154>)
 8002164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002168:	2200      	movs	r2, #0
 800216a:	4619      	mov	r1, r3
 800216c:	f001 f924 	bl	80033b8 <HAL_GPIO_WritePin>
			for(uint8_t r=0 ; r<4 ; r++){
 8002170:	2300      	movs	r3, #0
 8002172:	717b      	strb	r3, [r7, #5]
 8002174:	e04b      	b.n	800220e <EXTI9_5_IRQHandler+0xf2>
				if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8002176:	797b      	ldrb	r3, [r7, #5]
 8002178:	4a3e      	ldr	r2, [pc, #248]	; (8002274 <EXTI9_5_IRQHandler+0x158>)
 800217a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800217e:	797b      	ldrb	r3, [r7, #5]
 8002180:	493d      	ldr	r1, [pc, #244]	; (8002278 <EXTI9_5_IRQHandler+0x15c>)
 8002182:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002186:	4619      	mov	r1, r3
 8002188:	4610      	mov	r0, r2
 800218a:	f001 f8fd 	bl	8003388 <HAL_GPIO_ReadPin>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d139      	bne.n	8002208 <EXTI9_5_IRQHandler+0xec>
					if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8002194:	797b      	ldrb	r3, [r7, #5]
 8002196:	4a37      	ldr	r2, [pc, #220]	; (8002274 <EXTI9_5_IRQHandler+0x158>)
 8002198:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800219c:	797b      	ldrb	r3, [r7, #5]
 800219e:	4936      	ldr	r1, [pc, #216]	; (8002278 <EXTI9_5_IRQHandler+0x15c>)
 80021a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80021a4:	4619      	mov	r1, r3
 80021a6:	4610      	mov	r0, r2
 80021a8:	f001 f8ee 	bl	8003388 <HAL_GPIO_ReadPin>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d12a      	bne.n	8002208 <EXTI9_5_IRQHandler+0xec>
						key |= 1<<c;
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	2201      	movs	r2, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	b21a      	sxth	r2, r3
 80021bc:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <EXTI9_5_IRQHandler+0x14c>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <EXTI9_5_IRQHandler+0x14c>)
 80021ca:	801a      	strh	r2, [r3, #0]
						key |= 1<<(r+8);
 80021cc:	797b      	ldrb	r3, [r7, #5]
 80021ce:	3308      	adds	r3, #8
 80021d0:	2201      	movs	r2, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	b21a      	sxth	r2, r3
 80021d8:	4b23      	ldr	r3, [pc, #140]	; (8002268 <EXTI9_5_IRQHandler+0x14c>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	b21b      	sxth	r3, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	b21b      	sxth	r3, r3
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	4b20      	ldr	r3, [pc, #128]	; (8002268 <EXTI9_5_IRQHandler+0x14c>)
 80021e6:	801a      	strh	r2, [r3, #0]
						while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 80021e8:	bf00      	nop
 80021ea:	797b      	ldrb	r3, [r7, #5]
 80021ec:	4a21      	ldr	r2, [pc, #132]	; (8002274 <EXTI9_5_IRQHandler+0x158>)
 80021ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021f2:	797b      	ldrb	r3, [r7, #5]
 80021f4:	4920      	ldr	r1, [pc, #128]	; (8002278 <EXTI9_5_IRQHandler+0x15c>)
 80021f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80021fa:	4619      	mov	r1, r3
 80021fc:	4610      	mov	r0, r2
 80021fe:	f001 f8c3 	bl	8003388 <HAL_GPIO_ReadPin>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <EXTI9_5_IRQHandler+0xce>
			for(uint8_t r=0 ; r<4 ; r++){
 8002208:	797b      	ldrb	r3, [r7, #5]
 800220a:	3301      	adds	r3, #1
 800220c:	717b      	strb	r3, [r7, #5]
 800220e:	797b      	ldrb	r3, [r7, #5]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d9b0      	bls.n	8002176 <EXTI9_5_IRQHandler+0x5a>
		for(uint8_t c=0 ; c<4 ; c++){
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	3301      	adds	r3, #1
 8002218:	71fb      	strb	r3, [r7, #7]
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d986      	bls.n	800212e <EXTI9_5_IRQHandler+0x12>
					}
				}
			}
		}

		keyChar = KeyPadGetChar(key);
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <EXTI9_5_IRQHandler+0x14c>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 f84b 	bl	80022c0 <KeyPadGetChar>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <EXTI9_5_IRQHandler+0x160>)
 8002230:	701a      	strb	r2, [r3, #0]
		key = 0;
 8002232:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <EXTI9_5_IRQHandler+0x14c>)
 8002234:	2200      	movs	r2, #0
 8002236:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8002238:	2200      	movs	r2, #0
 800223a:	f64a 0102 	movw	r1, #43010	; 0xa802
 800223e:	4810      	ldr	r0, [pc, #64]	; (8002280 <EXTI9_5_IRQHandler+0x164>)
 8002240:	f001 f8ba 	bl	80033b8 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002244:	2020      	movs	r0, #32
 8002246:	f001 f8eb 	bl	8003420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800224a:	2040      	movs	r0, #64	; 0x40
 800224c:	f001 f8e8 	bl	8003420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002250:	2080      	movs	r0, #128	; 0x80
 8002252:	f001 f8e5 	bl	8003420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002256:	f44f 7080 	mov.w	r0, #256	; 0x100
 800225a:	f001 f8e1 	bl	8003420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000a284 	.word	0x2000a284
 800226c:	20000010 	.word	0x20000010
 8002270:	08008b00 	.word	0x08008b00
 8002274:	20000020 	.word	0x20000020
 8002278:	08008b08 	.word	0x08008b08
 800227c:	2000a282 	.word	0x2000a282
 8002280:	40020400 	.word	0x40020400

08002284 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <SPI1_IRQHandler+0x10>)
 800228a:	f003 fd59 	bl	8005d40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000a134 	.word	0x2000a134

08002298 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <DMA2_Stream3_IRQHandler+0x10>)
 800229e:	f000 fc5d 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	2000a198 	.word	0x2000a198

080022ac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <USART6_IRQHandler+0x10>)
 80022b2:	f004 f983 	bl	80065bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000a1f8 	.word	0x2000a1f8

080022c0 <KeyPadGetChar>:

/* USER CODE BEGIN 1 */
char KeyPadGetChar(uint16_t	key)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	80fb      	strh	r3, [r7, #6]
	switch(key)
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	f640 0208 	movw	r2, #2056	; 0x808
 80022d0:	4293      	cmp	r3, r2
 80022d2:	f300 8098 	bgt.w	8002406 <KeyPadGetChar+0x146>
 80022d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022da:	dc0d      	bgt.n	80022f8 <KeyPadGetChar+0x38>
 80022dc:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 80022e0:	f300 8091 	bgt.w	8002406 <KeyPadGetChar+0x146>
 80022e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e8:	dc1e      	bgt.n	8002328 <KeyPadGetChar+0x68>
 80022ea:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80022ee:	dc63      	bgt.n	80023b8 <KeyPadGetChar+0xf8>
 80022f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f4:	dc48      	bgt.n	8002388 <KeyPadGetChar+0xc8>
 80022f6:	e086      	b.n	8002406 <KeyPadGetChar+0x146>
 80022f8:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 80022fc:	2b07      	cmp	r3, #7
 80022fe:	f200 8082 	bhi.w	8002406 <KeyPadGetChar+0x146>
 8002302:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <KeyPadGetChar+0x48>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	080023ef 	.word	0x080023ef
 800230c:	080023f3 	.word	0x080023f3
 8002310:	08002407 	.word	0x08002407
 8002314:	080023f7 	.word	0x080023f7
 8002318:	08002407 	.word	0x08002407
 800231c:	08002407 	.word	0x08002407
 8002320:	08002407 	.word	0x08002407
 8002324:	080023fb 	.word	0x080023fb
 8002328:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800232c:	2b07      	cmp	r3, #7
 800232e:	d86a      	bhi.n	8002406 <KeyPadGetChar+0x146>
 8002330:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <KeyPadGetChar+0x78>)
 8002332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002336:	bf00      	nop
 8002338:	080023cf 	.word	0x080023cf
 800233c:	080023db 	.word	0x080023db
 8002340:	08002407 	.word	0x08002407
 8002344:	080023e7 	.word	0x080023e7
 8002348:	08002407 	.word	0x08002407
 800234c:	08002407 	.word	0x08002407
 8002350:	08002407 	.word	0x08002407
 8002354:	08002403 	.word	0x08002403
 8002358:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800235c:	2b07      	cmp	r3, #7
 800235e:	d852      	bhi.n	8002406 <KeyPadGetChar+0x146>
 8002360:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <KeyPadGetChar+0xa8>)
 8002362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002366:	bf00      	nop
 8002368:	080023cb 	.word	0x080023cb
 800236c:	080023d7 	.word	0x080023d7
 8002370:	08002407 	.word	0x08002407
 8002374:	080023e3 	.word	0x080023e3
 8002378:	08002407 	.word	0x08002407
 800237c:	08002407 	.word	0x08002407
 8002380:	08002407 	.word	0x08002407
 8002384:	080023eb 	.word	0x080023eb
 8002388:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800238c:	2b07      	cmp	r3, #7
 800238e:	d83a      	bhi.n	8002406 <KeyPadGetChar+0x146>
 8002390:	a201      	add	r2, pc, #4	; (adr r2, 8002398 <KeyPadGetChar+0xd8>)
 8002392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002396:	bf00      	nop
 8002398:	080023c7 	.word	0x080023c7
 800239c:	080023d3 	.word	0x080023d3
 80023a0:	08002407 	.word	0x08002407
 80023a4:	080023df 	.word	0x080023df
 80023a8:	08002407 	.word	0x08002407
 80023ac:	08002407 	.word	0x08002407
 80023b0:	08002407 	.word	0x08002407
 80023b4:	080023ff 	.word	0x080023ff
 80023b8:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80023bc:	dc23      	bgt.n	8002406 <KeyPadGetChar+0x146>
 80023be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c2:	dcc9      	bgt.n	8002358 <KeyPadGetChar+0x98>
 80023c4:	e01f      	b.n	8002406 <KeyPadGetChar+0x146>
	  {
			case 0x0101:
				return '1';
 80023c6:	2331      	movs	r3, #49	; 0x31
 80023c8:	e01d      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0201:
				return 'A';
 80023ca:	2341      	movs	r3, #65	; 0x41
 80023cc:	e01b      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0401:
				return 'D';
 80023ce:	2344      	movs	r3, #68	; 0x44
 80023d0:	e019      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0102:
				return 'G';
 80023d2:	2347      	movs	r3, #71	; 0x47
 80023d4:	e017      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0202:
				return 'J';
 80023d6:	234a      	movs	r3, #74	; 0x4a
 80023d8:	e015      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0402:
				return 'M';
 80023da:	234d      	movs	r3, #77	; 0x4d
 80023dc:	e013      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0104:
				return 'P';
 80023de:	2350      	movs	r3, #80	; 0x50
 80023e0:	e011      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0204:
				return 'T';
 80023e2:	2354      	movs	r3, #84	; 0x54
 80023e4:	e00f      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0404:
				return 'W';
 80023e6:	2357      	movs	r3, #87	; 0x57
 80023e8:	e00d      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0208:
				return 'O';
 80023ea:	234f      	movs	r3, #79	; 0x4f
 80023ec:	e00b      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0801:
					return 'A';
 80023ee:	2341      	movs	r3, #65	; 0x41
 80023f0:	e009      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0802:
					return 'B';
 80023f2:	2342      	movs	r3, #66	; 0x42
 80023f4:	e007      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0804:
					return 'C';
 80023f6:	2343      	movs	r3, #67	; 0x43
 80023f8:	e005      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0808:
					return 'D';
 80023fa:	2344      	movs	r3, #68	; 0x44
 80023fc:	e003      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0108:
					return '*';
 80023fe:	232a      	movs	r3, #42	; 0x2a
 8002400:	e001      	b.n	8002406 <KeyPadGetChar+0x146>

			case 0x0408:
				return '#';
 8002402:	2323      	movs	r3, #35	; 0x23
 8002404:	e7ff      	b.n	8002406 <KeyPadGetChar+0x146>
		}
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop

08002414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800241c:	4a14      	ldr	r2, [pc, #80]	; (8002470 <_sbrk+0x5c>)
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <_sbrk+0x60>)
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002428:	4b13      	ldr	r3, [pc, #76]	; (8002478 <_sbrk+0x64>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <_sbrk+0x64>)
 8002432:	4a12      	ldr	r2, [pc, #72]	; (800247c <_sbrk+0x68>)
 8002434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <_sbrk+0x64>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	429a      	cmp	r2, r3
 8002442:	d207      	bcs.n	8002454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002444:	f005 fae2 	bl	8007a0c <__errno>
 8002448:	4603      	mov	r3, r0
 800244a:	220c      	movs	r2, #12
 800244c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
 8002452:	e009      	b.n	8002468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <_sbrk+0x64>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <_sbrk+0x64>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <_sbrk+0x64>)
 8002464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002466:	68fb      	ldr	r3, [r7, #12]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20050000 	.word	0x20050000
 8002474:	00000400 	.word	0x00000400
 8002478:	2000dba0 	.word	0x2000dba0
 800247c:	2000dcf0 	.word	0x2000dcf0

08002480 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <SystemInit+0x20>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <SystemInit+0x20>)
 800248c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024a8:	480d      	ldr	r0, [pc, #52]	; (80024e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024aa:	490e      	ldr	r1, [pc, #56]	; (80024e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024ac:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b0:	e002      	b.n	80024b8 <LoopCopyDataInit>

080024b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b6:	3304      	adds	r3, #4

080024b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024bc:	d3f9      	bcc.n	80024b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024be:	4a0b      	ldr	r2, [pc, #44]	; (80024ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024c0:	4c0b      	ldr	r4, [pc, #44]	; (80024f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c4:	e001      	b.n	80024ca <LoopFillZerobss>

080024c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c8:	3204      	adds	r2, #4

080024ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024cc:	d3fb      	bcc.n	80024c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024ce:	f7ff ffd7 	bl	8002480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024d2:	f005 faa1 	bl	8007a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024d6:	f7ff f871 	bl	80015bc <main>
  bx  lr    
 80024da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80024e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80024e8:	08008b74 	.word	0x08008b74
  ldr r2, =_sbss
 80024ec:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80024f0:	2000dcf0 	.word	0x2000dcf0

080024f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f4:	e7fe      	b.n	80024f4 <ADC_IRQHandler>

080024f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024fa:	2003      	movs	r0, #3
 80024fc:	f000 f94c 	bl	8002798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002500:	2000      	movs	r0, #0
 8002502:	f000 f805 	bl	8002510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002506:	f7ff fc69 	bl	8001ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_InitTick+0x54>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_InitTick+0x58>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002526:	fbb3 f3f1 	udiv	r3, r3, r1
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f967 	bl	8002802 <HAL_SYSTICK_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e00e      	b.n	800255c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b0f      	cmp	r3, #15
 8002542:	d80a      	bhi.n	800255a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002544:	2200      	movs	r2, #0
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	f04f 30ff 	mov.w	r0, #4294967295
 800254c:	f000 f92f 	bl	80027ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002550:	4a06      	ldr	r2, [pc, #24]	; (800256c <HAL_InitTick+0x5c>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e000      	b.n	800255c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000030 	.word	0x20000030
 8002568:	20000038 	.word	0x20000038
 800256c:	20000034 	.word	0x20000034

08002570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_IncTick+0x20>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_IncTick+0x24>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4413      	add	r3, r2
 8002580:	4a04      	ldr	r2, [pc, #16]	; (8002594 <HAL_IncTick+0x24>)
 8002582:	6013      	str	r3, [r2, #0]
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000038 	.word	0x20000038
 8002594:	2000dba4 	.word	0x2000dba4

08002598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return uwTick;
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <HAL_GetTick+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	2000dba4 	.word	0x2000dba4

080025b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b8:	f7ff ffee 	bl	8002598 <HAL_GetTick>
 80025bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d005      	beq.n	80025d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_Delay+0x44>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4413      	add	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025d6:	bf00      	nop
 80025d8:	f7ff ffde 	bl	8002598 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d8f7      	bhi.n	80025d8 <HAL_Delay+0x28>
  {
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000038 	.word	0x20000038

080025f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <__NVIC_SetPriorityGrouping+0x40>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002614:	4013      	ands	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <__NVIC_SetPriorityGrouping+0x44>)
 8002622:	4313      	orrs	r3, r2
 8002624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <__NVIC_SetPriorityGrouping+0x40>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	60d3      	str	r3, [r2, #12]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00
 800263c:	05fa0000 	.word	0x05fa0000

08002640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <__NVIC_GetPriorityGrouping+0x18>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	f003 0307 	and.w	r3, r3, #7
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	2b00      	cmp	r3, #0
 800266c:	db0b      	blt.n	8002686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	4907      	ldr	r1, [pc, #28]	; (8002694 <__NVIC_EnableIRQ+0x38>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2001      	movs	r0, #1
 800267e:	fa00 f202 	lsl.w	r2, r0, r2
 8002682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000e100 	.word	0xe000e100

08002698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	6039      	str	r1, [r7, #0]
 80026a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	db0a      	blt.n	80026c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	490c      	ldr	r1, [pc, #48]	; (80026e4 <__NVIC_SetPriority+0x4c>)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	0112      	lsls	r2, r2, #4
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	440b      	add	r3, r1
 80026bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c0:	e00a      	b.n	80026d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4908      	ldr	r1, [pc, #32]	; (80026e8 <__NVIC_SetPriority+0x50>)
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	3b04      	subs	r3, #4
 80026d0:	0112      	lsls	r2, r2, #4
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	440b      	add	r3, r1
 80026d6:	761a      	strb	r2, [r3, #24]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000e100 	.word	0xe000e100
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	; 0x24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f1c3 0307 	rsb	r3, r3, #7
 8002706:	2b04      	cmp	r3, #4
 8002708:	bf28      	it	cs
 800270a:	2304      	movcs	r3, #4
 800270c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3304      	adds	r3, #4
 8002712:	2b06      	cmp	r3, #6
 8002714:	d902      	bls.n	800271c <NVIC_EncodePriority+0x30>
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3b03      	subs	r3, #3
 800271a:	e000      	b.n	800271e <NVIC_EncodePriority+0x32>
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	f04f 32ff 	mov.w	r2, #4294967295
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	401a      	ands	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002734:	f04f 31ff 	mov.w	r1, #4294967295
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	43d9      	mvns	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	4313      	orrs	r3, r2
         );
}
 8002746:	4618      	mov	r0, r3
 8002748:	3724      	adds	r7, #36	; 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002764:	d301      	bcc.n	800276a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002766:	2301      	movs	r3, #1
 8002768:	e00f      	b.n	800278a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276a:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <SysTick_Config+0x40>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002772:	210f      	movs	r1, #15
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	f7ff ff8e 	bl	8002698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <SysTick_Config+0x40>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002782:	4b04      	ldr	r3, [pc, #16]	; (8002794 <SysTick_Config+0x40>)
 8002784:	2207      	movs	r2, #7
 8002786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	e000e010 	.word	0xe000e010

08002798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff ff29 	bl	80025f8 <__NVIC_SetPriorityGrouping>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4603      	mov	r3, r0
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c0:	f7ff ff3e 	bl	8002640 <__NVIC_GetPriorityGrouping>
 80027c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	6978      	ldr	r0, [r7, #20]
 80027cc:	f7ff ff8e 	bl	80026ec <NVIC_EncodePriority>
 80027d0:	4602      	mov	r2, r0
 80027d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff5d 	bl	8002698 <__NVIC_SetPriority>
}
 80027de:	bf00      	nop
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff31 	bl	800265c <__NVIC_EnableIRQ>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff ffa2 	bl	8002754 <SysTick_Config>
 8002810:	4603      	mov	r3, r0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002828:	f7ff feb6 	bl	8002598 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e099      	b.n	800296c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002858:	e00f      	b.n	800287a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800285a:	f7ff fe9d 	bl	8002598 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b05      	cmp	r3, #5
 8002866:	d908      	bls.n	800287a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2203      	movs	r2, #3
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e078      	b.n	800296c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e8      	bne.n	800285a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	4b38      	ldr	r3, [pc, #224]	; (8002974 <HAL_DMA_Init+0x158>)
 8002894:	4013      	ands	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d107      	bne.n	80028e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	4313      	orrs	r3, r2
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f023 0307 	bic.w	r3, r3, #7
 80028fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	2b04      	cmp	r3, #4
 800290c:	d117      	bne.n	800293e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00e      	beq.n	800293e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 fb09 	bl	8002f38 <DMA_CheckFifoParam>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2240      	movs	r2, #64	; 0x40
 8002930:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800293a:	2301      	movs	r3, #1
 800293c:	e016      	b.n	800296c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fac0 	bl	8002ecc <DMA_CalcBaseAndBitshift>
 800294c:	4603      	mov	r3, r0
 800294e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002954:	223f      	movs	r2, #63	; 0x3f
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	f010803f 	.word	0xf010803f

08002978 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_DMA_Start_IT+0x26>
 800299a:	2302      	movs	r3, #2
 800299c:	e048      	b.n	8002a30 <HAL_DMA_Start_IT+0xb8>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d137      	bne.n	8002a22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2202      	movs	r2, #2
 80029b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fa52 	bl	8002e70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d0:	223f      	movs	r2, #63	; 0x3f
 80029d2:	409a      	lsls	r2, r3
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0216 	orr.w	r2, r2, #22
 80029e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029f6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0208 	orr.w	r2, r2, #8
 8002a0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	e005      	b.n	8002a2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a46:	f7ff fda7 	bl	8002598 <HAL_GetTick>
 8002a4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d008      	beq.n	8002a6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e052      	b.n	8002b10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0216 	bic.w	r2, r2, #22
 8002a78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d103      	bne.n	8002a9a <HAL_DMA_Abort+0x62>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0208 	bic.w	r2, r2, #8
 8002aa8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0201 	bic.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aba:	e013      	b.n	8002ae4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002abc:	f7ff fd6c 	bl	8002598 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d90c      	bls.n	8002ae4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e015      	b.n	8002b10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e4      	bne.n	8002abc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	223f      	movs	r2, #63	; 0x3f
 8002af8:	409a      	lsls	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d004      	beq.n	8002b36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00c      	b.n	8002b50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2205      	movs	r2, #5
 8002b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002b68:	4b8e      	ldr	r3, [pc, #568]	; (8002da4 <HAL_DMA_IRQHandler+0x248>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a8e      	ldr	r2, [pc, #568]	; (8002da8 <HAL_DMA_IRQHandler+0x24c>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	0a9b      	lsrs	r3, r3, #10
 8002b74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	2208      	movs	r2, #8
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01a      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0204 	bic.w	r2, r2, #4
 8002bae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	2201      	movs	r2, #1
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d012      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2201      	movs	r2, #1
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	f043 0202 	orr.w	r2, r3, #2
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	2204      	movs	r2, #4
 8002c04:	409a      	lsls	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	2204      	movs	r2, #4
 8002c22:	409a      	lsls	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f043 0204 	orr.w	r2, r3, #4
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	2210      	movs	r2, #16
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d043      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d03c      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	2210      	movs	r2, #16
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d018      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d024      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
 8002c8a:	e01f      	b.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01b      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
 8002c9c:	e016      	b.n	8002ccc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0208 	bic.w	r2, r2, #8
 8002cba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 808f 	beq.w	8002dfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 8087 	beq.w	8002dfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d136      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0216 	bic.w	r2, r2, #22
 8002d14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d103      	bne.n	8002d36 <HAL_DMA_IRQHandler+0x1da>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0208 	bic.w	r2, r2, #8
 8002d44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	223f      	movs	r2, #63	; 0x3f
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d07e      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
        }
        return;
 8002d72:	e079      	b.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01d      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10d      	bne.n	8002dac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d031      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
 8002da0:	e02c      	b.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
 8002da2:	bf00      	nop
 8002da4:	20000030 	.word	0x20000030
 8002da8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d023      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
 8002dbc:	e01e      	b.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10f      	bne.n	8002dec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0210 	bic.w	r2, r2, #16
 8002dda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d032      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d022      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2205      	movs	r2, #5
 8002e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d307      	bcc.n	8002e44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f2      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x2cc>
 8002e42:	e000      	b.n	8002e46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
 8002e66:	e000      	b.n	8002e6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e68:	bf00      	nop
    }
  }
}
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d108      	bne.n	8002eb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002eae:	e007      	b.n	8002ec0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	60da      	str	r2, [r3, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	3b10      	subs	r3, #16
 8002edc:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <DMA_CalcBaseAndBitshift+0x60>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ee6:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <DMA_CalcBaseAndBitshift+0x64>)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d908      	bls.n	8002f0c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <DMA_CalcBaseAndBitshift+0x68>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	1d1a      	adds	r2, r3, #4
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	659a      	str	r2, [r3, #88]	; 0x58
 8002f0a:	e006      	b.n	8002f1a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <DMA_CalcBaseAndBitshift+0x68>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	aaaaaaab 	.word	0xaaaaaaab
 8002f30:	08008b28 	.word	0x08008b28
 8002f34:	fffffc00 	.word	0xfffffc00

08002f38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d11f      	bne.n	8002f92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d856      	bhi.n	8003006 <DMA_CheckFifoParam+0xce>
 8002f58:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <DMA_CheckFifoParam+0x28>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08002f71 	.word	0x08002f71
 8002f64:	08002f83 	.word	0x08002f83
 8002f68:	08002f71 	.word	0x08002f71
 8002f6c:	08003007 	.word	0x08003007
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d046      	beq.n	800300a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f80:	e043      	b.n	800300a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f8a:	d140      	bne.n	800300e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f90:	e03d      	b.n	800300e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f9a:	d121      	bne.n	8002fe0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d837      	bhi.n	8003012 <DMA_CheckFifoParam+0xda>
 8002fa2:	a201      	add	r2, pc, #4	; (adr r2, 8002fa8 <DMA_CheckFifoParam+0x70>)
 8002fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa8:	08002fb9 	.word	0x08002fb9
 8002fac:	08002fbf 	.word	0x08002fbf
 8002fb0:	08002fb9 	.word	0x08002fb9
 8002fb4:	08002fd1 	.word	0x08002fd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
      break;
 8002fbc:	e030      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d025      	beq.n	8003016 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fce:	e022      	b.n	8003016 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fd8:	d11f      	bne.n	800301a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fde:	e01c      	b.n	800301a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d903      	bls.n	8002fee <DMA_CheckFifoParam+0xb6>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d003      	beq.n	8002ff4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fec:	e018      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff2:	e015      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00e      	beq.n	800301e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      break;
 8003004:	e00b      	b.n	800301e <DMA_CheckFifoParam+0xe6>
      break;
 8003006:	bf00      	nop
 8003008:	e00a      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 800300a:	bf00      	nop
 800300c:	e008      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 800300e:	bf00      	nop
 8003010:	e006      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 8003012:	bf00      	nop
 8003014:	e004      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 8003016:	bf00      	nop
 8003018:	e002      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;   
 800301a:	bf00      	nop
 800301c:	e000      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 800301e:	bf00      	nop
    }
  } 
  
  return status; 
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop

08003030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003030:	b480      	push	{r7}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	e175      	b.n	800333c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003050:	2201      	movs	r2, #1
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	4013      	ands	r3, r2
 8003062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	429a      	cmp	r2, r3
 800306a:	f040 8164 	bne.w	8003336 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d005      	beq.n	8003086 <HAL_GPIO_Init+0x56>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d130      	bne.n	80030e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	2203      	movs	r2, #3
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030bc:	2201      	movs	r2, #1
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 0201 	and.w	r2, r3, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d017      	beq.n	8003124 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	2203      	movs	r2, #3
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d123      	bne.n	8003178 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	08da      	lsrs	r2, r3, #3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3208      	adds	r2, #8
 8003138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800313c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	220f      	movs	r2, #15
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	08da      	lsrs	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3208      	adds	r2, #8
 8003172:	69b9      	ldr	r1, [r7, #24]
 8003174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	2203      	movs	r2, #3
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0203 	and.w	r2, r3, #3
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80be 	beq.w	8003336 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ba:	4b66      	ldr	r3, [pc, #408]	; (8003354 <HAL_GPIO_Init+0x324>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	4a65      	ldr	r2, [pc, #404]	; (8003354 <HAL_GPIO_Init+0x324>)
 80031c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031c4:	6453      	str	r3, [r2, #68]	; 0x44
 80031c6:	4b63      	ldr	r3, [pc, #396]	; (8003354 <HAL_GPIO_Init+0x324>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031d2:	4a61      	ldr	r2, [pc, #388]	; (8003358 <HAL_GPIO_Init+0x328>)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	089b      	lsrs	r3, r3, #2
 80031d8:	3302      	adds	r3, #2
 80031da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	220f      	movs	r2, #15
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a58      	ldr	r2, [pc, #352]	; (800335c <HAL_GPIO_Init+0x32c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d037      	beq.n	800326e <HAL_GPIO_Init+0x23e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a57      	ldr	r2, [pc, #348]	; (8003360 <HAL_GPIO_Init+0x330>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d031      	beq.n	800326a <HAL_GPIO_Init+0x23a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a56      	ldr	r2, [pc, #344]	; (8003364 <HAL_GPIO_Init+0x334>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d02b      	beq.n	8003266 <HAL_GPIO_Init+0x236>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a55      	ldr	r2, [pc, #340]	; (8003368 <HAL_GPIO_Init+0x338>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d025      	beq.n	8003262 <HAL_GPIO_Init+0x232>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a54      	ldr	r2, [pc, #336]	; (800336c <HAL_GPIO_Init+0x33c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d01f      	beq.n	800325e <HAL_GPIO_Init+0x22e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a53      	ldr	r2, [pc, #332]	; (8003370 <HAL_GPIO_Init+0x340>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d019      	beq.n	800325a <HAL_GPIO_Init+0x22a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a52      	ldr	r2, [pc, #328]	; (8003374 <HAL_GPIO_Init+0x344>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_GPIO_Init+0x226>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a51      	ldr	r2, [pc, #324]	; (8003378 <HAL_GPIO_Init+0x348>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00d      	beq.n	8003252 <HAL_GPIO_Init+0x222>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a50      	ldr	r2, [pc, #320]	; (800337c <HAL_GPIO_Init+0x34c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d007      	beq.n	800324e <HAL_GPIO_Init+0x21e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a4f      	ldr	r2, [pc, #316]	; (8003380 <HAL_GPIO_Init+0x350>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d101      	bne.n	800324a <HAL_GPIO_Init+0x21a>
 8003246:	2309      	movs	r3, #9
 8003248:	e012      	b.n	8003270 <HAL_GPIO_Init+0x240>
 800324a:	230a      	movs	r3, #10
 800324c:	e010      	b.n	8003270 <HAL_GPIO_Init+0x240>
 800324e:	2308      	movs	r3, #8
 8003250:	e00e      	b.n	8003270 <HAL_GPIO_Init+0x240>
 8003252:	2307      	movs	r3, #7
 8003254:	e00c      	b.n	8003270 <HAL_GPIO_Init+0x240>
 8003256:	2306      	movs	r3, #6
 8003258:	e00a      	b.n	8003270 <HAL_GPIO_Init+0x240>
 800325a:	2305      	movs	r3, #5
 800325c:	e008      	b.n	8003270 <HAL_GPIO_Init+0x240>
 800325e:	2304      	movs	r3, #4
 8003260:	e006      	b.n	8003270 <HAL_GPIO_Init+0x240>
 8003262:	2303      	movs	r3, #3
 8003264:	e004      	b.n	8003270 <HAL_GPIO_Init+0x240>
 8003266:	2302      	movs	r3, #2
 8003268:	e002      	b.n	8003270 <HAL_GPIO_Init+0x240>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_GPIO_Init+0x240>
 800326e:	2300      	movs	r3, #0
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	f002 0203 	and.w	r2, r2, #3
 8003276:	0092      	lsls	r2, r2, #2
 8003278:	4093      	lsls	r3, r2
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003280:	4935      	ldr	r1, [pc, #212]	; (8003358 <HAL_GPIO_Init+0x328>)
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	3302      	adds	r3, #2
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800328e:	4b3d      	ldr	r3, [pc, #244]	; (8003384 <HAL_GPIO_Init+0x354>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032b2:	4a34      	ldr	r2, [pc, #208]	; (8003384 <HAL_GPIO_Init+0x354>)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032b8:	4b32      	ldr	r3, [pc, #200]	; (8003384 <HAL_GPIO_Init+0x354>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032dc:	4a29      	ldr	r2, [pc, #164]	; (8003384 <HAL_GPIO_Init+0x354>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032e2:	4b28      	ldr	r3, [pc, #160]	; (8003384 <HAL_GPIO_Init+0x354>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4013      	ands	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003306:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <HAL_GPIO_Init+0x354>)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800330c:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <HAL_GPIO_Init+0x354>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003330:	4a14      	ldr	r2, [pc, #80]	; (8003384 <HAL_GPIO_Init+0x354>)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3301      	adds	r3, #1
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b0f      	cmp	r3, #15
 8003340:	f67f ae86 	bls.w	8003050 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	3724      	adds	r7, #36	; 0x24
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	40013800 	.word	0x40013800
 800335c:	40020000 	.word	0x40020000
 8003360:	40020400 	.word	0x40020400
 8003364:	40020800 	.word	0x40020800
 8003368:	40020c00 	.word	0x40020c00
 800336c:	40021000 	.word	0x40021000
 8003370:	40021400 	.word	0x40021400
 8003374:	40021800 	.word	0x40021800
 8003378:	40021c00 	.word	0x40021c00
 800337c:	40022000 	.word	0x40022000
 8003380:	40022400 	.word	0x40022400
 8003384:	40013c00 	.word	0x40013c00

08003388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	887b      	ldrh	r3, [r7, #2]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
 80033a4:	e001      	b.n	80033aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
 80033c4:	4613      	mov	r3, r2
 80033c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033c8:	787b      	ldrb	r3, [r7, #1]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033d4:	e003      	b.n	80033de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033d6:	887b      	ldrh	r3, [r7, #2]
 80033d8:	041a      	lsls	r2, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	619a      	str	r2, [r3, #24]
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033fc:	887a      	ldrh	r2, [r7, #2]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4013      	ands	r3, r2
 8003402:	041a      	lsls	r2, r3, #16
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	43d9      	mvns	r1, r3
 8003408:	887b      	ldrh	r3, [r7, #2]
 800340a:	400b      	ands	r3, r1
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	619a      	str	r2, [r3, #24]
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800342a:	4b08      	ldr	r3, [pc, #32]	; (800344c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d006      	beq.n	8003444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003436:	4a05      	ldr	r2, [pc, #20]	; (800344c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f806 	bl	8003450 <HAL_GPIO_EXTI_Callback>
  }
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40013c00 	.word	0x40013c00

08003450 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e07f      	b.n	800357a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe fcc8 	bl	8001e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2224      	movs	r2, #36	; 0x24
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d107      	bne.n	80034e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	e006      	b.n	80034f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d104      	bne.n	8003502 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003500:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <HAL_I2C_Init+0x11c>)
 800350e:	430b      	orrs	r3, r1
 8003510:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003520:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69d9      	ldr	r1, [r3, #28]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1a      	ldr	r2, [r3, #32]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	02008000 	.word	0x02008000

08003588 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	461a      	mov	r2, r3
 8003594:	460b      	mov	r3, r1
 8003596:	817b      	strh	r3, [r7, #10]
 8003598:	4613      	mov	r3, r2
 800359a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	f040 80da 	bne.w	800375e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_I2C_Master_Transmit+0x30>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e0d3      	b.n	8003760 <HAL_I2C_Master_Transmit+0x1d8>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035c0:	f7fe ffea 	bl	8002598 <HAL_GetTick>
 80035c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	2319      	movs	r3, #25
 80035cc:	2201      	movs	r2, #1
 80035ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fcbc 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0be      	b.n	8003760 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2221      	movs	r2, #33	; 0x21
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2210      	movs	r2, #16
 80035ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	893a      	ldrh	r2, [r7, #8]
 8003602:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	2bff      	cmp	r3, #255	; 0xff
 8003612:	d90e      	bls.n	8003632 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	22ff      	movs	r2, #255	; 0xff
 8003618:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361e:	b2da      	uxtb	r2, r3
 8003620:	8979      	ldrh	r1, [r7, #10]
 8003622:	4b51      	ldr	r3, [pc, #324]	; (8003768 <HAL_I2C_Master_Transmit+0x1e0>)
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fea6 	bl	800437c <I2C_TransferConfig>
 8003630:	e06c      	b.n	800370c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003640:	b2da      	uxtb	r2, r3
 8003642:	8979      	ldrh	r1, [r7, #10]
 8003644:	4b48      	ldr	r3, [pc, #288]	; (8003768 <HAL_I2C_Master_Transmit+0x1e0>)
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 fe95 	bl	800437c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003652:	e05b      	b.n	800370c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	6a39      	ldr	r1, [r7, #32]
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fcb9 	bl	8003fd0 <I2C_WaitOnTXISFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e07b      	b.n	8003760 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d034      	beq.n	800370c <HAL_I2C_Master_Transmit+0x184>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d130      	bne.n	800370c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	2200      	movs	r2, #0
 80036b2:	2180      	movs	r1, #128	; 0x80
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fc4b 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e04d      	b.n	8003760 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2bff      	cmp	r3, #255	; 0xff
 80036cc:	d90e      	bls.n	80036ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	22ff      	movs	r2, #255	; 0xff
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	8979      	ldrh	r1, [r7, #10]
 80036dc:	2300      	movs	r3, #0
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fe49 	bl	800437c <I2C_TransferConfig>
 80036ea:	e00f      	b.n	800370c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	8979      	ldrh	r1, [r7, #10]
 80036fe:	2300      	movs	r3, #0
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fe38 	bl	800437c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d19e      	bne.n	8003654 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	6a39      	ldr	r1, [r7, #32]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fc98 	bl	8004050 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e01a      	b.n	8003760 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2220      	movs	r2, #32
 8003730:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6859      	ldr	r1, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_I2C_Master_Transmit+0x1e4>)
 800373e:	400b      	ands	r3, r1
 8003740:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
  }
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	80002000 	.word	0x80002000
 800376c:	fe00e800 	.word	0xfe00e800

08003770 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	461a      	mov	r2, r3
 800377c:	460b      	mov	r3, r1
 800377e:	817b      	strh	r3, [r7, #10]
 8003780:	4613      	mov	r3, r2
 8003782:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b20      	cmp	r3, #32
 800378e:	f040 80db 	bne.w	8003948 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_I2C_Master_Receive+0x30>
 800379c:	2302      	movs	r3, #2
 800379e:	e0d4      	b.n	800394a <HAL_I2C_Master_Receive+0x1da>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037a8:	f7fe fef6 	bl	8002598 <HAL_GetTick>
 80037ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	2319      	movs	r3, #25
 80037b4:	2201      	movs	r2, #1
 80037b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fbc8 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e0bf      	b.n	800394a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2222      	movs	r2, #34	; 0x22
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2210      	movs	r2, #16
 80037d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	893a      	ldrh	r2, [r7, #8]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2bff      	cmp	r3, #255	; 0xff
 80037fa:	d90e      	bls.n	800381a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	22ff      	movs	r2, #255	; 0xff
 8003800:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003806:	b2da      	uxtb	r2, r3
 8003808:	8979      	ldrh	r1, [r7, #10]
 800380a:	4b52      	ldr	r3, [pc, #328]	; (8003954 <HAL_I2C_Master_Receive+0x1e4>)
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 fdb2 	bl	800437c <I2C_TransferConfig>
 8003818:	e06d      	b.n	80038f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	b2da      	uxtb	r2, r3
 800382a:	8979      	ldrh	r1, [r7, #10]
 800382c:	4b49      	ldr	r3, [pc, #292]	; (8003954 <HAL_I2C_Master_Receive+0x1e4>)
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fda1 	bl	800437c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800383a:	e05c      	b.n	80038f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	6a39      	ldr	r1, [r7, #32]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 fc41 	bl	80040c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e07c      	b.n	800394a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d034      	beq.n	80038f6 <HAL_I2C_Master_Receive+0x186>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003890:	2b00      	cmp	r3, #0
 8003892:	d130      	bne.n	80038f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	2200      	movs	r2, #0
 800389c:	2180      	movs	r1, #128	; 0x80
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fb56 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e04d      	b.n	800394a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2bff      	cmp	r3, #255	; 0xff
 80038b6:	d90e      	bls.n	80038d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	22ff      	movs	r2, #255	; 0xff
 80038bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	8979      	ldrh	r1, [r7, #10]
 80038c6:	2300      	movs	r3, #0
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 fd54 	bl	800437c <I2C_TransferConfig>
 80038d4:	e00f      	b.n	80038f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	8979      	ldrh	r1, [r7, #10]
 80038e8:	2300      	movs	r3, #0
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fd43 	bl	800437c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d19d      	bne.n	800383c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	6a39      	ldr	r1, [r7, #32]
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fba3 	bl	8004050 <I2C_WaitOnSTOPFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e01a      	b.n	800394a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2220      	movs	r2, #32
 800391a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6859      	ldr	r1, [r3, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <HAL_I2C_Master_Receive+0x1e8>)
 8003928:	400b      	ands	r3, r1
 800392a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	e000      	b.n	800394a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003948:	2302      	movs	r3, #2
  }
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	80002400 	.word	0x80002400
 8003958:	fe00e800 	.word	0xfe00e800

0800395c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	4608      	mov	r0, r1
 8003966:	4611      	mov	r1, r2
 8003968:	461a      	mov	r2, r3
 800396a:	4603      	mov	r3, r0
 800396c:	817b      	strh	r3, [r7, #10]
 800396e:	460b      	mov	r3, r1
 8003970:	813b      	strh	r3, [r7, #8]
 8003972:	4613      	mov	r3, r2
 8003974:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b20      	cmp	r3, #32
 8003980:	f040 80f9 	bne.w	8003b76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_I2C_Mem_Write+0x34>
 800398a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800398c:	2b00      	cmp	r3, #0
 800398e:	d105      	bne.n	800399c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003996:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0ed      	b.n	8003b78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_I2C_Mem_Write+0x4e>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0e6      	b.n	8003b78 <HAL_I2C_Mem_Write+0x21c>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039b2:	f7fe fdf1 	bl	8002598 <HAL_GetTick>
 80039b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	2319      	movs	r3, #25
 80039be:	2201      	movs	r2, #1
 80039c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fac3 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0d1      	b.n	8003b78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2221      	movs	r2, #33	; 0x21
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2240      	movs	r2, #64	; 0x40
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a3a      	ldr	r2, [r7, #32]
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039fc:	88f8      	ldrh	r0, [r7, #6]
 80039fe:	893a      	ldrh	r2, [r7, #8]
 8003a00:	8979      	ldrh	r1, [r7, #10]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f9d3 	bl	8003db8 <I2C_RequestMemoryWrite>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0a9      	b.n	8003b78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2bff      	cmp	r3, #255	; 0xff
 8003a2c:	d90e      	bls.n	8003a4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	22ff      	movs	r2, #255	; 0xff
 8003a32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	8979      	ldrh	r1, [r7, #10]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 fc99 	bl	800437c <I2C_TransferConfig>
 8003a4a:	e00f      	b.n	8003a6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	8979      	ldrh	r1, [r7, #10]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fc88 	bl	800437c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 faad 	bl	8003fd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e07b      	b.n	8003b78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d034      	beq.n	8003b24 <HAL_I2C_Mem_Write+0x1c8>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d130      	bne.n	8003b24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2180      	movs	r1, #128	; 0x80
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fa3f 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e04d      	b.n	8003b78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2bff      	cmp	r3, #255	; 0xff
 8003ae4:	d90e      	bls.n	8003b04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	22ff      	movs	r2, #255	; 0xff
 8003aea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	8979      	ldrh	r1, [r7, #10]
 8003af4:	2300      	movs	r3, #0
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fc3d 	bl	800437c <I2C_TransferConfig>
 8003b02:	e00f      	b.n	8003b24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	8979      	ldrh	r1, [r7, #10]
 8003b16:	2300      	movs	r3, #0
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fc2c 	bl	800437c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d19e      	bne.n	8003a6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fa8c 	bl	8004050 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e01a      	b.n	8003b78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2220      	movs	r2, #32
 8003b48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <HAL_I2C_Mem_Write+0x224>)
 8003b56:	400b      	ands	r3, r1
 8003b58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e000      	b.n	8003b78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
  }
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	fe00e800 	.word	0xfe00e800

08003b84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	4611      	mov	r1, r2
 8003b90:	461a      	mov	r2, r3
 8003b92:	4603      	mov	r3, r0
 8003b94:	817b      	strh	r3, [r7, #10]
 8003b96:	460b      	mov	r3, r1
 8003b98:	813b      	strh	r3, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	f040 80fd 	bne.w	8003da6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_I2C_Mem_Read+0x34>
 8003bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0f1      	b.n	8003da8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_I2C_Mem_Read+0x4e>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e0ea      	b.n	8003da8 <HAL_I2C_Mem_Read+0x224>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bda:	f7fe fcdd 	bl	8002598 <HAL_GetTick>
 8003bde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2319      	movs	r3, #25
 8003be6:	2201      	movs	r2, #1
 8003be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f9af 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0d5      	b.n	8003da8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2222      	movs	r2, #34	; 0x22
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2240      	movs	r2, #64	; 0x40
 8003c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a3a      	ldr	r2, [r7, #32]
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c24:	88f8      	ldrh	r0, [r7, #6]
 8003c26:	893a      	ldrh	r2, [r7, #8]
 8003c28:	8979      	ldrh	r1, [r7, #10]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	4603      	mov	r3, r0
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f913 	bl	8003e60 <I2C_RequestMemoryRead>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0ad      	b.n	8003da8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2bff      	cmp	r3, #255	; 0xff
 8003c54:	d90e      	bls.n	8003c74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	22ff      	movs	r2, #255	; 0xff
 8003c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	8979      	ldrh	r1, [r7, #10]
 8003c64:	4b52      	ldr	r3, [pc, #328]	; (8003db0 <HAL_I2C_Mem_Read+0x22c>)
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fb85 	bl	800437c <I2C_TransferConfig>
 8003c72:	e00f      	b.n	8003c94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	8979      	ldrh	r1, [r7, #10]
 8003c86:	4b4a      	ldr	r3, [pc, #296]	; (8003db0 <HAL_I2C_Mem_Read+0x22c>)
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fb74 	bl	800437c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2104      	movs	r1, #4
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f956 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e07c      	b.n	8003da8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d034      	beq.n	8003d54 <HAL_I2C_Mem_Read+0x1d0>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d130      	bne.n	8003d54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2180      	movs	r1, #128	; 0x80
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f927 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e04d      	b.n	8003da8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2bff      	cmp	r3, #255	; 0xff
 8003d14:	d90e      	bls.n	8003d34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	22ff      	movs	r2, #255	; 0xff
 8003d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	8979      	ldrh	r1, [r7, #10]
 8003d24:	2300      	movs	r3, #0
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fb25 	bl	800437c <I2C_TransferConfig>
 8003d32:	e00f      	b.n	8003d54 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	8979      	ldrh	r1, [r7, #10]
 8003d46:	2300      	movs	r3, #0
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fb14 	bl	800437c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d19a      	bne.n	8003c94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f974 	bl	8004050 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e01a      	b.n	8003da8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2220      	movs	r2, #32
 8003d78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_I2C_Mem_Read+0x230>)
 8003d86:	400b      	ands	r3, r1
 8003d88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e000      	b.n	8003da8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
  }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	80002400 	.word	0x80002400
 8003db4:	fe00e800 	.word	0xfe00e800

08003db8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	817b      	strh	r3, [r7, #10]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	813b      	strh	r3, [r7, #8]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	8979      	ldrh	r1, [r7, #10]
 8003dd8:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <I2C_RequestMemoryWrite+0xa4>)
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 facb 	bl	800437c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	69b9      	ldr	r1, [r7, #24]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f8f0 	bl	8003fd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e02c      	b.n	8003e54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d105      	bne.n	8003e0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e00:	893b      	ldrh	r3, [r7, #8]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28
 8003e0a:	e015      	b.n	8003e38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e0c:	893b      	ldrh	r3, [r7, #8]
 8003e0e:	0a1b      	lsrs	r3, r3, #8
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	69b9      	ldr	r1, [r7, #24]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f8d6 	bl	8003fd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e012      	b.n	8003e54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e2e:	893b      	ldrh	r3, [r7, #8]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2180      	movs	r1, #128	; 0x80
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f884 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	80002000 	.word	0x80002000

08003e60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	4608      	mov	r0, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	817b      	strh	r3, [r7, #10]
 8003e72:	460b      	mov	r3, r1
 8003e74:	813b      	strh	r3, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	8979      	ldrh	r1, [r7, #10]
 8003e80:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <I2C_RequestMemoryRead+0xa4>)
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	2300      	movs	r3, #0
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fa78 	bl	800437c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	69b9      	ldr	r1, [r7, #24]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f89d 	bl	8003fd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e02c      	b.n	8003efa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ea0:	88fb      	ldrh	r3, [r7, #6]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d105      	bne.n	8003eb2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ea6:	893b      	ldrh	r3, [r7, #8]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
 8003eb0:	e015      	b.n	8003ede <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003eb2:	893b      	ldrh	r3, [r7, #8]
 8003eb4:	0a1b      	lsrs	r3, r3, #8
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	69b9      	ldr	r1, [r7, #24]
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f883 	bl	8003fd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e012      	b.n	8003efa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed4:	893b      	ldrh	r3, [r7, #8]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2140      	movs	r1, #64	; 0x40
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f831 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	80002000 	.word	0x80002000

08003f08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d103      	bne.n	8003f26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2200      	movs	r2, #0
 8003f24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d007      	beq.n	8003f44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	619a      	str	r2, [r3, #24]
  }
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f60:	e022      	b.n	8003fa8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d01e      	beq.n	8003fa8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7fe fb15 	bl	8002598 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d302      	bcc.n	8003f80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d113      	bne.n	8003fa8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f84:	f043 0220 	orr.w	r2, r3, #32
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e00f      	b.n	8003fc8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d0cd      	beq.n	8003f62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fdc:	e02c      	b.n	8004038 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f8ea 	bl	80041bc <I2C_IsErrorOccurred>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e02a      	b.n	8004048 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d01e      	beq.n	8004038 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffa:	f7fe facd 	bl	8002598 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	d302      	bcc.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d113      	bne.n	8004038 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004014:	f043 0220 	orr.w	r2, r3, #32
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e007      	b.n	8004048 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b02      	cmp	r3, #2
 8004044:	d1cb      	bne.n	8003fde <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800405c:	e028      	b.n	80040b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f8aa 	bl	80041bc <I2C_IsErrorOccurred>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e026      	b.n	80040c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004072:	f7fe fa91 	bl	8002598 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	429a      	cmp	r2, r3
 8004080:	d302      	bcc.n	8004088 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d113      	bne.n	80040b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e007      	b.n	80040c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d1cf      	bne.n	800405e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040d4:	e064      	b.n	80041a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f86e 	bl	80041bc <I2C_IsErrorOccurred>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e062      	b.n	80041b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d138      	bne.n	800416a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b04      	cmp	r3, #4
 8004104:	d105      	bne.n	8004112 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	e04e      	b.n	80041b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b10      	cmp	r3, #16
 800411e:	d107      	bne.n	8004130 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2210      	movs	r2, #16
 8004126:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2204      	movs	r2, #4
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
 800412e:	e002      	b.n	8004136 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2220      	movs	r2, #32
 800413c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800414a:	400b      	ands	r3, r1
 800414c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e022      	b.n	80041b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416a:	f7fe fa15 	bl	8002598 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	429a      	cmp	r2, r3
 8004178:	d302      	bcc.n	8004180 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10f      	bne.n	80041a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e007      	b.n	80041b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d193      	bne.n	80040d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	fe00e800 	.word	0xfe00e800

080041bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	; 0x28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d068      	beq.n	80042ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2210      	movs	r2, #16
 80041ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041f0:	e049      	b.n	8004286 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d045      	beq.n	8004286 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fe f9cd 	bl	8002598 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <I2C_IsErrorOccurred+0x54>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d13a      	bne.n	8004286 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004222:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800422e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004232:	d121      	bne.n	8004278 <I2C_IsErrorOccurred+0xbc>
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800423a:	d01d      	beq.n	8004278 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800423c:	7cfb      	ldrb	r3, [r7, #19]
 800423e:	2b20      	cmp	r3, #32
 8004240:	d01a      	beq.n	8004278 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004250:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004252:	f7fe f9a1 	bl	8002598 <HAL_GetTick>
 8004256:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004258:	e00e      	b.n	8004278 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800425a:	f7fe f99d 	bl	8002598 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b19      	cmp	r3, #25
 8004266:	d907      	bls.n	8004278 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	f043 0320 	orr.w	r3, r3, #32
 800426e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004276:	e006      	b.n	8004286 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b20      	cmp	r3, #32
 8004284:	d1e9      	bne.n	800425a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b20      	cmp	r3, #32
 8004292:	d003      	beq.n	800429c <I2C_IsErrorOccurred+0xe0>
 8004294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0aa      	beq.n	80041f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800429c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d103      	bne.n	80042ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2220      	movs	r2, #32
 80042aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	f043 0304 	orr.w	r3, r3, #4
 80042b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	f043 0308 	orr.w	r3, r3, #8
 80042f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00b      	beq.n	8004328 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	f043 0302 	orr.w	r3, r3, #2
 8004316:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004320:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01c      	beq.n	800436a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff fde9 	bl	8003f08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6859      	ldr	r1, [r3, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <I2C_IsErrorOccurred+0x1bc>)
 8004342:	400b      	ands	r3, r1
 8004344:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	431a      	orrs	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800436a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800436e:	4618      	mov	r0, r3
 8004370:	3728      	adds	r7, #40	; 0x28
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	fe00e800 	.word	0xfe00e800

0800437c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	607b      	str	r3, [r7, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	817b      	strh	r3, [r7, #10]
 800438a:	4613      	mov	r3, r2
 800438c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800438e:	897b      	ldrh	r3, [r7, #10]
 8004390:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004394:	7a7b      	ldrb	r3, [r7, #9]
 8004396:	041b      	lsls	r3, r3, #16
 8004398:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800439c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	0d5b      	lsrs	r3, r3, #21
 80043b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80043ba:	4b08      	ldr	r3, [pc, #32]	; (80043dc <I2C_TransferConfig+0x60>)
 80043bc:	430b      	orrs	r3, r1
 80043be:	43db      	mvns	r3, r3
 80043c0:	ea02 0103 	and.w	r1, r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	03ff63ff 	.word	0x03ff63ff

080043e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d138      	bne.n	8004468 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004400:	2302      	movs	r3, #2
 8004402:	e032      	b.n	800446a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2224      	movs	r2, #36	; 0x24
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004432:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6819      	ldr	r1, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	e000      	b.n	800446a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004468:	2302      	movs	r3, #2
  }
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b20      	cmp	r3, #32
 800448a:	d139      	bne.n	8004500 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004496:	2302      	movs	r3, #2
 8004498:	e033      	b.n	8004502 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2224      	movs	r2, #36	; 0x24
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	e000      	b.n	8004502 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004500:	2302      	movs	r3, #2
  }
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a04      	ldr	r2, [pc, #16]	; (800452c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800451a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451e:	6013      	str	r3, [r2, #0]
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40007000 	.word	0x40007000

08004530 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004538:	2300      	movs	r3, #0
 800453a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e291      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 8087 	beq.w	8004662 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004554:	4b96      	ldr	r3, [pc, #600]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 030c 	and.w	r3, r3, #12
 800455c:	2b04      	cmp	r3, #4
 800455e:	d00c      	beq.n	800457a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004560:	4b93      	ldr	r3, [pc, #588]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 030c 	and.w	r3, r3, #12
 8004568:	2b08      	cmp	r3, #8
 800456a:	d112      	bne.n	8004592 <HAL_RCC_OscConfig+0x62>
 800456c:	4b90      	ldr	r3, [pc, #576]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004578:	d10b      	bne.n	8004592 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457a:	4b8d      	ldr	r3, [pc, #564]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d06c      	beq.n	8004660 <HAL_RCC_OscConfig+0x130>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d168      	bne.n	8004660 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e26b      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459a:	d106      	bne.n	80045aa <HAL_RCC_OscConfig+0x7a>
 800459c:	4b84      	ldr	r3, [pc, #528]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a83      	ldr	r2, [pc, #524]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	e02e      	b.n	8004608 <HAL_RCC_OscConfig+0xd8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x9c>
 80045b2:	4b7f      	ldr	r3, [pc, #508]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a7e      	ldr	r2, [pc, #504]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	4b7c      	ldr	r3, [pc, #496]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a7b      	ldr	r2, [pc, #492]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e01d      	b.n	8004608 <HAL_RCC_OscConfig+0xd8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCC_OscConfig+0xc0>
 80045d6:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a75      	ldr	r2, [pc, #468]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	4b73      	ldr	r3, [pc, #460]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a72      	ldr	r2, [pc, #456]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	e00b      	b.n	8004608 <HAL_RCC_OscConfig+0xd8>
 80045f0:	4b6f      	ldr	r3, [pc, #444]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a6e      	ldr	r2, [pc, #440]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b6c      	ldr	r3, [pc, #432]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a6b      	ldr	r2, [pc, #428]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d013      	beq.n	8004638 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fd ffc2 	bl	8002598 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004618:	f7fd ffbe 	bl	8002598 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	; 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e21f      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462a:	4b61      	ldr	r3, [pc, #388]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0xe8>
 8004636:	e014      	b.n	8004662 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fd ffae 	bl	8002598 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004640:	f7fd ffaa 	bl	8002598 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b64      	cmp	r3, #100	; 0x64
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e20b      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004652:	4b57      	ldr	r3, [pc, #348]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x110>
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d069      	beq.n	8004742 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800466e:	4b50      	ldr	r3, [pc, #320]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00b      	beq.n	8004692 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467a:	4b4d      	ldr	r3, [pc, #308]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b08      	cmp	r3, #8
 8004684:	d11c      	bne.n	80046c0 <HAL_RCC_OscConfig+0x190>
 8004686:	4b4a      	ldr	r3, [pc, #296]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d116      	bne.n	80046c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004692:	4b47      	ldr	r3, [pc, #284]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_RCC_OscConfig+0x17a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d001      	beq.n	80046aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e1df      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046aa:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	493d      	ldr	r1, [pc, #244]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046be:	e040      	b.n	8004742 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d023      	beq.n	8004710 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c8:	4b39      	ldr	r3, [pc, #228]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a38      	ldr	r2, [pc, #224]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fd ff60 	bl	8002598 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046dc:	f7fd ff5c 	bl	8002598 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e1bd      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ee:	4b30      	ldr	r3, [pc, #192]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fa:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4929      	ldr	r1, [pc, #164]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800470a:	4313      	orrs	r3, r2
 800470c:	600b      	str	r3, [r1, #0]
 800470e:	e018      	b.n	8004742 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004710:	4b27      	ldr	r3, [pc, #156]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a26      	ldr	r2, [pc, #152]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004716:	f023 0301 	bic.w	r3, r3, #1
 800471a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fd ff3c 	bl	8002598 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004724:	f7fd ff38 	bl	8002598 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e199      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004736:	4b1e      	ldr	r3, [pc, #120]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d038      	beq.n	80047c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d019      	beq.n	800478a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004756:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475a:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004762:	f7fd ff19 	bl	8002598 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800476a:	f7fd ff15 	bl	8002598 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e176      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800477e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x23a>
 8004788:	e01a      	b.n	80047c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800478a:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 800478c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478e:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <HAL_RCC_OscConfig+0x280>)
 8004790:	f023 0301 	bic.w	r3, r3, #1
 8004794:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004796:	f7fd feff 	bl	8002598 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800479c:	e00a      	b.n	80047b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800479e:	f7fd fefb 	bl	8002598 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d903      	bls.n	80047b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e15c      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
 80047b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b4:	4b91      	ldr	r3, [pc, #580]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 80047b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1ee      	bne.n	800479e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80a4 	beq.w	8004916 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ce:	4b8b      	ldr	r3, [pc, #556]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10d      	bne.n	80047f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80047da:	4b88      	ldr	r3, [pc, #544]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a87      	ldr	r2, [pc, #540]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b85      	ldr	r3, [pc, #532]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f6:	4b82      	ldr	r3, [pc, #520]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d118      	bne.n	8004834 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004802:	4b7f      	ldr	r3, [pc, #508]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a7e      	ldr	r2, [pc, #504]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480e:	f7fd fec3 	bl	8002598 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004816:	f7fd febf 	bl	8002598 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b64      	cmp	r3, #100	; 0x64
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e120      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004828:	4b75      	ldr	r3, [pc, #468]	; (8004a00 <HAL_RCC_OscConfig+0x4d0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d106      	bne.n	800484a <HAL_RCC_OscConfig+0x31a>
 800483c:	4b6f      	ldr	r3, [pc, #444]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	4a6e      	ldr	r2, [pc, #440]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
 8004848:	e02d      	b.n	80048a6 <HAL_RCC_OscConfig+0x376>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x33c>
 8004852:	4b6a      	ldr	r3, [pc, #424]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	4a69      	ldr	r2, [pc, #420]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 8004858:	f023 0301 	bic.w	r3, r3, #1
 800485c:	6713      	str	r3, [r2, #112]	; 0x70
 800485e:	4b67      	ldr	r3, [pc, #412]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a66      	ldr	r2, [pc, #408]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 8004864:	f023 0304 	bic.w	r3, r3, #4
 8004868:	6713      	str	r3, [r2, #112]	; 0x70
 800486a:	e01c      	b.n	80048a6 <HAL_RCC_OscConfig+0x376>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b05      	cmp	r3, #5
 8004872:	d10c      	bne.n	800488e <HAL_RCC_OscConfig+0x35e>
 8004874:	4b61      	ldr	r3, [pc, #388]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	4a60      	ldr	r2, [pc, #384]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 800487a:	f043 0304 	orr.w	r3, r3, #4
 800487e:	6713      	str	r3, [r2, #112]	; 0x70
 8004880:	4b5e      	ldr	r3, [pc, #376]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 8004882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004884:	4a5d      	ldr	r2, [pc, #372]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 8004886:	f043 0301 	orr.w	r3, r3, #1
 800488a:	6713      	str	r3, [r2, #112]	; 0x70
 800488c:	e00b      	b.n	80048a6 <HAL_RCC_OscConfig+0x376>
 800488e:	4b5b      	ldr	r3, [pc, #364]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	4a5a      	ldr	r2, [pc, #360]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	6713      	str	r3, [r2, #112]	; 0x70
 800489a:	4b58      	ldr	r3, [pc, #352]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 800489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489e:	4a57      	ldr	r2, [pc, #348]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 80048a0:	f023 0304 	bic.w	r3, r3, #4
 80048a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d015      	beq.n	80048da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ae:	f7fd fe73 	bl	8002598 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b4:	e00a      	b.n	80048cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b6:	f7fd fe6f 	bl	8002598 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e0ce      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048cc:	4b4b      	ldr	r3, [pc, #300]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0ee      	beq.n	80048b6 <HAL_RCC_OscConfig+0x386>
 80048d8:	e014      	b.n	8004904 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048da:	f7fd fe5d 	bl	8002598 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e0:	e00a      	b.n	80048f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e2:	f7fd fe59 	bl	8002598 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e0b8      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f8:	4b40      	ldr	r3, [pc, #256]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1ee      	bne.n	80048e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d105      	bne.n	8004916 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490a:	4b3c      	ldr	r3, [pc, #240]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 8004910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004914:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80a4 	beq.w	8004a68 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004920:	4b36      	ldr	r3, [pc, #216]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 030c 	and.w	r3, r3, #12
 8004928:	2b08      	cmp	r3, #8
 800492a:	d06b      	beq.n	8004a04 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d149      	bne.n	80049c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004934:	4b31      	ldr	r3, [pc, #196]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a30      	ldr	r2, [pc, #192]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 800493a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800493e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fd fe2a 	bl	8002598 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004948:	f7fd fe26 	bl	8002598 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e087      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495a:	4b28      	ldr	r3, [pc, #160]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	019b      	lsls	r3, r3, #6
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	085b      	lsrs	r3, r3, #1
 800497e:	3b01      	subs	r3, #1
 8004980:	041b      	lsls	r3, r3, #16
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	061b      	lsls	r3, r3, #24
 800498a:	4313      	orrs	r3, r2
 800498c:	4a1b      	ldr	r2, [pc, #108]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 800498e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004992:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004994:	4b19      	ldr	r3, [pc, #100]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a18      	ldr	r2, [pc, #96]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 800499a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800499e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fd fdfa 	bl	8002598 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fd fdf6 	bl	8002598 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e057      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ba:	4b10      	ldr	r3, [pc, #64]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0x478>
 80049c6:	e04f      	b.n	8004a68 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a0b      	ldr	r2, [pc, #44]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 80049ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fd fde0 	bl	8002598 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049dc:	f7fd fddc 	bl	8002598 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e03d      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ee:	4b03      	ldr	r3, [pc, #12]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x4ac>
 80049fa:	e035      	b.n	8004a68 <HAL_RCC_OscConfig+0x538>
 80049fc:	40023800 	.word	0x40023800
 8004a00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004a04:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <HAL_RCC_OscConfig+0x544>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d028      	beq.n	8004a64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d121      	bne.n	8004a64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d11a      	bne.n	8004a64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d111      	bne.n	8004a64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d107      	bne.n	8004a64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023800 	.word	0x40023800

08004a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0d0      	b.n	8004c32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a90:	4b6a      	ldr	r3, [pc, #424]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d910      	bls.n	8004ac0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9e:	4b67      	ldr	r3, [pc, #412]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 020f 	bic.w	r2, r3, #15
 8004aa6:	4965      	ldr	r1, [pc, #404]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aae:	4b63      	ldr	r3, [pc, #396]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0b8      	b.n	8004c32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d020      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ad8:	4b59      	ldr	r3, [pc, #356]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	4a58      	ldr	r2, [pc, #352]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004ade:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ae2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004af0:	4b53      	ldr	r3, [pc, #332]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4a52      	ldr	r2, [pc, #328]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004af6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004afa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004afc:	4b50      	ldr	r3, [pc, #320]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	494d      	ldr	r1, [pc, #308]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d040      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d107      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b22:	4b47      	ldr	r3, [pc, #284]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d115      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e07f      	b.n	8004c32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d107      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3a:	4b41      	ldr	r3, [pc, #260]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e073      	b.n	8004c32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b4a:	4b3d      	ldr	r3, [pc, #244]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e06b      	b.n	8004c32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b5a:	4b39      	ldr	r3, [pc, #228]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f023 0203 	bic.w	r2, r3, #3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	4936      	ldr	r1, [pc, #216]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6c:	f7fd fd14 	bl	8002598 <HAL_GetTick>
 8004b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b72:	e00a      	b.n	8004b8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b74:	f7fd fd10 	bl	8002598 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e053      	b.n	8004c32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8a:	4b2d      	ldr	r3, [pc, #180]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 020c 	and.w	r2, r3, #12
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d1eb      	bne.n	8004b74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b9c:	4b27      	ldr	r3, [pc, #156]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d210      	bcs.n	8004bcc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004baa:	4b24      	ldr	r3, [pc, #144]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 020f 	bic.w	r2, r3, #15
 8004bb2:	4922      	ldr	r1, [pc, #136]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bba:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e032      	b.n	8004c32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d008      	beq.n	8004bea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd8:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	4916      	ldr	r1, [pc, #88]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d009      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bf6:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	490e      	ldr	r1, [pc, #56]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c0a:	f000 f821 	bl	8004c50 <HAL_RCC_GetSysClockFreq>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	091b      	lsrs	r3, r3, #4
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	490a      	ldr	r1, [pc, #40]	; (8004c44 <HAL_RCC_ClockConfig+0x1cc>)
 8004c1c:	5ccb      	ldrb	r3, [r1, r3]
 8004c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c22:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <HAL_RCC_ClockConfig+0x1d0>)
 8004c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c26:	4b09      	ldr	r3, [pc, #36]	; (8004c4c <HAL_RCC_ClockConfig+0x1d4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fd fc70 	bl	8002510 <HAL_InitTick>

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023c00 	.word	0x40023c00
 8004c40:	40023800 	.word	0x40023800
 8004c44:	08008b10 	.word	0x08008b10
 8004c48:	20000030 	.word	0x20000030
 8004c4c:	20000034 	.word	0x20000034

08004c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c54:	b094      	sub	sp, #80	; 0x50
 8004c56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c60:	2300      	movs	r3, #0
 8004c62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c68:	4b79      	ldr	r3, [pc, #484]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 030c 	and.w	r3, r3, #12
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d00d      	beq.n	8004c90 <HAL_RCC_GetSysClockFreq+0x40>
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	f200 80e1 	bhi.w	8004e3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_RCC_GetSysClockFreq+0x34>
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d003      	beq.n	8004c8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c82:	e0db      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c84:	4b73      	ldr	r3, [pc, #460]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c88:	e0db      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c8a:	4b73      	ldr	r3, [pc, #460]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c8e:	e0d8      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c90:	4b6f      	ldr	r3, [pc, #444]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c98:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c9a:	4b6d      	ldr	r3, [pc, #436]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d063      	beq.n	8004d6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca6:	4b6a      	ldr	r3, [pc, #424]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	099b      	lsrs	r3, r3, #6
 8004cac:	2200      	movs	r2, #0
 8004cae:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8004cba:	2300      	movs	r3, #0
 8004cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	462b      	mov	r3, r5
 8004cc6:	f04f 0000 	mov.w	r0, #0
 8004cca:	f04f 0100 	mov.w	r1, #0
 8004cce:	0159      	lsls	r1, r3, #5
 8004cd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd4:	0150      	lsls	r0, r2, #5
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4621      	mov	r1, r4
 8004cdc:	1a51      	subs	r1, r2, r1
 8004cde:	6139      	str	r1, [r7, #16]
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cf4:	4659      	mov	r1, fp
 8004cf6:	018b      	lsls	r3, r1, #6
 8004cf8:	4651      	mov	r1, sl
 8004cfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cfe:	4651      	mov	r1, sl
 8004d00:	018a      	lsls	r2, r1, #6
 8004d02:	4651      	mov	r1, sl
 8004d04:	ebb2 0801 	subs.w	r8, r2, r1
 8004d08:	4659      	mov	r1, fp
 8004d0a:	eb63 0901 	sbc.w	r9, r3, r1
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d22:	4690      	mov	r8, r2
 8004d24:	4699      	mov	r9, r3
 8004d26:	4623      	mov	r3, r4
 8004d28:	eb18 0303 	adds.w	r3, r8, r3
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	462b      	mov	r3, r5
 8004d30:	eb49 0303 	adc.w	r3, r9, r3
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d42:	4629      	mov	r1, r5
 8004d44:	024b      	lsls	r3, r1, #9
 8004d46:	4621      	mov	r1, r4
 8004d48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	024a      	lsls	r2, r1, #9
 8004d50:	4610      	mov	r0, r2
 8004d52:	4619      	mov	r1, r3
 8004d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d56:	2200      	movs	r2, #0
 8004d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d60:	f7fb faae 	bl	80002c0 <__aeabi_uldivmod>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4613      	mov	r3, r2
 8004d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d6c:	e058      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d6e:	4b38      	ldr	r3, [pc, #224]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	099b      	lsrs	r3, r3, #6
 8004d74:	2200      	movs	r2, #0
 8004d76:	4618      	mov	r0, r3
 8004d78:	4611      	mov	r1, r2
 8004d7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d7e:	623b      	str	r3, [r7, #32]
 8004d80:	2300      	movs	r3, #0
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
 8004d84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d88:	4642      	mov	r2, r8
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	f04f 0000 	mov.w	r0, #0
 8004d90:	f04f 0100 	mov.w	r1, #0
 8004d94:	0159      	lsls	r1, r3, #5
 8004d96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d9a:	0150      	lsls	r0, r2, #5
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4641      	mov	r1, r8
 8004da2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004da6:	4649      	mov	r1, r9
 8004da8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004db8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dc0:	ebb2 040a 	subs.w	r4, r2, sl
 8004dc4:	eb63 050b 	sbc.w	r5, r3, fp
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	00eb      	lsls	r3, r5, #3
 8004dd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dd6:	00e2      	lsls	r2, r4, #3
 8004dd8:	4614      	mov	r4, r2
 8004dda:	461d      	mov	r5, r3
 8004ddc:	4643      	mov	r3, r8
 8004dde:	18e3      	adds	r3, r4, r3
 8004de0:	603b      	str	r3, [r7, #0]
 8004de2:	464b      	mov	r3, r9
 8004de4:	eb45 0303 	adc.w	r3, r5, r3
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004df6:	4629      	mov	r1, r5
 8004df8:	028b      	lsls	r3, r1, #10
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e00:	4621      	mov	r1, r4
 8004e02:	028a      	lsls	r2, r1, #10
 8004e04:	4610      	mov	r0, r2
 8004e06:	4619      	mov	r1, r3
 8004e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	61fa      	str	r2, [r7, #28]
 8004e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e14:	f7fb fa54 	bl	80002c0 <__aeabi_uldivmod>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	0c1b      	lsrs	r3, r3, #16
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004e30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e3a:	e002      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3750      	adds	r7, #80	; 0x50
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e4e:	bf00      	nop
 8004e50:	40023800 	.word	0x40023800
 8004e54:	00f42400 	.word	0x00f42400
 8004e58:	007a1200 	.word	0x007a1200

08004e5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e60:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e62:	681b      	ldr	r3, [r3, #0]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000030 	.word	0x20000030

08004e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e78:	f7ff fff0 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	0a9b      	lsrs	r3, r3, #10
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	4903      	ldr	r1, [pc, #12]	; (8004e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e8a:	5ccb      	ldrb	r3, [r1, r3]
 8004e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40023800 	.word	0x40023800
 8004e98:	08008b20 	.word	0x08008b20

08004e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ea0:	f7ff ffdc 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	0b5b      	lsrs	r3, r3, #13
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	4903      	ldr	r1, [pc, #12]	; (8004ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb2:	5ccb      	ldrb	r3, [r1, r3]
 8004eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	08008b20 	.word	0x08008b20

08004ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d012      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004eec:	4b69      	ldr	r3, [pc, #420]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4a68      	ldr	r2, [pc, #416]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ef6:	6093      	str	r3, [r2, #8]
 8004ef8:	4b66      	ldr	r3, [pc, #408]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f00:	4964      	ldr	r1, [pc, #400]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d017      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f1e:	4b5d      	ldr	r3, [pc, #372]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2c:	4959      	ldr	r1, [pc, #356]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d017      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f5a:	4b4e      	ldr	r3, [pc, #312]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	494a      	ldr	r1, [pc, #296]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f78:	d101      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f86:	2301      	movs	r3, #1
 8004f88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f96:	2301      	movs	r3, #1
 8004f98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 808b 	beq.w	80050be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fa8:	4b3a      	ldr	r3, [pc, #232]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	4a39      	ldr	r2, [pc, #228]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8004fb4:	4b37      	ldr	r3, [pc, #220]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fc0:	4b35      	ldr	r3, [pc, #212]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a34      	ldr	r2, [pc, #208]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fcc:	f7fd fae4 	bl	8002598 <HAL_GetTick>
 8004fd0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd4:	f7fd fae0 	bl	8002598 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b64      	cmp	r3, #100	; 0x64
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e357      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004fe6:	4b2c      	ldr	r3, [pc, #176]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f0      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ff2:	4b28      	ldr	r3, [pc, #160]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d035      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	429a      	cmp	r2, r3
 800500e:	d02e      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005010:	4b20      	ldr	r3, [pc, #128]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005018:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800501a:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005024:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005026:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	4a1a      	ldr	r2, [pc, #104]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800502c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005030:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005032:	4a18      	ldr	r2, [pc, #96]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005038:	4b16      	ldr	r3, [pc, #88]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b01      	cmp	r3, #1
 8005042:	d114      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fd faa8 	bl	8002598 <HAL_GetTick>
 8005048:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504a:	e00a      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800504c:	f7fd faa4 	bl	8002598 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f241 3288 	movw	r2, #5000	; 0x1388
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e319      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0ee      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800507a:	d111      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800507c:	4b05      	ldr	r3, [pc, #20]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005088:	4b04      	ldr	r3, [pc, #16]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800508a:	400b      	ands	r3, r1
 800508c:	4901      	ldr	r1, [pc, #4]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508e:	4313      	orrs	r3, r2
 8005090:	608b      	str	r3, [r1, #8]
 8005092:	e00b      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005094:	40023800 	.word	0x40023800
 8005098:	40007000 	.word	0x40007000
 800509c:	0ffffcff 	.word	0x0ffffcff
 80050a0:	4baa      	ldr	r3, [pc, #680]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	4aa9      	ldr	r2, [pc, #676]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050aa:	6093      	str	r3, [r2, #8]
 80050ac:	4ba7      	ldr	r3, [pc, #668]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b8:	49a4      	ldr	r1, [pc, #656]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d010      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050ca:	4ba0      	ldr	r3, [pc, #640]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d0:	4a9e      	ldr	r2, [pc, #632]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80050da:	4b9c      	ldr	r3, [pc, #624]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	4999      	ldr	r1, [pc, #612]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050f8:	4b94      	ldr	r3, [pc, #592]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005106:	4991      	ldr	r1, [pc, #580]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800511a:	4b8c      	ldr	r3, [pc, #560]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005120:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005128:	4988      	ldr	r1, [pc, #544]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800513c:	4b83      	ldr	r3, [pc, #524]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005142:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800514a:	4980      	ldr	r1, [pc, #512]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800515e:	4b7b      	ldr	r3, [pc, #492]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005164:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	4977      	ldr	r1, [pc, #476]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005180:	4b72      	ldr	r3, [pc, #456]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	f023 0203 	bic.w	r2, r3, #3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518e:	496f      	ldr	r1, [pc, #444]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051a2:	4b6a      	ldr	r3, [pc, #424]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a8:	f023 020c 	bic.w	r2, r3, #12
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b0:	4966      	ldr	r1, [pc, #408]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051c4:	4b61      	ldr	r3, [pc, #388]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d2:	495e      	ldr	r1, [pc, #376]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051e6:	4b59      	ldr	r3, [pc, #356]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f4:	4955      	ldr	r1, [pc, #340]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005208:	4b50      	ldr	r3, [pc, #320]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005216:	494d      	ldr	r1, [pc, #308]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800522a:	4b48      	ldr	r3, [pc, #288]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800522c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005230:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005238:	4944      	ldr	r1, [pc, #272]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800524c:	4b3f      	ldr	r3, [pc, #252]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005252:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525a:	493c      	ldr	r1, [pc, #240]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800526e:	4b37      	ldr	r3, [pc, #220]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005274:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527c:	4933      	ldr	r1, [pc, #204]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005290:	4b2e      	ldr	r3, [pc, #184]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005296:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800529e:	492b      	ldr	r1, [pc, #172]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d011      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80052b2:	4b26      	ldr	r3, [pc, #152]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c0:	4922      	ldr	r1, [pc, #136]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d0:	d101      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80052d2:	2301      	movs	r3, #1
 80052d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80052e2:	2301      	movs	r3, #1
 80052e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052f2:	4b16      	ldr	r3, [pc, #88]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005300:	4912      	ldr	r1, [pc, #72]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00b      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005314:	4b0d      	ldr	r3, [pc, #52]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005324:	4909      	ldr	r1, [pc, #36]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d006      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 80d9 	beq.w	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005340:	4b02      	ldr	r3, [pc, #8]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a01      	ldr	r2, [pc, #4]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005346:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800534a:	e001      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800534c:	40023800 	.word	0x40023800
 8005350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005352:	f7fd f921 	bl	8002598 <HAL_GetTick>
 8005356:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005358:	e008      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800535a:	f7fd f91d 	bl	8002598 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b64      	cmp	r3, #100	; 0x64
 8005366:	d901      	bls.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e194      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800536c:	4b6c      	ldr	r3, [pc, #432]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1f0      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d021      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005388:	2b00      	cmp	r3, #0
 800538a:	d11d      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800538c:	4b64      	ldr	r3, [pc, #400]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800538e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005392:	0c1b      	lsrs	r3, r3, #16
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800539a:	4b61      	ldr	r3, [pc, #388]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800539c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a0:	0e1b      	lsrs	r3, r3, #24
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	019a      	lsls	r2, r3, #6
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	041b      	lsls	r3, r3, #16
 80053b2:	431a      	orrs	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	061b      	lsls	r3, r3, #24
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	071b      	lsls	r3, r3, #28
 80053c0:	4957      	ldr	r1, [pc, #348]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053dc:	d00a      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d02e      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f2:	d129      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053f4:	4b4a      	ldr	r3, [pc, #296]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053fa:	0c1b      	lsrs	r3, r3, #16
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005402:	4b47      	ldr	r3, [pc, #284]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005408:	0f1b      	lsrs	r3, r3, #28
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	019a      	lsls	r2, r3, #6
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	061b      	lsls	r3, r3, #24
 8005422:	431a      	orrs	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	071b      	lsls	r3, r3, #28
 8005428:	493d      	ldr	r1, [pc, #244]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005430:	4b3b      	ldr	r3, [pc, #236]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005436:	f023 021f 	bic.w	r2, r3, #31
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	3b01      	subs	r3, #1
 8005440:	4937      	ldr	r1, [pc, #220]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01d      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005454:	4b32      	ldr	r3, [pc, #200]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800545a:	0e1b      	lsrs	r3, r3, #24
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005462:	4b2f      	ldr	r3, [pc, #188]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005468:	0f1b      	lsrs	r3, r3, #28
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	019a      	lsls	r2, r3, #6
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	041b      	lsls	r3, r3, #16
 800547c:	431a      	orrs	r2, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	061b      	lsls	r3, r3, #24
 8005482:	431a      	orrs	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	071b      	lsls	r3, r3, #28
 8005488:	4925      	ldr	r1, [pc, #148]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d011      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	019a      	lsls	r2, r3, #6
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	041b      	lsls	r3, r3, #16
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	061b      	lsls	r3, r3, #24
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	071b      	lsls	r3, r3, #28
 80054b8:	4919      	ldr	r1, [pc, #100]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054c0:	4b17      	ldr	r3, [pc, #92]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a16      	ldr	r2, [pc, #88]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054cc:	f7fd f864 	bl	8002598 <HAL_GetTick>
 80054d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054d2:	e008      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054d4:	f7fd f860 	bl	8002598 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b64      	cmp	r3, #100	; 0x64
 80054e0:	d901      	bls.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e0d7      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054e6:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0f0      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	f040 80cd 	bne.w	8005694 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80054fa:	4b09      	ldr	r3, [pc, #36]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a08      	ldr	r2, [pc, #32]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005506:	f7fd f847 	bl	8002598 <HAL_GetTick>
 800550a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800550c:	e00a      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800550e:	f7fd f843 	bl	8002598 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b64      	cmp	r3, #100	; 0x64
 800551a:	d903      	bls.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e0ba      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005520:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005524:	4b5e      	ldr	r3, [pc, #376]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800552c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005530:	d0ed      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d009      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800554e:	2b00      	cmp	r3, #0
 8005550:	d02e      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d12a      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800555a:	4b51      	ldr	r3, [pc, #324]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005560:	0c1b      	lsrs	r3, r3, #16
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005568:	4b4d      	ldr	r3, [pc, #308]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800556a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556e:	0f1b      	lsrs	r3, r3, #28
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	019a      	lsls	r2, r3, #6
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	061b      	lsls	r3, r3, #24
 8005588:	431a      	orrs	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	071b      	lsls	r3, r3, #28
 800558e:	4944      	ldr	r1, [pc, #272]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005596:	4b42      	ldr	r3, [pc, #264]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	3b01      	subs	r3, #1
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	493d      	ldr	r1, [pc, #244]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d022      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c4:	d11d      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055c6:	4b36      	ldr	r3, [pc, #216]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	0e1b      	lsrs	r3, r3, #24
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055d4:	4b32      	ldr	r3, [pc, #200]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	0f1b      	lsrs	r3, r3, #28
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	019a      	lsls	r2, r3, #6
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	041b      	lsls	r3, r3, #16
 80055ee:	431a      	orrs	r2, r3
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	061b      	lsls	r3, r3, #24
 80055f4:	431a      	orrs	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	071b      	lsls	r3, r3, #28
 80055fa:	4929      	ldr	r1, [pc, #164]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d028      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800560e:	4b24      	ldr	r3, [pc, #144]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	0e1b      	lsrs	r3, r3, #24
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800561c:	4b20      	ldr	r3, [pc, #128]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005622:	0c1b      	lsrs	r3, r3, #16
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	019a      	lsls	r2, r3, #6
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	041b      	lsls	r3, r3, #16
 8005634:	431a      	orrs	r2, r3
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	061b      	lsls	r3, r3, #24
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	071b      	lsls	r3, r3, #28
 8005642:	4917      	ldr	r1, [pc, #92]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800564a:	4b15      	ldr	r3, [pc, #84]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800564c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	4911      	ldr	r1, [pc, #68]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005660:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a0e      	ldr	r2, [pc, #56]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800566a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800566c:	f7fc ff94 	bl	8002598 <HAL_GetTick>
 8005670:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005674:	f7fc ff90 	bl	8002598 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b64      	cmp	r3, #100	; 0x64
 8005680:	d901      	bls.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e007      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005686:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800568e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005692:	d1ef      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3720      	adds	r7, #32
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	40023800 	.word	0x40023800

080056a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e09d      	b.n	80057f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d108      	bne.n	80056d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056c6:	d009      	beq.n	80056dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	61da      	str	r2, [r3, #28]
 80056ce:	e005      	b.n	80056dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fc fbf2 	bl	8001ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005712:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800571c:	d902      	bls.n	8005724 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e002      	b.n	800572a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005728:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005732:	d007      	beq.n	8005744 <HAL_SPI_Init+0xa0>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800573c:	d002      	beq.n	8005744 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005786:	ea42 0103 	orr.w	r1, r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	0c1b      	lsrs	r3, r3, #16
 80057a0:	f003 0204 	and.w	r2, r3, #4
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80057c0:	ea42 0103 	orr.w	r1, r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69da      	ldr	r2, [r3, #28]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b088      	sub	sp, #32
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	603b      	str	r3, [r7, #0]
 8005806:	4613      	mov	r3, r2
 8005808:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_SPI_Transmit+0x22>
 8005818:	2302      	movs	r3, #2
 800581a:	e158      	b.n	8005ace <HAL_SPI_Transmit+0x2d4>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005824:	f7fc feb8 	bl	8002598 <HAL_GetTick>
 8005828:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b01      	cmp	r3, #1
 8005838:	d002      	beq.n	8005840 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800583a:	2302      	movs	r3, #2
 800583c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800583e:	e13d      	b.n	8005abc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <HAL_SPI_Transmit+0x52>
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d102      	bne.n	8005852 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005850:	e134      	b.n	8005abc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2203      	movs	r2, #3
 8005856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	88fa      	ldrh	r2, [r7, #6]
 800586a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	88fa      	ldrh	r2, [r7, #6]
 8005870:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800589c:	d10f      	bne.n	80058be <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c8:	2b40      	cmp	r3, #64	; 0x40
 80058ca:	d007      	beq.n	80058dc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058e4:	d94b      	bls.n	800597e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_SPI_Transmit+0xfa>
 80058ee:	8afb      	ldrh	r3, [r7, #22]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d13e      	bne.n	8005972 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	881a      	ldrh	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	1c9a      	adds	r2, r3, #2
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005918:	e02b      	b.n	8005972 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b02      	cmp	r3, #2
 8005926:	d112      	bne.n	800594e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	881a      	ldrh	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	1c9a      	adds	r2, r3, #2
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005942:	b29b      	uxth	r3, r3
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800594c:	e011      	b.n	8005972 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800594e:	f7fc fe23 	bl	8002598 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d803      	bhi.n	8005966 <HAL_SPI_Transmit+0x16c>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005964:	d102      	bne.n	800596c <HAL_SPI_Transmit+0x172>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d102      	bne.n	8005972 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005970:	e0a4      	b.n	8005abc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1ce      	bne.n	800591a <HAL_SPI_Transmit+0x120>
 800597c:	e07c      	b.n	8005a78 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <HAL_SPI_Transmit+0x192>
 8005986:	8afb      	ldrh	r3, [r7, #22]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d170      	bne.n	8005a6e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b01      	cmp	r3, #1
 8005994:	d912      	bls.n	80059bc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	881a      	ldrh	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	1c9a      	adds	r2, r3, #2
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b02      	subs	r3, #2
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059ba:	e058      	b.n	8005a6e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	330c      	adds	r3, #12
 80059c6:	7812      	ldrb	r2, [r2, #0]
 80059c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80059e2:	e044      	b.n	8005a6e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d12b      	bne.n	8005a4a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d912      	bls.n	8005a22 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	881a      	ldrh	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	1c9a      	adds	r2, r3, #2
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b02      	subs	r3, #2
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a20:	e025      	b.n	8005a6e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a48:	e011      	b.n	8005a6e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a4a:	f7fc fda5 	bl	8002598 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d803      	bhi.n	8005a62 <HAL_SPI_Transmit+0x268>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d102      	bne.n	8005a68 <HAL_SPI_Transmit+0x26e>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d102      	bne.n	8005a6e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a6c:	e026      	b.n	8005abc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1b5      	bne.n	80059e4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	6839      	ldr	r1, [r7, #0]
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 fc1d 	bl	80062bc <SPI_EndRxTxTransaction>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a96:	2300      	movs	r3, #0
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	613b      	str	r3, [r7, #16]
 8005aaa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	77fb      	strb	r3, [r7, #31]
 8005ab8:	e000      	b.n	8005abc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005aba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005acc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3720      	adds	r7, #32
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_SPI_Transmit_DMA+0x20>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e0d8      	b.n	8005caa <HAL_SPI_Transmit_DMA+0x1d2>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d002      	beq.n	8005b12 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b10:	e0c6      	b.n	8005ca0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_SPI_Transmit_DMA+0x46>
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d102      	bne.n	8005b24 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b22:	e0bd      	b.n	8005ca0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2203      	movs	r2, #3
 8005b28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	88fa      	ldrh	r2, [r7, #6]
 8005b3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	88fa      	ldrh	r2, [r7, #6]
 8005b42:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b6e:	d10f      	bne.n	8005b90 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b94:	4a47      	ldr	r2, [pc, #284]	; (8005cb4 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9c:	4a46      	ldr	r2, [pc, #280]	; (8005cb8 <HAL_SPI_Transmit_DMA+0x1e0>)
 8005b9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba4:	4a45      	ldr	r2, [pc, #276]	; (8005cbc <HAL_SPI_Transmit_DMA+0x1e4>)
 8005ba6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bac:	2200      	movs	r2, #0
 8005bae:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bbe:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bc8:	d82d      	bhi.n	8005c26 <HAL_SPI_Transmit_DMA+0x14e>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd4:	d127      	bne.n	8005c26 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10f      	bne.n	8005c04 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bf2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c02:	e010      	b.n	8005c26 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c12:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3301      	adds	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	4619      	mov	r1, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	330c      	adds	r3, #12
 8005c36:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c3e:	f7fc fe9b 	bl	8002978 <HAL_DMA_Start_IT>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00c      	beq.n	8005c62 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4c:	f043 0210 	orr.w	r2, r3, #16
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005c60:	e01e      	b.n	8005ca0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	d007      	beq.n	8005c80 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c7e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0220 	orr.w	r2, r2, #32
 8005c8e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0202 	orr.w	r2, r2, #2
 8005c9e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	08005ff9 	.word	0x08005ff9
 8005cb8:	08005f51 	.word	0x08005f51
 8005cbc:	08006015 	.word	0x08006015

08005cc0 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00f      	beq.n	8005cf4 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fc fead 	bl	8002a38 <HAL_DMA_Abort>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce8:	f043 0210 	orr.w	r2, r3, #16
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00f      	beq.n	8005d1c <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fc fe99 	bl	8002a38 <HAL_DMA_Abort>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d10:	f043 0210 	orr.w	r2, r3, #16
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0203 	bic.w	r2, r2, #3
 8005d2a:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10e      	bne.n	8005d80 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d009      	beq.n	8005d80 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4798      	blx	r3
    return;
 8005d7e:	e0ce      	b.n	8005f1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <HAL_SPI_IRQHandler+0x5e>
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	4798      	blx	r3
    return;
 8005d9c:	e0bf      	b.n	8005f1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <HAL_SPI_IRQHandler+0x7e>
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d105      	bne.n	8005dbe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80b0 	beq.w	8005f1e <HAL_SPI_IRQHandler+0x1de>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80aa 	beq.w	8005f1e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d023      	beq.n	8005e1c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d011      	beq.n	8005e04 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de4:	f043 0204 	orr.w	r2, r3, #4
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	e00b      	b.n	8005e1c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e04:	2300      	movs	r3, #0
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	613b      	str	r3, [r7, #16]
 8005e18:	693b      	ldr	r3, [r7, #16]
        return;
 8005e1a:	e080      	b.n	8005f1e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d014      	beq.n	8005e50 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2a:	f043 0201 	orr.w	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00c      	beq.n	8005e74 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5e:	f043 0208 	orr.w	r2, r3, #8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e66:	2300      	movs	r3, #0
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	60bb      	str	r3, [r7, #8]
 8005e72:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d04f      	beq.n	8005f1c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e8a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <HAL_SPI_IRQHandler+0x168>
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d034      	beq.n	8005f12 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0203 	bic.w	r2, r2, #3
 8005eb6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d011      	beq.n	8005ee4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec4:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <HAL_SPI_IRQHandler+0x1e4>)
 8005ec6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fc fe23 	bl	8002b18 <HAL_DMA_Abort_IT>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005edc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d016      	beq.n	8005f1a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef0:	4a0c      	ldr	r2, [pc, #48]	; (8005f24 <HAL_SPI_IRQHandler+0x1e4>)
 8005ef2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fc fe0d 	bl	8002b18 <HAL_DMA_Abort_IT>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005f10:	e003      	b.n	8005f1a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f812 	bl	8005f3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f18:	e000      	b.n	8005f1c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005f1a:	bf00      	nop
    return;
 8005f1c:	bf00      	nop
  }
}
 8005f1e:	3720      	adds	r7, #32
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	08006055 	.word	0x08006055

08005f28 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f5e:	f7fc fb1b 	bl	8002598 <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f72:	d03b      	beq.n	8005fec <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0220 	bic.w	r2, r2, #32
 8005f82:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0202 	bic.w	r2, r2, #2
 8005f92:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	2164      	movs	r1, #100	; 0x64
 8005f98:	6978      	ldr	r0, [r7, #20]
 8005f9a:	f000 f98f 	bl	80062bc <SPI_EndRxTxTransaction>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa8:	f043 0220 	orr.w	r2, r3, #32
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005fe4:	6978      	ldr	r0, [r7, #20]
 8005fe6:	f7ff ffa9 	bl	8005f3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005fea:	e002      	b.n	8005ff2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005fec:	6978      	ldr	r0, [r7, #20]
 8005fee:	f7fb fd8b 	bl	8001b08 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f7ff ff8e 	bl	8005f28 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0203 	bic.w	r2, r2, #3
 8006030:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006036:	f043 0210 	orr.w	r2, r3, #16
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff ff78 	bl	8005f3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f7ff ff63 	bl	8005f3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	4613      	mov	r3, r2
 800608e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006090:	f7fc fa82 	bl	8002598 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	1a9b      	subs	r3, r3, r2
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	4413      	add	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060a0:	f7fc fa7a 	bl	8002598 <HAL_GetTick>
 80060a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060a6:	4b39      	ldr	r3, [pc, #228]	; (800618c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	015b      	lsls	r3, r3, #5
 80060ac:	0d1b      	lsrs	r3, r3, #20
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	fb02 f303 	mul.w	r3, r2, r3
 80060b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060b6:	e054      	b.n	8006162 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060be:	d050      	beq.n	8006162 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060c0:	f7fc fa6a 	bl	8002598 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d902      	bls.n	80060d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d13d      	bne.n	8006152 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ee:	d111      	bne.n	8006114 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f8:	d004      	beq.n	8006104 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006102:	d107      	bne.n	8006114 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006112:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800611c:	d10f      	bne.n	800613e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800613c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e017      	b.n	8006182 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	3b01      	subs	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4013      	ands	r3, r2
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	429a      	cmp	r2, r3
 8006170:	bf0c      	ite	eq
 8006172:	2301      	moveq	r3, #1
 8006174:	2300      	movne	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	461a      	mov	r2, r3
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	429a      	cmp	r2, r3
 800617e:	d19b      	bne.n	80060b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000030 	.word	0x20000030

08006190 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80061a2:	f7fc f9f9 	bl	8002598 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	1a9b      	subs	r3, r3, r2
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	4413      	add	r3, r2
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80061b2:	f7fc f9f1 	bl	8002598 <HAL_GetTick>
 80061b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061c0:	4b3d      	ldr	r3, [pc, #244]	; (80062b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	00da      	lsls	r2, r3, #3
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	0d1b      	lsrs	r3, r3, #20
 80061d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061d8:	e060      	b.n	800629c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80061e0:	d107      	bne.n	80061f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f8:	d050      	beq.n	800629c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061fa:	f7fc f9cd 	bl	8002598 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006206:	429a      	cmp	r2, r3
 8006208:	d902      	bls.n	8006210 <SPI_WaitFifoStateUntilTimeout+0x80>
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	2b00      	cmp	r3, #0
 800620e:	d13d      	bne.n	800628c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800621e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006228:	d111      	bne.n	800624e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006232:	d004      	beq.n	800623e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623c:	d107      	bne.n	800624e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006256:	d10f      	bne.n	8006278 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006276:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e010      	b.n	80062ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	3b01      	subs	r3, #1
 800629a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4013      	ands	r3, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d196      	bne.n	80061da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3728      	adds	r7, #40	; 0x28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20000030 	.word	0x20000030

080062bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff ff5b 	bl	8006190 <SPI_WaitFifoStateUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e4:	f043 0220 	orr.w	r2, r3, #32
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e046      	b.n	800637e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062f0:	4b25      	ldr	r3, [pc, #148]	; (8006388 <SPI_EndRxTxTransaction+0xcc>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a25      	ldr	r2, [pc, #148]	; (800638c <SPI_EndRxTxTransaction+0xd0>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	0d5b      	lsrs	r3, r3, #21
 80062fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006300:	fb02 f303 	mul.w	r3, r2, r3
 8006304:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800630e:	d112      	bne.n	8006336 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2200      	movs	r2, #0
 8006318:	2180      	movs	r1, #128	; 0x80
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff feb0 	bl	8006080 <SPI_WaitFlagStateUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d016      	beq.n	8006354 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800632a:	f043 0220 	orr.w	r2, r3, #32
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e023      	b.n	800637e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	3b01      	subs	r3, #1
 8006340:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634c:	2b80      	cmp	r3, #128	; 0x80
 800634e:	d0f2      	beq.n	8006336 <SPI_EndRxTxTransaction+0x7a>
 8006350:	e000      	b.n	8006354 <SPI_EndRxTxTransaction+0x98>
        break;
 8006352:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2200      	movs	r2, #0
 800635c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff ff15 	bl	8006190 <SPI_WaitFifoStateUntilTimeout>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d007      	beq.n	800637c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006370:	f043 0220 	orr.w	r2, r3, #32
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e000      	b.n	800637e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20000030 	.word	0x20000030
 800638c:	165e9f81 	.word	0x165e9f81

08006390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e040      	b.n	8006424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fb fe1c 	bl	8001ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2224      	movs	r2, #36	; 0x24
 80063bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0201 	bic.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fbe6 	bl	8006ba0 <UART_SetConfig>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e022      	b.n	8006424 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fe3e 	bl	8007068 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800640a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fec5 	bl	80071ac <UART_CheckIdleState>
 8006422:	4603      	mov	r3, r0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b08a      	sub	sp, #40	; 0x28
 8006430:	af02      	add	r7, sp, #8
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	603b      	str	r3, [r7, #0]
 8006438:	4613      	mov	r3, r2
 800643a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006440:	2b20      	cmp	r3, #32
 8006442:	d171      	bne.n	8006528 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_UART_Transmit+0x24>
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e06a      	b.n	800652a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2221      	movs	r2, #33	; 0x21
 8006460:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006462:	f7fc f899 	bl	8002598 <HAL_GetTick>
 8006466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	88fa      	ldrh	r2, [r7, #6]
 800646c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	88fa      	ldrh	r2, [r7, #6]
 8006474:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006480:	d108      	bne.n	8006494 <HAL_UART_Transmit+0x68>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d104      	bne.n	8006494 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	e003      	b.n	800649c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006498:	2300      	movs	r3, #0
 800649a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800649c:	e02c      	b.n	80064f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2200      	movs	r2, #0
 80064a6:	2180      	movs	r1, #128	; 0x80
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 feb6 	bl	800721a <UART_WaitOnFlagUntilTimeout>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e038      	b.n	800652a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10b      	bne.n	80064d6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	3302      	adds	r3, #2
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	e007      	b.n	80064e6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	781a      	ldrb	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	3301      	adds	r3, #1
 80064e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064fe:	b29b      	uxth	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1cc      	bne.n	800649e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2200      	movs	r2, #0
 800650c:	2140      	movs	r1, #64	; 0x40
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 fe83 	bl	800721a <UART_WaitOnFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e005      	b.n	800652a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2220      	movs	r2, #32
 8006522:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	e000      	b.n	800652a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006528:	2302      	movs	r3, #2
  }
}
 800652a:	4618      	mov	r0, r3
 800652c:	3720      	adds	r7, #32
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b08a      	sub	sp, #40	; 0x28
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	4613      	mov	r3, r2
 800653e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006546:	2b20      	cmp	r3, #32
 8006548:	d132      	bne.n	80065b0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <HAL_UART_Receive_IT+0x24>
 8006550:	88fb      	ldrh	r3, [r7, #6]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e02b      	b.n	80065b2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d018      	beq.n	80065a0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	e853 3f00 	ldrex	r3, [r3]
 800657a:	613b      	str	r3, [r7, #16]
   return(result);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	461a      	mov	r2, r3
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	623b      	str	r3, [r7, #32]
 800658e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006590:	69f9      	ldr	r1, [r7, #28]
 8006592:	6a3a      	ldr	r2, [r7, #32]
 8006594:	e841 2300 	strex	r3, r2, [r1]
 8006598:	61bb      	str	r3, [r7, #24]
   return(result);
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e6      	bne.n	800656e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065a0:	88fb      	ldrh	r3, [r7, #6]
 80065a2:	461a      	mov	r2, r3
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 fefe 	bl	80073a8 <UART_Start_Receive_IT>
 80065ac:	4603      	mov	r3, r0
 80065ae:	e000      	b.n	80065b2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80065b0:	2302      	movs	r3, #2
  }
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3728      	adds	r7, #40	; 0x28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b0ba      	sub	sp, #232	; 0xe8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80065e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80065ea:	4013      	ands	r3, r2
 80065ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80065f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d115      	bne.n	8006624 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00f      	beq.n	8006624 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 8297 	beq.w	8006b48 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	4798      	blx	r3
      }
      return;
 8006622:	e291      	b.n	8006b48 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 8117 	beq.w	800685c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800662e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800663a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800663e:	4b85      	ldr	r3, [pc, #532]	; (8006854 <HAL_UART_IRQHandler+0x298>)
 8006640:	4013      	ands	r3, r2
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 810a 	beq.w	800685c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d011      	beq.n	8006678 <HAL_UART_IRQHandler+0xbc>
 8006654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00b      	beq.n	8006678 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2201      	movs	r2, #1
 8006666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800666e:	f043 0201 	orr.w	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d011      	beq.n	80066a8 <HAL_UART_IRQHandler+0xec>
 8006684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2202      	movs	r2, #2
 8006696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800669e:	f043 0204 	orr.w	r2, r3, #4
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d011      	beq.n	80066d8 <HAL_UART_IRQHandler+0x11c>
 80066b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00b      	beq.n	80066d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2204      	movs	r2, #4
 80066c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ce:	f043 0202 	orr.w	r2, r3, #2
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d017      	beq.n	8006714 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e8:	f003 0320 	and.w	r3, r3, #32
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d105      	bne.n	80066fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00b      	beq.n	8006714 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2208      	movs	r2, #8
 8006702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800670a:	f043 0208 	orr.w	r2, r3, #8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800671c:	2b00      	cmp	r3, #0
 800671e:	d012      	beq.n	8006746 <HAL_UART_IRQHandler+0x18a>
 8006720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00c      	beq.n	8006746 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800673c:	f043 0220 	orr.w	r2, r3, #32
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 81fd 	beq.w	8006b4c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00d      	beq.n	800677a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800675e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d007      	beq.n	800677a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006780:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d005      	beq.n	800679e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006796:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800679a:	2b00      	cmp	r3, #0
 800679c:	d04f      	beq.n	800683e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fec8 	bl	8007534 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d141      	bne.n	8006836 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3308      	adds	r3, #8
 80067b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3308      	adds	r3, #8
 80067da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1d9      	bne.n	80067b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006802:	2b00      	cmp	r3, #0
 8006804:	d013      	beq.n	800682e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800680a:	4a13      	ldr	r2, [pc, #76]	; (8006858 <HAL_UART_IRQHandler+0x29c>)
 800680c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006812:	4618      	mov	r0, r3
 8006814:	f7fc f980 	bl	8002b18 <HAL_DMA_Abort_IT>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d017      	beq.n	800684e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006828:	4610      	mov	r0, r2
 800682a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	e00f      	b.n	800684e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f9a0 	bl	8006b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006834:	e00b      	b.n	800684e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f99c 	bl	8006b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683c:	e007      	b.n	800684e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f998 	bl	8006b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800684c:	e17e      	b.n	8006b4c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684e:	bf00      	nop
    return;
 8006850:	e17c      	b.n	8006b4c <HAL_UART_IRQHandler+0x590>
 8006852:	bf00      	nop
 8006854:	04000120 	.word	0x04000120
 8006858:	080075fd 	.word	0x080075fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006860:	2b01      	cmp	r3, #1
 8006862:	f040 814c 	bne.w	8006afe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686a:	f003 0310 	and.w	r3, r3, #16
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 8145 	beq.w	8006afe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006878:	f003 0310 	and.w	r3, r3, #16
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 813e 	beq.w	8006afe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2210      	movs	r2, #16
 8006888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	f040 80b6 	bne.w	8006a06 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8150 	beq.w	8006b50 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80068b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068ba:	429a      	cmp	r2, r3
 80068bc:	f080 8148 	bcs.w	8006b50 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d4:	f000 8086 	beq.w	80069e4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006902:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006906:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800690e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800691a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1da      	bne.n	80068d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3308      	adds	r3, #8
 8006928:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006934:	f023 0301 	bic.w	r3, r3, #1
 8006938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3308      	adds	r3, #8
 8006942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006946:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800694a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800694e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e1      	bne.n	8006922 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3308      	adds	r3, #8
 8006964:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800696e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3308      	adds	r3, #8
 800697e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006982:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006984:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006988:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e3      	bne.n	800695e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2220      	movs	r2, #32
 800699a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b4:	f023 0310 	bic.w	r3, r3, #16
 80069b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80069c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e4      	bne.n	80069a4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fc f82a 	bl	8002a38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f8c2 	bl	8006b88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a04:	e0a4      	b.n	8006b50 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 8096 	beq.w	8006b54 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 8091 	beq.w	8006b54 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a54:	647b      	str	r3, [r7, #68]	; 0x44
 8006a56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e4      	bne.n	8006a32 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	623b      	str	r3, [r7, #32]
   return(result);
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	f023 0301 	bic.w	r3, r3, #1
 8006a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a8c:	633a      	str	r2, [r7, #48]	; 0x30
 8006a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e3      	bne.n	8006a68 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f023 0310 	bic.w	r3, r3, #16
 8006ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ad6:	61fb      	str	r3, [r7, #28]
 8006ad8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	69b9      	ldr	r1, [r7, #24]
 8006adc:	69fa      	ldr	r2, [r7, #28]
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e4      	bne.n	8006ab4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2202      	movs	r2, #2
 8006aee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f846 	bl	8006b88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006afc:	e02a      	b.n	8006b54 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00e      	beq.n	8006b28 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d008      	beq.n	8006b28 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d01c      	beq.n	8006b58 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	4798      	blx	r3
    }
    return;
 8006b26:	e017      	b.n	8006b58 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d012      	beq.n	8006b5a <HAL_UART_IRQHandler+0x59e>
 8006b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00c      	beq.n	8006b5a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fd71 	bl	8007628 <UART_EndTransmit_IT>
    return;
 8006b46:	e008      	b.n	8006b5a <HAL_UART_IRQHandler+0x59e>
      return;
 8006b48:	bf00      	nop
 8006b4a:	e006      	b.n	8006b5a <HAL_UART_IRQHandler+0x59e>
    return;
 8006b4c:	bf00      	nop
 8006b4e:	e004      	b.n	8006b5a <HAL_UART_IRQHandler+0x59e>
      return;
 8006b50:	bf00      	nop
 8006b52:	e002      	b.n	8006b5a <HAL_UART_IRQHandler+0x59e>
      return;
 8006b54:	bf00      	nop
 8006b56:	e000      	b.n	8006b5a <HAL_UART_IRQHandler+0x59e>
    return;
 8006b58:	bf00      	nop
  }

}
 8006b5a:	37e8      	adds	r7, #232	; 0xe8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	4ba6      	ldr	r3, [pc, #664]	; (8006e64 <UART_SetConfig+0x2c4>)
 8006bcc:	4013      	ands	r3, r2
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	6979      	ldr	r1, [r7, #20]
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a94      	ldr	r2, [pc, #592]	; (8006e68 <UART_SetConfig+0x2c8>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d120      	bne.n	8006c5e <UART_SetConfig+0xbe>
 8006c1c:	4b93      	ldr	r3, [pc, #588]	; (8006e6c <UART_SetConfig+0x2cc>)
 8006c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d816      	bhi.n	8006c58 <UART_SetConfig+0xb8>
 8006c2a:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <UART_SetConfig+0x90>)
 8006c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c30:	08006c41 	.word	0x08006c41
 8006c34:	08006c4d 	.word	0x08006c4d
 8006c38:	08006c47 	.word	0x08006c47
 8006c3c:	08006c53 	.word	0x08006c53
 8006c40:	2301      	movs	r3, #1
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	e150      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006c46:	2302      	movs	r3, #2
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e14d      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e14a      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006c52:	2308      	movs	r3, #8
 8006c54:	77fb      	strb	r3, [r7, #31]
 8006c56:	e147      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006c58:	2310      	movs	r3, #16
 8006c5a:	77fb      	strb	r3, [r7, #31]
 8006c5c:	e144      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a83      	ldr	r2, [pc, #524]	; (8006e70 <UART_SetConfig+0x2d0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d132      	bne.n	8006cce <UART_SetConfig+0x12e>
 8006c68:	4b80      	ldr	r3, [pc, #512]	; (8006e6c <UART_SetConfig+0x2cc>)
 8006c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6e:	f003 030c 	and.w	r3, r3, #12
 8006c72:	2b0c      	cmp	r3, #12
 8006c74:	d828      	bhi.n	8006cc8 <UART_SetConfig+0x128>
 8006c76:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <UART_SetConfig+0xdc>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006cb1 	.word	0x08006cb1
 8006c80:	08006cc9 	.word	0x08006cc9
 8006c84:	08006cc9 	.word	0x08006cc9
 8006c88:	08006cc9 	.word	0x08006cc9
 8006c8c:	08006cbd 	.word	0x08006cbd
 8006c90:	08006cc9 	.word	0x08006cc9
 8006c94:	08006cc9 	.word	0x08006cc9
 8006c98:	08006cc9 	.word	0x08006cc9
 8006c9c:	08006cb7 	.word	0x08006cb7
 8006ca0:	08006cc9 	.word	0x08006cc9
 8006ca4:	08006cc9 	.word	0x08006cc9
 8006ca8:	08006cc9 	.word	0x08006cc9
 8006cac:	08006cc3 	.word	0x08006cc3
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	77fb      	strb	r3, [r7, #31]
 8006cb4:	e118      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	77fb      	strb	r3, [r7, #31]
 8006cba:	e115      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	77fb      	strb	r3, [r7, #31]
 8006cc0:	e112      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	77fb      	strb	r3, [r7, #31]
 8006cc6:	e10f      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	77fb      	strb	r3, [r7, #31]
 8006ccc:	e10c      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a68      	ldr	r2, [pc, #416]	; (8006e74 <UART_SetConfig+0x2d4>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d120      	bne.n	8006d1a <UART_SetConfig+0x17a>
 8006cd8:	4b64      	ldr	r3, [pc, #400]	; (8006e6c <UART_SetConfig+0x2cc>)
 8006cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ce2:	2b30      	cmp	r3, #48	; 0x30
 8006ce4:	d013      	beq.n	8006d0e <UART_SetConfig+0x16e>
 8006ce6:	2b30      	cmp	r3, #48	; 0x30
 8006ce8:	d814      	bhi.n	8006d14 <UART_SetConfig+0x174>
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d009      	beq.n	8006d02 <UART_SetConfig+0x162>
 8006cee:	2b20      	cmp	r3, #32
 8006cf0:	d810      	bhi.n	8006d14 <UART_SetConfig+0x174>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <UART_SetConfig+0x15c>
 8006cf6:	2b10      	cmp	r3, #16
 8006cf8:	d006      	beq.n	8006d08 <UART_SetConfig+0x168>
 8006cfa:	e00b      	b.n	8006d14 <UART_SetConfig+0x174>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	77fb      	strb	r3, [r7, #31]
 8006d00:	e0f2      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d02:	2302      	movs	r3, #2
 8006d04:	77fb      	strb	r3, [r7, #31]
 8006d06:	e0ef      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d08:	2304      	movs	r3, #4
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	e0ec      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d0e:	2308      	movs	r3, #8
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	e0e9      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d14:	2310      	movs	r3, #16
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e0e6      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a56      	ldr	r2, [pc, #344]	; (8006e78 <UART_SetConfig+0x2d8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d120      	bne.n	8006d66 <UART_SetConfig+0x1c6>
 8006d24:	4b51      	ldr	r3, [pc, #324]	; (8006e6c <UART_SetConfig+0x2cc>)
 8006d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d30:	d013      	beq.n	8006d5a <UART_SetConfig+0x1ba>
 8006d32:	2bc0      	cmp	r3, #192	; 0xc0
 8006d34:	d814      	bhi.n	8006d60 <UART_SetConfig+0x1c0>
 8006d36:	2b80      	cmp	r3, #128	; 0x80
 8006d38:	d009      	beq.n	8006d4e <UART_SetConfig+0x1ae>
 8006d3a:	2b80      	cmp	r3, #128	; 0x80
 8006d3c:	d810      	bhi.n	8006d60 <UART_SetConfig+0x1c0>
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <UART_SetConfig+0x1a8>
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d006      	beq.n	8006d54 <UART_SetConfig+0x1b4>
 8006d46:	e00b      	b.n	8006d60 <UART_SetConfig+0x1c0>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	77fb      	strb	r3, [r7, #31]
 8006d4c:	e0cc      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	77fb      	strb	r3, [r7, #31]
 8006d52:	e0c9      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d54:	2304      	movs	r3, #4
 8006d56:	77fb      	strb	r3, [r7, #31]
 8006d58:	e0c6      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d5a:	2308      	movs	r3, #8
 8006d5c:	77fb      	strb	r3, [r7, #31]
 8006d5e:	e0c3      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d60:	2310      	movs	r3, #16
 8006d62:	77fb      	strb	r3, [r7, #31]
 8006d64:	e0c0      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a44      	ldr	r2, [pc, #272]	; (8006e7c <UART_SetConfig+0x2dc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d125      	bne.n	8006dbc <UART_SetConfig+0x21c>
 8006d70:	4b3e      	ldr	r3, [pc, #248]	; (8006e6c <UART_SetConfig+0x2cc>)
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d7e:	d017      	beq.n	8006db0 <UART_SetConfig+0x210>
 8006d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d84:	d817      	bhi.n	8006db6 <UART_SetConfig+0x216>
 8006d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d8a:	d00b      	beq.n	8006da4 <UART_SetConfig+0x204>
 8006d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d90:	d811      	bhi.n	8006db6 <UART_SetConfig+0x216>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <UART_SetConfig+0x1fe>
 8006d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d9a:	d006      	beq.n	8006daa <UART_SetConfig+0x20a>
 8006d9c:	e00b      	b.n	8006db6 <UART_SetConfig+0x216>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	77fb      	strb	r3, [r7, #31]
 8006da2:	e0a1      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006da4:	2302      	movs	r3, #2
 8006da6:	77fb      	strb	r3, [r7, #31]
 8006da8:	e09e      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006daa:	2304      	movs	r3, #4
 8006dac:	77fb      	strb	r3, [r7, #31]
 8006dae:	e09b      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006db0:	2308      	movs	r3, #8
 8006db2:	77fb      	strb	r3, [r7, #31]
 8006db4:	e098      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006db6:	2310      	movs	r3, #16
 8006db8:	77fb      	strb	r3, [r7, #31]
 8006dba:	e095      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a2f      	ldr	r2, [pc, #188]	; (8006e80 <UART_SetConfig+0x2e0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d125      	bne.n	8006e12 <UART_SetConfig+0x272>
 8006dc6:	4b29      	ldr	r3, [pc, #164]	; (8006e6c <UART_SetConfig+0x2cc>)
 8006dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dd4:	d017      	beq.n	8006e06 <UART_SetConfig+0x266>
 8006dd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dda:	d817      	bhi.n	8006e0c <UART_SetConfig+0x26c>
 8006ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de0:	d00b      	beq.n	8006dfa <UART_SetConfig+0x25a>
 8006de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de6:	d811      	bhi.n	8006e0c <UART_SetConfig+0x26c>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <UART_SetConfig+0x254>
 8006dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df0:	d006      	beq.n	8006e00 <UART_SetConfig+0x260>
 8006df2:	e00b      	b.n	8006e0c <UART_SetConfig+0x26c>
 8006df4:	2301      	movs	r3, #1
 8006df6:	77fb      	strb	r3, [r7, #31]
 8006df8:	e076      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	77fb      	strb	r3, [r7, #31]
 8006dfe:	e073      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e00:	2304      	movs	r3, #4
 8006e02:	77fb      	strb	r3, [r7, #31]
 8006e04:	e070      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e06:	2308      	movs	r3, #8
 8006e08:	77fb      	strb	r3, [r7, #31]
 8006e0a:	e06d      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e0c:	2310      	movs	r3, #16
 8006e0e:	77fb      	strb	r3, [r7, #31]
 8006e10:	e06a      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1b      	ldr	r2, [pc, #108]	; (8006e84 <UART_SetConfig+0x2e4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d138      	bne.n	8006e8e <UART_SetConfig+0x2ee>
 8006e1c:	4b13      	ldr	r3, [pc, #76]	; (8006e6c <UART_SetConfig+0x2cc>)
 8006e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e22:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e2a:	d017      	beq.n	8006e5c <UART_SetConfig+0x2bc>
 8006e2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e30:	d82a      	bhi.n	8006e88 <UART_SetConfig+0x2e8>
 8006e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e36:	d00b      	beq.n	8006e50 <UART_SetConfig+0x2b0>
 8006e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e3c:	d824      	bhi.n	8006e88 <UART_SetConfig+0x2e8>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <UART_SetConfig+0x2aa>
 8006e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e46:	d006      	beq.n	8006e56 <UART_SetConfig+0x2b6>
 8006e48:	e01e      	b.n	8006e88 <UART_SetConfig+0x2e8>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	77fb      	strb	r3, [r7, #31]
 8006e4e:	e04b      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e50:	2302      	movs	r3, #2
 8006e52:	77fb      	strb	r3, [r7, #31]
 8006e54:	e048      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e56:	2304      	movs	r3, #4
 8006e58:	77fb      	strb	r3, [r7, #31]
 8006e5a:	e045      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e5c:	2308      	movs	r3, #8
 8006e5e:	77fb      	strb	r3, [r7, #31]
 8006e60:	e042      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e62:	bf00      	nop
 8006e64:	efff69f3 	.word	0xefff69f3
 8006e68:	40011000 	.word	0x40011000
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	40004400 	.word	0x40004400
 8006e74:	40004800 	.word	0x40004800
 8006e78:	40004c00 	.word	0x40004c00
 8006e7c:	40005000 	.word	0x40005000
 8006e80:	40011400 	.word	0x40011400
 8006e84:	40007800 	.word	0x40007800
 8006e88:	2310      	movs	r3, #16
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e02c      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a72      	ldr	r2, [pc, #456]	; (800705c <UART_SetConfig+0x4bc>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d125      	bne.n	8006ee4 <UART_SetConfig+0x344>
 8006e98:	4b71      	ldr	r3, [pc, #452]	; (8007060 <UART_SetConfig+0x4c0>)
 8006e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ea2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ea6:	d017      	beq.n	8006ed8 <UART_SetConfig+0x338>
 8006ea8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006eac:	d817      	bhi.n	8006ede <UART_SetConfig+0x33e>
 8006eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb2:	d00b      	beq.n	8006ecc <UART_SetConfig+0x32c>
 8006eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb8:	d811      	bhi.n	8006ede <UART_SetConfig+0x33e>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <UART_SetConfig+0x326>
 8006ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ec2:	d006      	beq.n	8006ed2 <UART_SetConfig+0x332>
 8006ec4:	e00b      	b.n	8006ede <UART_SetConfig+0x33e>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	77fb      	strb	r3, [r7, #31]
 8006eca:	e00d      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	77fb      	strb	r3, [r7, #31]
 8006ed0:	e00a      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006ed2:	2304      	movs	r3, #4
 8006ed4:	77fb      	strb	r3, [r7, #31]
 8006ed6:	e007      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006ed8:	2308      	movs	r3, #8
 8006eda:	77fb      	strb	r3, [r7, #31]
 8006edc:	e004      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006ede:	2310      	movs	r3, #16
 8006ee0:	77fb      	strb	r3, [r7, #31]
 8006ee2:	e001      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006ee4:	2310      	movs	r3, #16
 8006ee6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef0:	d15b      	bne.n	8006faa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006ef2:	7ffb      	ldrb	r3, [r7, #31]
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d828      	bhi.n	8006f4a <UART_SetConfig+0x3aa>
 8006ef8:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <UART_SetConfig+0x360>)
 8006efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efe:	bf00      	nop
 8006f00:	08006f25 	.word	0x08006f25
 8006f04:	08006f2d 	.word	0x08006f2d
 8006f08:	08006f35 	.word	0x08006f35
 8006f0c:	08006f4b 	.word	0x08006f4b
 8006f10:	08006f3b 	.word	0x08006f3b
 8006f14:	08006f4b 	.word	0x08006f4b
 8006f18:	08006f4b 	.word	0x08006f4b
 8006f1c:	08006f4b 	.word	0x08006f4b
 8006f20:	08006f43 	.word	0x08006f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f24:	f7fd ffa6 	bl	8004e74 <HAL_RCC_GetPCLK1Freq>
 8006f28:	61b8      	str	r0, [r7, #24]
        break;
 8006f2a:	e013      	b.n	8006f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f2c:	f7fd ffb6 	bl	8004e9c <HAL_RCC_GetPCLK2Freq>
 8006f30:	61b8      	str	r0, [r7, #24]
        break;
 8006f32:	e00f      	b.n	8006f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f34:	4b4b      	ldr	r3, [pc, #300]	; (8007064 <UART_SetConfig+0x4c4>)
 8006f36:	61bb      	str	r3, [r7, #24]
        break;
 8006f38:	e00c      	b.n	8006f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f3a:	f7fd fe89 	bl	8004c50 <HAL_RCC_GetSysClockFreq>
 8006f3e:	61b8      	str	r0, [r7, #24]
        break;
 8006f40:	e008      	b.n	8006f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f46:	61bb      	str	r3, [r7, #24]
        break;
 8006f48:	e004      	b.n	8006f54 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	77bb      	strb	r3, [r7, #30]
        break;
 8006f52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d074      	beq.n	8007044 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	005a      	lsls	r2, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	085b      	lsrs	r3, r3, #1
 8006f64:	441a      	add	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b0f      	cmp	r3, #15
 8006f74:	d916      	bls.n	8006fa4 <UART_SetConfig+0x404>
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f7c:	d212      	bcs.n	8006fa4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	f023 030f 	bic.w	r3, r3, #15
 8006f86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	89fb      	ldrh	r3, [r7, #14]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	89fa      	ldrh	r2, [r7, #14]
 8006fa0:	60da      	str	r2, [r3, #12]
 8006fa2:	e04f      	b.n	8007044 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	77bb      	strb	r3, [r7, #30]
 8006fa8:	e04c      	b.n	8007044 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006faa:	7ffb      	ldrb	r3, [r7, #31]
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d828      	bhi.n	8007002 <UART_SetConfig+0x462>
 8006fb0:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <UART_SetConfig+0x418>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	08006fdd 	.word	0x08006fdd
 8006fbc:	08006fe5 	.word	0x08006fe5
 8006fc0:	08006fed 	.word	0x08006fed
 8006fc4:	08007003 	.word	0x08007003
 8006fc8:	08006ff3 	.word	0x08006ff3
 8006fcc:	08007003 	.word	0x08007003
 8006fd0:	08007003 	.word	0x08007003
 8006fd4:	08007003 	.word	0x08007003
 8006fd8:	08006ffb 	.word	0x08006ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fdc:	f7fd ff4a 	bl	8004e74 <HAL_RCC_GetPCLK1Freq>
 8006fe0:	61b8      	str	r0, [r7, #24]
        break;
 8006fe2:	e013      	b.n	800700c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fe4:	f7fd ff5a 	bl	8004e9c <HAL_RCC_GetPCLK2Freq>
 8006fe8:	61b8      	str	r0, [r7, #24]
        break;
 8006fea:	e00f      	b.n	800700c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fec:	4b1d      	ldr	r3, [pc, #116]	; (8007064 <UART_SetConfig+0x4c4>)
 8006fee:	61bb      	str	r3, [r7, #24]
        break;
 8006ff0:	e00c      	b.n	800700c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ff2:	f7fd fe2d 	bl	8004c50 <HAL_RCC_GetSysClockFreq>
 8006ff6:	61b8      	str	r0, [r7, #24]
        break;
 8006ff8:	e008      	b.n	800700c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ffe:	61bb      	str	r3, [r7, #24]
        break;
 8007000:	e004      	b.n	800700c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	77bb      	strb	r3, [r7, #30]
        break;
 800700a:	bf00      	nop
    }

    if (pclk != 0U)
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d018      	beq.n	8007044 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	085a      	lsrs	r2, r3, #1
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	441a      	add	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	fbb2 f3f3 	udiv	r3, r2, r3
 8007024:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	2b0f      	cmp	r3, #15
 800702a:	d909      	bls.n	8007040 <UART_SetConfig+0x4a0>
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007032:	d205      	bcs.n	8007040 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	b29a      	uxth	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60da      	str	r2, [r3, #12]
 800703e:	e001      	b.n	8007044 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007050:	7fbb      	ldrb	r3, [r7, #30]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3720      	adds	r7, #32
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	40007c00 	.word	0x40007c00
 8007060:	40023800 	.word	0x40023800
 8007064:	00f42400 	.word	0x00f42400

08007068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00a      	beq.n	80070d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	f003 0308 	and.w	r3, r3, #8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	f003 0310 	and.w	r3, r3, #16
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00a      	beq.n	800711a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	f003 0320 	and.w	r3, r3, #32
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00a      	beq.n	800713c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01a      	beq.n	800717e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007166:	d10a      	bne.n	800717e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	605a      	str	r2, [r3, #4]
  }
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071bc:	f7fb f9ec 	bl	8002598 <HAL_GetTick>
 80071c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0308 	and.w	r3, r3, #8
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d10e      	bne.n	80071ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f81b 	bl	800721a <UART_WaitOnFlagUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e011      	b.n	8007212 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2220      	movs	r2, #32
 80071f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b09c      	sub	sp, #112	; 0x70
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	603b      	str	r3, [r7, #0]
 8007226:	4613      	mov	r3, r2
 8007228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800722a:	e0a7      	b.n	800737c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007232:	f000 80a3 	beq.w	800737c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007236:	f7fb f9af 	bl	8002598 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007242:	429a      	cmp	r2, r3
 8007244:	d302      	bcc.n	800724c <UART_WaitOnFlagUntilTimeout+0x32>
 8007246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007248:	2b00      	cmp	r3, #0
 800724a:	d13f      	bne.n	80072cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800725a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800725c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007260:	667b      	str	r3, [r7, #100]	; 0x64
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800726a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800726c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007270:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e6      	bne.n	800724c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3308      	adds	r3, #8
 8007284:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	663b      	str	r3, [r7, #96]	; 0x60
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3308      	adds	r3, #8
 800729c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800729e:	64ba      	str	r2, [r7, #72]	; 0x48
 80072a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e5      	bne.n	800727e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2220      	movs	r2, #32
 80072b6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e068      	b.n	800739e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0304 	and.w	r3, r3, #4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d050      	beq.n	800737c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072e8:	d148      	bne.n	800737c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007308:	66fb      	str	r3, [r7, #108]	; 0x6c
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
 8007314:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e6      	bne.n	80072f4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3308      	adds	r3, #8
 800732c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	e853 3f00 	ldrex	r3, [r3]
 8007334:	613b      	str	r3, [r7, #16]
   return(result);
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f023 0301 	bic.w	r3, r3, #1
 800733c:	66bb      	str	r3, [r7, #104]	; 0x68
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3308      	adds	r3, #8
 8007344:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007346:	623a      	str	r2, [r7, #32]
 8007348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	69f9      	ldr	r1, [r7, #28]
 800734c:	6a3a      	ldr	r2, [r7, #32]
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	61bb      	str	r3, [r7, #24]
   return(result);
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e5      	bne.n	8007326 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2220      	movs	r2, #32
 800735e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2220      	movs	r2, #32
 8007364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e010      	b.n	800739e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69da      	ldr	r2, [r3, #28]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	4013      	ands	r3, r2
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	429a      	cmp	r2, r3
 800738a:	bf0c      	ite	eq
 800738c:	2301      	moveq	r3, #1
 800738e:	2300      	movne	r3, #0
 8007390:	b2db      	uxtb	r3, r3
 8007392:	461a      	mov	r2, r3
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	429a      	cmp	r2, r3
 8007398:	f43f af48 	beq.w	800722c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3770      	adds	r7, #112	; 0x70
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b097      	sub	sp, #92	; 0x5c
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	4613      	mov	r3, r2
 80073b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	88fa      	ldrh	r2, [r7, #6]
 80073c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	88fa      	ldrh	r2, [r7, #6]
 80073c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073da:	d10e      	bne.n	80073fa <UART_Start_Receive_IT+0x52>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d105      	bne.n	80073f0 <UART_Start_Receive_IT+0x48>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80073ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073ee:	e02d      	b.n	800744c <UART_Start_Receive_IT+0xa4>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	22ff      	movs	r2, #255	; 0xff
 80073f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073f8:	e028      	b.n	800744c <UART_Start_Receive_IT+0xa4>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10d      	bne.n	800741e <UART_Start_Receive_IT+0x76>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d104      	bne.n	8007414 <UART_Start_Receive_IT+0x6c>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	22ff      	movs	r2, #255	; 0xff
 800740e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007412:	e01b      	b.n	800744c <UART_Start_Receive_IT+0xa4>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	227f      	movs	r2, #127	; 0x7f
 8007418:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800741c:	e016      	b.n	800744c <UART_Start_Receive_IT+0xa4>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007426:	d10d      	bne.n	8007444 <UART_Start_Receive_IT+0x9c>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d104      	bne.n	800743a <UART_Start_Receive_IT+0x92>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	227f      	movs	r2, #127	; 0x7f
 8007434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007438:	e008      	b.n	800744c <UART_Start_Receive_IT+0xa4>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	223f      	movs	r2, #63	; 0x3f
 800743e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007442:	e003      	b.n	800744c <UART_Start_Receive_IT+0xa4>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2222      	movs	r2, #34	; 0x22
 8007458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3308      	adds	r3, #8
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800746c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746e:	f043 0301 	orr.w	r3, r3, #1
 8007472:	657b      	str	r3, [r7, #84]	; 0x54
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3308      	adds	r3, #8
 800747a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800747c:	64ba      	str	r2, [r7, #72]	; 0x48
 800747e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007484:	e841 2300 	strex	r3, r2, [r1]
 8007488:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800748a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e5      	bne.n	800745c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007498:	d107      	bne.n	80074aa <UART_Start_Receive_IT+0x102>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d103      	bne.n	80074aa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4a21      	ldr	r2, [pc, #132]	; (800752c <UART_Start_Receive_IT+0x184>)
 80074a6:	669a      	str	r2, [r3, #104]	; 0x68
 80074a8:	e002      	b.n	80074b0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4a20      	ldr	r2, [pc, #128]	; (8007530 <UART_Start_Receive_IT+0x188>)
 80074ae:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d019      	beq.n	80074ec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80074cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
 80074d8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e6      	bne.n	80074b8 <UART_Start_Receive_IT+0x110>
 80074ea:	e018      	b.n	800751e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	613b      	str	r3, [r7, #16]
   return(result);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f043 0320 	orr.w	r3, r3, #32
 8007500:	653b      	str	r3, [r7, #80]	; 0x50
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800750a:	623b      	str	r3, [r7, #32]
 800750c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	69f9      	ldr	r1, [r7, #28]
 8007510:	6a3a      	ldr	r2, [r7, #32]
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	61bb      	str	r3, [r7, #24]
   return(result);
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e6      	bne.n	80074ec <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	375c      	adds	r7, #92	; 0x5c
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	080077e3 	.word	0x080077e3
 8007530:	0800767d 	.word	0x0800767d

08007534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007534:	b480      	push	{r7}
 8007536:	b095      	sub	sp, #84	; 0x54
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755a:	643b      	str	r3, [r7, #64]	; 0x40
 800755c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007560:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e6      	bne.n	800753c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3308      	adds	r3, #8
 8007574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	61fb      	str	r3, [r7, #28]
   return(result);
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	f023 0301 	bic.w	r3, r3, #1
 8007584:	64bb      	str	r3, [r7, #72]	; 0x48
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3308      	adds	r3, #8
 800758c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800758e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007590:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1e5      	bne.n	800756e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d118      	bne.n	80075dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	e853 3f00 	ldrex	r3, [r3]
 80075b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f023 0310 	bic.w	r3, r3, #16
 80075be:	647b      	str	r3, [r7, #68]	; 0x44
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075c8:	61bb      	str	r3, [r7, #24]
 80075ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	6979      	ldr	r1, [r7, #20]
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	e841 2300 	strex	r3, r2, [r1]
 80075d4:	613b      	str	r3, [r7, #16]
   return(result);
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e6      	bne.n	80075aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2220      	movs	r2, #32
 80075e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 80075f0:	bf00      	nop
 80075f2:	3754      	adds	r7, #84	; 0x54
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007608:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f7ff faaa 	bl	8006b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007620:	bf00      	nop
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	60bb      	str	r3, [r7, #8]
   return(result);
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007644:	61fb      	str	r3, [r7, #28]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	61bb      	str	r3, [r7, #24]
 8007650:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007652:	6979      	ldr	r1, [r7, #20]
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	613b      	str	r3, [r7, #16]
   return(result);
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1e6      	bne.n	8007630 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff fa76 	bl	8006b60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007674:	bf00      	nop
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b096      	sub	sp, #88	; 0x58
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800768a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007694:	2b22      	cmp	r3, #34	; 0x22
 8007696:	f040 8098 	bne.w	80077ca <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80076a8:	b2d9      	uxtb	r1, r3
 80076aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b4:	400a      	ands	r2, r1
 80076b6:	b2d2      	uxtb	r2, r2
 80076b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d17b      	bne.n	80077da <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ea:	e853 3f00 	ldrex	r3, [r3]
 80076ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076f6:	653b      	str	r3, [r7, #80]	; 0x50
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007700:	647b      	str	r3, [r7, #68]	; 0x44
 8007702:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007704:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007708:	e841 2300 	strex	r3, r2, [r1]
 800770c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800770e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e6      	bne.n	80076e2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3308      	adds	r3, #8
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	e853 3f00 	ldrex	r3, [r3]
 8007722:	623b      	str	r3, [r7, #32]
   return(result);
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	f023 0301 	bic.w	r3, r3, #1
 800772a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3308      	adds	r3, #8
 8007732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007734:	633a      	str	r2, [r7, #48]	; 0x30
 8007736:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800773a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800773c:	e841 2300 	strex	r3, r2, [r1]
 8007740:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e5      	bne.n	8007714 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2220      	movs	r2, #32
 800774c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007760:	2b01      	cmp	r3, #1
 8007762:	d12e      	bne.n	80077c2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	60fb      	str	r3, [r7, #12]
   return(result);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0310 	bic.w	r3, r3, #16
 800777e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007788:	61fb      	str	r3, [r7, #28]
 800778a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	69b9      	ldr	r1, [r7, #24]
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	617b      	str	r3, [r7, #20]
   return(result);
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e6      	bne.n	800776a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	f003 0310 	and.w	r3, r3, #16
 80077a6:	2b10      	cmp	r3, #16
 80077a8:	d103      	bne.n	80077b2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2210      	movs	r2, #16
 80077b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff f9e4 	bl	8006b88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077c0:	e00b      	b.n	80077da <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7fa f9c0 	bl	8001b48 <HAL_UART_RxCpltCallback>
}
 80077c8:	e007      	b.n	80077da <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	699a      	ldr	r2, [r3, #24]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 0208 	orr.w	r2, r2, #8
 80077d8:	619a      	str	r2, [r3, #24]
}
 80077da:	bf00      	nop
 80077dc:	3758      	adds	r7, #88	; 0x58
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b096      	sub	sp, #88	; 0x58
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077fa:	2b22      	cmp	r3, #34	; 0x22
 80077fc:	f040 8098 	bne.w	8007930 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007810:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007814:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007818:	4013      	ands	r3, r2
 800781a:	b29a      	uxth	r2, r3
 800781c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800781e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007824:	1c9a      	adds	r2, r3, #2
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007830:	b29b      	uxth	r3, r3
 8007832:	3b01      	subs	r3, #1
 8007834:	b29a      	uxth	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007842:	b29b      	uxth	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	d17b      	bne.n	8007940 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800785c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007866:	643b      	str	r3, [r7, #64]	; 0x40
 8007868:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800786c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e6      	bne.n	8007848 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3308      	adds	r3, #8
 8007880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	61fb      	str	r3, [r7, #28]
   return(result);
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	f023 0301 	bic.w	r3, r3, #1
 8007890:	64bb      	str	r3, [r7, #72]	; 0x48
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3308      	adds	r3, #8
 8007898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800789a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800789c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e5      	bne.n	800787a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d12e      	bne.n	8007928 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	f023 0310 	bic.w	r3, r3, #16
 80078e4:	647b      	str	r3, [r7, #68]	; 0x44
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ee:	61bb      	str	r3, [r7, #24]
 80078f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f2:	6979      	ldr	r1, [r7, #20]
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	613b      	str	r3, [r7, #16]
   return(result);
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1e6      	bne.n	80078d0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2b10      	cmp	r3, #16
 800790e:	d103      	bne.n	8007918 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2210      	movs	r2, #16
 8007916:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff f931 	bl	8006b88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007926:	e00b      	b.n	8007940 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7fa f90d 	bl	8001b48 <HAL_UART_RxCpltCallback>
}
 800792e:	e007      	b.n	8007940 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	699a      	ldr	r2, [r3, #24]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0208 	orr.w	r2, r2, #8
 800793e:	619a      	str	r2, [r3, #24]
}
 8007940:	bf00      	nop
 8007942:	3758      	adds	r7, #88	; 0x58
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <siprintf>:
 8007948:	b40e      	push	{r1, r2, r3}
 800794a:	b500      	push	{lr}
 800794c:	b09c      	sub	sp, #112	; 0x70
 800794e:	ab1d      	add	r3, sp, #116	; 0x74
 8007950:	9002      	str	r0, [sp, #8]
 8007952:	9006      	str	r0, [sp, #24]
 8007954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007958:	4809      	ldr	r0, [pc, #36]	; (8007980 <siprintf+0x38>)
 800795a:	9107      	str	r1, [sp, #28]
 800795c:	9104      	str	r1, [sp, #16]
 800795e:	4909      	ldr	r1, [pc, #36]	; (8007984 <siprintf+0x3c>)
 8007960:	f853 2b04 	ldr.w	r2, [r3], #4
 8007964:	9105      	str	r1, [sp, #20]
 8007966:	6800      	ldr	r0, [r0, #0]
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	a902      	add	r1, sp, #8
 800796c:	f000 f9cc 	bl	8007d08 <_svfiprintf_r>
 8007970:	9b02      	ldr	r3, [sp, #8]
 8007972:	2200      	movs	r2, #0
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	b01c      	add	sp, #112	; 0x70
 8007978:	f85d eb04 	ldr.w	lr, [sp], #4
 800797c:	b003      	add	sp, #12
 800797e:	4770      	bx	lr
 8007980:	20000088 	.word	0x20000088
 8007984:	ffff0208 	.word	0xffff0208

08007988 <_vsniprintf_r>:
 8007988:	b530      	push	{r4, r5, lr}
 800798a:	4614      	mov	r4, r2
 800798c:	2c00      	cmp	r4, #0
 800798e:	b09b      	sub	sp, #108	; 0x6c
 8007990:	4605      	mov	r5, r0
 8007992:	461a      	mov	r2, r3
 8007994:	da05      	bge.n	80079a2 <_vsniprintf_r+0x1a>
 8007996:	238b      	movs	r3, #139	; 0x8b
 8007998:	6003      	str	r3, [r0, #0]
 800799a:	f04f 30ff 	mov.w	r0, #4294967295
 800799e:	b01b      	add	sp, #108	; 0x6c
 80079a0:	bd30      	pop	{r4, r5, pc}
 80079a2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80079a6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80079aa:	bf14      	ite	ne
 80079ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 80079b0:	4623      	moveq	r3, r4
 80079b2:	9302      	str	r3, [sp, #8]
 80079b4:	9305      	str	r3, [sp, #20]
 80079b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079ba:	9100      	str	r1, [sp, #0]
 80079bc:	9104      	str	r1, [sp, #16]
 80079be:	f8ad 300e 	strh.w	r3, [sp, #14]
 80079c2:	4669      	mov	r1, sp
 80079c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80079c6:	f000 f99f 	bl	8007d08 <_svfiprintf_r>
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	bfbc      	itt	lt
 80079ce:	238b      	movlt	r3, #139	; 0x8b
 80079d0:	602b      	strlt	r3, [r5, #0]
 80079d2:	2c00      	cmp	r4, #0
 80079d4:	d0e3      	beq.n	800799e <_vsniprintf_r+0x16>
 80079d6:	9b00      	ldr	r3, [sp, #0]
 80079d8:	2200      	movs	r2, #0
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	e7df      	b.n	800799e <_vsniprintf_r+0x16>
	...

080079e0 <vsniprintf>:
 80079e0:	b507      	push	{r0, r1, r2, lr}
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	4613      	mov	r3, r2
 80079e6:	460a      	mov	r2, r1
 80079e8:	4601      	mov	r1, r0
 80079ea:	4803      	ldr	r0, [pc, #12]	; (80079f8 <vsniprintf+0x18>)
 80079ec:	6800      	ldr	r0, [r0, #0]
 80079ee:	f7ff ffcb 	bl	8007988 <_vsniprintf_r>
 80079f2:	b003      	add	sp, #12
 80079f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80079f8:	20000088 	.word	0x20000088

080079fc <memset>:
 80079fc:	4402      	add	r2, r0
 80079fe:	4603      	mov	r3, r0
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d100      	bne.n	8007a06 <memset+0xa>
 8007a04:	4770      	bx	lr
 8007a06:	f803 1b01 	strb.w	r1, [r3], #1
 8007a0a:	e7f9      	b.n	8007a00 <memset+0x4>

08007a0c <__errno>:
 8007a0c:	4b01      	ldr	r3, [pc, #4]	; (8007a14 <__errno+0x8>)
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	20000088 	.word	0x20000088

08007a18 <__libc_init_array>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	4d0d      	ldr	r5, [pc, #52]	; (8007a50 <__libc_init_array+0x38>)
 8007a1c:	4c0d      	ldr	r4, [pc, #52]	; (8007a54 <__libc_init_array+0x3c>)
 8007a1e:	1b64      	subs	r4, r4, r5
 8007a20:	10a4      	asrs	r4, r4, #2
 8007a22:	2600      	movs	r6, #0
 8007a24:	42a6      	cmp	r6, r4
 8007a26:	d109      	bne.n	8007a3c <__libc_init_array+0x24>
 8007a28:	4d0b      	ldr	r5, [pc, #44]	; (8007a58 <__libc_init_array+0x40>)
 8007a2a:	4c0c      	ldr	r4, [pc, #48]	; (8007a5c <__libc_init_array+0x44>)
 8007a2c:	f000 fc6a 	bl	8008304 <_init>
 8007a30:	1b64      	subs	r4, r4, r5
 8007a32:	10a4      	asrs	r4, r4, #2
 8007a34:	2600      	movs	r6, #0
 8007a36:	42a6      	cmp	r6, r4
 8007a38:	d105      	bne.n	8007a46 <__libc_init_array+0x2e>
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a40:	4798      	blx	r3
 8007a42:	3601      	adds	r6, #1
 8007a44:	e7ee      	b.n	8007a24 <__libc_init_array+0xc>
 8007a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a4a:	4798      	blx	r3
 8007a4c:	3601      	adds	r6, #1
 8007a4e:	e7f2      	b.n	8007a36 <__libc_init_array+0x1e>
 8007a50:	08008b6c 	.word	0x08008b6c
 8007a54:	08008b6c 	.word	0x08008b6c
 8007a58:	08008b6c 	.word	0x08008b6c
 8007a5c:	08008b70 	.word	0x08008b70

08007a60 <__retarget_lock_acquire_recursive>:
 8007a60:	4770      	bx	lr

08007a62 <__retarget_lock_release_recursive>:
 8007a62:	4770      	bx	lr

08007a64 <_free_r>:
 8007a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a66:	2900      	cmp	r1, #0
 8007a68:	d044      	beq.n	8007af4 <_free_r+0x90>
 8007a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a6e:	9001      	str	r0, [sp, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f1a1 0404 	sub.w	r4, r1, #4
 8007a76:	bfb8      	it	lt
 8007a78:	18e4      	addlt	r4, r4, r3
 8007a7a:	f000 f8df 	bl	8007c3c <__malloc_lock>
 8007a7e:	4a1e      	ldr	r2, [pc, #120]	; (8007af8 <_free_r+0x94>)
 8007a80:	9801      	ldr	r0, [sp, #4]
 8007a82:	6813      	ldr	r3, [r2, #0]
 8007a84:	b933      	cbnz	r3, 8007a94 <_free_r+0x30>
 8007a86:	6063      	str	r3, [r4, #4]
 8007a88:	6014      	str	r4, [r2, #0]
 8007a8a:	b003      	add	sp, #12
 8007a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a90:	f000 b8da 	b.w	8007c48 <__malloc_unlock>
 8007a94:	42a3      	cmp	r3, r4
 8007a96:	d908      	bls.n	8007aaa <_free_r+0x46>
 8007a98:	6825      	ldr	r5, [r4, #0]
 8007a9a:	1961      	adds	r1, r4, r5
 8007a9c:	428b      	cmp	r3, r1
 8007a9e:	bf01      	itttt	eq
 8007aa0:	6819      	ldreq	r1, [r3, #0]
 8007aa2:	685b      	ldreq	r3, [r3, #4]
 8007aa4:	1949      	addeq	r1, r1, r5
 8007aa6:	6021      	streq	r1, [r4, #0]
 8007aa8:	e7ed      	b.n	8007a86 <_free_r+0x22>
 8007aaa:	461a      	mov	r2, r3
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	b10b      	cbz	r3, 8007ab4 <_free_r+0x50>
 8007ab0:	42a3      	cmp	r3, r4
 8007ab2:	d9fa      	bls.n	8007aaa <_free_r+0x46>
 8007ab4:	6811      	ldr	r1, [r2, #0]
 8007ab6:	1855      	adds	r5, r2, r1
 8007ab8:	42a5      	cmp	r5, r4
 8007aba:	d10b      	bne.n	8007ad4 <_free_r+0x70>
 8007abc:	6824      	ldr	r4, [r4, #0]
 8007abe:	4421      	add	r1, r4
 8007ac0:	1854      	adds	r4, r2, r1
 8007ac2:	42a3      	cmp	r3, r4
 8007ac4:	6011      	str	r1, [r2, #0]
 8007ac6:	d1e0      	bne.n	8007a8a <_free_r+0x26>
 8007ac8:	681c      	ldr	r4, [r3, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	6053      	str	r3, [r2, #4]
 8007ace:	440c      	add	r4, r1
 8007ad0:	6014      	str	r4, [r2, #0]
 8007ad2:	e7da      	b.n	8007a8a <_free_r+0x26>
 8007ad4:	d902      	bls.n	8007adc <_free_r+0x78>
 8007ad6:	230c      	movs	r3, #12
 8007ad8:	6003      	str	r3, [r0, #0]
 8007ada:	e7d6      	b.n	8007a8a <_free_r+0x26>
 8007adc:	6825      	ldr	r5, [r4, #0]
 8007ade:	1961      	adds	r1, r4, r5
 8007ae0:	428b      	cmp	r3, r1
 8007ae2:	bf04      	itt	eq
 8007ae4:	6819      	ldreq	r1, [r3, #0]
 8007ae6:	685b      	ldreq	r3, [r3, #4]
 8007ae8:	6063      	str	r3, [r4, #4]
 8007aea:	bf04      	itt	eq
 8007aec:	1949      	addeq	r1, r1, r5
 8007aee:	6021      	streq	r1, [r4, #0]
 8007af0:	6054      	str	r4, [r2, #4]
 8007af2:	e7ca      	b.n	8007a8a <_free_r+0x26>
 8007af4:	b003      	add	sp, #12
 8007af6:	bd30      	pop	{r4, r5, pc}
 8007af8:	2000dce8 	.word	0x2000dce8

08007afc <sbrk_aligned>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	4e0e      	ldr	r6, [pc, #56]	; (8007b38 <sbrk_aligned+0x3c>)
 8007b00:	460c      	mov	r4, r1
 8007b02:	6831      	ldr	r1, [r6, #0]
 8007b04:	4605      	mov	r5, r0
 8007b06:	b911      	cbnz	r1, 8007b0e <sbrk_aligned+0x12>
 8007b08:	f000 fba6 	bl	8008258 <_sbrk_r>
 8007b0c:	6030      	str	r0, [r6, #0]
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 fba1 	bl	8008258 <_sbrk_r>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	d00a      	beq.n	8007b30 <sbrk_aligned+0x34>
 8007b1a:	1cc4      	adds	r4, r0, #3
 8007b1c:	f024 0403 	bic.w	r4, r4, #3
 8007b20:	42a0      	cmp	r0, r4
 8007b22:	d007      	beq.n	8007b34 <sbrk_aligned+0x38>
 8007b24:	1a21      	subs	r1, r4, r0
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 fb96 	bl	8008258 <_sbrk_r>
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d101      	bne.n	8007b34 <sbrk_aligned+0x38>
 8007b30:	f04f 34ff 	mov.w	r4, #4294967295
 8007b34:	4620      	mov	r0, r4
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	2000dcec 	.word	0x2000dcec

08007b3c <_malloc_r>:
 8007b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b40:	1ccd      	adds	r5, r1, #3
 8007b42:	f025 0503 	bic.w	r5, r5, #3
 8007b46:	3508      	adds	r5, #8
 8007b48:	2d0c      	cmp	r5, #12
 8007b4a:	bf38      	it	cc
 8007b4c:	250c      	movcc	r5, #12
 8007b4e:	2d00      	cmp	r5, #0
 8007b50:	4607      	mov	r7, r0
 8007b52:	db01      	blt.n	8007b58 <_malloc_r+0x1c>
 8007b54:	42a9      	cmp	r1, r5
 8007b56:	d905      	bls.n	8007b64 <_malloc_r+0x28>
 8007b58:	230c      	movs	r3, #12
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	4630      	mov	r0, r6
 8007b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c38 <_malloc_r+0xfc>
 8007b68:	f000 f868 	bl	8007c3c <__malloc_lock>
 8007b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b70:	461c      	mov	r4, r3
 8007b72:	bb5c      	cbnz	r4, 8007bcc <_malloc_r+0x90>
 8007b74:	4629      	mov	r1, r5
 8007b76:	4638      	mov	r0, r7
 8007b78:	f7ff ffc0 	bl	8007afc <sbrk_aligned>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	4604      	mov	r4, r0
 8007b80:	d155      	bne.n	8007c2e <_malloc_r+0xf2>
 8007b82:	f8d8 4000 	ldr.w	r4, [r8]
 8007b86:	4626      	mov	r6, r4
 8007b88:	2e00      	cmp	r6, #0
 8007b8a:	d145      	bne.n	8007c18 <_malloc_r+0xdc>
 8007b8c:	2c00      	cmp	r4, #0
 8007b8e:	d048      	beq.n	8007c22 <_malloc_r+0xe6>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	4631      	mov	r1, r6
 8007b94:	4638      	mov	r0, r7
 8007b96:	eb04 0903 	add.w	r9, r4, r3
 8007b9a:	f000 fb5d 	bl	8008258 <_sbrk_r>
 8007b9e:	4581      	cmp	r9, r0
 8007ba0:	d13f      	bne.n	8007c22 <_malloc_r+0xe6>
 8007ba2:	6821      	ldr	r1, [r4, #0]
 8007ba4:	1a6d      	subs	r5, r5, r1
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7ff ffa7 	bl	8007afc <sbrk_aligned>
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d037      	beq.n	8007c22 <_malloc_r+0xe6>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	442b      	add	r3, r5
 8007bb6:	6023      	str	r3, [r4, #0]
 8007bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d038      	beq.n	8007c32 <_malloc_r+0xf6>
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	42a2      	cmp	r2, r4
 8007bc4:	d12b      	bne.n	8007c1e <_malloc_r+0xe2>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	605a      	str	r2, [r3, #4]
 8007bca:	e00f      	b.n	8007bec <_malloc_r+0xb0>
 8007bcc:	6822      	ldr	r2, [r4, #0]
 8007bce:	1b52      	subs	r2, r2, r5
 8007bd0:	d41f      	bmi.n	8007c12 <_malloc_r+0xd6>
 8007bd2:	2a0b      	cmp	r2, #11
 8007bd4:	d917      	bls.n	8007c06 <_malloc_r+0xca>
 8007bd6:	1961      	adds	r1, r4, r5
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	6025      	str	r5, [r4, #0]
 8007bdc:	bf18      	it	ne
 8007bde:	6059      	strne	r1, [r3, #4]
 8007be0:	6863      	ldr	r3, [r4, #4]
 8007be2:	bf08      	it	eq
 8007be4:	f8c8 1000 	streq.w	r1, [r8]
 8007be8:	5162      	str	r2, [r4, r5]
 8007bea:	604b      	str	r3, [r1, #4]
 8007bec:	4638      	mov	r0, r7
 8007bee:	f104 060b 	add.w	r6, r4, #11
 8007bf2:	f000 f829 	bl	8007c48 <__malloc_unlock>
 8007bf6:	f026 0607 	bic.w	r6, r6, #7
 8007bfa:	1d23      	adds	r3, r4, #4
 8007bfc:	1af2      	subs	r2, r6, r3
 8007bfe:	d0ae      	beq.n	8007b5e <_malloc_r+0x22>
 8007c00:	1b9b      	subs	r3, r3, r6
 8007c02:	50a3      	str	r3, [r4, r2]
 8007c04:	e7ab      	b.n	8007b5e <_malloc_r+0x22>
 8007c06:	42a3      	cmp	r3, r4
 8007c08:	6862      	ldr	r2, [r4, #4]
 8007c0a:	d1dd      	bne.n	8007bc8 <_malloc_r+0x8c>
 8007c0c:	f8c8 2000 	str.w	r2, [r8]
 8007c10:	e7ec      	b.n	8007bec <_malloc_r+0xb0>
 8007c12:	4623      	mov	r3, r4
 8007c14:	6864      	ldr	r4, [r4, #4]
 8007c16:	e7ac      	b.n	8007b72 <_malloc_r+0x36>
 8007c18:	4634      	mov	r4, r6
 8007c1a:	6876      	ldr	r6, [r6, #4]
 8007c1c:	e7b4      	b.n	8007b88 <_malloc_r+0x4c>
 8007c1e:	4613      	mov	r3, r2
 8007c20:	e7cc      	b.n	8007bbc <_malloc_r+0x80>
 8007c22:	230c      	movs	r3, #12
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	4638      	mov	r0, r7
 8007c28:	f000 f80e 	bl	8007c48 <__malloc_unlock>
 8007c2c:	e797      	b.n	8007b5e <_malloc_r+0x22>
 8007c2e:	6025      	str	r5, [r4, #0]
 8007c30:	e7dc      	b.n	8007bec <_malloc_r+0xb0>
 8007c32:	605b      	str	r3, [r3, #4]
 8007c34:	deff      	udf	#255	; 0xff
 8007c36:	bf00      	nop
 8007c38:	2000dce8 	.word	0x2000dce8

08007c3c <__malloc_lock>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	; (8007c44 <__malloc_lock+0x8>)
 8007c3e:	f7ff bf0f 	b.w	8007a60 <__retarget_lock_acquire_recursive>
 8007c42:	bf00      	nop
 8007c44:	2000dce4 	.word	0x2000dce4

08007c48 <__malloc_unlock>:
 8007c48:	4801      	ldr	r0, [pc, #4]	; (8007c50 <__malloc_unlock+0x8>)
 8007c4a:	f7ff bf0a 	b.w	8007a62 <__retarget_lock_release_recursive>
 8007c4e:	bf00      	nop
 8007c50:	2000dce4 	.word	0x2000dce4

08007c54 <__ssputs_r>:
 8007c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c58:	688e      	ldr	r6, [r1, #8]
 8007c5a:	461f      	mov	r7, r3
 8007c5c:	42be      	cmp	r6, r7
 8007c5e:	680b      	ldr	r3, [r1, #0]
 8007c60:	4682      	mov	sl, r0
 8007c62:	460c      	mov	r4, r1
 8007c64:	4690      	mov	r8, r2
 8007c66:	d82c      	bhi.n	8007cc2 <__ssputs_r+0x6e>
 8007c68:	898a      	ldrh	r2, [r1, #12]
 8007c6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c6e:	d026      	beq.n	8007cbe <__ssputs_r+0x6a>
 8007c70:	6965      	ldr	r5, [r4, #20]
 8007c72:	6909      	ldr	r1, [r1, #16]
 8007c74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c78:	eba3 0901 	sub.w	r9, r3, r1
 8007c7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c80:	1c7b      	adds	r3, r7, #1
 8007c82:	444b      	add	r3, r9
 8007c84:	106d      	asrs	r5, r5, #1
 8007c86:	429d      	cmp	r5, r3
 8007c88:	bf38      	it	cc
 8007c8a:	461d      	movcc	r5, r3
 8007c8c:	0553      	lsls	r3, r2, #21
 8007c8e:	d527      	bpl.n	8007ce0 <__ssputs_r+0x8c>
 8007c90:	4629      	mov	r1, r5
 8007c92:	f7ff ff53 	bl	8007b3c <_malloc_r>
 8007c96:	4606      	mov	r6, r0
 8007c98:	b360      	cbz	r0, 8007cf4 <__ssputs_r+0xa0>
 8007c9a:	6921      	ldr	r1, [r4, #16]
 8007c9c:	464a      	mov	r2, r9
 8007c9e:	f000 faeb 	bl	8008278 <memcpy>
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cac:	81a3      	strh	r3, [r4, #12]
 8007cae:	6126      	str	r6, [r4, #16]
 8007cb0:	6165      	str	r5, [r4, #20]
 8007cb2:	444e      	add	r6, r9
 8007cb4:	eba5 0509 	sub.w	r5, r5, r9
 8007cb8:	6026      	str	r6, [r4, #0]
 8007cba:	60a5      	str	r5, [r4, #8]
 8007cbc:	463e      	mov	r6, r7
 8007cbe:	42be      	cmp	r6, r7
 8007cc0:	d900      	bls.n	8007cc4 <__ssputs_r+0x70>
 8007cc2:	463e      	mov	r6, r7
 8007cc4:	6820      	ldr	r0, [r4, #0]
 8007cc6:	4632      	mov	r2, r6
 8007cc8:	4641      	mov	r1, r8
 8007cca:	f000 faab 	bl	8008224 <memmove>
 8007cce:	68a3      	ldr	r3, [r4, #8]
 8007cd0:	1b9b      	subs	r3, r3, r6
 8007cd2:	60a3      	str	r3, [r4, #8]
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	4433      	add	r3, r6
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	2000      	movs	r0, #0
 8007cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	f000 fad7 	bl	8008294 <_realloc_r>
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d1e0      	bne.n	8007cae <__ssputs_r+0x5a>
 8007cec:	6921      	ldr	r1, [r4, #16]
 8007cee:	4650      	mov	r0, sl
 8007cf0:	f7ff feb8 	bl	8007a64 <_free_r>
 8007cf4:	230c      	movs	r3, #12
 8007cf6:	f8ca 3000 	str.w	r3, [sl]
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d00:	81a3      	strh	r3, [r4, #12]
 8007d02:	f04f 30ff 	mov.w	r0, #4294967295
 8007d06:	e7e9      	b.n	8007cdc <__ssputs_r+0x88>

08007d08 <_svfiprintf_r>:
 8007d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	4698      	mov	r8, r3
 8007d0e:	898b      	ldrh	r3, [r1, #12]
 8007d10:	061b      	lsls	r3, r3, #24
 8007d12:	b09d      	sub	sp, #116	; 0x74
 8007d14:	4607      	mov	r7, r0
 8007d16:	460d      	mov	r5, r1
 8007d18:	4614      	mov	r4, r2
 8007d1a:	d50e      	bpl.n	8007d3a <_svfiprintf_r+0x32>
 8007d1c:	690b      	ldr	r3, [r1, #16]
 8007d1e:	b963      	cbnz	r3, 8007d3a <_svfiprintf_r+0x32>
 8007d20:	2140      	movs	r1, #64	; 0x40
 8007d22:	f7ff ff0b 	bl	8007b3c <_malloc_r>
 8007d26:	6028      	str	r0, [r5, #0]
 8007d28:	6128      	str	r0, [r5, #16]
 8007d2a:	b920      	cbnz	r0, 8007d36 <_svfiprintf_r+0x2e>
 8007d2c:	230c      	movs	r3, #12
 8007d2e:	603b      	str	r3, [r7, #0]
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	e0d0      	b.n	8007ed8 <_svfiprintf_r+0x1d0>
 8007d36:	2340      	movs	r3, #64	; 0x40
 8007d38:	616b      	str	r3, [r5, #20]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d3e:	2320      	movs	r3, #32
 8007d40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d48:	2330      	movs	r3, #48	; 0x30
 8007d4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007ef0 <_svfiprintf_r+0x1e8>
 8007d4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d52:	f04f 0901 	mov.w	r9, #1
 8007d56:	4623      	mov	r3, r4
 8007d58:	469a      	mov	sl, r3
 8007d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d5e:	b10a      	cbz	r2, 8007d64 <_svfiprintf_r+0x5c>
 8007d60:	2a25      	cmp	r2, #37	; 0x25
 8007d62:	d1f9      	bne.n	8007d58 <_svfiprintf_r+0x50>
 8007d64:	ebba 0b04 	subs.w	fp, sl, r4
 8007d68:	d00b      	beq.n	8007d82 <_svfiprintf_r+0x7a>
 8007d6a:	465b      	mov	r3, fp
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	4629      	mov	r1, r5
 8007d70:	4638      	mov	r0, r7
 8007d72:	f7ff ff6f 	bl	8007c54 <__ssputs_r>
 8007d76:	3001      	adds	r0, #1
 8007d78:	f000 80a9 	beq.w	8007ece <_svfiprintf_r+0x1c6>
 8007d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d7e:	445a      	add	r2, fp
 8007d80:	9209      	str	r2, [sp, #36]	; 0x24
 8007d82:	f89a 3000 	ldrb.w	r3, [sl]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 80a1 	beq.w	8007ece <_svfiprintf_r+0x1c6>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d96:	f10a 0a01 	add.w	sl, sl, #1
 8007d9a:	9304      	str	r3, [sp, #16]
 8007d9c:	9307      	str	r3, [sp, #28]
 8007d9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007da2:	931a      	str	r3, [sp, #104]	; 0x68
 8007da4:	4654      	mov	r4, sl
 8007da6:	2205      	movs	r2, #5
 8007da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dac:	4850      	ldr	r0, [pc, #320]	; (8007ef0 <_svfiprintf_r+0x1e8>)
 8007dae:	f7f8 fa37 	bl	8000220 <memchr>
 8007db2:	9a04      	ldr	r2, [sp, #16]
 8007db4:	b9d8      	cbnz	r0, 8007dee <_svfiprintf_r+0xe6>
 8007db6:	06d0      	lsls	r0, r2, #27
 8007db8:	bf44      	itt	mi
 8007dba:	2320      	movmi	r3, #32
 8007dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dc0:	0711      	lsls	r1, r2, #28
 8007dc2:	bf44      	itt	mi
 8007dc4:	232b      	movmi	r3, #43	; 0x2b
 8007dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dca:	f89a 3000 	ldrb.w	r3, [sl]
 8007dce:	2b2a      	cmp	r3, #42	; 0x2a
 8007dd0:	d015      	beq.n	8007dfe <_svfiprintf_r+0xf6>
 8007dd2:	9a07      	ldr	r2, [sp, #28]
 8007dd4:	4654      	mov	r4, sl
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	f04f 0c0a 	mov.w	ip, #10
 8007ddc:	4621      	mov	r1, r4
 8007dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007de2:	3b30      	subs	r3, #48	; 0x30
 8007de4:	2b09      	cmp	r3, #9
 8007de6:	d94d      	bls.n	8007e84 <_svfiprintf_r+0x17c>
 8007de8:	b1b0      	cbz	r0, 8007e18 <_svfiprintf_r+0x110>
 8007dea:	9207      	str	r2, [sp, #28]
 8007dec:	e014      	b.n	8007e18 <_svfiprintf_r+0x110>
 8007dee:	eba0 0308 	sub.w	r3, r0, r8
 8007df2:	fa09 f303 	lsl.w	r3, r9, r3
 8007df6:	4313      	orrs	r3, r2
 8007df8:	9304      	str	r3, [sp, #16]
 8007dfa:	46a2      	mov	sl, r4
 8007dfc:	e7d2      	b.n	8007da4 <_svfiprintf_r+0x9c>
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	1d19      	adds	r1, r3, #4
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	9103      	str	r1, [sp, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	bfbb      	ittet	lt
 8007e0a:	425b      	neglt	r3, r3
 8007e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007e10:	9307      	strge	r3, [sp, #28]
 8007e12:	9307      	strlt	r3, [sp, #28]
 8007e14:	bfb8      	it	lt
 8007e16:	9204      	strlt	r2, [sp, #16]
 8007e18:	7823      	ldrb	r3, [r4, #0]
 8007e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e1c:	d10c      	bne.n	8007e38 <_svfiprintf_r+0x130>
 8007e1e:	7863      	ldrb	r3, [r4, #1]
 8007e20:	2b2a      	cmp	r3, #42	; 0x2a
 8007e22:	d134      	bne.n	8007e8e <_svfiprintf_r+0x186>
 8007e24:	9b03      	ldr	r3, [sp, #12]
 8007e26:	1d1a      	adds	r2, r3, #4
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	9203      	str	r2, [sp, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	bfb8      	it	lt
 8007e30:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e34:	3402      	adds	r4, #2
 8007e36:	9305      	str	r3, [sp, #20]
 8007e38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007f00 <_svfiprintf_r+0x1f8>
 8007e3c:	7821      	ldrb	r1, [r4, #0]
 8007e3e:	2203      	movs	r2, #3
 8007e40:	4650      	mov	r0, sl
 8007e42:	f7f8 f9ed 	bl	8000220 <memchr>
 8007e46:	b138      	cbz	r0, 8007e58 <_svfiprintf_r+0x150>
 8007e48:	9b04      	ldr	r3, [sp, #16]
 8007e4a:	eba0 000a 	sub.w	r0, r0, sl
 8007e4e:	2240      	movs	r2, #64	; 0x40
 8007e50:	4082      	lsls	r2, r0
 8007e52:	4313      	orrs	r3, r2
 8007e54:	3401      	adds	r4, #1
 8007e56:	9304      	str	r3, [sp, #16]
 8007e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e5c:	4825      	ldr	r0, [pc, #148]	; (8007ef4 <_svfiprintf_r+0x1ec>)
 8007e5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e62:	2206      	movs	r2, #6
 8007e64:	f7f8 f9dc 	bl	8000220 <memchr>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d038      	beq.n	8007ede <_svfiprintf_r+0x1d6>
 8007e6c:	4b22      	ldr	r3, [pc, #136]	; (8007ef8 <_svfiprintf_r+0x1f0>)
 8007e6e:	bb1b      	cbnz	r3, 8007eb8 <_svfiprintf_r+0x1b0>
 8007e70:	9b03      	ldr	r3, [sp, #12]
 8007e72:	3307      	adds	r3, #7
 8007e74:	f023 0307 	bic.w	r3, r3, #7
 8007e78:	3308      	adds	r3, #8
 8007e7a:	9303      	str	r3, [sp, #12]
 8007e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7e:	4433      	add	r3, r6
 8007e80:	9309      	str	r3, [sp, #36]	; 0x24
 8007e82:	e768      	b.n	8007d56 <_svfiprintf_r+0x4e>
 8007e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e88:	460c      	mov	r4, r1
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	e7a6      	b.n	8007ddc <_svfiprintf_r+0xd4>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	3401      	adds	r4, #1
 8007e92:	9305      	str	r3, [sp, #20]
 8007e94:	4619      	mov	r1, r3
 8007e96:	f04f 0c0a 	mov.w	ip, #10
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ea0:	3a30      	subs	r2, #48	; 0x30
 8007ea2:	2a09      	cmp	r2, #9
 8007ea4:	d903      	bls.n	8007eae <_svfiprintf_r+0x1a6>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d0c6      	beq.n	8007e38 <_svfiprintf_r+0x130>
 8007eaa:	9105      	str	r1, [sp, #20]
 8007eac:	e7c4      	b.n	8007e38 <_svfiprintf_r+0x130>
 8007eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e7f0      	b.n	8007e9a <_svfiprintf_r+0x192>
 8007eb8:	ab03      	add	r3, sp, #12
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	462a      	mov	r2, r5
 8007ebe:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <_svfiprintf_r+0x1f4>)
 8007ec0:	a904      	add	r1, sp, #16
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	f3af 8000 	nop.w
 8007ec8:	1c42      	adds	r2, r0, #1
 8007eca:	4606      	mov	r6, r0
 8007ecc:	d1d6      	bne.n	8007e7c <_svfiprintf_r+0x174>
 8007ece:	89ab      	ldrh	r3, [r5, #12]
 8007ed0:	065b      	lsls	r3, r3, #25
 8007ed2:	f53f af2d 	bmi.w	8007d30 <_svfiprintf_r+0x28>
 8007ed6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ed8:	b01d      	add	sp, #116	; 0x74
 8007eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ede:	ab03      	add	r3, sp, #12
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	462a      	mov	r2, r5
 8007ee4:	4b05      	ldr	r3, [pc, #20]	; (8007efc <_svfiprintf_r+0x1f4>)
 8007ee6:	a904      	add	r1, sp, #16
 8007ee8:	4638      	mov	r0, r7
 8007eea:	f000 f879 	bl	8007fe0 <_printf_i>
 8007eee:	e7eb      	b.n	8007ec8 <_svfiprintf_r+0x1c0>
 8007ef0:	08008b30 	.word	0x08008b30
 8007ef4:	08008b3a 	.word	0x08008b3a
 8007ef8:	00000000 	.word	0x00000000
 8007efc:	08007c55 	.word	0x08007c55
 8007f00:	08008b36 	.word	0x08008b36

08007f04 <_printf_common>:
 8007f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f08:	4616      	mov	r6, r2
 8007f0a:	4699      	mov	r9, r3
 8007f0c:	688a      	ldr	r2, [r1, #8]
 8007f0e:	690b      	ldr	r3, [r1, #16]
 8007f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f14:	4293      	cmp	r3, r2
 8007f16:	bfb8      	it	lt
 8007f18:	4613      	movlt	r3, r2
 8007f1a:	6033      	str	r3, [r6, #0]
 8007f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f20:	4607      	mov	r7, r0
 8007f22:	460c      	mov	r4, r1
 8007f24:	b10a      	cbz	r2, 8007f2a <_printf_common+0x26>
 8007f26:	3301      	adds	r3, #1
 8007f28:	6033      	str	r3, [r6, #0]
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	0699      	lsls	r1, r3, #26
 8007f2e:	bf42      	ittt	mi
 8007f30:	6833      	ldrmi	r3, [r6, #0]
 8007f32:	3302      	addmi	r3, #2
 8007f34:	6033      	strmi	r3, [r6, #0]
 8007f36:	6825      	ldr	r5, [r4, #0]
 8007f38:	f015 0506 	ands.w	r5, r5, #6
 8007f3c:	d106      	bne.n	8007f4c <_printf_common+0x48>
 8007f3e:	f104 0a19 	add.w	sl, r4, #25
 8007f42:	68e3      	ldr	r3, [r4, #12]
 8007f44:	6832      	ldr	r2, [r6, #0]
 8007f46:	1a9b      	subs	r3, r3, r2
 8007f48:	42ab      	cmp	r3, r5
 8007f4a:	dc26      	bgt.n	8007f9a <_printf_common+0x96>
 8007f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f50:	1e13      	subs	r3, r2, #0
 8007f52:	6822      	ldr	r2, [r4, #0]
 8007f54:	bf18      	it	ne
 8007f56:	2301      	movne	r3, #1
 8007f58:	0692      	lsls	r2, r2, #26
 8007f5a:	d42b      	bmi.n	8007fb4 <_printf_common+0xb0>
 8007f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f60:	4649      	mov	r1, r9
 8007f62:	4638      	mov	r0, r7
 8007f64:	47c0      	blx	r8
 8007f66:	3001      	adds	r0, #1
 8007f68:	d01e      	beq.n	8007fa8 <_printf_common+0xa4>
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	6922      	ldr	r2, [r4, #16]
 8007f6e:	f003 0306 	and.w	r3, r3, #6
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	bf02      	ittt	eq
 8007f76:	68e5      	ldreq	r5, [r4, #12]
 8007f78:	6833      	ldreq	r3, [r6, #0]
 8007f7a:	1aed      	subeq	r5, r5, r3
 8007f7c:	68a3      	ldr	r3, [r4, #8]
 8007f7e:	bf0c      	ite	eq
 8007f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f84:	2500      	movne	r5, #0
 8007f86:	4293      	cmp	r3, r2
 8007f88:	bfc4      	itt	gt
 8007f8a:	1a9b      	subgt	r3, r3, r2
 8007f8c:	18ed      	addgt	r5, r5, r3
 8007f8e:	2600      	movs	r6, #0
 8007f90:	341a      	adds	r4, #26
 8007f92:	42b5      	cmp	r5, r6
 8007f94:	d11a      	bne.n	8007fcc <_printf_common+0xc8>
 8007f96:	2000      	movs	r0, #0
 8007f98:	e008      	b.n	8007fac <_printf_common+0xa8>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4652      	mov	r2, sl
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	47c0      	blx	r8
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d103      	bne.n	8007fb0 <_printf_common+0xac>
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb0:	3501      	adds	r5, #1
 8007fb2:	e7c6      	b.n	8007f42 <_printf_common+0x3e>
 8007fb4:	18e1      	adds	r1, r4, r3
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	2030      	movs	r0, #48	; 0x30
 8007fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fbe:	4422      	add	r2, r4
 8007fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fc8:	3302      	adds	r3, #2
 8007fca:	e7c7      	b.n	8007f5c <_printf_common+0x58>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	4622      	mov	r2, r4
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	47c0      	blx	r8
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	d0e6      	beq.n	8007fa8 <_printf_common+0xa4>
 8007fda:	3601      	adds	r6, #1
 8007fdc:	e7d9      	b.n	8007f92 <_printf_common+0x8e>
	...

08007fe0 <_printf_i>:
 8007fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe4:	7e0f      	ldrb	r7, [r1, #24]
 8007fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fe8:	2f78      	cmp	r7, #120	; 0x78
 8007fea:	4691      	mov	r9, r2
 8007fec:	4680      	mov	r8, r0
 8007fee:	460c      	mov	r4, r1
 8007ff0:	469a      	mov	sl, r3
 8007ff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ff6:	d807      	bhi.n	8008008 <_printf_i+0x28>
 8007ff8:	2f62      	cmp	r7, #98	; 0x62
 8007ffa:	d80a      	bhi.n	8008012 <_printf_i+0x32>
 8007ffc:	2f00      	cmp	r7, #0
 8007ffe:	f000 80d4 	beq.w	80081aa <_printf_i+0x1ca>
 8008002:	2f58      	cmp	r7, #88	; 0x58
 8008004:	f000 80c0 	beq.w	8008188 <_printf_i+0x1a8>
 8008008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800800c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008010:	e03a      	b.n	8008088 <_printf_i+0xa8>
 8008012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008016:	2b15      	cmp	r3, #21
 8008018:	d8f6      	bhi.n	8008008 <_printf_i+0x28>
 800801a:	a101      	add	r1, pc, #4	; (adr r1, 8008020 <_printf_i+0x40>)
 800801c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008020:	08008079 	.word	0x08008079
 8008024:	0800808d 	.word	0x0800808d
 8008028:	08008009 	.word	0x08008009
 800802c:	08008009 	.word	0x08008009
 8008030:	08008009 	.word	0x08008009
 8008034:	08008009 	.word	0x08008009
 8008038:	0800808d 	.word	0x0800808d
 800803c:	08008009 	.word	0x08008009
 8008040:	08008009 	.word	0x08008009
 8008044:	08008009 	.word	0x08008009
 8008048:	08008009 	.word	0x08008009
 800804c:	08008191 	.word	0x08008191
 8008050:	080080b9 	.word	0x080080b9
 8008054:	0800814b 	.word	0x0800814b
 8008058:	08008009 	.word	0x08008009
 800805c:	08008009 	.word	0x08008009
 8008060:	080081b3 	.word	0x080081b3
 8008064:	08008009 	.word	0x08008009
 8008068:	080080b9 	.word	0x080080b9
 800806c:	08008009 	.word	0x08008009
 8008070:	08008009 	.word	0x08008009
 8008074:	08008153 	.word	0x08008153
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	1d1a      	adds	r2, r3, #4
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	602a      	str	r2, [r5, #0]
 8008080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008088:	2301      	movs	r3, #1
 800808a:	e09f      	b.n	80081cc <_printf_i+0x1ec>
 800808c:	6820      	ldr	r0, [r4, #0]
 800808e:	682b      	ldr	r3, [r5, #0]
 8008090:	0607      	lsls	r7, r0, #24
 8008092:	f103 0104 	add.w	r1, r3, #4
 8008096:	6029      	str	r1, [r5, #0]
 8008098:	d501      	bpl.n	800809e <_printf_i+0xbe>
 800809a:	681e      	ldr	r6, [r3, #0]
 800809c:	e003      	b.n	80080a6 <_printf_i+0xc6>
 800809e:	0646      	lsls	r6, r0, #25
 80080a0:	d5fb      	bpl.n	800809a <_printf_i+0xba>
 80080a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80080a6:	2e00      	cmp	r6, #0
 80080a8:	da03      	bge.n	80080b2 <_printf_i+0xd2>
 80080aa:	232d      	movs	r3, #45	; 0x2d
 80080ac:	4276      	negs	r6, r6
 80080ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080b2:	485a      	ldr	r0, [pc, #360]	; (800821c <_printf_i+0x23c>)
 80080b4:	230a      	movs	r3, #10
 80080b6:	e012      	b.n	80080de <_printf_i+0xfe>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	6820      	ldr	r0, [r4, #0]
 80080bc:	1d19      	adds	r1, r3, #4
 80080be:	6029      	str	r1, [r5, #0]
 80080c0:	0605      	lsls	r5, r0, #24
 80080c2:	d501      	bpl.n	80080c8 <_printf_i+0xe8>
 80080c4:	681e      	ldr	r6, [r3, #0]
 80080c6:	e002      	b.n	80080ce <_printf_i+0xee>
 80080c8:	0641      	lsls	r1, r0, #25
 80080ca:	d5fb      	bpl.n	80080c4 <_printf_i+0xe4>
 80080cc:	881e      	ldrh	r6, [r3, #0]
 80080ce:	4853      	ldr	r0, [pc, #332]	; (800821c <_printf_i+0x23c>)
 80080d0:	2f6f      	cmp	r7, #111	; 0x6f
 80080d2:	bf0c      	ite	eq
 80080d4:	2308      	moveq	r3, #8
 80080d6:	230a      	movne	r3, #10
 80080d8:	2100      	movs	r1, #0
 80080da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080de:	6865      	ldr	r5, [r4, #4]
 80080e0:	60a5      	str	r5, [r4, #8]
 80080e2:	2d00      	cmp	r5, #0
 80080e4:	bfa2      	ittt	ge
 80080e6:	6821      	ldrge	r1, [r4, #0]
 80080e8:	f021 0104 	bicge.w	r1, r1, #4
 80080ec:	6021      	strge	r1, [r4, #0]
 80080ee:	b90e      	cbnz	r6, 80080f4 <_printf_i+0x114>
 80080f0:	2d00      	cmp	r5, #0
 80080f2:	d04b      	beq.n	800818c <_printf_i+0x1ac>
 80080f4:	4615      	mov	r5, r2
 80080f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80080fa:	fb03 6711 	mls	r7, r3, r1, r6
 80080fe:	5dc7      	ldrb	r7, [r0, r7]
 8008100:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008104:	4637      	mov	r7, r6
 8008106:	42bb      	cmp	r3, r7
 8008108:	460e      	mov	r6, r1
 800810a:	d9f4      	bls.n	80080f6 <_printf_i+0x116>
 800810c:	2b08      	cmp	r3, #8
 800810e:	d10b      	bne.n	8008128 <_printf_i+0x148>
 8008110:	6823      	ldr	r3, [r4, #0]
 8008112:	07de      	lsls	r6, r3, #31
 8008114:	d508      	bpl.n	8008128 <_printf_i+0x148>
 8008116:	6923      	ldr	r3, [r4, #16]
 8008118:	6861      	ldr	r1, [r4, #4]
 800811a:	4299      	cmp	r1, r3
 800811c:	bfde      	ittt	le
 800811e:	2330      	movle	r3, #48	; 0x30
 8008120:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008124:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008128:	1b52      	subs	r2, r2, r5
 800812a:	6122      	str	r2, [r4, #16]
 800812c:	f8cd a000 	str.w	sl, [sp]
 8008130:	464b      	mov	r3, r9
 8008132:	aa03      	add	r2, sp, #12
 8008134:	4621      	mov	r1, r4
 8008136:	4640      	mov	r0, r8
 8008138:	f7ff fee4 	bl	8007f04 <_printf_common>
 800813c:	3001      	adds	r0, #1
 800813e:	d14a      	bne.n	80081d6 <_printf_i+0x1f6>
 8008140:	f04f 30ff 	mov.w	r0, #4294967295
 8008144:	b004      	add	sp, #16
 8008146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	f043 0320 	orr.w	r3, r3, #32
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	4833      	ldr	r0, [pc, #204]	; (8008220 <_printf_i+0x240>)
 8008154:	2778      	movs	r7, #120	; 0x78
 8008156:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	6829      	ldr	r1, [r5, #0]
 800815e:	061f      	lsls	r7, r3, #24
 8008160:	f851 6b04 	ldr.w	r6, [r1], #4
 8008164:	d402      	bmi.n	800816c <_printf_i+0x18c>
 8008166:	065f      	lsls	r7, r3, #25
 8008168:	bf48      	it	mi
 800816a:	b2b6      	uxthmi	r6, r6
 800816c:	07df      	lsls	r7, r3, #31
 800816e:	bf48      	it	mi
 8008170:	f043 0320 	orrmi.w	r3, r3, #32
 8008174:	6029      	str	r1, [r5, #0]
 8008176:	bf48      	it	mi
 8008178:	6023      	strmi	r3, [r4, #0]
 800817a:	b91e      	cbnz	r6, 8008184 <_printf_i+0x1a4>
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	f023 0320 	bic.w	r3, r3, #32
 8008182:	6023      	str	r3, [r4, #0]
 8008184:	2310      	movs	r3, #16
 8008186:	e7a7      	b.n	80080d8 <_printf_i+0xf8>
 8008188:	4824      	ldr	r0, [pc, #144]	; (800821c <_printf_i+0x23c>)
 800818a:	e7e4      	b.n	8008156 <_printf_i+0x176>
 800818c:	4615      	mov	r5, r2
 800818e:	e7bd      	b.n	800810c <_printf_i+0x12c>
 8008190:	682b      	ldr	r3, [r5, #0]
 8008192:	6826      	ldr	r6, [r4, #0]
 8008194:	6961      	ldr	r1, [r4, #20]
 8008196:	1d18      	adds	r0, r3, #4
 8008198:	6028      	str	r0, [r5, #0]
 800819a:	0635      	lsls	r5, r6, #24
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	d501      	bpl.n	80081a4 <_printf_i+0x1c4>
 80081a0:	6019      	str	r1, [r3, #0]
 80081a2:	e002      	b.n	80081aa <_printf_i+0x1ca>
 80081a4:	0670      	lsls	r0, r6, #25
 80081a6:	d5fb      	bpl.n	80081a0 <_printf_i+0x1c0>
 80081a8:	8019      	strh	r1, [r3, #0]
 80081aa:	2300      	movs	r3, #0
 80081ac:	6123      	str	r3, [r4, #16]
 80081ae:	4615      	mov	r5, r2
 80081b0:	e7bc      	b.n	800812c <_printf_i+0x14c>
 80081b2:	682b      	ldr	r3, [r5, #0]
 80081b4:	1d1a      	adds	r2, r3, #4
 80081b6:	602a      	str	r2, [r5, #0]
 80081b8:	681d      	ldr	r5, [r3, #0]
 80081ba:	6862      	ldr	r2, [r4, #4]
 80081bc:	2100      	movs	r1, #0
 80081be:	4628      	mov	r0, r5
 80081c0:	f7f8 f82e 	bl	8000220 <memchr>
 80081c4:	b108      	cbz	r0, 80081ca <_printf_i+0x1ea>
 80081c6:	1b40      	subs	r0, r0, r5
 80081c8:	6060      	str	r0, [r4, #4]
 80081ca:	6863      	ldr	r3, [r4, #4]
 80081cc:	6123      	str	r3, [r4, #16]
 80081ce:	2300      	movs	r3, #0
 80081d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081d4:	e7aa      	b.n	800812c <_printf_i+0x14c>
 80081d6:	6923      	ldr	r3, [r4, #16]
 80081d8:	462a      	mov	r2, r5
 80081da:	4649      	mov	r1, r9
 80081dc:	4640      	mov	r0, r8
 80081de:	47d0      	blx	sl
 80081e0:	3001      	adds	r0, #1
 80081e2:	d0ad      	beq.n	8008140 <_printf_i+0x160>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	079b      	lsls	r3, r3, #30
 80081e8:	d413      	bmi.n	8008212 <_printf_i+0x232>
 80081ea:	68e0      	ldr	r0, [r4, #12]
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	4298      	cmp	r0, r3
 80081f0:	bfb8      	it	lt
 80081f2:	4618      	movlt	r0, r3
 80081f4:	e7a6      	b.n	8008144 <_printf_i+0x164>
 80081f6:	2301      	movs	r3, #1
 80081f8:	4632      	mov	r2, r6
 80081fa:	4649      	mov	r1, r9
 80081fc:	4640      	mov	r0, r8
 80081fe:	47d0      	blx	sl
 8008200:	3001      	adds	r0, #1
 8008202:	d09d      	beq.n	8008140 <_printf_i+0x160>
 8008204:	3501      	adds	r5, #1
 8008206:	68e3      	ldr	r3, [r4, #12]
 8008208:	9903      	ldr	r1, [sp, #12]
 800820a:	1a5b      	subs	r3, r3, r1
 800820c:	42ab      	cmp	r3, r5
 800820e:	dcf2      	bgt.n	80081f6 <_printf_i+0x216>
 8008210:	e7eb      	b.n	80081ea <_printf_i+0x20a>
 8008212:	2500      	movs	r5, #0
 8008214:	f104 0619 	add.w	r6, r4, #25
 8008218:	e7f5      	b.n	8008206 <_printf_i+0x226>
 800821a:	bf00      	nop
 800821c:	08008b41 	.word	0x08008b41
 8008220:	08008b52 	.word	0x08008b52

08008224 <memmove>:
 8008224:	4288      	cmp	r0, r1
 8008226:	b510      	push	{r4, lr}
 8008228:	eb01 0402 	add.w	r4, r1, r2
 800822c:	d902      	bls.n	8008234 <memmove+0x10>
 800822e:	4284      	cmp	r4, r0
 8008230:	4623      	mov	r3, r4
 8008232:	d807      	bhi.n	8008244 <memmove+0x20>
 8008234:	1e43      	subs	r3, r0, #1
 8008236:	42a1      	cmp	r1, r4
 8008238:	d008      	beq.n	800824c <memmove+0x28>
 800823a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800823e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008242:	e7f8      	b.n	8008236 <memmove+0x12>
 8008244:	4402      	add	r2, r0
 8008246:	4601      	mov	r1, r0
 8008248:	428a      	cmp	r2, r1
 800824a:	d100      	bne.n	800824e <memmove+0x2a>
 800824c:	bd10      	pop	{r4, pc}
 800824e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008256:	e7f7      	b.n	8008248 <memmove+0x24>

08008258 <_sbrk_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4d06      	ldr	r5, [pc, #24]	; (8008274 <_sbrk_r+0x1c>)
 800825c:	2300      	movs	r3, #0
 800825e:	4604      	mov	r4, r0
 8008260:	4608      	mov	r0, r1
 8008262:	602b      	str	r3, [r5, #0]
 8008264:	f7fa f8d6 	bl	8002414 <_sbrk>
 8008268:	1c43      	adds	r3, r0, #1
 800826a:	d102      	bne.n	8008272 <_sbrk_r+0x1a>
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	b103      	cbz	r3, 8008272 <_sbrk_r+0x1a>
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	bd38      	pop	{r3, r4, r5, pc}
 8008274:	2000dce0 	.word	0x2000dce0

08008278 <memcpy>:
 8008278:	440a      	add	r2, r1
 800827a:	4291      	cmp	r1, r2
 800827c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008280:	d100      	bne.n	8008284 <memcpy+0xc>
 8008282:	4770      	bx	lr
 8008284:	b510      	push	{r4, lr}
 8008286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800828a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800828e:	4291      	cmp	r1, r2
 8008290:	d1f9      	bne.n	8008286 <memcpy+0xe>
 8008292:	bd10      	pop	{r4, pc}

08008294 <_realloc_r>:
 8008294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008298:	4680      	mov	r8, r0
 800829a:	4614      	mov	r4, r2
 800829c:	460e      	mov	r6, r1
 800829e:	b921      	cbnz	r1, 80082aa <_realloc_r+0x16>
 80082a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082a4:	4611      	mov	r1, r2
 80082a6:	f7ff bc49 	b.w	8007b3c <_malloc_r>
 80082aa:	b92a      	cbnz	r2, 80082b8 <_realloc_r+0x24>
 80082ac:	f7ff fbda 	bl	8007a64 <_free_r>
 80082b0:	4625      	mov	r5, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b8:	f000 f81b 	bl	80082f2 <_malloc_usable_size_r>
 80082bc:	4284      	cmp	r4, r0
 80082be:	4607      	mov	r7, r0
 80082c0:	d802      	bhi.n	80082c8 <_realloc_r+0x34>
 80082c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082c6:	d812      	bhi.n	80082ee <_realloc_r+0x5a>
 80082c8:	4621      	mov	r1, r4
 80082ca:	4640      	mov	r0, r8
 80082cc:	f7ff fc36 	bl	8007b3c <_malloc_r>
 80082d0:	4605      	mov	r5, r0
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d0ed      	beq.n	80082b2 <_realloc_r+0x1e>
 80082d6:	42bc      	cmp	r4, r7
 80082d8:	4622      	mov	r2, r4
 80082da:	4631      	mov	r1, r6
 80082dc:	bf28      	it	cs
 80082de:	463a      	movcs	r2, r7
 80082e0:	f7ff ffca 	bl	8008278 <memcpy>
 80082e4:	4631      	mov	r1, r6
 80082e6:	4640      	mov	r0, r8
 80082e8:	f7ff fbbc 	bl	8007a64 <_free_r>
 80082ec:	e7e1      	b.n	80082b2 <_realloc_r+0x1e>
 80082ee:	4635      	mov	r5, r6
 80082f0:	e7df      	b.n	80082b2 <_realloc_r+0x1e>

080082f2 <_malloc_usable_size_r>:
 80082f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082f6:	1f18      	subs	r0, r3, #4
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	bfbc      	itt	lt
 80082fc:	580b      	ldrlt	r3, [r1, r0]
 80082fe:	18c0      	addlt	r0, r0, r3
 8008300:	4770      	bx	lr
	...

08008304 <_init>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	bf00      	nop
 8008308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830a:	bc08      	pop	{r3}
 800830c:	469e      	mov	lr, r3
 800830e:	4770      	bx	lr

08008310 <_fini>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	bf00      	nop
 8008314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008316:	bc08      	pop	{r3}
 8008318:	469e      	mov	lr, r3
 800831a:	4770      	bx	lr
