
MPDD_Final_Project_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000807c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  0800824c  0800824c  0001824c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a94  08008a94  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a94  08008a94  00018a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a9c  08008a9c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a9c  08008a9c  00018a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008aa0  08008aa0  00018aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b6e0  2000008c  08008b30  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b76c  08008b30  0002b76c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b27  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029c2  00000000  00000000  00031c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  000345e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f14  00000000  00000000  00035400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014003  00000000  00000000  0005b314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea511  00000000  00000000  0006f317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000ad9  00000000  00000000  00159828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ee0  00000000  00000000  0015a304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0015e1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008234 	.word	0x08008234

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	08008234 	.word	0x08008234

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005ce:	f002 fe8b 	bl	80032e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005da:	f002 fe85 	bl	80032e8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 80005de:	1df9      	adds	r1, r7, #7
 80005e0:	2300      	movs	r3, #0
 80005e2:	2201      	movs	r2, #1
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <ILI9163_writeCommand+0x48>)
 80005e6:	f005 f8a0 	bl	800572a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005f2:	f002 fe79 	bl	80032e8 <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020400 	.word	0x40020400
 8000604:	2000a134 	.word	0x2000a134

08000608 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <ILI9163_writeData+0x44>)
 800061a:	f002 fe65 	bl	80032e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <ILI9163_writeData+0x44>)
 8000626:	f002 fe5f 	bl	80032e8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 800062a:	1df9      	adds	r1, r7, #7
 800062c:	2300      	movs	r3, #0
 800062e:	2201      	movs	r2, #1
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <ILI9163_writeData+0x48>)
 8000632:	f005 f87a 	bl	800572a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <ILI9163_writeData+0x44>)
 800063e:	f002 fe53 	bl	80032e8 <HAL_GPIO_WritePin>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40020400 	.word	0x40020400
 8000650:	2000a134 	.word	0x2000a134

08000654 <ILI9163_writeData16>:

void ILI9163_writeData16(uint16_t word) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	4810      	ldr	r0, [pc, #64]	; (80006a8 <ILI9163_writeData16+0x54>)
 8000666:	f002 fe3f 	bl	80032e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <ILI9163_writeData16+0x54>)
 8000672:	f002 fe39 	bl	80032e8 <HAL_GPIO_WritePin>

	uint8_t data [2] = {(word >> 8) & 0x00FF, word & 0x00FF};
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	b29b      	uxth	r3, r3
 800067c:	b2db      	uxtb	r3, r3
 800067e:	733b      	strb	r3, [r7, #12]
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&DISP_SPI, data, 2, 0);
 8000686:	f107 010c 	add.w	r1, r7, #12
 800068a:	2300      	movs	r3, #0
 800068c:	2202      	movs	r2, #2
 800068e:	4807      	ldr	r0, [pc, #28]	; (80006ac <ILI9163_writeData16+0x58>)
 8000690:	f005 f84b 	bl	800572a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <ILI9163_writeData16+0x54>)
 800069c:	f002 fe24 	bl	80032e8 <HAL_GPIO_WritePin>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40020400 	.word	0x40020400
 80006ac:	2000a134 	.word	0x2000a134

080006b0 <ILI9163_setAddress>:

void ILI9163_setAddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4604      	mov	r4, r0
 80006b8:	4608      	mov	r0, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	461a      	mov	r2, r3
 80006be:	4623      	mov	r3, r4
 80006c0:	80fb      	strh	r3, [r7, #6]
 80006c2:	4603      	mov	r3, r0
 80006c4:	80bb      	strh	r3, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	807b      	strh	r3, [r7, #2]
 80006ca:	4613      	mov	r3, r2
 80006cc:	803b      	strh	r3, [r7, #0]
	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 80006ce:	202a      	movs	r0, #42	; 0x2a
 80006d0:	f7ff ff74 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData16(x1);
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffbc 	bl	8000654 <ILI9163_writeData16>
	ILI9163_writeData16(x2);
 80006dc:	887b      	ldrh	r3, [r7, #2]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffb8 	bl	8000654 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80006e4:	202b      	movs	r0, #43	; 0x2b
 80006e6:	f7ff ff69 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData16(y1);
 80006ea:	88bb      	ldrh	r3, [r7, #4]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffb1 	bl	8000654 <ILI9163_writeData16>
	ILI9163_writeData16(y2);
 80006f2:	883b      	ldrh	r3, [r7, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ffad 	bl	8000654 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80006fa:	202c      	movs	r0, #44	; 0x2c
 80006fc:	f7ff ff5e 	bl	80005bc <ILI9163_writeCommand>
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	bd90      	pop	{r4, r7, pc}

08000708 <ILI9163_reset>:

void ILI9163_reset(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000712:	4808      	ldr	r0, [pc, #32]	; (8000734 <ILI9163_reset+0x2c>)
 8000714:	f002 fde8 	bl	80032e8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000718:	2032      	movs	r0, #50	; 0x32
 800071a:	f001 fee1 	bl	80024e0 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000724:	4803      	ldr	r0, [pc, #12]	; (8000734 <ILI9163_reset+0x2c>)
 8000726:	f002 fddf 	bl	80032e8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800072a:	2064      	movs	r0, #100	; 0x64
 800072c:	f001 fed8 	bl	80024e0 <HAL_Delay>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40020c00 	.word	0x40020c00

08000738 <ILI9163_init>:

void ILI9163_init(int rotation) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	486e      	ldr	r0, [pc, #440]	; (8000900 <ILI9163_init+0x1c8>)
 8000748:	f002 fdce 	bl	80032e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000752:	486c      	ldr	r0, [pc, #432]	; (8000904 <ILI9163_init+0x1cc>)
 8000754:	f002 fdc8 	bl	80032e8 <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 8000758:	f7ff ffd6 	bl	8000708 <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 800075c:	2011      	movs	r0, #17
 800075e:	f7ff ff2d 	bl	80005bc <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 8000762:	2005      	movs	r0, #5
 8000764:	f001 febc 	bl	80024e0 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 8000768:	203a      	movs	r0, #58	; 0x3a
 800076a:	f7ff ff27 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 800076e:	2005      	movs	r0, #5
 8000770:	f7ff ff4a 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 8000774:	2026      	movs	r0, #38	; 0x26
 8000776:	f7ff ff21 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 800077a:	2004      	movs	r0, #4
 800077c:	f7ff ff44 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8000780:	20f2      	movs	r0, #242	; 0xf2
 8000782:	f7ff ff1b 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff ff3e 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 800078c:	20e0      	movs	r0, #224	; 0xe0
 800078e:	f7ff ff15 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 8000792:	203f      	movs	r0, #63	; 0x3f
 8000794:	f7ff ff38 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 8000798:	2025      	movs	r0, #37	; 0x25
 800079a:	f7ff ff35 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 800079e:	201c      	movs	r0, #28
 80007a0:	f7ff ff32 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 80007a4:	201e      	movs	r0, #30
 80007a6:	f7ff ff2f 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007aa:	2020      	movs	r0, #32
 80007ac:	f7ff ff2c 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 80007b0:	2012      	movs	r0, #18
 80007b2:	f7ff ff29 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 80007b6:	202a      	movs	r0, #42	; 0x2a
 80007b8:	f7ff ff26 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 80007bc:	2090      	movs	r0, #144	; 0x90
 80007be:	f7ff ff23 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 80007c2:	2024      	movs	r0, #36	; 0x24
 80007c4:	f7ff ff20 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 80007c8:	2011      	movs	r0, #17
 80007ca:	f7ff ff1d 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ff1a 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff ff17 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff14 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ff11 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff ff0e 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 80007ec:	20e1      	movs	r0, #225	; 0xe1
 80007ee:	f7ff fee5 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 80007f2:	2020      	movs	r0, #32
 80007f4:	f7ff ff08 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007f8:	2020      	movs	r0, #32
 80007fa:	f7ff ff05 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007fe:	2020      	movs	r0, #32
 8000800:	f7ff ff02 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8000804:	2020      	movs	r0, #32
 8000806:	f7ff feff 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 800080a:	2005      	movs	r0, #5
 800080c:	f7ff fefc 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fef9 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 8000816:	2015      	movs	r0, #21
 8000818:	f7ff fef6 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 800081c:	20a7      	movs	r0, #167	; 0xa7
 800081e:	f7ff fef3 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 8000822:	203d      	movs	r0, #61	; 0x3d
 8000824:	f7ff fef0 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 8000828:	2018      	movs	r0, #24
 800082a:	f7ff feed 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800082e:	2025      	movs	r0, #37	; 0x25
 8000830:	f7ff feea 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 8000834:	202a      	movs	r0, #42	; 0x2a
 8000836:	f7ff fee7 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 800083a:	202b      	movs	r0, #43	; 0x2b
 800083c:	f7ff fee4 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 8000840:	202b      	movs	r0, #43	; 0x2b
 8000842:	f7ff fee1 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 8000846:	203a      	movs	r0, #58	; 0x3a
 8000848:	f7ff fede 	bl	8000608 <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 800084c:	20b1      	movs	r0, #177	; 0xb1
 800084e:	f7ff feb5 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000852:	2008      	movs	r0, #8
 8000854:	f7ff fed8 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8000858:	2002      	movs	r0, #2
 800085a:	f7ff fed5 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 800085e:	20b2      	movs	r0, #178	; 0xb2
 8000860:	f7ff feac 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000864:	2008      	movs	r0, #8
 8000866:	f7ff fecf 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800086a:	2002      	movs	r0, #2
 800086c:	f7ff fecc 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8000870:	20b3      	movs	r0, #179	; 0xb3
 8000872:	f7ff fea3 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000876:	2008      	movs	r0, #8
 8000878:	f7ff fec6 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800087c:	2002      	movs	r0, #2
 800087e:	f7ff fec3 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8000882:	20b4      	movs	r0, #180	; 0xb4
 8000884:	f7ff fe9a 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8000888:	2007      	movs	r0, #7
 800088a:	f7ff febd 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 800088e:	202a      	movs	r0, #42	; 0x2a
 8000890:	f7ff fe94 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff feb7 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff feb4 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff feb1 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 80008a6:	207f      	movs	r0, #127	; 0x7f
 80008a8:	f7ff feae 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80008ac:	202b      	movs	r0, #43	; 0x2b
 80008ae:	f7ff fe85 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fea8 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff fea5 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff fea2 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 80008c4:	209f      	movs	r0, #159	; 0x9f
 80008c6:	f7ff fe9f 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 80008ca:	2036      	movs	r0, #54	; 0x36
 80008cc:	f7ff fe76 	bl	80005bc <ILI9163_writeCommand>
	if(rotation)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d003      	beq.n	80008de <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 80008d6:	20a8      	movs	r0, #168	; 0xa8
 80008d8:	f7ff fe96 	bl	8000608 <ILI9163_writeData>
 80008dc:	e002      	b.n	80008e4 <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 80008de:	2068      	movs	r0, #104	; 0x68
 80008e0:	f7ff fe92 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 80008e4:	2013      	movs	r0, #19
 80008e6:	f7ff fe69 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 80008ea:	2029      	movs	r0, #41	; 0x29
 80008ec:	f7ff fe66 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80008f0:	202c      	movs	r0, #44	; 0x2c
 80008f2:	f7ff fe63 	bl	80005bc <ILI9163_writeCommand>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400
 8000904:	40020c00 	.word	0x40020c00

08000908 <ILI9163_newFrame>:

void ILI9163_newFrame()
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	e008      	b.n	8000926 <ILI9163_newFrame+0x1e>
		frameBuffer[i] = 0xFFFF;
 8000914:	4a09      	ldr	r2, [pc, #36]	; (800093c <ILI9163_newFrame+0x34>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800091c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800092c:	d3f2      	bcc.n	8000914 <ILI9163_newFrame+0xc>

}
 800092e:	bf00      	nop
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	200000a8 	.word	0x200000a8

08000940 <ILI9163_render>:

void ILI9163_render()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	ILI9163_setAddress(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT);
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	22a0      	movs	r2, #160	; 0xa0
 8000948:	2100      	movs	r1, #0
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff feb0 	bl	80006b0 <ILI9163_setAddress>
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <ILI9163_render+0x4c>)
 8000958:	f002 fcc6 	bl	80032e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000962:	480a      	ldr	r0, [pc, #40]	; (800098c <ILI9163_render+0x4c>)
 8000964:	f002 fcc0 	bl	80032e8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&DISP_SPI, (uint8_t*)frameBuffer, BUFSIZE*2);
 8000968:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800096c:	4908      	ldr	r1, [pc, #32]	; (8000990 <ILI9163_render+0x50>)
 800096e:	4809      	ldr	r0, [pc, #36]	; (8000994 <ILI9163_render+0x54>)
 8000970:	f005 f84a 	bl	8005a08 <HAL_SPI_Transmit_DMA>

	SPI_DMA_FL=0;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <ILI9163_render+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
while(!SPI_DMA_FL) {} // This can be commented out if your thread sends new frames slower than SPI transmits them. Otherwise, memory havoc. See README.md
 800097a:	bf00      	nop
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <ILI9163_render+0x58>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0fb      	beq.n	800097c <ILI9163_render+0x3c>
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020400 	.word	0x40020400
 8000990:	200000a8 	.word	0x200000a8
 8000994:	2000a134 	.word	0x2000a134
 8000998:	2000a280 	.word	0x2000a280

0800099c <ILI9163_drawPixel>:

void ILI9163_drawPixel(uint8_t x, uint8_t y, uint16_t color) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
 80009a6:	460b      	mov	r3, r1
 80009a8:	71bb      	strb	r3, [r7, #6]
 80009aa:	4613      	mov	r3, r2
 80009ac:	80bb      	strh	r3, [r7, #4]
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b9f      	cmp	r3, #159	; 0x9f
 80009b2:	d80f      	bhi.n	80009d4 <ILI9163_drawPixel+0x38>
 80009b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0b      	blt.n	80009d4 <ILI9163_drawPixel+0x38>
	frameBuffer[((x)+(y*ILI9163_WIDTH))] = color;// >> 8;
 80009bc:	79f9      	ldrb	r1, [r7, #7]
 80009be:	79ba      	ldrb	r2, [r7, #6]
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	015b      	lsls	r3, r3, #5
 80009c8:	440b      	add	r3, r1
 80009ca:	4905      	ldr	r1, [pc, #20]	; (80009e0 <ILI9163_drawPixel+0x44>)
 80009cc:	88ba      	ldrh	r2, [r7, #4]
 80009ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80009d2:	e000      	b.n	80009d6 <ILI9163_drawPixel+0x3a>
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 80009d4:	bf00      	nop
}
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	200000a8 	.word	0x200000a8

080009e4 <ILI9163_drawChar>:

void ILI9163_fillDisplay(uint16_t color) {
	ILI9163_fillRect(0,0, ILI9163_WIDTH, ILI9163_HEIGHT, color);
}

void ILI9163_drawChar(uint8_t x, uint8_t y, char ch, FontDef font, uint16_t color) {
 80009e4:	b082      	sub	sp, #8
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b084      	sub	sp, #16
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	61fb      	str	r3, [r7, #28]
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	460b      	mov	r3, r1
 80009f4:	71bb      	strb	r3, [r7, #6]
 80009f6:	4613      	mov	r3, r2
 80009f8:	717b      	strb	r3, [r7, #5]
	uint16_t i, b, j;
	for(i = 0; i < font.height; i++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	81fb      	strh	r3, [r7, #14]
 80009fe:	e02f      	b.n	8000a60 <ILI9163_drawChar+0x7c>
		b = font.data[(ch - 32) * font.height + i];
 8000a00:	6a3a      	ldr	r2, [r7, #32]
 8000a02:	797b      	ldrb	r3, [r7, #5]
 8000a04:	3b20      	subs	r3, #32
 8000a06:	7f79      	ldrb	r1, [r7, #29]
 8000a08:	fb03 f101 	mul.w	r1, r3, r1
 8000a0c:	89fb      	ldrh	r3, [r7, #14]
 8000a0e:	440b      	add	r3, r1
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	817b      	strh	r3, [r7, #10]
		for(j = 0; j < font.width; j++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	81bb      	strh	r3, [r7, #12]
 8000a1c:	e018      	b.n	8000a50 <ILI9163_drawChar+0x6c>
			if((b << j) & 0x8000)  {
 8000a1e:	897a      	ldrh	r2, [r7, #10]
 8000a20:	89bb      	ldrh	r3, [r7, #12]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00d      	beq.n	8000a4a <ILI9163_drawChar+0x66>
				ILI9163_drawPixel(x + j, y + i, color);
 8000a2e:	89bb      	ldrh	r3, [r7, #12]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4413      	add	r3, r2
 8000a36:	b2d8      	uxtb	r0, r3
 8000a38:	89fb      	ldrh	r3, [r7, #14]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	4413      	add	r3, r2
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	f7ff ffa9 	bl	800099c <ILI9163_drawPixel>
		for(j = 0; j < font.width; j++) {
 8000a4a:	89bb      	ldrh	r3, [r7, #12]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	81bb      	strh	r3, [r7, #12]
 8000a50:	7f3b      	ldrb	r3, [r7, #28]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	89ba      	ldrh	r2, [r7, #12]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d3e1      	bcc.n	8000a1e <ILI9163_drawChar+0x3a>
	for(i = 0; i < font.height; i++) {
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	81fb      	strh	r3, [r7, #14]
 8000a60:	7f7b      	ldrb	r3, [r7, #29]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	89fa      	ldrh	r2, [r7, #14]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d3ca      	bcc.n	8000a00 <ILI9163_drawChar+0x1c>
			}
		}
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a76:	b002      	add	sp, #8
 8000a78:	4770      	bx	lr

08000a7a <ILI9163_drawString>:

void ILI9163_drawString(uint8_t x, uint8_t y, FontDef font, uint16_t color, const char *string) {
 8000a7a:	b590      	push	{r4, r7, lr}
 8000a7c:	b087      	sub	sp, #28
 8000a7e:	af02      	add	r7, sp, #8
 8000a80:	4604      	mov	r4, r0
 8000a82:	4608      	mov	r0, r1
 8000a84:	1d39      	adds	r1, r7, #4
 8000a86:	e881 000c 	stmia.w	r1, {r2, r3}
 8000a8a:	4623      	mov	r3, r4
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	4603      	mov	r3, r0
 8000a90:	73bb      	strb	r3, [r7, #14]
	while(*string) {
 8000a92:	e029      	b.n	8000ae8 <ILI9163_drawString+0x6e>
		if(x + font.width >= ILI9163_WIDTH) {
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	793a      	ldrb	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	2b9f      	cmp	r3, #159	; 0x9f
 8000a9c:	dd12      	ble.n	8000ac4 <ILI9163_drawString+0x4a>
			x = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]
			y += font.height;
 8000aa2:	797a      	ldrb	r2, [r7, #5]
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	73bb      	strb	r3, [r7, #14]
			if(y + font.height >= ILI9163_HEIGHT)
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	797a      	ldrb	r2, [r7, #5]
 8000aae:	4413      	add	r3, r2
 8000ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab2:	dc1e      	bgt.n	8000af2 <ILI9163_drawString+0x78>
				break;

			if(*string == ' ') {
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b20      	cmp	r3, #32
 8000aba:	d103      	bne.n	8000ac4 <ILI9163_drawString+0x4a>
				// skip spaces in the beginning of the new line
				string++;
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	3301      	adds	r3, #1
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8000ac2:	e011      	b.n	8000ae8 <ILI9163_drawString+0x6e>
			}
		}

		ILI9163_drawChar(x, y, *string, font, color);
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	7bb9      	ldrb	r1, [r7, #14]
 8000aca:	7bf8      	ldrb	r0, [r7, #15]
 8000acc:	8c3b      	ldrh	r3, [r7, #32]
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f7ff ff85 	bl	80009e4 <ILI9163_drawChar>

		x += font.width;
 8000ada:	793a      	ldrb	r2, [r7, #4]
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	4413      	add	r3, r2
 8000ae0:	73fb      	strb	r3, [r7, #15]
		string++;
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
	while(*string) {
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1d1      	bne.n	8000a94 <ILI9163_drawString+0x1a>
	}
}
 8000af0:	e000      	b.n	8000af4 <ILI9163_drawString+0x7a>
				break;
 8000af2:	bf00      	nop
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd90      	pop	{r4, r7, pc}

08000afc <ILI9163_drawStringF>:

void ILI9163_drawStringF(uint8_t x, uint8_t y, FontDef font, uint16_t color, char *szFormat, ...) {
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b099      	sub	sp, #100	; 0x64
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	4604      	mov	r4, r0
 8000b04:	4608      	mov	r0, r1
 8000b06:	1d39      	adds	r1, r7, #4
 8000b08:	e881 000c 	stmia.w	r1, {r2, r3}
 8000b0c:	4623      	mov	r3, r4
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	4603      	mov	r3, r0
 8000b12:	73bb      	strb	r3, [r7, #14]
	char szBuffer[64];
	va_list pArgs;
	va_start(pArgs, szFormat);
 8000b14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b18:	617b      	str	r3, [r7, #20]
	vsnprintf(szBuffer, 63, szFormat, pArgs);
 8000b1a:	f107 0018 	add.w	r0, r7, #24
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b22:	213f      	movs	r1, #63	; 0x3f
 8000b24:	f006 fef4 	bl	8007910 <vsniprintf>
	va_end(pArgs);

	ILI9163_drawString(x, y, font, color, szBuffer);
 8000b28:	7bb9      	ldrb	r1, [r7, #14]
 8000b2a:	7bf8      	ldrb	r0, [r7, #15]
 8000b2c:	f107 0318 	add.w	r3, r7, #24
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	cb0c      	ldmia	r3, {r2, r3}
 8000b3c:	f7ff ff9d 	bl	8000a7a <ILI9163_drawString>
}
 8000b40:	bf00      	nop
 8000b42:	375c      	adds	r7, #92	; 0x5c
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd90      	pop	{r4, r7, pc}

08000b48 <updateScreen>:

char writeString[50] = "";
extern flag;
int counter = 0;
int pos = 5;
void updateScreen(char* writeString) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	6078      	str	r0, [r7, #4]
		ILI9163_newFrame();
 8000b50:	f7ff feda 	bl	8000908 <ILI9163_newFrame>
		ILI9163_drawStringF(5, 10, Font_7x10, BLACK, writeString);
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <updateScreen+0x2c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	ca0c      	ldmia	r2, {r2, r3}
 8000b60:	210a      	movs	r1, #10
 8000b62:	2005      	movs	r0, #5
 8000b64:	f7ff ffca 	bl	8000afc <ILI9163_drawStringF>
		ILI9163_render();
 8000b68:	f7ff feea 	bl	8000940 <ILI9163_render>
	}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000000 	.word	0x20000000

08000b78 <key_pad>:

void key_pad(char keyChar){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	switch(keyChar) {
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	3b23      	subs	r3, #35	; 0x23
 8000b86:	2b34      	cmp	r3, #52	; 0x34
 8000b88:	f200 8506 	bhi.w	8001598 <key_pad+0xa20>
 8000b8c:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <key_pad+0x1c>)
 8000b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b92:	bf00      	nop
 8000b94:	08001505 	.word	0x08001505
 8000b98:	08001599 	.word	0x08001599
 8000b9c:	08001599 	.word	0x08001599
 8000ba0:	08001599 	.word	0x08001599
 8000ba4:	08001599 	.word	0x08001599
 8000ba8:	08001599 	.word	0x08001599
 8000bac:	08001599 	.word	0x08001599
 8000bb0:	08001591 	.word	0x08001591
 8000bb4:	08001599 	.word	0x08001599
 8000bb8:	08001599 	.word	0x08001599
 8000bbc:	08001599 	.word	0x08001599
 8000bc0:	08001599 	.word	0x08001599
 8000bc4:	08001599 	.word	0x08001599
 8000bc8:	08001599 	.word	0x08001599
 8000bcc:	08001599 	.word	0x08001599
 8000bd0:	08001599 	.word	0x08001599
 8000bd4:	08001599 	.word	0x08001599
 8000bd8:	08001599 	.word	0x08001599
 8000bdc:	08001599 	.word	0x08001599
 8000be0:	08001599 	.word	0x08001599
 8000be4:	08001599 	.word	0x08001599
 8000be8:	08001599 	.word	0x08001599
 8000bec:	08001599 	.word	0x08001599
 8000bf0:	08001599 	.word	0x08001599
 8000bf4:	08001599 	.word	0x08001599
 8000bf8:	08001599 	.word	0x08001599
 8000bfc:	08001599 	.word	0x08001599
 8000c00:	08001599 	.word	0x08001599
 8000c04:	08001599 	.word	0x08001599
 8000c08:	08001599 	.word	0x08001599
 8000c0c:	08000c69 	.word	0x08000c69
 8000c10:	08001549 	.word	0x08001549
 8000c14:	08001579 	.word	0x08001579
 8000c18:	08000d5b 	.word	0x08000d5b
 8000c1c:	08001599 	.word	0x08001599
 8000c20:	08001599 	.word	0x08001599
 8000c24:	08000e4b 	.word	0x08000e4b
 8000c28:	08001599 	.word	0x08001599
 8000c2c:	08001599 	.word	0x08001599
 8000c30:	08000f65 	.word	0x08000f65
 8000c34:	08001599 	.word	0x08001599
 8000c38:	08001599 	.word	0x08001599
 8000c3c:	08001055 	.word	0x08001055
 8000c40:	08001599 	.word	0x08001599
 8000c44:	08001599 	.word	0x08001599
 8000c48:	08001145 	.word	0x08001145
 8000c4c:	08001599 	.word	0x08001599
 8000c50:	08001599 	.word	0x08001599
 8000c54:	08001599 	.word	0x08001599
 8000c58:	080012ad 	.word	0x080012ad
 8000c5c:	08001599 	.word	0x08001599
 8000c60:	08001599 	.word	0x08001599
 8000c64:	0800139d 	.word	0x0800139d
				case 'A':
					if(counter == 0){
 8000c68:	4ba0      	ldr	r3, [pc, #640]	; (8000eec <key_pad+0x374>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d123      	bne.n	8000cb8 <key_pad+0x140>
						if(strlen(writeString) > 0) {
 8000c70:	4b9f      	ldr	r3, [pc, #636]	; (8000ef0 <key_pad+0x378>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00a      	beq.n	8000c8e <key_pad+0x116>
							writeString[strlen(writeString) - 1] = '\0';
 8000c78:	489d      	ldr	r0, [pc, #628]	; (8000ef0 <key_pad+0x378>)
 8000c7a:	f7ff fac9 	bl	8000210 <strlen>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	3b01      	subs	r3, #1
 8000c82:	4a9b      	ldr	r2, [pc, #620]	; (8000ef0 <key_pad+0x378>)
 8000c84:	2100      	movs	r1, #0
 8000c86:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000c88:	4899      	ldr	r0, [pc, #612]	; (8000ef0 <key_pad+0x378>)
 8000c8a:	f7ff ff5d 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "A");
 8000c8e:	4898      	ldr	r0, [pc, #608]	; (8000ef0 <key_pad+0x378>)
 8000c90:	f7ff fabe 	bl	8000210 <strlen>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b95      	ldr	r3, [pc, #596]	; (8000ef0 <key_pad+0x378>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4995      	ldr	r1, [pc, #596]	; (8000ef4 <key_pad+0x37c>)
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000ca6:	4892      	ldr	r0, [pc, #584]	; (8000ef0 <key_pad+0x378>)
 8000ca8:	f7ff ff4e 	bl	8000b48 <updateScreen>
						counter ++;
 8000cac:	4b8f      	ldr	r3, [pc, #572]	; (8000eec <key_pad+0x374>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	4a8e      	ldr	r2, [pc, #568]	; (8000eec <key_pad+0x374>)
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	e04c      	b.n	8000d52 <key_pad+0x1da>

					}

					else if(counter == 1){
 8000cb8:	4b8c      	ldr	r3, [pc, #560]	; (8000eec <key_pad+0x374>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d123      	bne.n	8000d08 <key_pad+0x190>
						if(strlen(writeString) > 0) {
 8000cc0:	4b8b      	ldr	r3, [pc, #556]	; (8000ef0 <key_pad+0x378>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d00a      	beq.n	8000cde <key_pad+0x166>
							writeString[strlen(writeString) - 1] = '\0';
 8000cc8:	4889      	ldr	r0, [pc, #548]	; (8000ef0 <key_pad+0x378>)
 8000cca:	f7ff faa1 	bl	8000210 <strlen>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	4a87      	ldr	r2, [pc, #540]	; (8000ef0 <key_pad+0x378>)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000cd8:	4885      	ldr	r0, [pc, #532]	; (8000ef0 <key_pad+0x378>)
 8000cda:	f7ff ff35 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "B");
 8000cde:	4884      	ldr	r0, [pc, #528]	; (8000ef0 <key_pad+0x378>)
 8000ce0:	f7ff fa96 	bl	8000210 <strlen>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b81      	ldr	r3, [pc, #516]	; (8000ef0 <key_pad+0x378>)
 8000cea:	4413      	add	r3, r2
 8000cec:	4982      	ldr	r1, [pc, #520]	; (8000ef8 <key_pad+0x380>)
 8000cee:	461a      	mov	r2, r3
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000cf6:	487e      	ldr	r0, [pc, #504]	; (8000ef0 <key_pad+0x378>)
 8000cf8:	f7ff ff26 	bl	8000b48 <updateScreen>
						counter ++;
 8000cfc:	4b7b      	ldr	r3, [pc, #492]	; (8000eec <key_pad+0x374>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a7a      	ldr	r2, [pc, #488]	; (8000eec <key_pad+0x374>)
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e024      	b.n	8000d52 <key_pad+0x1da>
					}

					else if(counter == 2){
 8000d08:	4b78      	ldr	r3, [pc, #480]	; (8000eec <key_pad+0x374>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d120      	bne.n	8000d52 <key_pad+0x1da>
						if(strlen(writeString) > 0) {
 8000d10:	4b77      	ldr	r3, [pc, #476]	; (8000ef0 <key_pad+0x378>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00a      	beq.n	8000d2e <key_pad+0x1b6>
							writeString[strlen(writeString) - 1] = '\0';
 8000d18:	4875      	ldr	r0, [pc, #468]	; (8000ef0 <key_pad+0x378>)
 8000d1a:	f7ff fa79 	bl	8000210 <strlen>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	3b01      	subs	r3, #1
 8000d22:	4a73      	ldr	r2, [pc, #460]	; (8000ef0 <key_pad+0x378>)
 8000d24:	2100      	movs	r1, #0
 8000d26:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000d28:	4871      	ldr	r0, [pc, #452]	; (8000ef0 <key_pad+0x378>)
 8000d2a:	f7ff ff0d 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "C");
 8000d2e:	4870      	ldr	r0, [pc, #448]	; (8000ef0 <key_pad+0x378>)
 8000d30:	f7ff fa6e 	bl	8000210 <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b6d      	ldr	r3, [pc, #436]	; (8000ef0 <key_pad+0x378>)
 8000d3a:	4413      	add	r3, r2
 8000d3c:	496f      	ldr	r1, [pc, #444]	; (8000efc <key_pad+0x384>)
 8000d3e:	461a      	mov	r2, r3
 8000d40:	460b      	mov	r3, r1
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000d46:	486a      	ldr	r0, [pc, #424]	; (8000ef0 <key_pad+0x378>)
 8000d48:	f7ff fefe 	bl	8000b48 <updateScreen>
						counter = 0;
 8000d4c:	4b67      	ldr	r3, [pc, #412]	; (8000eec <key_pad+0x374>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	71fb      	strb	r3, [r7, #7]
					break;
 8000d56:	f000 bc1f 	b.w	8001598 <key_pad+0xa20>

				case 'D':
					if(counter == 0){
 8000d5a:	4b64      	ldr	r3, [pc, #400]	; (8000eec <key_pad+0x374>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d123      	bne.n	8000daa <key_pad+0x232>
						if(strlen(writeString) > 0) {
 8000d62:	4b63      	ldr	r3, [pc, #396]	; (8000ef0 <key_pad+0x378>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00a      	beq.n	8000d80 <key_pad+0x208>
							writeString[strlen(writeString) - 1] = '\0';
 8000d6a:	4861      	ldr	r0, [pc, #388]	; (8000ef0 <key_pad+0x378>)
 8000d6c:	f7ff fa50 	bl	8000210 <strlen>
 8000d70:	4603      	mov	r3, r0
 8000d72:	3b01      	subs	r3, #1
 8000d74:	4a5e      	ldr	r2, [pc, #376]	; (8000ef0 <key_pad+0x378>)
 8000d76:	2100      	movs	r1, #0
 8000d78:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000d7a:	485d      	ldr	r0, [pc, #372]	; (8000ef0 <key_pad+0x378>)
 8000d7c:	f7ff fee4 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "D");
 8000d80:	485b      	ldr	r0, [pc, #364]	; (8000ef0 <key_pad+0x378>)
 8000d82:	f7ff fa45 	bl	8000210 <strlen>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b59      	ldr	r3, [pc, #356]	; (8000ef0 <key_pad+0x378>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	495c      	ldr	r1, [pc, #368]	; (8000f00 <key_pad+0x388>)
 8000d90:	461a      	mov	r2, r3
 8000d92:	460b      	mov	r3, r1
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000d98:	4855      	ldr	r0, [pc, #340]	; (8000ef0 <key_pad+0x378>)
 8000d9a:	f7ff fed5 	bl	8000b48 <updateScreen>
						counter ++;
 8000d9e:	4b53      	ldr	r3, [pc, #332]	; (8000eec <key_pad+0x374>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a51      	ldr	r2, [pc, #324]	; (8000eec <key_pad+0x374>)
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e04c      	b.n	8000e44 <key_pad+0x2cc>
					}

					else if(counter == 1){
 8000daa:	4b50      	ldr	r3, [pc, #320]	; (8000eec <key_pad+0x374>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d123      	bne.n	8000dfa <key_pad+0x282>
						if(strlen(writeString) > 0) {
 8000db2:	4b4f      	ldr	r3, [pc, #316]	; (8000ef0 <key_pad+0x378>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00a      	beq.n	8000dd0 <key_pad+0x258>
							writeString[strlen(writeString) - 1] = '\0';
 8000dba:	484d      	ldr	r0, [pc, #308]	; (8000ef0 <key_pad+0x378>)
 8000dbc:	f7ff fa28 	bl	8000210 <strlen>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <key_pad+0x378>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000dca:	4849      	ldr	r0, [pc, #292]	; (8000ef0 <key_pad+0x378>)
 8000dcc:	f7ff febc 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "E");
 8000dd0:	4847      	ldr	r0, [pc, #284]	; (8000ef0 <key_pad+0x378>)
 8000dd2:	f7ff fa1d 	bl	8000210 <strlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <key_pad+0x378>)
 8000ddc:	4413      	add	r3, r2
 8000dde:	4949      	ldr	r1, [pc, #292]	; (8000f04 <key_pad+0x38c>)
 8000de0:	461a      	mov	r2, r3
 8000de2:	460b      	mov	r3, r1
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000de8:	4841      	ldr	r0, [pc, #260]	; (8000ef0 <key_pad+0x378>)
 8000dea:	f7ff fead 	bl	8000b48 <updateScreen>
						counter ++;
 8000dee:	4b3f      	ldr	r3, [pc, #252]	; (8000eec <key_pad+0x374>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	4a3d      	ldr	r2, [pc, #244]	; (8000eec <key_pad+0x374>)
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	e024      	b.n	8000e44 <key_pad+0x2cc>
					}

					else if(counter == 2){
 8000dfa:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <key_pad+0x374>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d120      	bne.n	8000e44 <key_pad+0x2cc>
						if(strlen(writeString) > 0) {
 8000e02:	4b3b      	ldr	r3, [pc, #236]	; (8000ef0 <key_pad+0x378>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00a      	beq.n	8000e20 <key_pad+0x2a8>
							writeString[strlen(writeString) - 1] = '\0';
 8000e0a:	4839      	ldr	r0, [pc, #228]	; (8000ef0 <key_pad+0x378>)
 8000e0c:	f7ff fa00 	bl	8000210 <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	3b01      	subs	r3, #1
 8000e14:	4a36      	ldr	r2, [pc, #216]	; (8000ef0 <key_pad+0x378>)
 8000e16:	2100      	movs	r1, #0
 8000e18:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000e1a:	4835      	ldr	r0, [pc, #212]	; (8000ef0 <key_pad+0x378>)
 8000e1c:	f7ff fe94 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "F");
 8000e20:	4833      	ldr	r0, [pc, #204]	; (8000ef0 <key_pad+0x378>)
 8000e22:	f7ff f9f5 	bl	8000210 <strlen>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <key_pad+0x378>)
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4936      	ldr	r1, [pc, #216]	; (8000f08 <key_pad+0x390>)
 8000e30:	461a      	mov	r2, r3
 8000e32:	460b      	mov	r3, r1
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000e38:	482d      	ldr	r0, [pc, #180]	; (8000ef0 <key_pad+0x378>)
 8000e3a:	f7ff fe85 	bl	8000b48 <updateScreen>
						counter = 0;
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <key_pad+0x374>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	71fb      	strb	r3, [r7, #7]
					break;
 8000e48:	e3a6      	b.n	8001598 <key_pad+0xa20>

				case 'G':
					if(counter == 0){
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <key_pad+0x374>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d123      	bne.n	8000e9a <key_pad+0x322>
						if(strlen(writeString) > 0) {
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <key_pad+0x378>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00a      	beq.n	8000e70 <key_pad+0x2f8>
							writeString[strlen(writeString) - 1] = '\0';
 8000e5a:	4825      	ldr	r0, [pc, #148]	; (8000ef0 <key_pad+0x378>)
 8000e5c:	f7ff f9d8 	bl	8000210 <strlen>
 8000e60:	4603      	mov	r3, r0
 8000e62:	3b01      	subs	r3, #1
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <key_pad+0x378>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000e6a:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <key_pad+0x378>)
 8000e6c:	f7ff fe6c 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "G");
 8000e70:	481f      	ldr	r0, [pc, #124]	; (8000ef0 <key_pad+0x378>)
 8000e72:	f7ff f9cd 	bl	8000210 <strlen>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <key_pad+0x378>)
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4923      	ldr	r1, [pc, #140]	; (8000f0c <key_pad+0x394>)
 8000e80:	461a      	mov	r2, r3
 8000e82:	460b      	mov	r3, r1
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000e88:	4819      	ldr	r0, [pc, #100]	; (8000ef0 <key_pad+0x378>)
 8000e8a:	f7ff fe5d 	bl	8000b48 <updateScreen>
						counter ++;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <key_pad+0x374>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	4a15      	ldr	r2, [pc, #84]	; (8000eec <key_pad+0x374>)
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e061      	b.n	8000f5e <key_pad+0x3e6>
					}

					else if(counter == 1){
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <key_pad+0x374>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d138      	bne.n	8000f14 <key_pad+0x39c>
						if(strlen(writeString) > 0) {
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <key_pad+0x378>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00a      	beq.n	8000ec0 <key_pad+0x348>
							writeString[strlen(writeString) - 1] = '\0';
 8000eaa:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <key_pad+0x378>)
 8000eac:	f7ff f9b0 	bl	8000210 <strlen>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <key_pad+0x378>)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <key_pad+0x378>)
 8000ebc:	f7ff fe44 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "H");
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <key_pad+0x378>)
 8000ec2:	f7ff f9a5 	bl	8000210 <strlen>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <key_pad+0x378>)
 8000ecc:	4413      	add	r3, r2
 8000ece:	4910      	ldr	r1, [pc, #64]	; (8000f10 <key_pad+0x398>)
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <key_pad+0x378>)
 8000eda:	f7ff fe35 	bl	8000b48 <updateScreen>
						counter ++;
 8000ede:	4b03      	ldr	r3, [pc, #12]	; (8000eec <key_pad+0x374>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a01      	ldr	r2, [pc, #4]	; (8000eec <key_pad+0x374>)
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	e039      	b.n	8000f5e <key_pad+0x3e6>
 8000eea:	bf00      	nop
 8000eec:	2000a0dc 	.word	0x2000a0dc
 8000ef0:	2000a0a8 	.word	0x2000a0a8
 8000ef4:	0800824c 	.word	0x0800824c
 8000ef8:	08008250 	.word	0x08008250
 8000efc:	08008254 	.word	0x08008254
 8000f00:	08008258 	.word	0x08008258
 8000f04:	0800825c 	.word	0x0800825c
 8000f08:	08008260 	.word	0x08008260
 8000f0c:	08008264 	.word	0x08008264
 8000f10:	08008268 	.word	0x08008268
					}

					else if(counter == 2){
 8000f14:	4b9f      	ldr	r3, [pc, #636]	; (8001194 <key_pad+0x61c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d120      	bne.n	8000f5e <key_pad+0x3e6>
						if(strlen(writeString) > 0) {
 8000f1c:	4b9e      	ldr	r3, [pc, #632]	; (8001198 <key_pad+0x620>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00a      	beq.n	8000f3a <key_pad+0x3c2>
							writeString[strlen(writeString) - 1] = '\0';
 8000f24:	489c      	ldr	r0, [pc, #624]	; (8001198 <key_pad+0x620>)
 8000f26:	f7ff f973 	bl	8000210 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	4a9a      	ldr	r2, [pc, #616]	; (8001198 <key_pad+0x620>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000f34:	4898      	ldr	r0, [pc, #608]	; (8001198 <key_pad+0x620>)
 8000f36:	f7ff fe07 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "I");
 8000f3a:	4897      	ldr	r0, [pc, #604]	; (8001198 <key_pad+0x620>)
 8000f3c:	f7ff f968 	bl	8000210 <strlen>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b94      	ldr	r3, [pc, #592]	; (8001198 <key_pad+0x620>)
 8000f46:	4413      	add	r3, r2
 8000f48:	4994      	ldr	r1, [pc, #592]	; (800119c <key_pad+0x624>)
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000f52:	4891      	ldr	r0, [pc, #580]	; (8001198 <key_pad+0x620>)
 8000f54:	f7ff fdf8 	bl	8000b48 <updateScreen>
						counter = 0;
 8000f58:	4b8e      	ldr	r3, [pc, #568]	; (8001194 <key_pad+0x61c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	71fb      	strb	r3, [r7, #7]
					break;
 8000f62:	e319      	b.n	8001598 <key_pad+0xa20>

				case 'J':
					if(counter == 0){
 8000f64:	4b8b      	ldr	r3, [pc, #556]	; (8001194 <key_pad+0x61c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d123      	bne.n	8000fb4 <key_pad+0x43c>
						if(strlen(writeString) > 0) {
 8000f6c:	4b8a      	ldr	r3, [pc, #552]	; (8001198 <key_pad+0x620>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00a      	beq.n	8000f8a <key_pad+0x412>
							writeString[strlen(writeString) - 1] = '\0';
 8000f74:	4888      	ldr	r0, [pc, #544]	; (8001198 <key_pad+0x620>)
 8000f76:	f7ff f94b 	bl	8000210 <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	4a86      	ldr	r2, [pc, #536]	; (8001198 <key_pad+0x620>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000f84:	4884      	ldr	r0, [pc, #528]	; (8001198 <key_pad+0x620>)
 8000f86:	f7ff fddf 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "J");
 8000f8a:	4883      	ldr	r0, [pc, #524]	; (8001198 <key_pad+0x620>)
 8000f8c:	f7ff f940 	bl	8000210 <strlen>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b80      	ldr	r3, [pc, #512]	; (8001198 <key_pad+0x620>)
 8000f96:	4413      	add	r3, r2
 8000f98:	4981      	ldr	r1, [pc, #516]	; (80011a0 <key_pad+0x628>)
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000fa2:	487d      	ldr	r0, [pc, #500]	; (8001198 <key_pad+0x620>)
 8000fa4:	f7ff fdd0 	bl	8000b48 <updateScreen>
						counter ++;
 8000fa8:	4b7a      	ldr	r3, [pc, #488]	; (8001194 <key_pad+0x61c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a79      	ldr	r2, [pc, #484]	; (8001194 <key_pad+0x61c>)
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e04c      	b.n	800104e <key_pad+0x4d6>
					}

					else if(counter == 1){
 8000fb4:	4b77      	ldr	r3, [pc, #476]	; (8001194 <key_pad+0x61c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d123      	bne.n	8001004 <key_pad+0x48c>
						if(strlen(writeString) > 0) {
 8000fbc:	4b76      	ldr	r3, [pc, #472]	; (8001198 <key_pad+0x620>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00a      	beq.n	8000fda <key_pad+0x462>
							writeString[strlen(writeString) - 1] = '\0';
 8000fc4:	4874      	ldr	r0, [pc, #464]	; (8001198 <key_pad+0x620>)
 8000fc6:	f7ff f923 	bl	8000210 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	4a72      	ldr	r2, [pc, #456]	; (8001198 <key_pad+0x620>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8000fd4:	4870      	ldr	r0, [pc, #448]	; (8001198 <key_pad+0x620>)
 8000fd6:	f7ff fdb7 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "K");
 8000fda:	486f      	ldr	r0, [pc, #444]	; (8001198 <key_pad+0x620>)
 8000fdc:	f7ff f918 	bl	8000210 <strlen>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b6c      	ldr	r3, [pc, #432]	; (8001198 <key_pad+0x620>)
 8000fe6:	4413      	add	r3, r2
 8000fe8:	496e      	ldr	r1, [pc, #440]	; (80011a4 <key_pad+0x62c>)
 8000fea:	461a      	mov	r2, r3
 8000fec:	460b      	mov	r3, r1
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8000ff2:	4869      	ldr	r0, [pc, #420]	; (8001198 <key_pad+0x620>)
 8000ff4:	f7ff fda8 	bl	8000b48 <updateScreen>
						counter ++;
 8000ff8:	4b66      	ldr	r3, [pc, #408]	; (8001194 <key_pad+0x61c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a65      	ldr	r2, [pc, #404]	; (8001194 <key_pad+0x61c>)
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e024      	b.n	800104e <key_pad+0x4d6>
					}

					else if(counter == 2){
 8001004:	4b63      	ldr	r3, [pc, #396]	; (8001194 <key_pad+0x61c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d120      	bne.n	800104e <key_pad+0x4d6>
						if(strlen(writeString) > 0) {
 800100c:	4b62      	ldr	r3, [pc, #392]	; (8001198 <key_pad+0x620>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00a      	beq.n	800102a <key_pad+0x4b2>
							writeString[strlen(writeString) - 1] = '\0';
 8001014:	4860      	ldr	r0, [pc, #384]	; (8001198 <key_pad+0x620>)
 8001016:	f7ff f8fb 	bl	8000210 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	3b01      	subs	r3, #1
 800101e:	4a5e      	ldr	r2, [pc, #376]	; (8001198 <key_pad+0x620>)
 8001020:	2100      	movs	r1, #0
 8001022:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001024:	485c      	ldr	r0, [pc, #368]	; (8001198 <key_pad+0x620>)
 8001026:	f7ff fd8f 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "L");
 800102a:	485b      	ldr	r0, [pc, #364]	; (8001198 <key_pad+0x620>)
 800102c:	f7ff f8f0 	bl	8000210 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b58      	ldr	r3, [pc, #352]	; (8001198 <key_pad+0x620>)
 8001036:	4413      	add	r3, r2
 8001038:	495b      	ldr	r1, [pc, #364]	; (80011a8 <key_pad+0x630>)
 800103a:	461a      	mov	r2, r3
 800103c:	460b      	mov	r3, r1
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8001042:	4855      	ldr	r0, [pc, #340]	; (8001198 <key_pad+0x620>)
 8001044:	f7ff fd80 	bl	8000b48 <updateScreen>
						counter = 0;
 8001048:	4b52      	ldr	r3, [pc, #328]	; (8001194 <key_pad+0x61c>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	71fb      	strb	r3, [r7, #7]
					break;
 8001052:	e2a1      	b.n	8001598 <key_pad+0xa20>

				case 'M':
					if(counter == 0){
 8001054:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <key_pad+0x61c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d123      	bne.n	80010a4 <key_pad+0x52c>
						if(strlen(writeString) > 0) {
 800105c:	4b4e      	ldr	r3, [pc, #312]	; (8001198 <key_pad+0x620>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00a      	beq.n	800107a <key_pad+0x502>
							writeString[strlen(writeString) - 1] = '\0';
 8001064:	484c      	ldr	r0, [pc, #304]	; (8001198 <key_pad+0x620>)
 8001066:	f7ff f8d3 	bl	8000210 <strlen>
 800106a:	4603      	mov	r3, r0
 800106c:	3b01      	subs	r3, #1
 800106e:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <key_pad+0x620>)
 8001070:	2100      	movs	r1, #0
 8001072:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001074:	4848      	ldr	r0, [pc, #288]	; (8001198 <key_pad+0x620>)
 8001076:	f7ff fd67 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "M");
 800107a:	4847      	ldr	r0, [pc, #284]	; (8001198 <key_pad+0x620>)
 800107c:	f7ff f8c8 	bl	8000210 <strlen>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b44      	ldr	r3, [pc, #272]	; (8001198 <key_pad+0x620>)
 8001086:	4413      	add	r3, r2
 8001088:	4948      	ldr	r1, [pc, #288]	; (80011ac <key_pad+0x634>)
 800108a:	461a      	mov	r2, r3
 800108c:	460b      	mov	r3, r1
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8001092:	4841      	ldr	r0, [pc, #260]	; (8001198 <key_pad+0x620>)
 8001094:	f7ff fd58 	bl	8000b48 <updateScreen>
						counter ++;
 8001098:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <key_pad+0x61c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	4a3d      	ldr	r2, [pc, #244]	; (8001194 <key_pad+0x61c>)
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e04c      	b.n	800113e <key_pad+0x5c6>
					}

					else if(counter == 1){
 80010a4:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <key_pad+0x61c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d123      	bne.n	80010f4 <key_pad+0x57c>
						if(strlen(writeString) > 0) {
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <key_pad+0x620>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00a      	beq.n	80010ca <key_pad+0x552>
							writeString[strlen(writeString) - 1] = '\0';
 80010b4:	4838      	ldr	r0, [pc, #224]	; (8001198 <key_pad+0x620>)
 80010b6:	f7ff f8ab 	bl	8000210 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	3b01      	subs	r3, #1
 80010be:	4a36      	ldr	r2, [pc, #216]	; (8001198 <key_pad+0x620>)
 80010c0:	2100      	movs	r1, #0
 80010c2:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80010c4:	4834      	ldr	r0, [pc, #208]	; (8001198 <key_pad+0x620>)
 80010c6:	f7ff fd3f 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "N");
 80010ca:	4833      	ldr	r0, [pc, #204]	; (8001198 <key_pad+0x620>)
 80010cc:	f7ff f8a0 	bl	8000210 <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b30      	ldr	r3, [pc, #192]	; (8001198 <key_pad+0x620>)
 80010d6:	4413      	add	r3, r2
 80010d8:	4935      	ldr	r1, [pc, #212]	; (80011b0 <key_pad+0x638>)
 80010da:	461a      	mov	r2, r3
 80010dc:	460b      	mov	r3, r1
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80010e2:	482d      	ldr	r0, [pc, #180]	; (8001198 <key_pad+0x620>)
 80010e4:	f7ff fd30 	bl	8000b48 <updateScreen>
						counter ++;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <key_pad+0x61c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a29      	ldr	r2, [pc, #164]	; (8001194 <key_pad+0x61c>)
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e024      	b.n	800113e <key_pad+0x5c6>
					}

					else if(counter == 2){
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <key_pad+0x61c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d120      	bne.n	800113e <key_pad+0x5c6>
						if(strlen(writeString) > 0) {
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <key_pad+0x620>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00a      	beq.n	800111a <key_pad+0x5a2>
							writeString[strlen(writeString) - 1] = '\0';
 8001104:	4824      	ldr	r0, [pc, #144]	; (8001198 <key_pad+0x620>)
 8001106:	f7ff f883 	bl	8000210 <strlen>
 800110a:	4603      	mov	r3, r0
 800110c:	3b01      	subs	r3, #1
 800110e:	4a22      	ldr	r2, [pc, #136]	; (8001198 <key_pad+0x620>)
 8001110:	2100      	movs	r1, #0
 8001112:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001114:	4820      	ldr	r0, [pc, #128]	; (8001198 <key_pad+0x620>)
 8001116:	f7ff fd17 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "O");
 800111a:	481f      	ldr	r0, [pc, #124]	; (8001198 <key_pad+0x620>)
 800111c:	f7ff f878 	bl	8000210 <strlen>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <key_pad+0x620>)
 8001126:	4413      	add	r3, r2
 8001128:	4922      	ldr	r1, [pc, #136]	; (80011b4 <key_pad+0x63c>)
 800112a:	461a      	mov	r2, r3
 800112c:	460b      	mov	r3, r1
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8001132:	4819      	ldr	r0, [pc, #100]	; (8001198 <key_pad+0x620>)
 8001134:	f7ff fd08 	bl	8000b48 <updateScreen>
						counter = 0;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <key_pad+0x61c>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]
					break;
 8001142:	e229      	b.n	8001598 <key_pad+0xa20>

				case 'P':
					if(counter == 0){
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <key_pad+0x61c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d137      	bne.n	80011bc <key_pad+0x644>
						if(strlen(writeString) > 0) {
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <key_pad+0x620>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00a      	beq.n	800116a <key_pad+0x5f2>
							writeString[strlen(writeString) - 1] = '\0';
 8001154:	4810      	ldr	r0, [pc, #64]	; (8001198 <key_pad+0x620>)
 8001156:	f7ff f85b 	bl	8000210 <strlen>
 800115a:	4603      	mov	r3, r0
 800115c:	3b01      	subs	r3, #1
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <key_pad+0x620>)
 8001160:	2100      	movs	r1, #0
 8001162:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <key_pad+0x620>)
 8001166:	f7ff fcef 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "P");
 800116a:	480b      	ldr	r0, [pc, #44]	; (8001198 <key_pad+0x620>)
 800116c:	f7ff f850 	bl	8000210 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <key_pad+0x620>)
 8001176:	4413      	add	r3, r2
 8001178:	490f      	ldr	r1, [pc, #60]	; (80011b8 <key_pad+0x640>)
 800117a:	461a      	mov	r2, r3
 800117c:	460b      	mov	r3, r1
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <key_pad+0x620>)
 8001184:	f7ff fce0 	bl	8000b48 <updateScreen>
						counter ++;
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <key_pad+0x61c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	4a01      	ldr	r2, [pc, #4]	; (8001194 <key_pad+0x61c>)
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e088      	b.n	80012a6 <key_pad+0x72e>
 8001194:	2000a0dc 	.word	0x2000a0dc
 8001198:	2000a0a8 	.word	0x2000a0a8
 800119c:	0800826c 	.word	0x0800826c
 80011a0:	08008270 	.word	0x08008270
 80011a4:	08008274 	.word	0x08008274
 80011a8:	08008278 	.word	0x08008278
 80011ac:	0800827c 	.word	0x0800827c
 80011b0:	08008280 	.word	0x08008280
 80011b4:	08008284 	.word	0x08008284
 80011b8:	08008288 	.word	0x08008288
					}

					else if(counter == 1){
 80011bc:	4b9f      	ldr	r3, [pc, #636]	; (800143c <key_pad+0x8c4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d123      	bne.n	800120c <key_pad+0x694>
						if(strlen(writeString) > 0) {
 80011c4:	4b9e      	ldr	r3, [pc, #632]	; (8001440 <key_pad+0x8c8>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00a      	beq.n	80011e2 <key_pad+0x66a>
							writeString[strlen(writeString) - 1] = '\0';
 80011cc:	489c      	ldr	r0, [pc, #624]	; (8001440 <key_pad+0x8c8>)
 80011ce:	f7ff f81f 	bl	8000210 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	3b01      	subs	r3, #1
 80011d6:	4a9a      	ldr	r2, [pc, #616]	; (8001440 <key_pad+0x8c8>)
 80011d8:	2100      	movs	r1, #0
 80011da:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80011dc:	4898      	ldr	r0, [pc, #608]	; (8001440 <key_pad+0x8c8>)
 80011de:	f7ff fcb3 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "Q");
 80011e2:	4897      	ldr	r0, [pc, #604]	; (8001440 <key_pad+0x8c8>)
 80011e4:	f7ff f814 	bl	8000210 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b94      	ldr	r3, [pc, #592]	; (8001440 <key_pad+0x8c8>)
 80011ee:	4413      	add	r3, r2
 80011f0:	4994      	ldr	r1, [pc, #592]	; (8001444 <key_pad+0x8cc>)
 80011f2:	461a      	mov	r2, r3
 80011f4:	460b      	mov	r3, r1
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80011fa:	4891      	ldr	r0, [pc, #580]	; (8001440 <key_pad+0x8c8>)
 80011fc:	f7ff fca4 	bl	8000b48 <updateScreen>
						counter ++;
 8001200:	4b8e      	ldr	r3, [pc, #568]	; (800143c <key_pad+0x8c4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a8d      	ldr	r2, [pc, #564]	; (800143c <key_pad+0x8c4>)
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e04c      	b.n	80012a6 <key_pad+0x72e>
					}

					else if(counter == 2){
 800120c:	4b8b      	ldr	r3, [pc, #556]	; (800143c <key_pad+0x8c4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <key_pad+0x6e4>
						if(strlen(writeString) > 0) {
 8001214:	4b8a      	ldr	r3, [pc, #552]	; (8001440 <key_pad+0x8c8>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00a      	beq.n	8001232 <key_pad+0x6ba>
							writeString[strlen(writeString) - 1] = '\0';
 800121c:	4888      	ldr	r0, [pc, #544]	; (8001440 <key_pad+0x8c8>)
 800121e:	f7fe fff7 	bl	8000210 <strlen>
 8001222:	4603      	mov	r3, r0
 8001224:	3b01      	subs	r3, #1
 8001226:	4a86      	ldr	r2, [pc, #536]	; (8001440 <key_pad+0x8c8>)
 8001228:	2100      	movs	r1, #0
 800122a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800122c:	4884      	ldr	r0, [pc, #528]	; (8001440 <key_pad+0x8c8>)
 800122e:	f7ff fc8b 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "R");
 8001232:	4883      	ldr	r0, [pc, #524]	; (8001440 <key_pad+0x8c8>)
 8001234:	f7fe ffec 	bl	8000210 <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b80      	ldr	r3, [pc, #512]	; (8001440 <key_pad+0x8c8>)
 800123e:	4413      	add	r3, r2
 8001240:	4981      	ldr	r1, [pc, #516]	; (8001448 <key_pad+0x8d0>)
 8001242:	461a      	mov	r2, r3
 8001244:	460b      	mov	r3, r1
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800124a:	487d      	ldr	r0, [pc, #500]	; (8001440 <key_pad+0x8c8>)
 800124c:	f7ff fc7c 	bl	8000b48 <updateScreen>
						counter ++;
 8001250:	4b7a      	ldr	r3, [pc, #488]	; (800143c <key_pad+0x8c4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	4a79      	ldr	r2, [pc, #484]	; (800143c <key_pad+0x8c4>)
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e024      	b.n	80012a6 <key_pad+0x72e>
					}
					else if(counter == 3){
 800125c:	4b77      	ldr	r3, [pc, #476]	; (800143c <key_pad+0x8c4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d120      	bne.n	80012a6 <key_pad+0x72e>
						if(strlen(writeString) > 0) {
 8001264:	4b76      	ldr	r3, [pc, #472]	; (8001440 <key_pad+0x8c8>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00a      	beq.n	8001282 <key_pad+0x70a>
							writeString[strlen(writeString) - 1] = '\0';
 800126c:	4874      	ldr	r0, [pc, #464]	; (8001440 <key_pad+0x8c8>)
 800126e:	f7fe ffcf 	bl	8000210 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	3b01      	subs	r3, #1
 8001276:	4a72      	ldr	r2, [pc, #456]	; (8001440 <key_pad+0x8c8>)
 8001278:	2100      	movs	r1, #0
 800127a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800127c:	4870      	ldr	r0, [pc, #448]	; (8001440 <key_pad+0x8c8>)
 800127e:	f7ff fc63 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "S");
 8001282:	486f      	ldr	r0, [pc, #444]	; (8001440 <key_pad+0x8c8>)
 8001284:	f7fe ffc4 	bl	8000210 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b6c      	ldr	r3, [pc, #432]	; (8001440 <key_pad+0x8c8>)
 800128e:	4413      	add	r3, r2
 8001290:	496e      	ldr	r1, [pc, #440]	; (800144c <key_pad+0x8d4>)
 8001292:	461a      	mov	r2, r3
 8001294:	460b      	mov	r3, r1
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800129a:	4869      	ldr	r0, [pc, #420]	; (8001440 <key_pad+0x8c8>)
 800129c:	f7ff fc54 	bl	8000b48 <updateScreen>
						counter = 0;
 80012a0:	4b66      	ldr	r3, [pc, #408]	; (800143c <key_pad+0x8c4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	71fb      	strb	r3, [r7, #7]
					break;
 80012aa:	e175      	b.n	8001598 <key_pad+0xa20>

				case 'T':
					if(counter == 0){
 80012ac:	4b63      	ldr	r3, [pc, #396]	; (800143c <key_pad+0x8c4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d123      	bne.n	80012fc <key_pad+0x784>
						if(strlen(writeString) > 0) {
 80012b4:	4b62      	ldr	r3, [pc, #392]	; (8001440 <key_pad+0x8c8>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00a      	beq.n	80012d2 <key_pad+0x75a>
							writeString[strlen(writeString) - 1] = '\0';
 80012bc:	4860      	ldr	r0, [pc, #384]	; (8001440 <key_pad+0x8c8>)
 80012be:	f7fe ffa7 	bl	8000210 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	3b01      	subs	r3, #1
 80012c6:	4a5e      	ldr	r2, [pc, #376]	; (8001440 <key_pad+0x8c8>)
 80012c8:	2100      	movs	r1, #0
 80012ca:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80012cc:	485c      	ldr	r0, [pc, #368]	; (8001440 <key_pad+0x8c8>)
 80012ce:	f7ff fc3b 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "T");
 80012d2:	485b      	ldr	r0, [pc, #364]	; (8001440 <key_pad+0x8c8>)
 80012d4:	f7fe ff9c 	bl	8000210 <strlen>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b58      	ldr	r3, [pc, #352]	; (8001440 <key_pad+0x8c8>)
 80012de:	4413      	add	r3, r2
 80012e0:	495b      	ldr	r1, [pc, #364]	; (8001450 <key_pad+0x8d8>)
 80012e2:	461a      	mov	r2, r3
 80012e4:	460b      	mov	r3, r1
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80012ea:	4855      	ldr	r0, [pc, #340]	; (8001440 <key_pad+0x8c8>)
 80012ec:	f7ff fc2c 	bl	8000b48 <updateScreen>
						counter ++;
 80012f0:	4b52      	ldr	r3, [pc, #328]	; (800143c <key_pad+0x8c4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	4a51      	ldr	r2, [pc, #324]	; (800143c <key_pad+0x8c4>)
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e04c      	b.n	8001396 <key_pad+0x81e>
					}

					else if(counter == 1){
 80012fc:	4b4f      	ldr	r3, [pc, #316]	; (800143c <key_pad+0x8c4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d123      	bne.n	800134c <key_pad+0x7d4>
						if(strlen(writeString) > 0) {
 8001304:	4b4e      	ldr	r3, [pc, #312]	; (8001440 <key_pad+0x8c8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00a      	beq.n	8001322 <key_pad+0x7aa>
							writeString[strlen(writeString) - 1] = '\0';
 800130c:	484c      	ldr	r0, [pc, #304]	; (8001440 <key_pad+0x8c8>)
 800130e:	f7fe ff7f 	bl	8000210 <strlen>
 8001312:	4603      	mov	r3, r0
 8001314:	3b01      	subs	r3, #1
 8001316:	4a4a      	ldr	r2, [pc, #296]	; (8001440 <key_pad+0x8c8>)
 8001318:	2100      	movs	r1, #0
 800131a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800131c:	4848      	ldr	r0, [pc, #288]	; (8001440 <key_pad+0x8c8>)
 800131e:	f7ff fc13 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "U");
 8001322:	4847      	ldr	r0, [pc, #284]	; (8001440 <key_pad+0x8c8>)
 8001324:	f7fe ff74 	bl	8000210 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b44      	ldr	r3, [pc, #272]	; (8001440 <key_pad+0x8c8>)
 800132e:	4413      	add	r3, r2
 8001330:	4948      	ldr	r1, [pc, #288]	; (8001454 <key_pad+0x8dc>)
 8001332:	461a      	mov	r2, r3
 8001334:	460b      	mov	r3, r1
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800133a:	4841      	ldr	r0, [pc, #260]	; (8001440 <key_pad+0x8c8>)
 800133c:	f7ff fc04 	bl	8000b48 <updateScreen>
						counter ++;
 8001340:	4b3e      	ldr	r3, [pc, #248]	; (800143c <key_pad+0x8c4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a3d      	ldr	r2, [pc, #244]	; (800143c <key_pad+0x8c4>)
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e024      	b.n	8001396 <key_pad+0x81e>
					}

					else if(counter == 2){
 800134c:	4b3b      	ldr	r3, [pc, #236]	; (800143c <key_pad+0x8c4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d120      	bne.n	8001396 <key_pad+0x81e>
						if(strlen(writeString) > 0) {
 8001354:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <key_pad+0x8c8>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00a      	beq.n	8001372 <key_pad+0x7fa>
							writeString[strlen(writeString) - 1] = '\0';
 800135c:	4838      	ldr	r0, [pc, #224]	; (8001440 <key_pad+0x8c8>)
 800135e:	f7fe ff57 	bl	8000210 <strlen>
 8001362:	4603      	mov	r3, r0
 8001364:	3b01      	subs	r3, #1
 8001366:	4a36      	ldr	r2, [pc, #216]	; (8001440 <key_pad+0x8c8>)
 8001368:	2100      	movs	r1, #0
 800136a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800136c:	4834      	ldr	r0, [pc, #208]	; (8001440 <key_pad+0x8c8>)
 800136e:	f7ff fbeb 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "V");
 8001372:	4833      	ldr	r0, [pc, #204]	; (8001440 <key_pad+0x8c8>)
 8001374:	f7fe ff4c 	bl	8000210 <strlen>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	4b30      	ldr	r3, [pc, #192]	; (8001440 <key_pad+0x8c8>)
 800137e:	4413      	add	r3, r2
 8001380:	4935      	ldr	r1, [pc, #212]	; (8001458 <key_pad+0x8e0>)
 8001382:	461a      	mov	r2, r3
 8001384:	460b      	mov	r3, r1
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800138a:	482d      	ldr	r0, [pc, #180]	; (8001440 <key_pad+0x8c8>)
 800138c:	f7ff fbdc 	bl	8000b48 <updateScreen>
						counter = 0;
 8001390:	4b2a      	ldr	r3, [pc, #168]	; (800143c <key_pad+0x8c4>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	71fb      	strb	r3, [r7, #7]
					break;
 800139a:	e0fd      	b.n	8001598 <key_pad+0xa20>

				case 'W':
					if(counter == 0){
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <key_pad+0x8c4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d123      	bne.n	80013ec <key_pad+0x874>
						if(strlen(writeString) > 0) {
 80013a4:	4b26      	ldr	r3, [pc, #152]	; (8001440 <key_pad+0x8c8>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00a      	beq.n	80013c2 <key_pad+0x84a>
							writeString[strlen(writeString) - 1] = '\0';
 80013ac:	4824      	ldr	r0, [pc, #144]	; (8001440 <key_pad+0x8c8>)
 80013ae:	f7fe ff2f 	bl	8000210 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	3b01      	subs	r3, #1
 80013b6:	4a22      	ldr	r2, [pc, #136]	; (8001440 <key_pad+0x8c8>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80013bc:	4820      	ldr	r0, [pc, #128]	; (8001440 <key_pad+0x8c8>)
 80013be:	f7ff fbc3 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "W");
 80013c2:	481f      	ldr	r0, [pc, #124]	; (8001440 <key_pad+0x8c8>)
 80013c4:	f7fe ff24 	bl	8000210 <strlen>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <key_pad+0x8c8>)
 80013ce:	4413      	add	r3, r2
 80013d0:	4922      	ldr	r1, [pc, #136]	; (800145c <key_pad+0x8e4>)
 80013d2:	461a      	mov	r2, r3
 80013d4:	460b      	mov	r3, r1
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80013da:	4819      	ldr	r0, [pc, #100]	; (8001440 <key_pad+0x8c8>)
 80013dc:	f7ff fbb4 	bl	8000b48 <updateScreen>
						counter ++;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <key_pad+0x8c4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	4a15      	ldr	r2, [pc, #84]	; (800143c <key_pad+0x8c4>)
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e088      	b.n	80014fe <key_pad+0x986>
					}

					else if(counter == 1){
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <key_pad+0x8c4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d137      	bne.n	8001464 <key_pad+0x8ec>
						if(strlen(writeString) > 0) {
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <key_pad+0x8c8>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00a      	beq.n	8001412 <key_pad+0x89a>
							writeString[strlen(writeString) - 1] = '\0';
 80013fc:	4810      	ldr	r0, [pc, #64]	; (8001440 <key_pad+0x8c8>)
 80013fe:	f7fe ff07 	bl	8000210 <strlen>
 8001402:	4603      	mov	r3, r0
 8001404:	3b01      	subs	r3, #1
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <key_pad+0x8c8>)
 8001408:	2100      	movs	r1, #0
 800140a:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <key_pad+0x8c8>)
 800140e:	f7ff fb9b 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "X");
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <key_pad+0x8c8>)
 8001414:	f7fe fefc 	bl	8000210 <strlen>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <key_pad+0x8c8>)
 800141e:	4413      	add	r3, r2
 8001420:	490f      	ldr	r1, [pc, #60]	; (8001460 <key_pad+0x8e8>)
 8001422:	461a      	mov	r2, r3
 8001424:	460b      	mov	r3, r1
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <key_pad+0x8c8>)
 800142c:	f7ff fb8c 	bl	8000b48 <updateScreen>
						counter ++;
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <key_pad+0x8c4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	4a01      	ldr	r2, [pc, #4]	; (800143c <key_pad+0x8c4>)
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e060      	b.n	80014fe <key_pad+0x986>
 800143c:	2000a0dc 	.word	0x2000a0dc
 8001440:	2000a0a8 	.word	0x2000a0a8
 8001444:	0800828c 	.word	0x0800828c
 8001448:	08008290 	.word	0x08008290
 800144c:	08008294 	.word	0x08008294
 8001450:	08008298 	.word	0x08008298
 8001454:	0800829c 	.word	0x0800829c
 8001458:	080082a0 	.word	0x080082a0
 800145c:	080082a4 	.word	0x080082a4
 8001460:	080082a8 	.word	0x080082a8
					}

					else if(counter == 2){
 8001464:	4b4e      	ldr	r3, [pc, #312]	; (80015a0 <key_pad+0xa28>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d123      	bne.n	80014b4 <key_pad+0x93c>
						if(strlen(writeString) > 0) {
 800146c:	4b4d      	ldr	r3, [pc, #308]	; (80015a4 <key_pad+0xa2c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00a      	beq.n	800148a <key_pad+0x912>
							writeString[strlen(writeString) - 1] = '\0';
 8001474:	484b      	ldr	r0, [pc, #300]	; (80015a4 <key_pad+0xa2c>)
 8001476:	f7fe fecb 	bl	8000210 <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	3b01      	subs	r3, #1
 800147e:	4a49      	ldr	r2, [pc, #292]	; (80015a4 <key_pad+0xa2c>)
 8001480:	2100      	movs	r1, #0
 8001482:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 8001484:	4847      	ldr	r0, [pc, #284]	; (80015a4 <key_pad+0xa2c>)
 8001486:	f7ff fb5f 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "Y");
 800148a:	4846      	ldr	r0, [pc, #280]	; (80015a4 <key_pad+0xa2c>)
 800148c:	f7fe fec0 	bl	8000210 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <key_pad+0xa2c>)
 8001496:	4413      	add	r3, r2
 8001498:	4943      	ldr	r1, [pc, #268]	; (80015a8 <key_pad+0xa30>)
 800149a:	461a      	mov	r2, r3
 800149c:	460b      	mov	r3, r1
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80014a2:	4840      	ldr	r0, [pc, #256]	; (80015a4 <key_pad+0xa2c>)
 80014a4:	f7ff fb50 	bl	8000b48 <updateScreen>
						counter ++;
 80014a8:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <key_pad+0xa28>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a3c      	ldr	r2, [pc, #240]	; (80015a0 <key_pad+0xa28>)
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e024      	b.n	80014fe <key_pad+0x986>
					}

					else if(counter == 3){
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <key_pad+0xa28>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d120      	bne.n	80014fe <key_pad+0x986>
						if(strlen(writeString) > 0) {
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <key_pad+0xa2c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00a      	beq.n	80014da <key_pad+0x962>
							writeString[strlen(writeString) - 1] = '\0';
 80014c4:	4837      	ldr	r0, [pc, #220]	; (80015a4 <key_pad+0xa2c>)
 80014c6:	f7fe fea3 	bl	8000210 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	3b01      	subs	r3, #1
 80014ce:	4a35      	ldr	r2, [pc, #212]	; (80015a4 <key_pad+0xa2c>)
 80014d0:	2100      	movs	r1, #0
 80014d2:	54d1      	strb	r1, [r2, r3]
							updateScreen(writeString);
 80014d4:	4833      	ldr	r0, [pc, #204]	; (80015a4 <key_pad+0xa2c>)
 80014d6:	f7ff fb37 	bl	8000b48 <updateScreen>
						}
						strcat(writeString, "Z");
 80014da:	4832      	ldr	r0, [pc, #200]	; (80015a4 <key_pad+0xa2c>)
 80014dc:	f7fe fe98 	bl	8000210 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <key_pad+0xa2c>)
 80014e6:	4413      	add	r3, r2
 80014e8:	4930      	ldr	r1, [pc, #192]	; (80015ac <key_pad+0xa34>)
 80014ea:	461a      	mov	r2, r3
 80014ec:	460b      	mov	r3, r1
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	8013      	strh	r3, [r2, #0]
						updateScreen(writeString);
 80014f2:	482c      	ldr	r0, [pc, #176]	; (80015a4 <key_pad+0xa2c>)
 80014f4:	f7ff fb28 	bl	8000b48 <updateScreen>
						counter = 0;
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <key_pad+0xa28>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
					}
					keyChar = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	71fb      	strb	r3, [r7, #7]
					break;
 8001502:	e049      	b.n	8001598 <key_pad+0xa20>

				case '#':
					strcat(writeString, " ");
 8001504:	4827      	ldr	r0, [pc, #156]	; (80015a4 <key_pad+0xa2c>)
 8001506:	f7fe fe83 	bl	8000210 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <key_pad+0xa2c>)
 8001510:	4413      	add	r3, r2
 8001512:	4927      	ldr	r1, [pc, #156]	; (80015b0 <key_pad+0xa38>)
 8001514:	461a      	mov	r2, r3
 8001516:	460b      	mov	r3, r1
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	8013      	strh	r3, [r2, #0]
					writeString[strlen(writeString) + 1] = '\0';
 800151c:	4821      	ldr	r0, [pc, #132]	; (80015a4 <key_pad+0xa2c>)
 800151e:	f7fe fe77 	bl	8000210 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	3301      	adds	r3, #1
 8001526:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <key_pad+0xa2c>)
 8001528:	2100      	movs	r1, #0
 800152a:	54d1      	strb	r1, [r2, r3]
					updateScreen(writeString);
 800152c:	481d      	ldr	r0, [pc, #116]	; (80015a4 <key_pad+0xa2c>)
 800152e:	f7ff fb0b 	bl	8000b48 <updateScreen>
					counter = 0;
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <key_pad+0xa28>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
					keyChar = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	71fb      	strb	r3, [r7, #7]
					pos += 10;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <key_pad+0xa3c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	330a      	adds	r3, #10
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <key_pad+0xa3c>)
 8001544:	6013      	str	r3, [r2, #0]
					break;
 8001546:	e027      	b.n	8001598 <key_pad+0xa20>

				case 'B':
					if(strlen(writeString) > 0) {
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <key_pad+0xa2c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00d      	beq.n	800156c <key_pad+0x9f4>
						writeString[strlen(writeString) - 1] = '\0';
 8001550:	4814      	ldr	r0, [pc, #80]	; (80015a4 <key_pad+0xa2c>)
 8001552:	f7fe fe5d 	bl	8000210 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	3b01      	subs	r3, #1
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <key_pad+0xa2c>)
 800155c:	2100      	movs	r1, #0
 800155e:	54d1      	strb	r1, [r2, r3]
						updateScreen(writeString);
 8001560:	4810      	ldr	r0, [pc, #64]	; (80015a4 <key_pad+0xa2c>)
 8001562:	f7ff faf1 	bl	8000b48 <updateScreen>
						strcat(writeString, "");
						updateScreen(writeString);
 8001566:	480f      	ldr	r0, [pc, #60]	; (80015a4 <key_pad+0xa2c>)
 8001568:	f7ff faee 	bl	8000b48 <updateScreen>
					}
					counter = 0;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <key_pad+0xa28>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
					keyChar = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	71fb      	strb	r3, [r7, #7]
					break;
 8001576:	e00f      	b.n	8001598 <key_pad+0xa20>

				case 'C':
					writeString[0] = '\0';
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <key_pad+0xa2c>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
					updateScreen(writeString);
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <key_pad+0xa2c>)
 8001580:	f7ff fae2 	bl	8000b48 <updateScreen>
					counter = 0;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <key_pad+0xa28>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
					keyChar = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	71fb      	strb	r3, [r7, #7]
					break;
 800158e:	e003      	b.n	8001598 <key_pad+0xa20>

				case '*':
					flag = 1;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <key_pad+0xa40>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

					break;
 8001596:	bf00      	nop
	}
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000a0dc 	.word	0x2000a0dc
 80015a4:	2000a0a8 	.word	0x2000a0a8
 80015a8:	080082ac 	.word	0x080082ac
 80015ac:	080082b0 	.word	0x080082b0
 80015b0:	080082b4 	.word	0x080082b4
 80015b4:	20000008 	.word	0x20000008
 80015b8:	2000b615 	.word	0x2000b615

080015bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b09c      	sub	sp, #112	; 0x70
 80015c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c2:	f000 ff30 	bl	8002426 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c6:	f000 f88d 	bl	80016e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ca:	f000 f9bf 	bl	800194c <MX_GPIO_Init>
  MX_DMA_Init();
 80015ce:	f000 f99f 	bl	8001910 <MX_DMA_Init>
  MX_SPI1_Init();
 80015d2:	f000 f92f 	bl	8001834 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80015d6:	f000 f96b 	bl	80018b0 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 80015da:	f000 f8eb 	bl	80017b4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ILI9163_init(0);
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff f8aa 	bl	8000738 <ILI9163_init>

  //HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
   //uint8_t dataToSend[] = "How are you?";
   HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
 80015e4:	2201      	movs	r2, #1
 80015e6:	4932      	ldr	r1, [pc, #200]	; (80016b0 <main+0xf4>)
 80015e8:	4832      	ldr	r0, [pc, #200]	; (80016b4 <main+0xf8>)
 80015ea:	f004 ff3a 	bl	8006462 <HAL_UART_Receive_IT>
   MPU6050_Init(&hi2c2);
 80015ee:	4832      	ldr	r0, [pc, #200]	; (80016b8 <main+0xfc>)
 80015f0:	f000 faec 	bl	8001bcc <MPU6050_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  	  	  readGyroData(&hi2c2, &gyroX, &gyroY, &gyroZ);
 80015f4:	4b31      	ldr	r3, [pc, #196]	; (80016bc <main+0x100>)
 80015f6:	4a32      	ldr	r2, [pc, #200]	; (80016c0 <main+0x104>)
 80015f8:	4932      	ldr	r1, [pc, #200]	; (80016c4 <main+0x108>)
 80015fa:	482f      	ldr	r0, [pc, #188]	; (80016b8 <main+0xfc>)
 80015fc:	f000 fb34 	bl	8001c68 <readGyroData>

	  	          char str_buffer[100];  // Made the buffer bigger just in case

	  	          // Format gyro data into a comma-separated list
	  	          sprintf(str_buffer, "[%d,%d,%d]\n", gyroX, gyroY, gyroZ);
 8001600:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <main+0x108>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	461a      	mov	r2, r3
 8001608:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <main+0x104>)
 800160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160e:	4619      	mov	r1, r3
 8001610:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <main+0x100>)
 8001612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001616:	1d38      	adds	r0, r7, #4
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	460b      	mov	r3, r1
 800161c:	492a      	ldr	r1, [pc, #168]	; (80016c8 <main+0x10c>)
 800161e:	f006 f92b 	bl	8007878 <siprintf>

	  	          // Transmit the formatted string over CDC
	  	        HAL_UART_Transmit(&huart6,(uint8_t*)str_buffer, strlen(str_buffer), 1000);
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe fdf3 	bl	8000210 <strlen>
 800162a:	4603      	mov	r3, r0
 800162c:	b29a      	uxth	r2, r3
 800162e:	1d39      	adds	r1, r7, #4
 8001630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001634:	481f      	ldr	r0, [pc, #124]	; (80016b4 <main+0xf8>)
 8001636:	f004 fe91 	bl	800635c <HAL_UART_Transmit>
	  	          HAL_Delay(5000);
 800163a:	f241 3088 	movw	r0, #5000	; 0x1388
 800163e:	f000 ff4f 	bl	80024e0 <HAL_Delay>


	  if(keyChar != 0){
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <main+0x110>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <main+0x9e>
		  key_pad(keyChar);
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <main+0x110>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fa92 	bl	8000b78 <key_pad>
		  keyChar = 0;
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <main+0x110>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
	  }
	  if(flag == 1){
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <main+0x114>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d10d      	bne.n	800167e <main+0xc2>
		  HAL_UART_Transmit(&huart6, writeString, strlen(writeString), 1000);
 8001662:	481c      	ldr	r0, [pc, #112]	; (80016d4 <main+0x118>)
 8001664:	f7fe fdd4 	bl	8000210 <strlen>
 8001668:	4603      	mov	r3, r0
 800166a:	b29a      	uxth	r2, r3
 800166c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001670:	4918      	ldr	r1, [pc, #96]	; (80016d4 <main+0x118>)
 8001672:	4810      	ldr	r0, [pc, #64]	; (80016b4 <main+0xf8>)
 8001674:	f004 fe72 	bl	800635c <HAL_UART_Transmit>
		  flag = 0;
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <main+0x114>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
	  }
	  if (messageReady) {
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <main+0x11c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0b5      	beq.n	80015f4 <main+0x38>
	     // Process the complete message
	     ILI9163_newFrame();
 8001688:	f7ff f93e 	bl	8000908 <ILI9163_newFrame>
	     ILI9163_drawString(5, 5, Font_7x10, BLUE, receivedData);
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <main+0x120>)
 800168e:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <main+0x124>)
 8001690:	9201      	str	r2, [sp, #4]
 8001692:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001696:	9200      	str	r2, [sp, #0]
 8001698:	cb0c      	ldmia	r3, {r2, r3}
 800169a:	2105      	movs	r1, #5
 800169c:	2005      	movs	r0, #5
 800169e:	f7ff f9ec 	bl	8000a7a <ILI9163_drawString>
	     ILI9163_render();
 80016a2:	f7ff f94d 	bl	8000940 <ILI9163_render>

	     messageReady = 0; // Reset the flag
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <main+0x11c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
  {
 80016ac:	e7a2      	b.n	80015f4 <main+0x38>
 80016ae:	bf00      	nop
 80016b0:	2000a288 	.word	0x2000a288
 80016b4:	2000a1f8 	.word	0x2000a1f8
 80016b8:	2000a0e0 	.word	0x2000a0e0
 80016bc:	2000b61a 	.word	0x2000b61a
 80016c0:	2000b618 	.word	0x2000b618
 80016c4:	2000b616 	.word	0x2000b616
 80016c8:	080082b8 	.word	0x080082b8
 80016cc:	2000a282 	.word	0x2000a282
 80016d0:	2000b615 	.word	0x2000b615
 80016d4:	2000a0a8 	.word	0x2000a0a8
 80016d8:	2000a281 	.word	0x2000a281
 80016dc:	20000000 	.word	0x20000000
 80016e0:	2000a28c 	.word	0x2000a28c

080016e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b094      	sub	sp, #80	; 0x50
 80016e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 0320 	add.w	r3, r7, #32
 80016ee:	2230      	movs	r2, #48	; 0x30
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f006 f91a 	bl	800792c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001708:	f002 fe9a 	bl	8004440 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <SystemClock_Config+0xc8>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	4a26      	ldr	r2, [pc, #152]	; (80017ac <SystemClock_Config+0xc8>)
 8001712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001716:	6413      	str	r3, [r2, #64]	; 0x40
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <SystemClock_Config+0xc8>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <SystemClock_Config+0xcc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800172c:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <SystemClock_Config+0xcc>)
 800172e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <SystemClock_Config+0xcc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001740:	2301      	movs	r3, #1
 8001742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001744:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174a:	2302      	movs	r3, #2
 800174c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001754:	2304      	movs	r3, #4
 8001756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001758:	2348      	movs	r3, #72	; 0x48
 800175a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800175c:	2302      	movs	r3, #2
 800175e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001760:	2303      	movs	r3, #3
 8001762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001764:	f107 0320 	add.w	r3, r7, #32
 8001768:	4618      	mov	r0, r3
 800176a:	f002 fe79 	bl	8004460 <HAL_RCC_OscConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001774:	f000 fa24 	bl	8001bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001778:	230f      	movs	r3, #15
 800177a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177c:	2302      	movs	r3, #2
 800177e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	2102      	movs	r1, #2
 8001794:	4618      	mov	r0, r3
 8001796:	f003 f907 	bl	80049a8 <HAL_RCC_ClockConfig>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017a0:	f000 fa0e 	bl	8001bc0 <Error_Handler>
  }
}
 80017a4:	bf00      	nop
 80017a6:	3750      	adds	r7, #80	; 0x50
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000

080017b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <MX_I2C2_Init+0x74>)
 80017ba:	4a1c      	ldr	r2, [pc, #112]	; (800182c <MX_I2C2_Init+0x78>)
 80017bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <MX_I2C2_Init+0x74>)
 80017c0:	4a1b      	ldr	r2, [pc, #108]	; (8001830 <MX_I2C2_Init+0x7c>)
 80017c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <MX_I2C2_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <MX_I2C2_Init+0x74>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <MX_I2C2_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_I2C2_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_I2C2_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_I2C2_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_I2C2_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017ee:	480e      	ldr	r0, [pc, #56]	; (8001828 <MX_I2C2_Init+0x74>)
 80017f0:	f001 fdd2 	bl	8003398 <HAL_I2C_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017fa:	f000 f9e1 	bl	8001bc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017fe:	2100      	movs	r1, #0
 8001800:	4809      	ldr	r0, [pc, #36]	; (8001828 <MX_I2C2_Init+0x74>)
 8001802:	f002 fd85 	bl	8004310 <HAL_I2CEx_ConfigAnalogFilter>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800180c:	f000 f9d8 	bl	8001bc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001810:	2100      	movs	r1, #0
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_I2C2_Init+0x74>)
 8001814:	f002 fdc7 	bl	80043a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800181e:	f000 f9cf 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000a0e0 	.word	0x2000a0e0
 800182c:	40005800 	.word	0x40005800
 8001830:	00808cd2 	.word	0x00808cd2

08001834 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <MX_SPI1_Init+0x74>)
 800183a:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <MX_SPI1_Init+0x78>)
 800183c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800184c:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <MX_SPI1_Init+0x74>)
 800184e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001852:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_SPI1_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001866:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_SPI1_Init+0x74>)
 800186a:	2208      	movs	r2, #8
 800186c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <MX_SPI1_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001882:	2207      	movs	r2, #7
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_SPI1_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001894:	f003 fe9e 	bl	80055d4 <HAL_SPI_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800189e:	f000 f98f 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2000a134 	.word	0x2000a134
 80018ac:	40013000 	.word	0x40013000

080018b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <MX_USART6_UART_Init+0x58>)
 80018b6:	4a15      	ldr	r2, [pc, #84]	; (800190c <MX_USART6_UART_Init+0x5c>)
 80018b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <MX_USART6_UART_Init+0x58>)
 80018bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_USART6_UART_Init+0x58>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_USART6_UART_Init+0x58>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <MX_USART6_UART_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_USART6_UART_Init+0x58>)
 80018d6:	220c      	movs	r2, #12
 80018d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <MX_USART6_UART_Init+0x58>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_USART6_UART_Init+0x58>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <MX_USART6_UART_Init+0x58>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_USART6_UART_Init+0x58>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_USART6_UART_Init+0x58>)
 80018f4:	f004 fce4 	bl	80062c0 <HAL_UART_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80018fe:	f000 f95f 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000a1f8 	.word	0x2000a1f8
 800190c:	40011400 	.word	0x40011400

08001910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_DMA_Init+0x38>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <MX_DMA_Init+0x38>)
 800191c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_DMA_Init+0x38>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	203b      	movs	r0, #59	; 0x3b
 8001934:	f000 fed3 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001938:	203b      	movs	r0, #59	; 0x3b
 800193a:	f000 feec 	bl	8002716 <HAL_NVIC_EnableIRQ>

}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	; 0x30
 8001950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001962:	4b64      	ldr	r3, [pc, #400]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a63      	ldr	r2, [pc, #396]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	4b5e      	ldr	r3, [pc, #376]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a5d      	ldr	r2, [pc, #372]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b5b      	ldr	r3, [pc, #364]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001992:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a57      	ldr	r2, [pc, #348]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 8001998:	f043 0320 	orr.w	r3, r3, #32
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b55      	ldr	r3, [pc, #340]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019aa:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a51      	ldr	r2, [pc, #324]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 80019b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b4f      	ldr	r3, [pc, #316]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b4c      	ldr	r3, [pc, #304]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a4b      	ldr	r2, [pc, #300]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	4b46      	ldr	r3, [pc, #280]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a45      	ldr	r2, [pc, #276]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019f2:	4b40      	ldr	r3, [pc, #256]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a3f      	ldr	r2, [pc, #252]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 80019f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <MX_GPIO_Init+0x1a8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f64a 3103 	movw	r1, #43779	; 0xab03
 8001a10:	4839      	ldr	r0, [pc, #228]	; (8001af8 <MX_GPIO_Init+0x1ac>)
 8001a12:	f001 fc69 	bl	80032e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a16:	2320      	movs	r3, #32
 8001a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4834      	ldr	r0, [pc, #208]	; (8001afc <MX_GPIO_Init+0x1b0>)
 8001a2c:	f001 fa98 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 8001a30:	f240 3301 	movw	r3, #769	; 0x301
 8001a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	482b      	ldr	r0, [pc, #172]	; (8001af8 <MX_GPIO_Init+0x1ac>)
 8001a4a:	f001 fa89 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB11 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 8001a4e:	f64a 0302 	movw	r3, #43010	; 0xa802
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4619      	mov	r1, r3
 8001a66:	4824      	ldr	r0, [pc, #144]	; (8001af8 <MX_GPIO_Init+0x1ac>)
 8001a68:	f001 fa7a 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ble_state_Pin */
  GPIO_InitStruct.Pin = ble_state_Pin;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ble_state_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4820      	ldr	r0, [pc, #128]	; (8001b00 <MX_GPIO_Init+0x1b4>)
 8001a80:	f001 fa6e 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001a84:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	481a      	ldr	r0, [pc, #104]	; (8001b04 <MX_GPIO_Init+0x1b8>)
 8001a9c:	f001 fa60 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001aa0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	4812      	ldr	r0, [pc, #72]	; (8001b08 <MX_GPIO_Init+0x1bc>)
 8001abe:	f001 fa4f 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_GPIO_Init+0x1bc>)
 8001ad8:	f001 fa42 	bl	8002f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2017      	movs	r0, #23
 8001ae2:	f000 fdfc 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ae6:	2017      	movs	r0, #23
 8001ae8:	f000 fe15 	bl	8002716 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aec:	bf00      	nop
 8001aee:	3730      	adds	r7, #48	; 0x30
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40021800 	.word	0x40021800
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020000 	.word	0x40020000

08001b0c <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) // Your TxCpltCallback
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	SPI_DMA_CNT--;
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_SPI_TxCpltCallback+0x34>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <HAL_SPI_TxCpltCallback+0x34>)
 8001b1c:	6013      	str	r3, [r2, #0]
	if(SPI_DMA_CNT==0)
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_SPI_TxCpltCallback+0x34>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d108      	bne.n	8001b38 <HAL_SPI_TxCpltCallback+0x2c>
	{
		HAL_SPI_DMAStop(&hspi1);
 8001b26:	4807      	ldr	r0, [pc, #28]	; (8001b44 <HAL_SPI_TxCpltCallback+0x38>)
 8001b28:	f004 f862 	bl	8005bf0 <HAL_SPI_DMAStop>
		SPI_DMA_CNT=1;
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <HAL_SPI_TxCpltCallback+0x34>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
		SPI_DMA_FL=1;
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_SPI_TxCpltCallback+0x3c>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
	}
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000000c 	.word	0x2000000c
 8001b44:	2000a134 	.word	0x2000a134
 8001b48:	2000a280 	.word	0x2000a280

08001b4c <HAL_UART_RxCpltCallback>:
	HAL_UART_Transmit(huart, data, size, 1000); // 1000 is timeout duration
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6) {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <HAL_UART_RxCpltCallback+0x5c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d120      	bne.n	8001ba0 <HAL_UART_RxCpltCallback+0x54>
    if (receiveBuffer[0] != '\n' && receivedDataIndex < sizeof(receivedData) - 1) {
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <HAL_UART_RxCpltCallback+0x60>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b0a      	cmp	r3, #10
 8001b64:	d00b      	beq.n	8001b7e <HAL_UART_RxCpltCallback+0x32>
      receivedData[receivedDataIndex++] = receiveBuffer[0];
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_UART_RxCpltCallback+0x64>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	b2d1      	uxtb	r1, r2
 8001b6e:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_UART_RxCpltCallback+0x64>)
 8001b70:	7011      	strb	r1, [r2, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_UART_RxCpltCallback+0x60>)
 8001b76:	7819      	ldrb	r1, [r3, #0]
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_UART_RxCpltCallback+0x68>)
 8001b7a:	5499      	strb	r1, [r3, r2]
 8001b7c:	e00b      	b.n	8001b96 <HAL_UART_RxCpltCallback+0x4a>
    } else {
      receivedData[receivedDataIndex] = '\0'; // Null-terminate
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_UART_RxCpltCallback+0x64>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_UART_RxCpltCallback+0x68>)
 8001b86:	2100      	movs	r1, #0
 8001b88:	5499      	strb	r1, [r3, r2]
      messageReady = 1; // Set the flag
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_UART_RxCpltCallback+0x6c>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
      receivedDataIndex = 0;
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <HAL_UART_RxCpltCallback+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
      //memset(receivedData, 0, sizeof(receivedData));
    }
    HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
 8001b96:	2201      	movs	r2, #1
 8001b98:	4904      	ldr	r1, [pc, #16]	; (8001bac <HAL_UART_RxCpltCallback+0x60>)
 8001b9a:	4808      	ldr	r0, [pc, #32]	; (8001bbc <HAL_UART_RxCpltCallback+0x70>)
 8001b9c:	f004 fc61 	bl	8006462 <HAL_UART_Receive_IT>
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40011400 	.word	0x40011400
 8001bac:	2000a288 	.word	0x2000a288
 8001bb0:	2000b614 	.word	0x2000b614
 8001bb4:	2000a28c 	.word	0x2000a28c
 8001bb8:	2000a281 	.word	0x2000a281
 8001bbc:	2000a1f8 	.word	0x2000a1f8

08001bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
}
 8001bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <Error_Handler+0x8>
	...

08001bcc <MPU6050_Init>:
    int16_t z;
} GyroData;


void MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af04      	add	r7, sp, #16
 8001bd2:	6078      	str	r0, [r7, #4]
	uint8_t wakeUp = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];
    uint8_t readback = 0;  // Variable to store read back value
 8001bd8:	2300      	movs	r3, #0
 8001bda:	72fb      	strb	r3, [r7, #11]

    // wake up the MPU
    HAL_I2C_Mem_Write(hi2c, MPU6050_I2C_ADDRESS, 0x6B, 1,&wakeUp, 1, 1000);
 8001bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be0:	9302      	str	r3, [sp, #8]
 8001be2:	2301      	movs	r3, #1
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	f107 030f 	add.w	r3, r7, #15
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2301      	movs	r3, #1
 8001bee:	226b      	movs	r2, #107	; 0x6b
 8001bf0:	21d0      	movs	r1, #208	; 0xd0
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f001 fe4a 	bl	800388c <HAL_I2C_Mem_Write>

    // Configure the INT pin behavior in INT_PIN_CFG register
    data[0] = 0x37;  // INT_PIN_CFG register address
 8001bf8:	2337      	movs	r3, #55	; 0x37
 8001bfa:	733b      	strb	r3, [r7, #12]
    data[1] = 0x20;  // Set LATCH_INT_EN, and leave other bits as default
 8001bfc:	2320      	movs	r3, #32
 8001bfe:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, MPU6050_I2C_ADDRESS, data, 2, HAL_MAX_DELAY);
 8001c00:	f107 020c 	add.w	r2, r7, #12
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	21d0      	movs	r1, #208	; 0xd0
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f001 fc52 	bl	80034b8 <HAL_I2C_Master_Transmit>

    // Read back the register value
    HAL_I2C_Master_Transmit(hi2c, MPU6050_I2C_ADDRESS, &data[0], 1, HAL_MAX_DELAY);  // Send register address
 8001c14:	f107 020c 	add.w	r2, r7, #12
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	21d0      	movs	r1, #208	; 0xd0
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f001 fc48 	bl	80034b8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(hi2c, MPU6050_I2C_ADDRESS, &readback, 1, HAL_MAX_DELAY);  // Receive data from register
 8001c28:	f107 020b 	add.w	r2, r7, #11
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2301      	movs	r3, #1
 8001c34:	21d0      	movs	r1, #208	; 0xd0
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f001 fd32 	bl	80036a0 <HAL_I2C_Master_Receive>

    // Compare the read back value with the written value
    if (readback == data[1])
 8001c3c:	7b7a      	ldrb	r2, [r7, #13]
 8001c3e:	7afb      	ldrb	r3, [r7, #11]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d10b      	bne.n	8001c5c <MPU6050_Init+0x90>
    {
        // Blink blue LED to indicate success
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Assuming GPIOB, GPIO_PIN_7 is the blue LED pin
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <MPU6050_Init+0x98>)
 8001c48:	f001 fb67 	bl	800331a <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 8001c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c50:	f000 fc46 	bl	80024e0 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Turn off the LED
 8001c54:	2180      	movs	r1, #128	; 0x80
 8001c56:	4803      	ldr	r0, [pc, #12]	; (8001c64 <MPU6050_Init+0x98>)
 8001c58:	f001 fb5f 	bl	800331a <HAL_GPIO_TogglePin>
    }
}
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40020400 	.word	0x40020400

08001c68 <readGyroData>:



void readGyroData(I2C_HandleTypeDef *hi2c, int16_t* x, int16_t* y, int16_t* z) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af04      	add	r7, sp, #16
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]

    uint8_t rawData[6];


    // Read GYRO_XOUT_H and GYRO_XOUT_L
    HAL_I2C_Mem_Read(hi2c, MPU6050_I2C_ADDRESS, GYRO_XOUT_H, 1, &rawData[0], 2, HAL_MAX_DELAY);
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	9302      	str	r3, [sp, #8]
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2301      	movs	r3, #1
 8001c88:	2243      	movs	r2, #67	; 0x43
 8001c8a:	21d0      	movs	r1, #208	; 0xd0
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f001 ff11 	bl	8003ab4 <HAL_I2C_Mem_Read>
    *x = (int16_t)( (rawData[0] << 8) | rawData[1] );
 8001c92:	7c3b      	ldrb	r3, [r7, #16]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	7c7b      	ldrb	r3, [r7, #17]
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	801a      	strh	r2, [r3, #0]

    // Read GYRO_YOUT_H and GYRO_YOUT_L
    HAL_I2C_Mem_Read(hi2c, MPU6050_I2C_ADDRESS, GYRO_YOUT_H, 1, &rawData[2], 2, HAL_MAX_DELAY);
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	9302      	str	r3, [sp, #8]
 8001caa:	2302      	movs	r3, #2
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	2245      	movs	r2, #69	; 0x45
 8001cba:	21d0      	movs	r1, #208	; 0xd0
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f001 fef9 	bl	8003ab4 <HAL_I2C_Mem_Read>
    *y = (int16_t)( (rawData[2] << 8) | rawData[3] );
 8001cc2:	7cbb      	ldrb	r3, [r7, #18]
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	b21a      	sxth	r2, r3
 8001cc8:	7cfb      	ldrb	r3, [r7, #19]
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	801a      	strh	r2, [r3, #0]

    // Read GYRO_ZOUT_H and GYRO_ZOUT_L
    HAL_I2C_Mem_Read(hi2c, MPU6050_I2C_ADDRESS, GYRO_ZOUT_H, 1, &rawData[4], 2, HAL_MAX_DELAY);
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd8:	9302      	str	r3, [sp, #8]
 8001cda:	2302      	movs	r3, #2
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	2247      	movs	r2, #71	; 0x47
 8001cea:	21d0      	movs	r1, #208	; 0xd0
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f001 fee1 	bl	8003ab4 <HAL_I2C_Mem_Read>
    *z = (int16_t)( (rawData[4] << 8) | rawData[5] );
 8001cf2:	7d3b      	ldrb	r3, [r7, #20]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	7d7b      	ldrb	r3, [r7, #21]
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	b21a      	sxth	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	801a      	strh	r2, [r3, #0]

    // MAYBE ADD FILTER BLEOW TO KEEP DATA FROM JUMPING AROUND
    // MAYBE AVERAGE OF LAST 10 POINTS??

return;
 8001d04:	bf00      	nop
}
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_MspInit+0x44>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_MspInit+0x44>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_MspInit+0x44>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_MspInit+0x44>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <HAL_MspInit+0x44>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_MspInit+0x44>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b0aa      	sub	sp, #168	; 0xa8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	2284      	movs	r2, #132	; 0x84
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f005 fdd9 	bl	800792c <memset>
  if(hi2c->Instance==I2C2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <HAL_I2C_MspInit+0xb0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d13b      	bne.n	8001dfc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d88:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 f82e 	bl	8004df4 <HAL_RCCEx_PeriphCLKConfig>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d9e:	f7ff ff0f 	bl	8001bc0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001da2:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <HAL_I2C_MspInit+0xb4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <HAL_I2C_MspInit+0xb4>)
 8001da8:	f043 0320 	orr.w	r3, r3, #32
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_I2C_MspInit+0xb4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc0:	2312      	movs	r3, #18
 8001dc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dd8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480b      	ldr	r0, [pc, #44]	; (8001e0c <HAL_I2C_MspInit+0xb8>)
 8001de0:	f001 f8be 	bl	8002f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_I2C_MspInit+0xb4>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <HAL_I2C_MspInit+0xb4>)
 8001dea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dee:	6413      	str	r3, [r2, #64]	; 0x40
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_I2C_MspInit+0xb4>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dfc:	bf00      	nop
 8001dfe:	37a8      	adds	r7, #168	; 0xa8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40005800 	.word	0x40005800
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40021400 	.word	0x40021400

08001e10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a37      	ldr	r2, [pc, #220]	; (8001f0c <HAL_SPI_MspInit+0xfc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d168      	bne.n	8001f04 <HAL_SPI_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e32:	4b37      	ldr	r3, [pc, #220]	; (8001f10 <HAL_SPI_MspInit+0x100>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a36      	ldr	r2, [pc, #216]	; (8001f10 <HAL_SPI_MspInit+0x100>)
 8001e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <HAL_SPI_MspInit+0x100>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <HAL_SPI_MspInit+0x100>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a30      	ldr	r2, [pc, #192]	; (8001f10 <HAL_SPI_MspInit+0x100>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <HAL_SPI_MspInit+0x100>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e62:	23e0      	movs	r3, #224	; 0xe0
 8001e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e72:	2305      	movs	r3, #5
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4825      	ldr	r0, [pc, #148]	; (8001f14 <HAL_SPI_MspInit+0x104>)
 8001e7e:	f001 f86f 	bl	8002f60 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e82:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001e84:	4a25      	ldr	r2, [pc, #148]	; (8001f1c <HAL_SPI_MspInit+0x10c>)
 8001e86:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e88:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001e8a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e8e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001e92:	2240      	movs	r2, #64	; 0x40
 8001e94:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eaa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001eb4:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ec0:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001ed8:	480f      	ldr	r0, [pc, #60]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001eda:	f000 fc37 	bl	800274c <HAL_DMA_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_SPI_MspInit+0xd8>
    {
      Error_Handler();
 8001ee4:	f7ff fe6c 	bl	8001bc0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_SPI_MspInit+0x108>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2023      	movs	r0, #35	; 0x23
 8001efa:	f000 fbf0 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001efe:	2023      	movs	r0, #35	; 0x23
 8001f00:	f000 fc09 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f04:	bf00      	nop
 8001f06:	3728      	adds	r7, #40	; 0x28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40013000 	.word	0x40013000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	2000a198 	.word	0x2000a198
 8001f1c:	40026458 	.word	0x40026458

08001f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b0aa      	sub	sp, #168	; 0xa8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	2284      	movs	r2, #132	; 0x84
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f005 fcf3 	bl	800792c <memset>
  if(huart->Instance==USART6)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a26      	ldr	r2, [pc, #152]	; (8001fe4 <HAL_UART_MspInit+0xc4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d144      	bne.n	8001fda <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001f50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f54:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001f56:	2300      	movs	r3, #0
 8001f58:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f5a:	f107 0310 	add.w	r3, r7, #16
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f002 ff48 	bl	8004df4 <HAL_RCCEx_PeriphCLKConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f6a:	f7ff fe29 	bl	8001bc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_UART_MspInit+0xc8>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	4a1d      	ldr	r2, [pc, #116]	; (8001fe8 <HAL_UART_MspInit+0xc8>)
 8001f74:	f043 0320 	orr.w	r3, r3, #32
 8001f78:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_UART_MspInit+0xc8>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_UART_MspInit+0xc8>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_UART_MspInit+0xc8>)
 8001f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_UART_MspInit+0xc8>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001f9e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001fa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fbe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4809      	ldr	r0, [pc, #36]	; (8001fec <HAL_UART_MspInit+0xcc>)
 8001fc6:	f000 ffcb 	bl	8002f60 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	2047      	movs	r0, #71	; 0x47
 8001fd0:	f000 fb85 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001fd4:	2047      	movs	r0, #71	; 0x47
 8001fd6:	f000 fb9e 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001fda:	bf00      	nop
 8001fdc:	37a8      	adds	r7, #168	; 0xa8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40011400 	.word	0x40011400
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40021800 	.word	0x40021800

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002044:	f000 fa2c 	bl	80024a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

		key = 0;
 8002052:	4b51      	ldr	r3, [pc, #324]	; (8002198 <EXTI9_5_IRQHandler+0x14c>)
 8002054:	2200      	movs	r2, #0
 8002056:	801a      	strh	r2, [r3, #0]
		for(uint8_t c=0 ; c<4 ; c++){
 8002058:	2300      	movs	r3, #0
 800205a:	71fb      	strb	r3, [r7, #7]
 800205c:	e075      	b.n	800214a <EXTI9_5_IRQHandler+0xfe>
			for(uint8_t i=0 ; i<4 ; i++){
 800205e:	2300      	movs	r3, #0
 8002060:	71bb      	strb	r3, [r7, #6]
 8002062:	e00e      	b.n	8002082 <EXTI9_5_IRQHandler+0x36>
				HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8002064:	79bb      	ldrb	r3, [r7, #6]
 8002066:	4a4d      	ldr	r2, [pc, #308]	; (800219c <EXTI9_5_IRQHandler+0x150>)
 8002068:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800206c:	79bb      	ldrb	r3, [r7, #6]
 800206e:	4a4c      	ldr	r2, [pc, #304]	; (80021a0 <EXTI9_5_IRQHandler+0x154>)
 8002070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002074:	2201      	movs	r2, #1
 8002076:	4619      	mov	r1, r3
 8002078:	f001 f936 	bl	80032e8 <HAL_GPIO_WritePin>
			for(uint8_t i=0 ; i<4 ; i++){
 800207c:	79bb      	ldrb	r3, [r7, #6]
 800207e:	3301      	adds	r3, #1
 8002080:	71bb      	strb	r3, [r7, #6]
 8002082:	79bb      	ldrb	r3, [r7, #6]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d9ed      	bls.n	8002064 <EXTI9_5_IRQHandler+0x18>
			}
			HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	4a44      	ldr	r2, [pc, #272]	; (800219c <EXTI9_5_IRQHandler+0x150>)
 800208c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	4a43      	ldr	r2, [pc, #268]	; (80021a0 <EXTI9_5_IRQHandler+0x154>)
 8002094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002098:	2200      	movs	r2, #0
 800209a:	4619      	mov	r1, r3
 800209c:	f001 f924 	bl	80032e8 <HAL_GPIO_WritePin>
			for(uint8_t r=0 ; r<4 ; r++){
 80020a0:	2300      	movs	r3, #0
 80020a2:	717b      	strb	r3, [r7, #5]
 80020a4:	e04b      	b.n	800213e <EXTI9_5_IRQHandler+0xf2>
				if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 80020a6:	797b      	ldrb	r3, [r7, #5]
 80020a8:	4a3e      	ldr	r2, [pc, #248]	; (80021a4 <EXTI9_5_IRQHandler+0x158>)
 80020aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020ae:	797b      	ldrb	r3, [r7, #5]
 80020b0:	493d      	ldr	r1, [pc, #244]	; (80021a8 <EXTI9_5_IRQHandler+0x15c>)
 80020b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80020b6:	4619      	mov	r1, r3
 80020b8:	4610      	mov	r0, r2
 80020ba:	f001 f8fd 	bl	80032b8 <HAL_GPIO_ReadPin>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d139      	bne.n	8002138 <EXTI9_5_IRQHandler+0xec>
					if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 80020c4:	797b      	ldrb	r3, [r7, #5]
 80020c6:	4a37      	ldr	r2, [pc, #220]	; (80021a4 <EXTI9_5_IRQHandler+0x158>)
 80020c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020cc:	797b      	ldrb	r3, [r7, #5]
 80020ce:	4936      	ldr	r1, [pc, #216]	; (80021a8 <EXTI9_5_IRQHandler+0x15c>)
 80020d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f001 f8ee 	bl	80032b8 <HAL_GPIO_ReadPin>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d12a      	bne.n	8002138 <EXTI9_5_IRQHandler+0xec>
						key |= 1<<c;
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2201      	movs	r2, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <EXTI9_5_IRQHandler+0x14c>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	4313      	orrs	r3, r2
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <EXTI9_5_IRQHandler+0x14c>)
 80020fa:	801a      	strh	r2, [r3, #0]
						key |= 1<<(r+8);
 80020fc:	797b      	ldrb	r3, [r7, #5]
 80020fe:	3308      	adds	r3, #8
 8002100:	2201      	movs	r2, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	b21a      	sxth	r2, r3
 8002108:	4b23      	ldr	r3, [pc, #140]	; (8002198 <EXTI9_5_IRQHandler+0x14c>)
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b21b      	sxth	r3, r3
 800210e:	4313      	orrs	r3, r2
 8002110:	b21b      	sxth	r3, r3
 8002112:	b29a      	uxth	r2, r3
 8002114:	4b20      	ldr	r3, [pc, #128]	; (8002198 <EXTI9_5_IRQHandler+0x14c>)
 8002116:	801a      	strh	r2, [r3, #0]
						while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8002118:	bf00      	nop
 800211a:	797b      	ldrb	r3, [r7, #5]
 800211c:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <EXTI9_5_IRQHandler+0x158>)
 800211e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002122:	797b      	ldrb	r3, [r7, #5]
 8002124:	4920      	ldr	r1, [pc, #128]	; (80021a8 <EXTI9_5_IRQHandler+0x15c>)
 8002126:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800212a:	4619      	mov	r1, r3
 800212c:	4610      	mov	r0, r2
 800212e:	f001 f8c3 	bl	80032b8 <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <EXTI9_5_IRQHandler+0xce>
			for(uint8_t r=0 ; r<4 ; r++){
 8002138:	797b      	ldrb	r3, [r7, #5]
 800213a:	3301      	adds	r3, #1
 800213c:	717b      	strb	r3, [r7, #5]
 800213e:	797b      	ldrb	r3, [r7, #5]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d9b0      	bls.n	80020a6 <EXTI9_5_IRQHandler+0x5a>
		for(uint8_t c=0 ; c<4 ; c++){
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	3301      	adds	r3, #1
 8002148:	71fb      	strb	r3, [r7, #7]
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d986      	bls.n	800205e <EXTI9_5_IRQHandler+0x12>
					}
				}
			}
		}

		keyChar = KeyPadGetChar(key);
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <EXTI9_5_IRQHandler+0x14c>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f84b 	bl	80021f0 <KeyPadGetChar>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <EXTI9_5_IRQHandler+0x160>)
 8002160:	701a      	strb	r2, [r3, #0]
		key = 0;
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <EXTI9_5_IRQHandler+0x14c>)
 8002164:	2200      	movs	r2, #0
 8002166:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8002168:	2200      	movs	r2, #0
 800216a:	f64a 0102 	movw	r1, #43010	; 0xa802
 800216e:	4810      	ldr	r0, [pc, #64]	; (80021b0 <EXTI9_5_IRQHandler+0x164>)
 8002170:	f001 f8ba 	bl	80032e8 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002174:	2020      	movs	r0, #32
 8002176:	f001 f8eb 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800217a:	2040      	movs	r0, #64	; 0x40
 800217c:	f001 f8e8 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002180:	2080      	movs	r0, #128	; 0x80
 8002182:	f001 f8e5 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002186:	f44f 7080 	mov.w	r0, #256	; 0x100
 800218a:	f001 f8e1 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000a284 	.word	0x2000a284
 800219c:	20000010 	.word	0x20000010
 80021a0:	08008a30 	.word	0x08008a30
 80021a4:	20000020 	.word	0x20000020
 80021a8:	08008a38 	.word	0x08008a38
 80021ac:	2000a282 	.word	0x2000a282
 80021b0:	40020400 	.word	0x40020400

080021b4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <SPI1_IRQHandler+0x10>)
 80021ba:	f003 fd59 	bl	8005c70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2000a134 	.word	0x2000a134

080021c8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <DMA2_Stream3_IRQHandler+0x10>)
 80021ce:	f000 fc5d 	bl	8002a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	2000a198 	.word	0x2000a198

080021dc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <USART6_IRQHandler+0x10>)
 80021e2:	f004 f983 	bl	80064ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000a1f8 	.word	0x2000a1f8

080021f0 <KeyPadGetChar>:

/* USER CODE BEGIN 1 */
char KeyPadGetChar(uint16_t	key)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
	switch(key)
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	f640 0208 	movw	r2, #2056	; 0x808
 8002200:	4293      	cmp	r3, r2
 8002202:	f300 8098 	bgt.w	8002336 <KeyPadGetChar+0x146>
 8002206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800220a:	dc0d      	bgt.n	8002228 <KeyPadGetChar+0x38>
 800220c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8002210:	f300 8091 	bgt.w	8002336 <KeyPadGetChar+0x146>
 8002214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002218:	dc1e      	bgt.n	8002258 <KeyPadGetChar+0x68>
 800221a:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800221e:	dc63      	bgt.n	80022e8 <KeyPadGetChar+0xf8>
 8002220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002224:	dc48      	bgt.n	80022b8 <KeyPadGetChar+0xc8>
 8002226:	e086      	b.n	8002336 <KeyPadGetChar+0x146>
 8002228:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 800222c:	2b07      	cmp	r3, #7
 800222e:	f200 8082 	bhi.w	8002336 <KeyPadGetChar+0x146>
 8002232:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <KeyPadGetChar+0x48>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	0800231f 	.word	0x0800231f
 800223c:	08002323 	.word	0x08002323
 8002240:	08002337 	.word	0x08002337
 8002244:	08002327 	.word	0x08002327
 8002248:	08002337 	.word	0x08002337
 800224c:	08002337 	.word	0x08002337
 8002250:	08002337 	.word	0x08002337
 8002254:	0800232b 	.word	0x0800232b
 8002258:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800225c:	2b07      	cmp	r3, #7
 800225e:	d86a      	bhi.n	8002336 <KeyPadGetChar+0x146>
 8002260:	a201      	add	r2, pc, #4	; (adr r2, 8002268 <KeyPadGetChar+0x78>)
 8002262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002266:	bf00      	nop
 8002268:	080022ff 	.word	0x080022ff
 800226c:	0800230b 	.word	0x0800230b
 8002270:	08002337 	.word	0x08002337
 8002274:	08002317 	.word	0x08002317
 8002278:	08002337 	.word	0x08002337
 800227c:	08002337 	.word	0x08002337
 8002280:	08002337 	.word	0x08002337
 8002284:	08002333 	.word	0x08002333
 8002288:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800228c:	2b07      	cmp	r3, #7
 800228e:	d852      	bhi.n	8002336 <KeyPadGetChar+0x146>
 8002290:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <KeyPadGetChar+0xa8>)
 8002292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002296:	bf00      	nop
 8002298:	080022fb 	.word	0x080022fb
 800229c:	08002307 	.word	0x08002307
 80022a0:	08002337 	.word	0x08002337
 80022a4:	08002313 	.word	0x08002313
 80022a8:	08002337 	.word	0x08002337
 80022ac:	08002337 	.word	0x08002337
 80022b0:	08002337 	.word	0x08002337
 80022b4:	0800231b 	.word	0x0800231b
 80022b8:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80022bc:	2b07      	cmp	r3, #7
 80022be:	d83a      	bhi.n	8002336 <KeyPadGetChar+0x146>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <KeyPadGetChar+0xd8>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	080022f7 	.word	0x080022f7
 80022cc:	08002303 	.word	0x08002303
 80022d0:	08002337 	.word	0x08002337
 80022d4:	0800230f 	.word	0x0800230f
 80022d8:	08002337 	.word	0x08002337
 80022dc:	08002337 	.word	0x08002337
 80022e0:	08002337 	.word	0x08002337
 80022e4:	0800232f 	.word	0x0800232f
 80022e8:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80022ec:	dc23      	bgt.n	8002336 <KeyPadGetChar+0x146>
 80022ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f2:	dcc9      	bgt.n	8002288 <KeyPadGetChar+0x98>
 80022f4:	e01f      	b.n	8002336 <KeyPadGetChar+0x146>
	  {
			case 0x0101:
				return '1';
 80022f6:	2331      	movs	r3, #49	; 0x31
 80022f8:	e01d      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0201:
				return 'A';
 80022fa:	2341      	movs	r3, #65	; 0x41
 80022fc:	e01b      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0401:
				return 'D';
 80022fe:	2344      	movs	r3, #68	; 0x44
 8002300:	e019      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0102:
				return 'G';
 8002302:	2347      	movs	r3, #71	; 0x47
 8002304:	e017      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0202:
				return 'J';
 8002306:	234a      	movs	r3, #74	; 0x4a
 8002308:	e015      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0402:
				return 'M';
 800230a:	234d      	movs	r3, #77	; 0x4d
 800230c:	e013      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0104:
				return 'P';
 800230e:	2350      	movs	r3, #80	; 0x50
 8002310:	e011      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0204:
				return 'T';
 8002312:	2354      	movs	r3, #84	; 0x54
 8002314:	e00f      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0404:
				return 'W';
 8002316:	2357      	movs	r3, #87	; 0x57
 8002318:	e00d      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0208:
				return 'O';
 800231a:	234f      	movs	r3, #79	; 0x4f
 800231c:	e00b      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0801:
					return 'A';
 800231e:	2341      	movs	r3, #65	; 0x41
 8002320:	e009      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0802:
					return 'B';
 8002322:	2342      	movs	r3, #66	; 0x42
 8002324:	e007      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0804:
					return 'C';
 8002326:	2343      	movs	r3, #67	; 0x43
 8002328:	e005      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0808:
					return 'D';
 800232a:	2344      	movs	r3, #68	; 0x44
 800232c:	e003      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0108:
					return '*';
 800232e:	232a      	movs	r3, #42	; 0x2a
 8002330:	e001      	b.n	8002336 <KeyPadGetChar+0x146>

			case 0x0408:
				return '#';
 8002332:	2323      	movs	r3, #35	; 0x23
 8002334:	e7ff      	b.n	8002336 <KeyPadGetChar+0x146>
		}
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop

08002344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800234c:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <_sbrk+0x5c>)
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <_sbrk+0x60>)
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <_sbrk+0x64>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d102      	bne.n	8002366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <_sbrk+0x64>)
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <_sbrk+0x68>)
 8002364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	429a      	cmp	r2, r3
 8002372:	d207      	bcs.n	8002384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002374:	f005 fae2 	bl	800793c <__errno>
 8002378:	4603      	mov	r3, r0
 800237a:	220c      	movs	r2, #12
 800237c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	e009      	b.n	8002398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <_sbrk+0x64>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <_sbrk+0x64>)
 8002394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20050000 	.word	0x20050000
 80023a4:	00000400 	.word	0x00000400
 80023a8:	2000b61c 	.word	0x2000b61c
 80023ac:	2000b770 	.word	0x2000b770

080023b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <SystemInit+0x20>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <SystemInit+0x20>)
 80023bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800240c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d8:	480d      	ldr	r0, [pc, #52]	; (8002410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023da:	490e      	ldr	r1, [pc, #56]	; (8002414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e0:	e002      	b.n	80023e8 <LoopCopyDataInit>

080023e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e6:	3304      	adds	r3, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ec:	d3f9      	bcc.n	80023e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023f0:	4c0b      	ldr	r4, [pc, #44]	; (8002420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f4:	e001      	b.n	80023fa <LoopFillZerobss>

080023f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f8:	3204      	adds	r2, #4

080023fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023fc:	d3fb      	bcc.n	80023f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023fe:	f7ff ffd7 	bl	80023b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002402:	f005 faa1 	bl	8007948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002406:	f7ff f8d9 	bl	80015bc <main>
  bx  lr    
 800240a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800240c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002418:	08008aa4 	.word	0x08008aa4
  ldr r2, =_sbss
 800241c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002420:	2000b76c 	.word	0x2000b76c

08002424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC_IRQHandler>

08002426 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242a:	2003      	movs	r0, #3
 800242c:	f000 f94c 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002430:	2000      	movs	r0, #0
 8002432:	f000 f805 	bl	8002440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002436:	f7ff fc69 	bl	8001d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_InitTick+0x54>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_InitTick+0x58>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002456:	fbb3 f3f1 	udiv	r3, r3, r1
 800245a:	fbb2 f3f3 	udiv	r3, r2, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f967 	bl	8002732 <HAL_SYSTICK_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e00e      	b.n	800248c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d80a      	bhi.n	800248a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002474:	2200      	movs	r2, #0
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f000 f92f 	bl	80026de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002480:	4a06      	ldr	r2, [pc, #24]	; (800249c <HAL_InitTick+0x5c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000030 	.word	0x20000030
 8002498:	20000038 	.word	0x20000038
 800249c:	20000034 	.word	0x20000034

080024a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_IncTick+0x20>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_IncTick+0x24>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_IncTick+0x24>)
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000038 	.word	0x20000038
 80024c4:	2000b620 	.word	0x2000b620

080024c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return uwTick;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_GetTick+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	2000b620 	.word	0x2000b620

080024e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff ffee 	bl	80024c8 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d005      	beq.n	8002506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_Delay+0x44>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002506:	bf00      	nop
 8002508:	f7ff ffde 	bl	80024c8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f7      	bhi.n	8002508 <HAL_Delay+0x28>
  {
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000038 	.word	0x20000038

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <__NVIC_SetPriorityGrouping+0x40>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 8002552:	4313      	orrs	r3, r2
 8002554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <__NVIC_SetPriorityGrouping+0x40>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	60d3      	str	r3, [r2, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00
 800256c:	05fa0000 	.word	0x05fa0000

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4907      	ldr	r1, [pc, #28]	; (80025c4 <__NVIC_EnableIRQ+0x38>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	; (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	; (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	; 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002694:	d301      	bcc.n	800269a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <SysTick_Config+0x40>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a2:	210f      	movs	r1, #15
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	f7ff ff8e 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <SysTick_Config+0x40>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <SysTick_Config+0x40>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff29 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f0:	f7ff ff3e 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f7ff ff8e 	bl	800261c <NVIC_EncodePriority>
 8002700:	4602      	mov	r2, r0
 8002702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff5d 	bl	80025c8 <__NVIC_SetPriority>
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff31 	bl	800258c <__NVIC_EnableIRQ>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffa2 	bl	8002684 <SysTick_Config>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff feb6 	bl	80024c8 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e099      	b.n	800289c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002788:	e00f      	b.n	80027aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800278a:	f7ff fe9d 	bl	80024c8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b05      	cmp	r3, #5
 8002796:	d908      	bls.n	80027aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2203      	movs	r2, #3
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e078      	b.n	800289c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e8      	bne.n	800278a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4b38      	ldr	r3, [pc, #224]	; (80028a4 <HAL_DMA_Init+0x158>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	2b04      	cmp	r3, #4
 8002802:	d107      	bne.n	8002814 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	4313      	orrs	r3, r2
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4313      	orrs	r3, r2
 8002812:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f023 0307 	bic.w	r3, r3, #7
 800282a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	2b04      	cmp	r3, #4
 800283c:	d117      	bne.n	800286e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00e      	beq.n	800286e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fb09 	bl	8002e68 <DMA_CheckFifoParam>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2240      	movs	r2, #64	; 0x40
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800286a:	2301      	movs	r3, #1
 800286c:	e016      	b.n	800289c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fac0 	bl	8002dfc <DMA_CalcBaseAndBitshift>
 800287c:	4603      	mov	r3, r0
 800287e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	223f      	movs	r2, #63	; 0x3f
 8002886:	409a      	lsls	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	f010803f 	.word	0xf010803f

080028a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_DMA_Start_IT+0x26>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e048      	b.n	8002960 <HAL_DMA_Start_IT+0xb8>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d137      	bne.n	8002952 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fa52 	bl	8002da0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	223f      	movs	r2, #63	; 0x3f
 8002902:	409a      	lsls	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0216 	orr.w	r2, r2, #22
 8002916:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002926:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0208 	orr.w	r2, r2, #8
 800293e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e005      	b.n	800295e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800295a:	2302      	movs	r3, #2
 800295c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800295e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002976:	f7ff fda7 	bl	80024c8 <HAL_GetTick>
 800297a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d008      	beq.n	800299a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2280      	movs	r2, #128	; 0x80
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e052      	b.n	8002a40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0216 	bic.w	r2, r2, #22
 80029a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d103      	bne.n	80029ca <HAL_DMA_Abort+0x62>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0208 	bic.w	r2, r2, #8
 80029d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ea:	e013      	b.n	8002a14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ec:	f7ff fd6c 	bl	80024c8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b05      	cmp	r3, #5
 80029f8:	d90c      	bls.n	8002a14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2203      	movs	r2, #3
 8002a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e015      	b.n	8002a40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1e4      	bne.n	80029ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	223f      	movs	r2, #63	; 0x3f
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d004      	beq.n	8002a66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00c      	b.n	8002a80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2205      	movs	r2, #5
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002a98:	4b8e      	ldr	r3, [pc, #568]	; (8002cd4 <HAL_DMA_IRQHandler+0x248>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a8e      	ldr	r2, [pc, #568]	; (8002cd8 <HAL_DMA_IRQHandler+0x24c>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	0a9b      	lsrs	r3, r3, #10
 8002aa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01a      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d013      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0204 	bic.w	r2, r2, #4
 8002ade:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	2201      	movs	r2, #1
 8002afe:	409a      	lsls	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d012      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b26:	f043 0202 	orr.w	r2, r3, #2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b32:	2204      	movs	r2, #4
 8002b34:	409a      	lsls	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d012      	beq.n	8002b64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2204      	movs	r2, #4
 8002b52:	409a      	lsls	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	f043 0204 	orr.w	r2, r3, #4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	2210      	movs	r2, #16
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d043      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d03c      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	2210      	movs	r2, #16
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d018      	beq.n	8002bce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d108      	bne.n	8002bbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d024      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
 8002bba:	e01f      	b.n	8002bfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01b      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
 8002bcc:	e016      	b.n	8002bfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0208 	bic.w	r2, r2, #8
 8002bea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	2220      	movs	r2, #32
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 808f 	beq.w	8002d2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8087 	beq.w	8002d2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	2220      	movs	r2, #32
 8002c24:	409a      	lsls	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b05      	cmp	r3, #5
 8002c34:	d136      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0216 	bic.w	r2, r2, #22
 8002c44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <HAL_DMA_IRQHandler+0x1da>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0208 	bic.w	r2, r2, #8
 8002c74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	223f      	movs	r2, #63	; 0x3f
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d07e      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
        }
        return;
 8002ca2:	e079      	b.n	8002d98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01d      	beq.n	8002cee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10d      	bne.n	8002cdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d031      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	4798      	blx	r3
 8002cd0:	e02c      	b.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
 8002cd2:	bf00      	nop
 8002cd4:	20000030 	.word	0x20000030
 8002cd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d023      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
 8002cec:	e01e      	b.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10f      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0210 	bic.w	r2, r2, #16
 8002d0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d032      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d022      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2205      	movs	r2, #5
 8002d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d307      	bcc.n	8002d74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f2      	bne.n	8002d58 <HAL_DMA_IRQHandler+0x2cc>
 8002d72:	e000      	b.n	8002d76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4798      	blx	r3
 8002d96:	e000      	b.n	8002d9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d98:	bf00      	nop
    }
  }
}
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d108      	bne.n	8002de0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dde:	e007      	b.n	8002df0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	60da      	str	r2, [r3, #12]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	3b10      	subs	r3, #16
 8002e0c:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <DMA_CalcBaseAndBitshift+0x60>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <DMA_CalcBaseAndBitshift+0x64>)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d908      	bls.n	8002e3c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <DMA_CalcBaseAndBitshift+0x68>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	1d1a      	adds	r2, r3, #4
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	659a      	str	r2, [r3, #88]	; 0x58
 8002e3a:	e006      	b.n	8002e4a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <DMA_CalcBaseAndBitshift+0x68>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	aaaaaaab 	.word	0xaaaaaaab
 8002e60:	08008a58 	.word	0x08008a58
 8002e64:	fffffc00 	.word	0xfffffc00

08002e68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d11f      	bne.n	8002ec2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d856      	bhi.n	8002f36 <DMA_CheckFifoParam+0xce>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <DMA_CheckFifoParam+0x28>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ea1 	.word	0x08002ea1
 8002e94:	08002eb3 	.word	0x08002eb3
 8002e98:	08002ea1 	.word	0x08002ea1
 8002e9c:	08002f37 	.word	0x08002f37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d046      	beq.n	8002f3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb0:	e043      	b.n	8002f3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eba:	d140      	bne.n	8002f3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec0:	e03d      	b.n	8002f3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eca:	d121      	bne.n	8002f10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d837      	bhi.n	8002f42 <DMA_CheckFifoParam+0xda>
 8002ed2:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <DMA_CheckFifoParam+0x70>)
 8002ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed8:	08002ee9 	.word	0x08002ee9
 8002edc:	08002eef 	.word	0x08002eef
 8002ee0:	08002ee9 	.word	0x08002ee9
 8002ee4:	08002f01 	.word	0x08002f01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      break;
 8002eec:	e030      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d025      	beq.n	8002f46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efe:	e022      	b.n	8002f46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f08:	d11f      	bne.n	8002f4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f0e:	e01c      	b.n	8002f4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d903      	bls.n	8002f1e <DMA_CheckFifoParam+0xb6>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d003      	beq.n	8002f24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f1c:	e018      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
      break;
 8002f22:	e015      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00e      	beq.n	8002f4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      break;
 8002f34:	e00b      	b.n	8002f4e <DMA_CheckFifoParam+0xe6>
      break;
 8002f36:	bf00      	nop
 8002f38:	e00a      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e008      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e006      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f42:	bf00      	nop
 8002f44:	e004      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f46:	bf00      	nop
 8002f48:	e002      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f4a:	bf00      	nop
 8002f4c:	e000      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop

08002f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	e175      	b.n	800326c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f80:	2201      	movs	r2, #1
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	f040 8164 	bne.w	8003266 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d005      	beq.n	8002fb6 <HAL_GPIO_Init+0x56>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d130      	bne.n	8003018 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fec:	2201      	movs	r2, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 0201 	and.w	r2, r3, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b03      	cmp	r3, #3
 8003022:	d017      	beq.n	8003054 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	2203      	movs	r2, #3
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d123      	bne.n	80030a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	08da      	lsrs	r2, r3, #3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3208      	adds	r2, #8
 8003068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	220f      	movs	r2, #15
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	08da      	lsrs	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3208      	adds	r2, #8
 80030a2:	69b9      	ldr	r1, [r7, #24]
 80030a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2203      	movs	r2, #3
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0203 	and.w	r2, r3, #3
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80be 	beq.w	8003266 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ea:	4b66      	ldr	r3, [pc, #408]	; (8003284 <HAL_GPIO_Init+0x324>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	4a65      	ldr	r2, [pc, #404]	; (8003284 <HAL_GPIO_Init+0x324>)
 80030f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f4:	6453      	str	r3, [r2, #68]	; 0x44
 80030f6:	4b63      	ldr	r3, [pc, #396]	; (8003284 <HAL_GPIO_Init+0x324>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003102:	4a61      	ldr	r2, [pc, #388]	; (8003288 <HAL_GPIO_Init+0x328>)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	3302      	adds	r3, #2
 800310a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	220f      	movs	r2, #15
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a58      	ldr	r2, [pc, #352]	; (800328c <HAL_GPIO_Init+0x32c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d037      	beq.n	800319e <HAL_GPIO_Init+0x23e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a57      	ldr	r2, [pc, #348]	; (8003290 <HAL_GPIO_Init+0x330>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d031      	beq.n	800319a <HAL_GPIO_Init+0x23a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a56      	ldr	r2, [pc, #344]	; (8003294 <HAL_GPIO_Init+0x334>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02b      	beq.n	8003196 <HAL_GPIO_Init+0x236>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a55      	ldr	r2, [pc, #340]	; (8003298 <HAL_GPIO_Init+0x338>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d025      	beq.n	8003192 <HAL_GPIO_Init+0x232>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a54      	ldr	r2, [pc, #336]	; (800329c <HAL_GPIO_Init+0x33c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01f      	beq.n	800318e <HAL_GPIO_Init+0x22e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a53      	ldr	r2, [pc, #332]	; (80032a0 <HAL_GPIO_Init+0x340>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d019      	beq.n	800318a <HAL_GPIO_Init+0x22a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a52      	ldr	r2, [pc, #328]	; (80032a4 <HAL_GPIO_Init+0x344>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_GPIO_Init+0x226>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a51      	ldr	r2, [pc, #324]	; (80032a8 <HAL_GPIO_Init+0x348>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00d      	beq.n	8003182 <HAL_GPIO_Init+0x222>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a50      	ldr	r2, [pc, #320]	; (80032ac <HAL_GPIO_Init+0x34c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <HAL_GPIO_Init+0x21e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a4f      	ldr	r2, [pc, #316]	; (80032b0 <HAL_GPIO_Init+0x350>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_GPIO_Init+0x21a>
 8003176:	2309      	movs	r3, #9
 8003178:	e012      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 800317a:	230a      	movs	r3, #10
 800317c:	e010      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 800317e:	2308      	movs	r3, #8
 8003180:	e00e      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 8003182:	2307      	movs	r3, #7
 8003184:	e00c      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 8003186:	2306      	movs	r3, #6
 8003188:	e00a      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 800318a:	2305      	movs	r3, #5
 800318c:	e008      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 800318e:	2304      	movs	r3, #4
 8003190:	e006      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 8003192:	2303      	movs	r3, #3
 8003194:	e004      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 8003196:	2302      	movs	r3, #2
 8003198:	e002      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 800319e:	2300      	movs	r3, #0
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	f002 0203 	and.w	r2, r2, #3
 80031a6:	0092      	lsls	r2, r2, #2
 80031a8:	4093      	lsls	r3, r2
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031b0:	4935      	ldr	r1, [pc, #212]	; (8003288 <HAL_GPIO_Init+0x328>)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	089b      	lsrs	r3, r3, #2
 80031b6:	3302      	adds	r3, #2
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031be:	4b3d      	ldr	r3, [pc, #244]	; (80032b4 <HAL_GPIO_Init+0x354>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031e2:	4a34      	ldr	r2, [pc, #208]	; (80032b4 <HAL_GPIO_Init+0x354>)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031e8:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <HAL_GPIO_Init+0x354>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800320c:	4a29      	ldr	r2, [pc, #164]	; (80032b4 <HAL_GPIO_Init+0x354>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003212:	4b28      	ldr	r3, [pc, #160]	; (80032b4 <HAL_GPIO_Init+0x354>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003236:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <HAL_GPIO_Init+0x354>)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <HAL_GPIO_Init+0x354>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003260:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <HAL_GPIO_Init+0x354>)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3301      	adds	r3, #1
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	2b0f      	cmp	r3, #15
 8003270:	f67f ae86 	bls.w	8002f80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3724      	adds	r7, #36	; 0x24
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	40013800 	.word	0x40013800
 800328c:	40020000 	.word	0x40020000
 8003290:	40020400 	.word	0x40020400
 8003294:	40020800 	.word	0x40020800
 8003298:	40020c00 	.word	0x40020c00
 800329c:	40021000 	.word	0x40021000
 80032a0:	40021400 	.word	0x40021400
 80032a4:	40021800 	.word	0x40021800
 80032a8:	40021c00 	.word	0x40021c00
 80032ac:	40022000 	.word	0x40022000
 80032b0:	40022400 	.word	0x40022400
 80032b4:	40013c00 	.word	0x40013c00

080032b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	887b      	ldrh	r3, [r7, #2]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	e001      	b.n	80032da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032d6:	2300      	movs	r3, #0
 80032d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032da:	7bfb      	ldrb	r3, [r7, #15]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	807b      	strh	r3, [r7, #2]
 80032f4:	4613      	mov	r3, r2
 80032f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f8:	787b      	ldrb	r3, [r7, #1]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032fe:	887a      	ldrh	r2, [r7, #2]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003304:	e003      	b.n	800330e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003306:	887b      	ldrh	r3, [r7, #2]
 8003308:	041a      	lsls	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	619a      	str	r2, [r3, #24]
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	460b      	mov	r3, r1
 8003324:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800332c:	887a      	ldrh	r2, [r7, #2]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4013      	ands	r3, r2
 8003332:	041a      	lsls	r2, r3, #16
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	43d9      	mvns	r1, r3
 8003338:	887b      	ldrh	r3, [r7, #2]
 800333a:	400b      	ands	r3, r1
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	619a      	str	r2, [r3, #24]
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800335a:	4b08      	ldr	r3, [pc, #32]	; (800337c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d006      	beq.n	8003374 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003366:	4a05      	ldr	r2, [pc, #20]	; (800337c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f806 	bl	8003380 <HAL_GPIO_EXTI_Callback>
  }
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40013c00 	.word	0x40013c00

08003380 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e07f      	b.n	80034aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fe fcc8 	bl	8001d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d107      	bne.n	8003412 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	e006      	b.n	8003420 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800341e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d104      	bne.n	8003432 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003430:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <HAL_I2C_Init+0x11c>)
 800343e:	430b      	orrs	r3, r1
 8003440:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003450:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69d9      	ldr	r1, [r3, #28]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1a      	ldr	r2, [r3, #32]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	02008000 	.word	0x02008000

080034b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	461a      	mov	r2, r3
 80034c4:	460b      	mov	r3, r1
 80034c6:	817b      	strh	r3, [r7, #10]
 80034c8:	4613      	mov	r3, r2
 80034ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	f040 80da 	bne.w	800368e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_I2C_Master_Transmit+0x30>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e0d3      	b.n	8003690 <HAL_I2C_Master_Transmit+0x1d8>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034f0:	f7fe ffea 	bl	80024c8 <HAL_GetTick>
 80034f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2319      	movs	r3, #25
 80034fc:	2201      	movs	r2, #1
 80034fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fcbc 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e0be      	b.n	8003690 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2221      	movs	r2, #33	; 0x21
 8003516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2210      	movs	r2, #16
 800351e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	893a      	ldrh	r2, [r7, #8]
 8003532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	2bff      	cmp	r3, #255	; 0xff
 8003542:	d90e      	bls.n	8003562 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	22ff      	movs	r2, #255	; 0xff
 8003548:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	b2da      	uxtb	r2, r3
 8003550:	8979      	ldrh	r1, [r7, #10]
 8003552:	4b51      	ldr	r3, [pc, #324]	; (8003698 <HAL_I2C_Master_Transmit+0x1e0>)
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fea6 	bl	80042ac <I2C_TransferConfig>
 8003560:	e06c      	b.n	800363c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	b2da      	uxtb	r2, r3
 8003572:	8979      	ldrh	r1, [r7, #10]
 8003574:	4b48      	ldr	r3, [pc, #288]	; (8003698 <HAL_I2C_Master_Transmit+0x1e0>)
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fe95 	bl	80042ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003582:	e05b      	b.n	800363c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	6a39      	ldr	r1, [r7, #32]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fcb9 	bl	8003f00 <I2C_WaitOnTXISFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e07b      	b.n	8003690 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d034      	beq.n	800363c <HAL_I2C_Master_Transmit+0x184>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d130      	bne.n	800363c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	2200      	movs	r2, #0
 80035e2:	2180      	movs	r1, #128	; 0x80
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fc4b 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e04d      	b.n	8003690 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2bff      	cmp	r3, #255	; 0xff
 80035fc:	d90e      	bls.n	800361c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	22ff      	movs	r2, #255	; 0xff
 8003602:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003608:	b2da      	uxtb	r2, r3
 800360a:	8979      	ldrh	r1, [r7, #10]
 800360c:	2300      	movs	r3, #0
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fe49 	bl	80042ac <I2C_TransferConfig>
 800361a:	e00f      	b.n	800363c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362a:	b2da      	uxtb	r2, r3
 800362c:	8979      	ldrh	r1, [r7, #10]
 800362e:	2300      	movs	r3, #0
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fe38 	bl	80042ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d19e      	bne.n	8003584 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	6a39      	ldr	r1, [r7, #32]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fc98 	bl	8003f80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e01a      	b.n	8003690 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2220      	movs	r2, #32
 8003660:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <HAL_I2C_Master_Transmit+0x1e4>)
 800366e:	400b      	ands	r3, r1
 8003670:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800368e:	2302      	movs	r3, #2
  }
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	80002000 	.word	0x80002000
 800369c:	fe00e800 	.word	0xfe00e800

080036a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	461a      	mov	r2, r3
 80036ac:	460b      	mov	r3, r1
 80036ae:	817b      	strh	r3, [r7, #10]
 80036b0:	4613      	mov	r3, r2
 80036b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b20      	cmp	r3, #32
 80036be:	f040 80db 	bne.w	8003878 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_I2C_Master_Receive+0x30>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e0d4      	b.n	800387a <HAL_I2C_Master_Receive+0x1da>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036d8:	f7fe fef6 	bl	80024c8 <HAL_GetTick>
 80036dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	2319      	movs	r3, #25
 80036e4:	2201      	movs	r2, #1
 80036e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fbc8 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e0bf      	b.n	800387a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2222      	movs	r2, #34	; 0x22
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2210      	movs	r2, #16
 8003706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	893a      	ldrh	r2, [r7, #8]
 800371a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	2bff      	cmp	r3, #255	; 0xff
 800372a:	d90e      	bls.n	800374a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	22ff      	movs	r2, #255	; 0xff
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003736:	b2da      	uxtb	r2, r3
 8003738:	8979      	ldrh	r1, [r7, #10]
 800373a:	4b52      	ldr	r3, [pc, #328]	; (8003884 <HAL_I2C_Master_Receive+0x1e4>)
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fdb2 	bl	80042ac <I2C_TransferConfig>
 8003748:	e06d      	b.n	8003826 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003758:	b2da      	uxtb	r2, r3
 800375a:	8979      	ldrh	r1, [r7, #10]
 800375c:	4b49      	ldr	r3, [pc, #292]	; (8003884 <HAL_I2C_Master_Receive+0x1e4>)
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fda1 	bl	80042ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800376a:	e05c      	b.n	8003826 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	6a39      	ldr	r1, [r7, #32]
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fc41 	bl	8003ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e07c      	b.n	800387a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d034      	beq.n	8003826 <HAL_I2C_Master_Receive+0x186>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d130      	bne.n	8003826 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	2200      	movs	r2, #0
 80037cc:	2180      	movs	r1, #128	; 0x80
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fb56 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e04d      	b.n	800387a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2bff      	cmp	r3, #255	; 0xff
 80037e6:	d90e      	bls.n	8003806 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	22ff      	movs	r2, #255	; 0xff
 80037ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	8979      	ldrh	r1, [r7, #10]
 80037f6:	2300      	movs	r3, #0
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fd54 	bl	80042ac <I2C_TransferConfig>
 8003804:	e00f      	b.n	8003826 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003814:	b2da      	uxtb	r2, r3
 8003816:	8979      	ldrh	r1, [r7, #10]
 8003818:	2300      	movs	r3, #0
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fd43 	bl	80042ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d19d      	bne.n	800376c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	6a39      	ldr	r1, [r7, #32]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fba3 	bl	8003f80 <I2C_WaitOnSTOPFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e01a      	b.n	800387a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2220      	movs	r2, #32
 800384a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <HAL_I2C_Master_Receive+0x1e8>)
 8003858:	400b      	ands	r3, r1
 800385a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	80002400 	.word	0x80002400
 8003888:	fe00e800 	.word	0xfe00e800

0800388c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	4608      	mov	r0, r1
 8003896:	4611      	mov	r1, r2
 8003898:	461a      	mov	r2, r3
 800389a:	4603      	mov	r3, r0
 800389c:	817b      	strh	r3, [r7, #10]
 800389e:	460b      	mov	r3, r1
 80038a0:	813b      	strh	r3, [r7, #8]
 80038a2:	4613      	mov	r3, r2
 80038a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	f040 80f9 	bne.w	8003aa6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <HAL_I2C_Mem_Write+0x34>
 80038ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0ed      	b.n	8003aa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_I2C_Mem_Write+0x4e>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e0e6      	b.n	8003aa8 <HAL_I2C_Mem_Write+0x21c>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038e2:	f7fe fdf1 	bl	80024c8 <HAL_GetTick>
 80038e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2319      	movs	r3, #25
 80038ee:	2201      	movs	r2, #1
 80038f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fac3 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0d1      	b.n	8003aa8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2221      	movs	r2, #33	; 0x21
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2240      	movs	r2, #64	; 0x40
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a3a      	ldr	r2, [r7, #32]
 800391e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800392c:	88f8      	ldrh	r0, [r7, #6]
 800392e:	893a      	ldrh	r2, [r7, #8]
 8003930:	8979      	ldrh	r1, [r7, #10]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	9301      	str	r3, [sp, #4]
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	4603      	mov	r3, r0
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f9d3 	bl	8003ce8 <I2C_RequestMemoryWrite>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0a9      	b.n	8003aa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	2bff      	cmp	r3, #255	; 0xff
 800395c:	d90e      	bls.n	800397c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	22ff      	movs	r2, #255	; 0xff
 8003962:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003968:	b2da      	uxtb	r2, r3
 800396a:	8979      	ldrh	r1, [r7, #10]
 800396c:	2300      	movs	r3, #0
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fc99 	bl	80042ac <I2C_TransferConfig>
 800397a:	e00f      	b.n	800399c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398a:	b2da      	uxtb	r2, r3
 800398c:	8979      	ldrh	r1, [r7, #10]
 800398e:	2300      	movs	r3, #0
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fc88 	bl	80042ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 faad 	bl	8003f00 <I2C_WaitOnTXISFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e07b      	b.n	8003aa8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d034      	beq.n	8003a54 <HAL_I2C_Mem_Write+0x1c8>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d130      	bne.n	8003a54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	2200      	movs	r2, #0
 80039fa:	2180      	movs	r1, #128	; 0x80
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fa3f 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e04d      	b.n	8003aa8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2bff      	cmp	r3, #255	; 0xff
 8003a14:	d90e      	bls.n	8003a34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	22ff      	movs	r2, #255	; 0xff
 8003a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	8979      	ldrh	r1, [r7, #10]
 8003a24:	2300      	movs	r3, #0
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 fc3d 	bl	80042ac <I2C_TransferConfig>
 8003a32:	e00f      	b.n	8003a54 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	8979      	ldrh	r1, [r7, #10]
 8003a46:	2300      	movs	r3, #0
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fc2c 	bl	80042ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d19e      	bne.n	800399c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fa8c 	bl	8003f80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e01a      	b.n	8003aa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2220      	movs	r2, #32
 8003a78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <HAL_I2C_Mem_Write+0x224>)
 8003a86:	400b      	ands	r3, r1
 8003a88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e000      	b.n	8003aa8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003aa6:	2302      	movs	r3, #2
  }
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	fe00e800 	.word	0xfe00e800

08003ab4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	4608      	mov	r0, r1
 8003abe:	4611      	mov	r1, r2
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	817b      	strh	r3, [r7, #10]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	813b      	strh	r3, [r7, #8]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	f040 80fd 	bne.w	8003cd6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_I2C_Mem_Read+0x34>
 8003ae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d105      	bne.n	8003af4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0f1      	b.n	8003cd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_I2C_Mem_Read+0x4e>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e0ea      	b.n	8003cd8 <HAL_I2C_Mem_Read+0x224>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b0a:	f7fe fcdd 	bl	80024c8 <HAL_GetTick>
 8003b0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2319      	movs	r3, #25
 8003b16:	2201      	movs	r2, #1
 8003b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f9af 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0d5      	b.n	8003cd8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2222      	movs	r2, #34	; 0x22
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2240      	movs	r2, #64	; 0x40
 8003b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a3a      	ldr	r2, [r7, #32]
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b54:	88f8      	ldrh	r0, [r7, #6]
 8003b56:	893a      	ldrh	r2, [r7, #8]
 8003b58:	8979      	ldrh	r1, [r7, #10]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	4603      	mov	r3, r0
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f913 	bl	8003d90 <I2C_RequestMemoryRead>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0ad      	b.n	8003cd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2bff      	cmp	r3, #255	; 0xff
 8003b84:	d90e      	bls.n	8003ba4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	22ff      	movs	r2, #255	; 0xff
 8003b8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	8979      	ldrh	r1, [r7, #10]
 8003b94:	4b52      	ldr	r3, [pc, #328]	; (8003ce0 <HAL_I2C_Mem_Read+0x22c>)
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fb85 	bl	80042ac <I2C_TransferConfig>
 8003ba2:	e00f      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	8979      	ldrh	r1, [r7, #10]
 8003bb6:	4b4a      	ldr	r3, [pc, #296]	; (8003ce0 <HAL_I2C_Mem_Read+0x22c>)
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fb74 	bl	80042ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2104      	movs	r1, #4
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f956 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e07c      	b.n	8003cd8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d034      	beq.n	8003c84 <HAL_I2C_Mem_Read+0x1d0>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d130      	bne.n	8003c84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2180      	movs	r1, #128	; 0x80
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f927 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e04d      	b.n	8003cd8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2bff      	cmp	r3, #255	; 0xff
 8003c44:	d90e      	bls.n	8003c64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	22ff      	movs	r2, #255	; 0xff
 8003c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	8979      	ldrh	r1, [r7, #10]
 8003c54:	2300      	movs	r3, #0
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fb25 	bl	80042ac <I2C_TransferConfig>
 8003c62:	e00f      	b.n	8003c84 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	8979      	ldrh	r1, [r7, #10]
 8003c76:	2300      	movs	r3, #0
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fb14 	bl	80042ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d19a      	bne.n	8003bc4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f974 	bl	8003f80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e01a      	b.n	8003cd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_I2C_Mem_Read+0x230>)
 8003cb6:	400b      	ands	r3, r1
 8003cb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e000      	b.n	8003cd8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003cd6:	2302      	movs	r3, #2
  }
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	80002400 	.word	0x80002400
 8003ce4:	fe00e800 	.word	0xfe00e800

08003ce8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	817b      	strh	r3, [r7, #10]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	813b      	strh	r3, [r7, #8]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	8979      	ldrh	r1, [r7, #10]
 8003d08:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <I2C_RequestMemoryWrite+0xa4>)
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 facb 	bl	80042ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	69b9      	ldr	r1, [r7, #24]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f8f0 	bl	8003f00 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e02c      	b.n	8003d84 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d105      	bne.n	8003d3c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d30:	893b      	ldrh	r3, [r7, #8]
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	629a      	str	r2, [r3, #40]	; 0x28
 8003d3a:	e015      	b.n	8003d68 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d3c:	893b      	ldrh	r3, [r7, #8]
 8003d3e:	0a1b      	lsrs	r3, r3, #8
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	69b9      	ldr	r1, [r7, #24]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f8d6 	bl	8003f00 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e012      	b.n	8003d84 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d5e:	893b      	ldrh	r3, [r7, #8]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2180      	movs	r1, #128	; 0x80
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f884 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	80002000 	.word	0x80002000

08003d90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	4608      	mov	r0, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	817b      	strh	r3, [r7, #10]
 8003da2:	460b      	mov	r3, r1
 8003da4:	813b      	strh	r3, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	8979      	ldrh	r1, [r7, #10]
 8003db0:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <I2C_RequestMemoryRead+0xa4>)
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	2300      	movs	r3, #0
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fa78 	bl	80042ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	69b9      	ldr	r1, [r7, #24]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f89d 	bl	8003f00 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e02c      	b.n	8003e2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d105      	bne.n	8003de2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd6:	893b      	ldrh	r3, [r7, #8]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28
 8003de0:	e015      	b.n	8003e0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003de2:	893b      	ldrh	r3, [r7, #8]
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	69b9      	ldr	r1, [r7, #24]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f883 	bl	8003f00 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e012      	b.n	8003e2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e04:	893b      	ldrh	r3, [r7, #8]
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2200      	movs	r2, #0
 8003e16:	2140      	movs	r1, #64	; 0x40
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f831 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	80002000 	.word	0x80002000

08003e38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d103      	bne.n	8003e56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2200      	movs	r2, #0
 8003e54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d007      	beq.n	8003e74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	619a      	str	r2, [r3, #24]
  }
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e90:	e022      	b.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e98:	d01e      	beq.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9a:	f7fe fb15 	bl	80024c8 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d302      	bcc.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d113      	bne.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	f043 0220 	orr.w	r2, r3, #32
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e00f      	b.n	8003ef8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d0cd      	beq.n	8003e92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f0c:	e02c      	b.n	8003f68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f8ea 	bl	80040ec <I2C_IsErrorOccurred>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e02a      	b.n	8003f78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d01e      	beq.n	8003f68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2a:	f7fe facd 	bl	80024c8 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d113      	bne.n	8003f68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f44:	f043 0220 	orr.w	r2, r3, #32
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e007      	b.n	8003f78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d1cb      	bne.n	8003f0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f8c:	e028      	b.n	8003fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f8aa 	bl	80040ec <I2C_IsErrorOccurred>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e026      	b.n	8003ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa2:	f7fe fa91 	bl	80024c8 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d302      	bcc.n	8003fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d113      	bne.n	8003fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbc:	f043 0220 	orr.w	r2, r3, #32
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e007      	b.n	8003ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d1cf      	bne.n	8003f8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004004:	e064      	b.n	80040d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f86e 	bl	80040ec <I2C_IsErrorOccurred>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e062      	b.n	80040e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f003 0320 	and.w	r3, r3, #32
 8004024:	2b20      	cmp	r3, #32
 8004026:	d138      	bne.n	800409a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b04      	cmp	r3, #4
 8004034:	d105      	bne.n	8004042 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e04e      	b.n	80040e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b10      	cmp	r3, #16
 800404e:	d107      	bne.n	8004060 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2210      	movs	r2, #16
 8004056:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2204      	movs	r2, #4
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
 800405e:	e002      	b.n	8004066 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2220      	movs	r2, #32
 800406c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6859      	ldr	r1, [r3, #4]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b1b      	ldr	r3, [pc, #108]	; (80040e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800407a:	400b      	ands	r3, r1
 800407c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e022      	b.n	80040e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409a:	f7fe fa15 	bl	80024c8 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d302      	bcc.n	80040b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10f      	bne.n	80040d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	f043 0220 	orr.w	r2, r3, #32
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e007      	b.n	80040e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d193      	bne.n	8004006 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	fe00e800 	.word	0xfe00e800

080040ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b00      	cmp	r3, #0
 8004116:	d068      	beq.n	80041ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2210      	movs	r2, #16
 800411e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004120:	e049      	b.n	80041b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d045      	beq.n	80041b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800412a:	f7fe f9cd 	bl	80024c8 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	429a      	cmp	r2, r3
 8004138:	d302      	bcc.n	8004140 <I2C_IsErrorOccurred+0x54>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d13a      	bne.n	80041b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004152:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800415e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004162:	d121      	bne.n	80041a8 <I2C_IsErrorOccurred+0xbc>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800416a:	d01d      	beq.n	80041a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	2b20      	cmp	r3, #32
 8004170:	d01a      	beq.n	80041a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004180:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004182:	f7fe f9a1 	bl	80024c8 <HAL_GetTick>
 8004186:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004188:	e00e      	b.n	80041a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800418a:	f7fe f99d 	bl	80024c8 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b19      	cmp	r3, #25
 8004196:	d907      	bls.n	80041a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	f043 0320 	orr.w	r3, r3, #32
 800419e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80041a6:	e006      	b.n	80041b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	d1e9      	bne.n	800418a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d003      	beq.n	80041cc <I2C_IsErrorOccurred+0xe0>
 80041c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0aa      	beq.n	8004122 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80041cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d103      	bne.n	80041dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2220      	movs	r2, #32
 80041da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	f043 0304 	orr.w	r3, r3, #4
 80041e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800420c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	f043 0308 	orr.w	r3, r3, #8
 8004224:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800422e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00b      	beq.n	8004258 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	f043 0302 	orr.w	r3, r3, #2
 8004246:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004250:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800425c:	2b00      	cmp	r3, #0
 800425e:	d01c      	beq.n	800429a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff fde9 	bl	8003e38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6859      	ldr	r1, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <I2C_IsErrorOccurred+0x1bc>)
 8004272:	400b      	ands	r3, r1
 8004274:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800429a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3728      	adds	r7, #40	; 0x28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	fe00e800 	.word	0xfe00e800

080042ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	460b      	mov	r3, r1
 80042b8:	817b      	strh	r3, [r7, #10]
 80042ba:	4613      	mov	r3, r2
 80042bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042be:	897b      	ldrh	r3, [r7, #10]
 80042c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042c4:	7a7b      	ldrb	r3, [r7, #9]
 80042c6:	041b      	lsls	r3, r3, #16
 80042c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	0d5b      	lsrs	r3, r3, #21
 80042e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <I2C_TransferConfig+0x60>)
 80042ec:	430b      	orrs	r3, r1
 80042ee:	43db      	mvns	r3, r3
 80042f0:	ea02 0103 	and.w	r1, r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	03ff63ff 	.word	0x03ff63ff

08004310 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b20      	cmp	r3, #32
 8004324:	d138      	bne.n	8004398 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004330:	2302      	movs	r3, #2
 8004332:	e032      	b.n	800439a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2224      	movs	r2, #36	; 0x24
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0201 	bic.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004362:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6819      	ldr	r1, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	e000      	b.n	800439a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004398:	2302      	movs	r3, #2
  }
}
 800439a:	4618      	mov	r0, r3
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d139      	bne.n	8004430 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e033      	b.n	8004432 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2224      	movs	r2, #36	; 0x24
 80043d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0201 	bic.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	e000      	b.n	8004432 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004430:	2302      	movs	r3, #2
  }
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800444a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444e:	6013      	str	r3, [r2, #0]
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40007000 	.word	0x40007000

08004460 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004468:	2300      	movs	r3, #0
 800446a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e291      	b.n	800499a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8087 	beq.w	8004592 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004484:	4b96      	ldr	r3, [pc, #600]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b04      	cmp	r3, #4
 800448e:	d00c      	beq.n	80044aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004490:	4b93      	ldr	r3, [pc, #588]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	2b08      	cmp	r3, #8
 800449a:	d112      	bne.n	80044c2 <HAL_RCC_OscConfig+0x62>
 800449c:	4b90      	ldr	r3, [pc, #576]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a8:	d10b      	bne.n	80044c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044aa:	4b8d      	ldr	r3, [pc, #564]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d06c      	beq.n	8004590 <HAL_RCC_OscConfig+0x130>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d168      	bne.n	8004590 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e26b      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ca:	d106      	bne.n	80044da <HAL_RCC_OscConfig+0x7a>
 80044cc:	4b84      	ldr	r3, [pc, #528]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a83      	ldr	r2, [pc, #524]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	e02e      	b.n	8004538 <HAL_RCC_OscConfig+0xd8>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0x9c>
 80044e2:	4b7f      	ldr	r3, [pc, #508]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a7e      	ldr	r2, [pc, #504]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	4b7c      	ldr	r3, [pc, #496]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a7b      	ldr	r2, [pc, #492]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e01d      	b.n	8004538 <HAL_RCC_OscConfig+0xd8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0xc0>
 8004506:	4b76      	ldr	r3, [pc, #472]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a75      	ldr	r2, [pc, #468]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800450c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b73      	ldr	r3, [pc, #460]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a72      	ldr	r2, [pc, #456]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e00b      	b.n	8004538 <HAL_RCC_OscConfig+0xd8>
 8004520:	4b6f      	ldr	r3, [pc, #444]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a6e      	ldr	r2, [pc, #440]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	4b6c      	ldr	r3, [pc, #432]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a6b      	ldr	r2, [pc, #428]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d013      	beq.n	8004568 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fd ffc2 	bl	80024c8 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004548:	f7fd ffbe 	bl	80024c8 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e21f      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	4b61      	ldr	r3, [pc, #388]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0xe8>
 8004566:	e014      	b.n	8004592 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fd ffae 	bl	80024c8 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004570:	f7fd ffaa 	bl	80024c8 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	; 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e20b      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004582:	4b57      	ldr	r3, [pc, #348]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x110>
 800458e:	e000      	b.n	8004592 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d069      	beq.n	8004672 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800459e:	4b50      	ldr	r3, [pc, #320]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045aa:	4b4d      	ldr	r3, [pc, #308]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d11c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x190>
 80045b6:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d116      	bne.n	80045f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c2:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_RCC_OscConfig+0x17a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d001      	beq.n	80045da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e1df      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045da:	4b41      	ldr	r3, [pc, #260]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	493d      	ldr	r1, [pc, #244]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ee:	e040      	b.n	8004672 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d023      	beq.n	8004640 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f8:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a38      	ldr	r2, [pc, #224]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fd ff60 	bl	80024c8 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460c:	f7fd ff5c 	bl	80024c8 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e1bd      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461e:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462a:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4929      	ldr	r1, [pc, #164]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]
 800463e:	e018      	b.n	8004672 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004640:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a26      	ldr	r2, [pc, #152]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fd ff3c 	bl	80024c8 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004654:	f7fd ff38 	bl	80024c8 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e199      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004666:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d038      	beq.n	80046f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d019      	beq.n	80046ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004686:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468a:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004692:	f7fd ff19 	bl	80024c8 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469a:	f7fd ff15 	bl	80024c8 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e176      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80046ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x23a>
 80046b8:	e01a      	b.n	80046f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ba:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80046bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046be:	4a08      	ldr	r2, [pc, #32]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c6:	f7fd feff 	bl	80024c8 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046cc:	e00a      	b.n	80046e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ce:	f7fd fefb 	bl	80024c8 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d903      	bls.n	80046e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e15c      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
 80046e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e4:	4b91      	ldr	r3, [pc, #580]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80046e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ee      	bne.n	80046ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a4 	beq.w	8004846 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fe:	4b8b      	ldr	r3, [pc, #556]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10d      	bne.n	8004726 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	4b88      	ldr	r3, [pc, #544]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	4a87      	ldr	r2, [pc, #540]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004714:	6413      	str	r3, [r2, #64]	; 0x40
 8004716:	4b85      	ldr	r3, [pc, #532]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004726:	4b82      	ldr	r3, [pc, #520]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d118      	bne.n	8004764 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004732:	4b7f      	ldr	r3, [pc, #508]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7e      	ldr	r2, [pc, #504]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473e:	f7fd fec3 	bl	80024c8 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7fd febf 	bl	80024c8 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b64      	cmp	r3, #100	; 0x64
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e120      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004758:	4b75      	ldr	r3, [pc, #468]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x31a>
 800476c:	4b6f      	ldr	r3, [pc, #444]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	4a6e      	ldr	r2, [pc, #440]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6713      	str	r3, [r2, #112]	; 0x70
 8004778:	e02d      	b.n	80047d6 <HAL_RCC_OscConfig+0x376>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x33c>
 8004782:	4b6a      	ldr	r3, [pc, #424]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	4a69      	ldr	r2, [pc, #420]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6713      	str	r3, [r2, #112]	; 0x70
 800478e:	4b67      	ldr	r3, [pc, #412]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	4a66      	ldr	r2, [pc, #408]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004794:	f023 0304 	bic.w	r3, r3, #4
 8004798:	6713      	str	r3, [r2, #112]	; 0x70
 800479a:	e01c      	b.n	80047d6 <HAL_RCC_OscConfig+0x376>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b05      	cmp	r3, #5
 80047a2:	d10c      	bne.n	80047be <HAL_RCC_OscConfig+0x35e>
 80047a4:	4b61      	ldr	r3, [pc, #388]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	4a60      	ldr	r2, [pc, #384]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047aa:	f043 0304 	orr.w	r3, r3, #4
 80047ae:	6713      	str	r3, [r2, #112]	; 0x70
 80047b0:	4b5e      	ldr	r3, [pc, #376]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a5d      	ldr	r2, [pc, #372]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
 80047bc:	e00b      	b.n	80047d6 <HAL_RCC_OscConfig+0x376>
 80047be:	4b5b      	ldr	r3, [pc, #364]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	4a5a      	ldr	r2, [pc, #360]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70
 80047ca:	4b58      	ldr	r3, [pc, #352]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	4a57      	ldr	r2, [pc, #348]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d015      	beq.n	800480a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7fd fe73 	bl	80024c8 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7fd fe6f 	bl	80024c8 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e0ce      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fc:	4b4b      	ldr	r3, [pc, #300]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ee      	beq.n	80047e6 <HAL_RCC_OscConfig+0x386>
 8004808:	e014      	b.n	8004834 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480a:	f7fd fe5d 	bl	80024c8 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fd fe59 	bl	80024c8 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e0b8      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004828:	4b40      	ldr	r3, [pc, #256]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ee      	bne.n	8004812 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483a:	4b3c      	ldr	r3, [pc, #240]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	4a3b      	ldr	r2, [pc, #236]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004844:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80a4 	beq.w	8004998 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004850:	4b36      	ldr	r3, [pc, #216]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b08      	cmp	r3, #8
 800485a:	d06b      	beq.n	8004934 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d149      	bne.n	80048f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004864:	4b31      	ldr	r3, [pc, #196]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a30      	ldr	r2, [pc, #192]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 800486a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800486e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fd fe2a 	bl	80024c8 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004878:	f7fd fe26 	bl	80024c8 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e087      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488a:	4b28      	ldr	r3, [pc, #160]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	019b      	lsls	r3, r3, #6
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	3b01      	subs	r3, #1
 80048b0:	041b      	lsls	r3, r3, #16
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	061b      	lsls	r3, r3, #24
 80048ba:	4313      	orrs	r3, r2
 80048bc:	4a1b      	ldr	r2, [pc, #108]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80048be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c4:	4b19      	ldr	r3, [pc, #100]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80048ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fd fdfa 	bl	80024c8 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fd fdf6 	bl	80024c8 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e057      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ea:	4b10      	ldr	r3, [pc, #64]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x478>
 80048f6:	e04f      	b.n	8004998 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f8:	4b0c      	ldr	r3, [pc, #48]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a0b      	ldr	r2, [pc, #44]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80048fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fd fde0 	bl	80024c8 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490c:	f7fd fddc 	bl	80024c8 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e03d      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	4b03      	ldr	r3, [pc, #12]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x4ac>
 800492a:	e035      	b.n	8004998 <HAL_RCC_OscConfig+0x538>
 800492c:	40023800 	.word	0x40023800
 8004930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004934:	4b1b      	ldr	r3, [pc, #108]	; (80049a4 <HAL_RCC_OscConfig+0x544>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d028      	beq.n	8004994 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d121      	bne.n	8004994 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d11a      	bne.n	8004994 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004964:	4013      	ands	r3, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800496a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800496c:	4293      	cmp	r3, r2
 800496e:	d111      	bne.n	8004994 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	3b01      	subs	r3, #1
 800497e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d107      	bne.n	8004994 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800

080049a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0d0      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c0:	4b6a      	ldr	r3, [pc, #424]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d910      	bls.n	80049f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b67      	ldr	r3, [pc, #412]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 020f 	bic.w	r2, r3, #15
 80049d6:	4965      	ldr	r1, [pc, #404]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049de:	4b63      	ldr	r3, [pc, #396]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0b8      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d020      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a08:	4b59      	ldr	r3, [pc, #356]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4a58      	ldr	r2, [pc, #352]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a20:	4b53      	ldr	r3, [pc, #332]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	4a52      	ldr	r2, [pc, #328]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a2c:	4b50      	ldr	r3, [pc, #320]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	494d      	ldr	r1, [pc, #308]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d040      	beq.n	8004acc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d107      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a52:	4b47      	ldr	r3, [pc, #284]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d115      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e07f      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d107      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6a:	4b41      	ldr	r3, [pc, #260]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e073      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7a:	4b3d      	ldr	r3, [pc, #244]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e06b      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a8a:	4b39      	ldr	r3, [pc, #228]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f023 0203 	bic.w	r2, r3, #3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4936      	ldr	r1, [pc, #216]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a9c:	f7fd fd14 	bl	80024c8 <HAL_GetTick>
 8004aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa2:	e00a      	b.n	8004aba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa4:	f7fd fd10 	bl	80024c8 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e053      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aba:	4b2d      	ldr	r3, [pc, #180]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 020c 	and.w	r2, r3, #12
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d1eb      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004acc:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d210      	bcs.n	8004afc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	4b24      	ldr	r3, [pc, #144]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 020f 	bic.w	r2, r3, #15
 8004ae2:	4922      	ldr	r1, [pc, #136]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b20      	ldr	r3, [pc, #128]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e032      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b08:	4b19      	ldr	r3, [pc, #100]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	4916      	ldr	r1, [pc, #88]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d009      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b26:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	490e      	ldr	r1, [pc, #56]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b3a:	f000 f821 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	091b      	lsrs	r3, r3, #4
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	490a      	ldr	r1, [pc, #40]	; (8004b74 <HAL_RCC_ClockConfig+0x1cc>)
 8004b4c:	5ccb      	ldrb	r3, [r1, r3]
 8004b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b52:	4a09      	ldr	r2, [pc, #36]	; (8004b78 <HAL_RCC_ClockConfig+0x1d0>)
 8004b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b56:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <HAL_RCC_ClockConfig+0x1d4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fd fc70 	bl	8002440 <HAL_InitTick>

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40023c00 	.word	0x40023c00
 8004b70:	40023800 	.word	0x40023800
 8004b74:	08008a40 	.word	0x08008a40
 8004b78:	20000030 	.word	0x20000030
 8004b7c:	20000034 	.word	0x20000034

08004b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b84:	b094      	sub	sp, #80	; 0x50
 8004b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b90:	2300      	movs	r3, #0
 8004b92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b98:	4b79      	ldr	r3, [pc, #484]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 030c 	and.w	r3, r3, #12
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d00d      	beq.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	f200 80e1 	bhi.w	8004d6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d003      	beq.n	8004bba <HAL_RCC_GetSysClockFreq+0x3a>
 8004bb2:	e0db      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bb4:	4b73      	ldr	r3, [pc, #460]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bb8:	e0db      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bba:	4b73      	ldr	r3, [pc, #460]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bbe:	e0d8      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bc0:	4b6f      	ldr	r3, [pc, #444]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bc8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004bca:	4b6d      	ldr	r3, [pc, #436]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d063      	beq.n	8004c9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd6:	4b6a      	ldr	r3, [pc, #424]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	099b      	lsrs	r3, r3, #6
 8004bdc:	2200      	movs	r2, #0
 8004bde:	63bb      	str	r3, [r7, #56]	; 0x38
 8004be0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bea:	2300      	movs	r3, #0
 8004bec:	637b      	str	r3, [r7, #52]	; 0x34
 8004bee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bf2:	4622      	mov	r2, r4
 8004bf4:	462b      	mov	r3, r5
 8004bf6:	f04f 0000 	mov.w	r0, #0
 8004bfa:	f04f 0100 	mov.w	r1, #0
 8004bfe:	0159      	lsls	r1, r3, #5
 8004c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c04:	0150      	lsls	r0, r2, #5
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	1a51      	subs	r1, r2, r1
 8004c0e:	6139      	str	r1, [r7, #16]
 8004c10:	4629      	mov	r1, r5
 8004c12:	eb63 0301 	sbc.w	r3, r3, r1
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c24:	4659      	mov	r1, fp
 8004c26:	018b      	lsls	r3, r1, #6
 8004c28:	4651      	mov	r1, sl
 8004c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c2e:	4651      	mov	r1, sl
 8004c30:	018a      	lsls	r2, r1, #6
 8004c32:	4651      	mov	r1, sl
 8004c34:	ebb2 0801 	subs.w	r8, r2, r1
 8004c38:	4659      	mov	r1, fp
 8004c3a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c52:	4690      	mov	r8, r2
 8004c54:	4699      	mov	r9, r3
 8004c56:	4623      	mov	r3, r4
 8004c58:	eb18 0303 	adds.w	r3, r8, r3
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	462b      	mov	r3, r5
 8004c60:	eb49 0303 	adc.w	r3, r9, r3
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c72:	4629      	mov	r1, r5
 8004c74:	024b      	lsls	r3, r1, #9
 8004c76:	4621      	mov	r1, r4
 8004c78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	024a      	lsls	r2, r1, #9
 8004c80:	4610      	mov	r0, r2
 8004c82:	4619      	mov	r1, r3
 8004c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c86:	2200      	movs	r2, #0
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c90:	f7fb fb16 	bl	80002c0 <__aeabi_uldivmod>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4613      	mov	r3, r2
 8004c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c9c:	e058      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c9e:	4b38      	ldr	r3, [pc, #224]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	099b      	lsrs	r3, r3, #6
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	4611      	mov	r1, r2
 8004caa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cae:	623b      	str	r3, [r7, #32]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cb8:	4642      	mov	r2, r8
 8004cba:	464b      	mov	r3, r9
 8004cbc:	f04f 0000 	mov.w	r0, #0
 8004cc0:	f04f 0100 	mov.w	r1, #0
 8004cc4:	0159      	lsls	r1, r3, #5
 8004cc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cca:	0150      	lsls	r0, r2, #5
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ce8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cf0:	ebb2 040a 	subs.w	r4, r2, sl
 8004cf4:	eb63 050b 	sbc.w	r5, r3, fp
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	00eb      	lsls	r3, r5, #3
 8004d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d06:	00e2      	lsls	r2, r4, #3
 8004d08:	4614      	mov	r4, r2
 8004d0a:	461d      	mov	r5, r3
 8004d0c:	4643      	mov	r3, r8
 8004d0e:	18e3      	adds	r3, r4, r3
 8004d10:	603b      	str	r3, [r7, #0]
 8004d12:	464b      	mov	r3, r9
 8004d14:	eb45 0303 	adc.w	r3, r5, r3
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d26:	4629      	mov	r1, r5
 8004d28:	028b      	lsls	r3, r1, #10
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d30:	4621      	mov	r1, r4
 8004d32:	028a      	lsls	r2, r1, #10
 8004d34:	4610      	mov	r0, r2
 8004d36:	4619      	mov	r1, r3
 8004d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	61fa      	str	r2, [r7, #28]
 8004d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d44:	f7fb fabc 	bl	80002c0 <__aeabi_uldivmod>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	0c1b      	lsrs	r3, r3, #16
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004d60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d6a:	e002      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3750      	adds	r7, #80	; 0x50
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800
 8004d84:	00f42400 	.word	0x00f42400
 8004d88:	007a1200 	.word	0x007a1200

08004d8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d90:	4b03      	ldr	r3, [pc, #12]	; (8004da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d92:	681b      	ldr	r3, [r3, #0]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000030 	.word	0x20000030

08004da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004da8:	f7ff fff0 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	0a9b      	lsrs	r3, r3, #10
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	4903      	ldr	r1, [pc, #12]	; (8004dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dba:	5ccb      	ldrb	r3, [r1, r3]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	08008a50 	.word	0x08008a50

08004dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dd0:	f7ff ffdc 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	0b5b      	lsrs	r3, r3, #13
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4903      	ldr	r1, [pc, #12]	; (8004df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de2:	5ccb      	ldrb	r3, [r1, r3]
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40023800 	.word	0x40023800
 8004df0:	08008a50 	.word	0x08008a50

08004df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d012      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e1c:	4b69      	ldr	r3, [pc, #420]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4a68      	ldr	r2, [pc, #416]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e26:	6093      	str	r3, [r2, #8]
 8004e28:	4b66      	ldr	r3, [pc, #408]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e30:	4964      	ldr	r1, [pc, #400]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d017      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e4e:	4b5d      	ldr	r3, [pc, #372]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5c:	4959      	ldr	r1, [pc, #356]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d017      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e8a:	4b4e      	ldr	r3, [pc, #312]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	494a      	ldr	r1, [pc, #296]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea8:	d101      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 808b 	beq.w	8004fee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ed8:	4b3a      	ldr	r3, [pc, #232]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	4a39      	ldr	r2, [pc, #228]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee4:	4b37      	ldr	r3, [pc, #220]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ef0:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a34      	ldr	r2, [pc, #208]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004efc:	f7fd fae4 	bl	80024c8 <HAL_GetTick>
 8004f00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f04:	f7fd fae0 	bl	80024c8 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	; 0x64
 8004f10:	d901      	bls.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e357      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f16:	4b2c      	ldr	r3, [pc, #176]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f22:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d035      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d02e      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f40:	4b20      	ldr	r3, [pc, #128]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f4a:	4b1e      	ldr	r3, [pc, #120]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f56:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4a1a      	ldr	r2, [pc, #104]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f62:	4a18      	ldr	r2, [pc, #96]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f68:	4b16      	ldr	r3, [pc, #88]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d114      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f74:	f7fd faa8 	bl	80024c8 <HAL_GetTick>
 8004f78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7a:	e00a      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f7c:	f7fd faa4 	bl	80024c8 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e319      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0ee      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004faa:	d111      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004fac:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fba:	400b      	ands	r3, r1
 8004fbc:	4901      	ldr	r1, [pc, #4]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	608b      	str	r3, [r1, #8]
 8004fc2:	e00b      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40007000 	.word	0x40007000
 8004fcc:	0ffffcff 	.word	0x0ffffcff
 8004fd0:	4baa      	ldr	r3, [pc, #680]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4aa9      	ldr	r2, [pc, #676]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fda:	6093      	str	r3, [r2, #8]
 8004fdc:	4ba7      	ldr	r3, [pc, #668]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe8:	49a4      	ldr	r1, [pc, #656]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d010      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ffa:	4ba0      	ldr	r3, [pc, #640]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005000:	4a9e      	ldr	r2, [pc, #632]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005006:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800500a:	4b9c      	ldr	r3, [pc, #624]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800500c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	4999      	ldr	r1, [pc, #612]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005028:	4b94      	ldr	r3, [pc, #592]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005036:	4991      	ldr	r1, [pc, #580]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800504a:	4b8c      	ldr	r3, [pc, #560]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800504c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005050:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005058:	4988      	ldr	r1, [pc, #544]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800506c:	4b83      	ldr	r3, [pc, #524]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800507a:	4980      	ldr	r1, [pc, #512]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800508e:	4b7b      	ldr	r3, [pc, #492]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005094:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509c:	4977      	ldr	r1, [pc, #476]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050b0:	4b72      	ldr	r3, [pc, #456]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	f023 0203 	bic.w	r2, r3, #3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	496f      	ldr	r1, [pc, #444]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050d2:	4b6a      	ldr	r3, [pc, #424]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f023 020c 	bic.w	r2, r3, #12
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e0:	4966      	ldr	r1, [pc, #408]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050f4:	4b61      	ldr	r3, [pc, #388]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005102:	495e      	ldr	r1, [pc, #376]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005116:	4b59      	ldr	r3, [pc, #356]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005124:	4955      	ldr	r1, [pc, #340]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005138:	4b50      	ldr	r3, [pc, #320]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005146:	494d      	ldr	r1, [pc, #308]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800515a:	4b48      	ldr	r3, [pc, #288]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005160:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005168:	4944      	ldr	r1, [pc, #272]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800517c:	4b3f      	ldr	r3, [pc, #252]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005182:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518a:	493c      	ldr	r1, [pc, #240]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800519e:	4b37      	ldr	r3, [pc, #220]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ac:	4933      	ldr	r1, [pc, #204]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051c0:	4b2e      	ldr	r3, [pc, #184]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ce:	492b      	ldr	r1, [pc, #172]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d011      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051e2:	4b26      	ldr	r3, [pc, #152]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051f0:	4922      	ldr	r1, [pc, #136]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005200:	d101      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005202:	2301      	movs	r3, #1
 8005204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005212:	2301      	movs	r3, #1
 8005214:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005222:	4b16      	ldr	r3, [pc, #88]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005228:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005230:	4912      	ldr	r1, [pc, #72]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00b      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005244:	4b0d      	ldr	r3, [pc, #52]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005254:	4909      	ldr	r1, [pc, #36]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d006      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 80d9 	beq.w	8005422 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005270:	4b02      	ldr	r3, [pc, #8]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a01      	ldr	r2, [pc, #4]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005276:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800527a:	e001      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800527c:	40023800 	.word	0x40023800
 8005280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005282:	f7fd f921 	bl	80024c8 <HAL_GetTick>
 8005286:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005288:	e008      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800528a:	f7fd f91d 	bl	80024c8 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b64      	cmp	r3, #100	; 0x64
 8005296:	d901      	bls.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e194      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800529c:	4b6c      	ldr	r3, [pc, #432]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1f0      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d021      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d11d      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052bc:	4b64      	ldr	r3, [pc, #400]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c2:	0c1b      	lsrs	r3, r3, #16
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052ca:	4b61      	ldr	r3, [pc, #388]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d0:	0e1b      	lsrs	r3, r3, #24
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	019a      	lsls	r2, r3, #6
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	041b      	lsls	r3, r3, #16
 80052e2:	431a      	orrs	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	061b      	lsls	r3, r3, #24
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	071b      	lsls	r3, r3, #28
 80052f0:	4957      	ldr	r1, [pc, #348]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d004      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800530c:	d00a      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005316:	2b00      	cmp	r3, #0
 8005318:	d02e      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005322:	d129      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005324:	4b4a      	ldr	r3, [pc, #296]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800532a:	0c1b      	lsrs	r3, r3, #16
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005332:	4b47      	ldr	r3, [pc, #284]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005338:	0f1b      	lsrs	r3, r3, #28
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	019a      	lsls	r2, r3, #6
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	041b      	lsls	r3, r3, #16
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	061b      	lsls	r3, r3, #24
 8005352:	431a      	orrs	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	071b      	lsls	r3, r3, #28
 8005358:	493d      	ldr	r1, [pc, #244]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005360:	4b3b      	ldr	r3, [pc, #236]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005366:	f023 021f 	bic.w	r2, r3, #31
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	3b01      	subs	r3, #1
 8005370:	4937      	ldr	r1, [pc, #220]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01d      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005384:	4b32      	ldr	r3, [pc, #200]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800538a:	0e1b      	lsrs	r3, r3, #24
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005392:	4b2f      	ldr	r3, [pc, #188]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005398:	0f1b      	lsrs	r3, r3, #28
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	019a      	lsls	r2, r3, #6
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	431a      	orrs	r2, r3
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	431a      	orrs	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	071b      	lsls	r3, r3, #28
 80053b8:	4925      	ldr	r1, [pc, #148]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d011      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	019a      	lsls	r2, r3, #6
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	061b      	lsls	r3, r3, #24
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	071b      	lsls	r3, r3, #28
 80053e8:	4919      	ldr	r1, [pc, #100]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053f0:	4b17      	ldr	r3, [pc, #92]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a16      	ldr	r2, [pc, #88]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fc:	f7fd f864 	bl	80024c8 <HAL_GetTick>
 8005400:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005404:	f7fd f860 	bl	80024c8 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e0d7      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005416:	4b0e      	ldr	r3, [pc, #56]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b01      	cmp	r3, #1
 8005426:	f040 80cd 	bne.w	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a08      	ldr	r2, [pc, #32]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005436:	f7fd f847 	bl	80024c8 <HAL_GetTick>
 800543a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800543c:	e00a      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800543e:	f7fd f843 	bl	80024c8 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b64      	cmp	r3, #100	; 0x64
 800544a:	d903      	bls.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e0ba      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005450:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005454:	4b5e      	ldr	r3, [pc, #376]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800545c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005460:	d0ed      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800547e:	2b00      	cmp	r3, #0
 8005480:	d02e      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	d12a      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800548a:	4b51      	ldr	r3, [pc, #324]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800548c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005490:	0c1b      	lsrs	r3, r3, #16
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005498:	4b4d      	ldr	r3, [pc, #308]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549e:	0f1b      	lsrs	r3, r3, #28
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	019a      	lsls	r2, r3, #6
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	041b      	lsls	r3, r3, #16
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	061b      	lsls	r3, r3, #24
 80054b8:	431a      	orrs	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	071b      	lsls	r3, r3, #28
 80054be:	4944      	ldr	r1, [pc, #272]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054c6:	4b42      	ldr	r3, [pc, #264]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	3b01      	subs	r3, #1
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	493d      	ldr	r1, [pc, #244]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d022      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f4:	d11d      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054f6:	4b36      	ldr	r3, [pc, #216]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fc:	0e1b      	lsrs	r3, r3, #24
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005504:	4b32      	ldr	r3, [pc, #200]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	0f1b      	lsrs	r3, r3, #28
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	019a      	lsls	r2, r3, #6
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	041b      	lsls	r3, r3, #16
 800551e:	431a      	orrs	r2, r3
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	061b      	lsls	r3, r3, #24
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	071b      	lsls	r3, r3, #28
 800552a:	4929      	ldr	r1, [pc, #164]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d028      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800553e:	4b24      	ldr	r3, [pc, #144]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005544:	0e1b      	lsrs	r3, r3, #24
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800554c:	4b20      	ldr	r3, [pc, #128]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005552:	0c1b      	lsrs	r3, r3, #16
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	019a      	lsls	r2, r3, #6
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	041b      	lsls	r3, r3, #16
 8005564:	431a      	orrs	r2, r3
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	061b      	lsls	r3, r3, #24
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	071b      	lsls	r3, r3, #28
 8005572:	4917      	ldr	r1, [pc, #92]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800557a:	4b15      	ldr	r3, [pc, #84]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800557c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005580:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	4911      	ldr	r1, [pc, #68]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800558a:	4313      	orrs	r3, r2
 800558c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005590:	4b0f      	ldr	r3, [pc, #60]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a0e      	ldr	r2, [pc, #56]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800559c:	f7fc ff94 	bl	80024c8 <HAL_GetTick>
 80055a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055a4:	f7fc ff90 	bl	80024c8 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b64      	cmp	r3, #100	; 0x64
 80055b0:	d901      	bls.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e007      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055b6:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c2:	d1ef      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40023800 	.word	0x40023800

080055d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e09d      	b.n	8005722 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d108      	bne.n	8005600 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f6:	d009      	beq.n	800560c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	61da      	str	r2, [r3, #28]
 80055fe:	e005      	b.n	800560c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fc fbf2 	bl	8001e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005642:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800564c:	d902      	bls.n	8005654 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800564e:	2300      	movs	r3, #0
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	e002      	b.n	800565a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005658:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005662:	d007      	beq.n	8005674 <HAL_SPI_Init+0xa0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800566c:	d002      	beq.n	8005674 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b6:	ea42 0103 	orr.w	r1, r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	0c1b      	lsrs	r3, r3, #16
 80056d0:	f003 0204 	and.w	r2, r3, #4
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80056f0:	ea42 0103 	orr.w	r1, r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69da      	ldr	r2, [r3, #28]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005710:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b088      	sub	sp, #32
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	603b      	str	r3, [r7, #0]
 8005736:	4613      	mov	r3, r2
 8005738:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_SPI_Transmit+0x22>
 8005748:	2302      	movs	r3, #2
 800574a:	e158      	b.n	80059fe <HAL_SPI_Transmit+0x2d4>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005754:	f7fc feb8 	bl	80024c8 <HAL_GetTick>
 8005758:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b01      	cmp	r3, #1
 8005768:	d002      	beq.n	8005770 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800576a:	2302      	movs	r3, #2
 800576c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800576e:	e13d      	b.n	80059ec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_SPI_Transmit+0x52>
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005780:	e134      	b.n	80059ec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2203      	movs	r2, #3
 8005786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	88fa      	ldrh	r2, [r7, #6]
 800579a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	88fa      	ldrh	r2, [r7, #6]
 80057a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057cc:	d10f      	bne.n	80057ee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b40      	cmp	r3, #64	; 0x40
 80057fa:	d007      	beq.n	800580c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800580a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005814:	d94b      	bls.n	80058ae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_SPI_Transmit+0xfa>
 800581e:	8afb      	ldrh	r3, [r7, #22]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d13e      	bne.n	80058a2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	881a      	ldrh	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	1c9a      	adds	r2, r3, #2
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005848:	e02b      	b.n	80058a2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b02      	cmp	r3, #2
 8005856:	d112      	bne.n	800587e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	881a      	ldrh	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	1c9a      	adds	r2, r3, #2
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800587c:	e011      	b.n	80058a2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800587e:	f7fc fe23 	bl	80024c8 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d803      	bhi.n	8005896 <HAL_SPI_Transmit+0x16c>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d102      	bne.n	800589c <HAL_SPI_Transmit+0x172>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d102      	bne.n	80058a2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058a0:	e0a4      	b.n	80059ec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1ce      	bne.n	800584a <HAL_SPI_Transmit+0x120>
 80058ac:	e07c      	b.n	80059a8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <HAL_SPI_Transmit+0x192>
 80058b6:	8afb      	ldrh	r3, [r7, #22]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d170      	bne.n	800599e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d912      	bls.n	80058ec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	881a      	ldrh	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	1c9a      	adds	r2, r3, #2
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b02      	subs	r3, #2
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058ea:	e058      	b.n	800599e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	330c      	adds	r3, #12
 80058f6:	7812      	ldrb	r2, [r2, #0]
 80058f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005912:	e044      	b.n	800599e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b02      	cmp	r3, #2
 8005920:	d12b      	bne.n	800597a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b01      	cmp	r3, #1
 800592a:	d912      	bls.n	8005952 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	881a      	ldrh	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	1c9a      	adds	r2, r3, #2
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b02      	subs	r3, #2
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005950:	e025      	b.n	800599e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	330c      	adds	r3, #12
 800595c:	7812      	ldrb	r2, [r2, #0]
 800595e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005978:	e011      	b.n	800599e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800597a:	f7fc fda5 	bl	80024c8 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d803      	bhi.n	8005992 <HAL_SPI_Transmit+0x268>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005990:	d102      	bne.n	8005998 <HAL_SPI_Transmit+0x26e>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800599c:	e026      	b.n	80059ec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1b5      	bne.n	8005914 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fc1d 	bl	80061ec <SPI_EndRxTxTransaction>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059c6:	2300      	movs	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	77fb      	strb	r3, [r7, #31]
 80059e8:	e000      	b.n	80059ec <HAL_SPI_Transmit+0x2c2>
  }

error:
 80059ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80059fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	4613      	mov	r3, r2
 8005a14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_SPI_Transmit_DMA+0x20>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e0d8      	b.n	8005bda <HAL_SPI_Transmit_DMA+0x1d2>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d002      	beq.n	8005a42 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a40:	e0c6      	b.n	8005bd0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_SPI_Transmit_DMA+0x46>
 8005a48:	88fb      	ldrh	r3, [r7, #6]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d102      	bne.n	8005a54 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a52:	e0bd      	b.n	8005bd0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2203      	movs	r2, #3
 8005a58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	88fa      	ldrh	r2, [r7, #6]
 8005a6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	88fa      	ldrh	r2, [r7, #6]
 8005a72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9e:	d10f      	bne.n	8005ac0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005abe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac4:	4a47      	ldr	r2, [pc, #284]	; (8005be4 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005acc:	4a46      	ldr	r2, [pc, #280]	; (8005be8 <HAL_SPI_Transmit_DMA+0x1e0>)
 8005ace:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad4:	4a45      	ldr	r2, [pc, #276]	; (8005bec <HAL_SPI_Transmit_DMA+0x1e4>)
 8005ad6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005adc:	2200      	movs	r2, #0
 8005ade:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005aee:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005af8:	d82d      	bhi.n	8005b56 <HAL_SPI_Transmit_DMA+0x14e>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b04:	d127      	bne.n	8005b56 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10f      	bne.n	8005b34 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b22:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b32:	e010      	b.n	8005b56 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b42:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	085b      	lsrs	r3, r3, #1
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3301      	adds	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	4619      	mov	r1, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b6e:	f7fc fe9b 	bl	80028a8 <HAL_DMA_Start_IT>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00c      	beq.n	8005b92 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b7c:	f043 0210 	orr.w	r2, r3, #16
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005b90:	e01e      	b.n	8005bd0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	d007      	beq.n	8005bb0 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bae:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0220 	orr.w	r2, r2, #32
 8005bbe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0202 	orr.w	r2, r2, #2
 8005bce:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	08005f29 	.word	0x08005f29
 8005be8:	08005e81 	.word	0x08005e81
 8005bec:	08005f45 	.word	0x08005f45

08005bf0 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00f      	beq.n	8005c24 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fc fead 	bl	8002968 <HAL_DMA_Abort>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c18:	f043 0210 	orr.w	r2, r3, #16
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00f      	beq.n	8005c4c <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fc fe99 	bl	8002968 <HAL_DMA_Abort>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c40:	f043 0210 	orr.w	r2, r3, #16
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0203 	bic.w	r2, r2, #3
 8005c5a:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10e      	bne.n	8005cb0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d009      	beq.n	8005cb0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	4798      	blx	r3
    return;
 8005cae:	e0ce      	b.n	8005e4e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d009      	beq.n	8005cce <HAL_SPI_IRQHandler+0x5e>
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	4798      	blx	r3
    return;
 8005ccc:	e0bf      	b.n	8005e4e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <HAL_SPI_IRQHandler+0x7e>
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d105      	bne.n	8005cee <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80b0 	beq.w	8005e4e <HAL_SPI_IRQHandler+0x1de>
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 80aa 	beq.w	8005e4e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d023      	beq.n	8005d4c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d011      	beq.n	8005d34 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d14:	f043 0204 	orr.w	r2, r3, #4
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	e00b      	b.n	8005d4c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d34:	2300      	movs	r3, #0
 8005d36:	613b      	str	r3, [r7, #16]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	613b      	str	r3, [r7, #16]
 8005d48:	693b      	ldr	r3, [r7, #16]
        return;
 8005d4a:	e080      	b.n	8005e4e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d014      	beq.n	8005d80 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5a:	f043 0201 	orr.w	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00c      	beq.n	8005da4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d8e:	f043 0208 	orr.w	r2, r3, #8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005d96:	2300      	movs	r3, #0
 8005d98:	60bb      	str	r3, [r7, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	60bb      	str	r3, [r7, #8]
 8005da2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d04f      	beq.n	8005e4c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d104      	bne.n	8005dd8 <HAL_SPI_IRQHandler+0x168>
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d034      	beq.n	8005e42 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0203 	bic.w	r2, r2, #3
 8005de6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d011      	beq.n	8005e14 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	4a17      	ldr	r2, [pc, #92]	; (8005e54 <HAL_SPI_IRQHandler+0x1e4>)
 8005df6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fc fe23 	bl	8002a48 <HAL_DMA_Abort_IT>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d016      	beq.n	8005e4a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e20:	4a0c      	ldr	r2, [pc, #48]	; (8005e54 <HAL_SPI_IRQHandler+0x1e4>)
 8005e22:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fc fe0d 	bl	8002a48 <HAL_DMA_Abort_IT>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005e40:	e003      	b.n	8005e4a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f812 	bl	8005e6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005e48:	e000      	b.n	8005e4c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005e4a:	bf00      	nop
    return;
 8005e4c:	bf00      	nop
  }
}
 8005e4e:	3720      	adds	r7, #32
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	08005f85 	.word	0x08005f85

08005e58 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e8e:	f7fc fb1b 	bl	80024c8 <HAL_GetTick>
 8005e92:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea2:	d03b      	beq.n	8005f1c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0220 	bic.w	r2, r2, #32
 8005eb2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0202 	bic.w	r2, r2, #2
 8005ec2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	2164      	movs	r1, #100	; 0x64
 8005ec8:	6978      	ldr	r0, [r7, #20]
 8005eca:	f000 f98f 	bl	80061ec <SPI_EndRxTxTransaction>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed8:	f043 0220 	orr.w	r2, r3, #32
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2200      	movs	r2, #0
 8005f02:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f14:	6978      	ldr	r0, [r7, #20]
 8005f16:	f7ff ffa9 	bl	8005e6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f1a:	e002      	b.n	8005f22 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005f1c:	6978      	ldr	r0, [r7, #20]
 8005f1e:	f7fb fdf5 	bl	8001b0c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7ff ff8e 	bl	8005e58 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f3c:	bf00      	nop
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0203 	bic.w	r2, r2, #3
 8005f60:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f66:	f043 0210 	orr.w	r2, r3, #16
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7ff ff78 	bl	8005e6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f7c:	bf00      	nop
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7ff ff63 	bl	8005e6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	603b      	str	r3, [r7, #0]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fc0:	f7fc fa82 	bl	80024c8 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	1a9b      	subs	r3, r3, r2
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	4413      	add	r3, r2
 8005fce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fd0:	f7fc fa7a 	bl	80024c8 <HAL_GetTick>
 8005fd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fd6:	4b39      	ldr	r3, [pc, #228]	; (80060bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	015b      	lsls	r3, r3, #5
 8005fdc:	0d1b      	lsrs	r3, r3, #20
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	fb02 f303 	mul.w	r3, r2, r3
 8005fe4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fe6:	e054      	b.n	8006092 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fee:	d050      	beq.n	8006092 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ff0:	f7fc fa6a 	bl	80024c8 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d902      	bls.n	8006006 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d13d      	bne.n	8006082 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006014:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800601e:	d111      	bne.n	8006044 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006028:	d004      	beq.n	8006034 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006032:	d107      	bne.n	8006044 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006042:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604c:	d10f      	bne.n	800606e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800606c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e017      	b.n	80060b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	3b01      	subs	r3, #1
 8006090:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4013      	ands	r3, r2
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	429a      	cmp	r2, r3
 80060a0:	bf0c      	ite	eq
 80060a2:	2301      	moveq	r3, #1
 80060a4:	2300      	movne	r3, #0
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d19b      	bne.n	8005fe8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000030 	.word	0x20000030

080060c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	; 0x28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80060d2:	f7fc f9f9 	bl	80024c8 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	1a9b      	subs	r3, r3, r2
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	4413      	add	r3, r2
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80060e2:	f7fc f9f1 	bl	80024c8 <HAL_GetTick>
 80060e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	330c      	adds	r3, #12
 80060ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80060f0:	4b3d      	ldr	r3, [pc, #244]	; (80061e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	00da      	lsls	r2, r3, #3
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	0d1b      	lsrs	r3, r3, #20
 8006100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006102:	fb02 f303 	mul.w	r3, r2, r3
 8006106:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006108:	e060      	b.n	80061cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006110:	d107      	bne.n	8006122 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d104      	bne.n	8006122 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006120:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d050      	beq.n	80061cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800612a:	f7fc f9cd 	bl	80024c8 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006136:	429a      	cmp	r2, r3
 8006138:	d902      	bls.n	8006140 <SPI_WaitFifoStateUntilTimeout+0x80>
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	2b00      	cmp	r3, #0
 800613e:	d13d      	bne.n	80061bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800614e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006158:	d111      	bne.n	800617e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006162:	d004      	beq.n	800616e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800616c:	d107      	bne.n	800617e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800617c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006186:	d10f      	bne.n	80061a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e010      	b.n	80061de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4013      	ands	r3, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d196      	bne.n	800610a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3728      	adds	r7, #40	; 0x28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000030 	.word	0x20000030

080061ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2200      	movs	r2, #0
 8006200:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff ff5b 	bl	80060c0 <SPI_WaitFifoStateUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006214:	f043 0220 	orr.w	r2, r3, #32
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e046      	b.n	80062ae <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006220:	4b25      	ldr	r3, [pc, #148]	; (80062b8 <SPI_EndRxTxTransaction+0xcc>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a25      	ldr	r2, [pc, #148]	; (80062bc <SPI_EndRxTxTransaction+0xd0>)
 8006226:	fba2 2303 	umull	r2, r3, r2, r3
 800622a:	0d5b      	lsrs	r3, r3, #21
 800622c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006230:	fb02 f303 	mul.w	r3, r2, r3
 8006234:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800623e:	d112      	bne.n	8006266 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2200      	movs	r2, #0
 8006248:	2180      	movs	r1, #128	; 0x80
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f7ff feb0 	bl	8005fb0 <SPI_WaitFlagStateUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d016      	beq.n	8006284 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625a:	f043 0220 	orr.w	r2, r3, #32
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e023      	b.n	80062ae <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	3b01      	subs	r3, #1
 8006270:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627c:	2b80      	cmp	r3, #128	; 0x80
 800627e:	d0f2      	beq.n	8006266 <SPI_EndRxTxTransaction+0x7a>
 8006280:	e000      	b.n	8006284 <SPI_EndRxTxTransaction+0x98>
        break;
 8006282:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2200      	movs	r2, #0
 800628c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f7ff ff15 	bl	80060c0 <SPI_WaitFifoStateUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d007      	beq.n	80062ac <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a0:	f043 0220 	orr.w	r2, r3, #32
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e000      	b.n	80062ae <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20000030 	.word	0x20000030
 80062bc:	165e9f81 	.word	0x165e9f81

080062c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e040      	b.n	8006354 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fb fe1c 	bl	8001f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2224      	movs	r2, #36	; 0x24
 80062ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0201 	bic.w	r2, r2, #1
 80062fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fbe6 	bl	8006ad0 <UART_SetConfig>
 8006304:	4603      	mov	r3, r0
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e022      	b.n	8006354 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fe3e 	bl	8006f98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800632a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800633a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fec5 	bl	80070dc <UART_CheckIdleState>
 8006352:	4603      	mov	r3, r0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	4613      	mov	r3, r2
 800636a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006370:	2b20      	cmp	r3, #32
 8006372:	d171      	bne.n	8006458 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_UART_Transmit+0x24>
 800637a:	88fb      	ldrh	r3, [r7, #6]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e06a      	b.n	800645a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2221      	movs	r2, #33	; 0x21
 8006390:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006392:	f7fc f899 	bl	80024c8 <HAL_GetTick>
 8006396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	88fa      	ldrh	r2, [r7, #6]
 800639c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	88fa      	ldrh	r2, [r7, #6]
 80063a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b0:	d108      	bne.n	80063c4 <HAL_UART_Transmit+0x68>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	e003      	b.n	80063cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063cc:	e02c      	b.n	8006428 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2200      	movs	r2, #0
 80063d6:	2180      	movs	r1, #128	; 0x80
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 feb6 	bl	800714a <UART_WaitOnFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e038      	b.n	800645a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10b      	bne.n	8006406 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	3302      	adds	r3, #2
 8006402:	61bb      	str	r3, [r7, #24]
 8006404:	e007      	b.n	8006416 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	3301      	adds	r3, #1
 8006414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800641c:	b29b      	uxth	r3, r3
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1cc      	bne.n	80063ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2200      	movs	r2, #0
 800643c:	2140      	movs	r1, #64	; 0x40
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 fe83 	bl	800714a <UART_WaitOnFlagUntilTimeout>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e005      	b.n	800645a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	e000      	b.n	800645a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006458:	2302      	movs	r3, #2
  }
}
 800645a:	4618      	mov	r0, r3
 800645c:	3720      	adds	r7, #32
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b08a      	sub	sp, #40	; 0x28
 8006466:	af00      	add	r7, sp, #0
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	4613      	mov	r3, r2
 800646e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006476:	2b20      	cmp	r3, #32
 8006478:	d132      	bne.n	80064e0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <HAL_UART_Receive_IT+0x24>
 8006480:	88fb      	ldrh	r3, [r7, #6]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e02b      	b.n	80064e2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d018      	beq.n	80064d0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	e853 3f00 	ldrex	r3, [r3]
 80064aa:	613b      	str	r3, [r7, #16]
   return(result);
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	461a      	mov	r2, r3
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	623b      	str	r3, [r7, #32]
 80064be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c0:	69f9      	ldr	r1, [r7, #28]
 80064c2:	6a3a      	ldr	r2, [r7, #32]
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e6      	bne.n	800649e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064d0:	88fb      	ldrh	r3, [r7, #6]
 80064d2:	461a      	mov	r2, r3
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 fefe 	bl	80072d8 <UART_Start_Receive_IT>
 80064dc:	4603      	mov	r3, r0
 80064de:	e000      	b.n	80064e2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80064e0:	2302      	movs	r3, #2
  }
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3728      	adds	r7, #40	; 0x28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b0ba      	sub	sp, #232	; 0xe8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006512:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006516:	f640 030f 	movw	r3, #2063	; 0x80f
 800651a:	4013      	ands	r3, r2
 800651c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006520:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006524:	2b00      	cmp	r3, #0
 8006526:	d115      	bne.n	8006554 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00f      	beq.n	8006554 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d009      	beq.n	8006554 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 8297 	beq.w	8006a78 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	4798      	blx	r3
      }
      return;
 8006552:	e291      	b.n	8006a78 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 8117 	beq.w	800678c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800655e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800656a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800656e:	4b85      	ldr	r3, [pc, #532]	; (8006784 <HAL_UART_IRQHandler+0x298>)
 8006570:	4013      	ands	r3, r2
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 810a 	beq.w	800678c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d011      	beq.n	80065a8 <HAL_UART_IRQHandler+0xbc>
 8006584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00b      	beq.n	80065a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2201      	movs	r2, #1
 8006596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800659e:	f043 0201 	orr.w	r2, r3, #1
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d011      	beq.n	80065d8 <HAL_UART_IRQHandler+0xec>
 80065b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00b      	beq.n	80065d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2202      	movs	r2, #2
 80065c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ce:	f043 0204 	orr.w	r2, r3, #4
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d011      	beq.n	8006608 <HAL_UART_IRQHandler+0x11c>
 80065e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2204      	movs	r2, #4
 80065f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065fe:	f043 0202 	orr.w	r2, r3, #2
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660c:	f003 0308 	and.w	r3, r3, #8
 8006610:	2b00      	cmp	r3, #0
 8006612:	d017      	beq.n	8006644 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b00      	cmp	r3, #0
 800661e:	d105      	bne.n	800662c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006624:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00b      	beq.n	8006644 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2208      	movs	r2, #8
 8006632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663a:	f043 0208 	orr.w	r2, r3, #8
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800664c:	2b00      	cmp	r3, #0
 800664e:	d012      	beq.n	8006676 <HAL_UART_IRQHandler+0x18a>
 8006650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00c      	beq.n	8006676 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006664:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800666c:	f043 0220 	orr.w	r2, r3, #32
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 81fd 	beq.w	8006a7c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00d      	beq.n	80066aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800668e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d007      	beq.n	80066aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066be:	2b40      	cmp	r3, #64	; 0x40
 80066c0:	d005      	beq.n	80066ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d04f      	beq.n	800676e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fec8 	bl	8007464 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066de:	2b40      	cmp	r3, #64	; 0x40
 80066e0:	d141      	bne.n	8006766 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3308      	adds	r3, #8
 80066e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066f0:	e853 3f00 	ldrex	r3, [r3]
 80066f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3308      	adds	r3, #8
 800670a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800670e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800671a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800671e:	e841 2300 	strex	r3, r2, [r1]
 8006722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1d9      	bne.n	80066e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006732:	2b00      	cmp	r3, #0
 8006734:	d013      	beq.n	800675e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800673a:	4a13      	ldr	r2, [pc, #76]	; (8006788 <HAL_UART_IRQHandler+0x29c>)
 800673c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006742:	4618      	mov	r0, r3
 8006744:	f7fc f980 	bl	8002a48 <HAL_DMA_Abort_IT>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d017      	beq.n	800677e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006758:	4610      	mov	r0, r2
 800675a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675c:	e00f      	b.n	800677e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f9a0 	bl	8006aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006764:	e00b      	b.n	800677e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f99c 	bl	8006aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676c:	e007      	b.n	800677e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f998 	bl	8006aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800677c:	e17e      	b.n	8006a7c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800677e:	bf00      	nop
    return;
 8006780:	e17c      	b.n	8006a7c <HAL_UART_IRQHandler+0x590>
 8006782:	bf00      	nop
 8006784:	04000120 	.word	0x04000120
 8006788:	0800752d 	.word	0x0800752d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006790:	2b01      	cmp	r3, #1
 8006792:	f040 814c 	bne.w	8006a2e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679a:	f003 0310 	and.w	r3, r3, #16
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 8145 	beq.w	8006a2e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a8:	f003 0310 	and.w	r3, r3, #16
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 813e 	beq.w	8006a2e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2210      	movs	r2, #16
 80067b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c4:	2b40      	cmp	r3, #64	; 0x40
 80067c6:	f040 80b6 	bne.w	8006936 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 8150 	beq.w	8006a80 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067ea:	429a      	cmp	r2, r3
 80067ec:	f080 8148 	bcs.w	8006a80 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006804:	f000 8086 	beq.w	8006914 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800681c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006832:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006836:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800683e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800684a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1da      	bne.n	8006808 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006864:	f023 0301 	bic.w	r3, r3, #1
 8006868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3308      	adds	r3, #8
 8006872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006876:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800687a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800687e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1e1      	bne.n	8006852 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3308      	adds	r3, #8
 8006894:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800689e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3308      	adds	r3, #8
 80068ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e3      	bne.n	800688e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e4:	f023 0310 	bic.w	r3, r3, #16
 80068e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80068f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e4      	bne.n	80068d4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800690e:	4618      	mov	r0, r3
 8006910:	f7fc f82a 	bl	8002968 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006926:	b29b      	uxth	r3, r3
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	b29b      	uxth	r3, r3
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f8c2 	bl	8006ab8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006934:	e0a4      	b.n	8006a80 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006942:	b29b      	uxth	r3, r3
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 8096 	beq.w	8006a84 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006958:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 8091 	beq.w	8006a84 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006972:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006976:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006984:	647b      	str	r3, [r7, #68]	; 0x44
 8006986:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800698a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e4      	bne.n	8006962 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3308      	adds	r3, #8
 800699e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	e853 3f00 	ldrex	r3, [r3]
 80069a6:	623b      	str	r3, [r7, #32]
   return(result);
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3308      	adds	r3, #8
 80069b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069bc:	633a      	str	r2, [r7, #48]	; 0x30
 80069be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e3      	bne.n	8006998 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f023 0310 	bic.w	r3, r3, #16
 80069f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a06:	61fb      	str	r3, [r7, #28]
 8006a08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0a:	69b9      	ldr	r1, [r7, #24]
 8006a0c:	69fa      	ldr	r2, [r7, #28]
 8006a0e:	e841 2300 	strex	r3, r2, [r1]
 8006a12:	617b      	str	r3, [r7, #20]
   return(result);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1e4      	bne.n	80069e4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f846 	bl	8006ab8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a2c:	e02a      	b.n	8006a84 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00e      	beq.n	8006a58 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d008      	beq.n	8006a58 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01c      	beq.n	8006a88 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
    }
    return;
 8006a56:	e017      	b.n	8006a88 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d012      	beq.n	8006a8a <HAL_UART_IRQHandler+0x59e>
 8006a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00c      	beq.n	8006a8a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fd71 	bl	8007558 <UART_EndTransmit_IT>
    return;
 8006a76:	e008      	b.n	8006a8a <HAL_UART_IRQHandler+0x59e>
      return;
 8006a78:	bf00      	nop
 8006a7a:	e006      	b.n	8006a8a <HAL_UART_IRQHandler+0x59e>
    return;
 8006a7c:	bf00      	nop
 8006a7e:	e004      	b.n	8006a8a <HAL_UART_IRQHandler+0x59e>
      return;
 8006a80:	bf00      	nop
 8006a82:	e002      	b.n	8006a8a <HAL_UART_IRQHandler+0x59e>
      return;
 8006a84:	bf00      	nop
 8006a86:	e000      	b.n	8006a8a <HAL_UART_IRQHandler+0x59e>
    return;
 8006a88:	bf00      	nop
  }

}
 8006a8a:	37e8      	adds	r7, #232	; 0xe8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4ba6      	ldr	r3, [pc, #664]	; (8006d94 <UART_SetConfig+0x2c4>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6812      	ldr	r2, [r2, #0]
 8006b02:	6979      	ldr	r1, [r7, #20]
 8006b04:	430b      	orrs	r3, r1
 8006b06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68da      	ldr	r2, [r3, #12]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a94      	ldr	r2, [pc, #592]	; (8006d98 <UART_SetConfig+0x2c8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d120      	bne.n	8006b8e <UART_SetConfig+0xbe>
 8006b4c:	4b93      	ldr	r3, [pc, #588]	; (8006d9c <UART_SetConfig+0x2cc>)
 8006b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d816      	bhi.n	8006b88 <UART_SetConfig+0xb8>
 8006b5a:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <UART_SetConfig+0x90>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006b71 	.word	0x08006b71
 8006b64:	08006b7d 	.word	0x08006b7d
 8006b68:	08006b77 	.word	0x08006b77
 8006b6c:	08006b83 	.word	0x08006b83
 8006b70:	2301      	movs	r3, #1
 8006b72:	77fb      	strb	r3, [r7, #31]
 8006b74:	e150      	b.n	8006e18 <UART_SetConfig+0x348>
 8006b76:	2302      	movs	r3, #2
 8006b78:	77fb      	strb	r3, [r7, #31]
 8006b7a:	e14d      	b.n	8006e18 <UART_SetConfig+0x348>
 8006b7c:	2304      	movs	r3, #4
 8006b7e:	77fb      	strb	r3, [r7, #31]
 8006b80:	e14a      	b.n	8006e18 <UART_SetConfig+0x348>
 8006b82:	2308      	movs	r3, #8
 8006b84:	77fb      	strb	r3, [r7, #31]
 8006b86:	e147      	b.n	8006e18 <UART_SetConfig+0x348>
 8006b88:	2310      	movs	r3, #16
 8006b8a:	77fb      	strb	r3, [r7, #31]
 8006b8c:	e144      	b.n	8006e18 <UART_SetConfig+0x348>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a83      	ldr	r2, [pc, #524]	; (8006da0 <UART_SetConfig+0x2d0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d132      	bne.n	8006bfe <UART_SetConfig+0x12e>
 8006b98:	4b80      	ldr	r3, [pc, #512]	; (8006d9c <UART_SetConfig+0x2cc>)
 8006b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9e:	f003 030c 	and.w	r3, r3, #12
 8006ba2:	2b0c      	cmp	r3, #12
 8006ba4:	d828      	bhi.n	8006bf8 <UART_SetConfig+0x128>
 8006ba6:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <UART_SetConfig+0xdc>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006be1 	.word	0x08006be1
 8006bb0:	08006bf9 	.word	0x08006bf9
 8006bb4:	08006bf9 	.word	0x08006bf9
 8006bb8:	08006bf9 	.word	0x08006bf9
 8006bbc:	08006bed 	.word	0x08006bed
 8006bc0:	08006bf9 	.word	0x08006bf9
 8006bc4:	08006bf9 	.word	0x08006bf9
 8006bc8:	08006bf9 	.word	0x08006bf9
 8006bcc:	08006be7 	.word	0x08006be7
 8006bd0:	08006bf9 	.word	0x08006bf9
 8006bd4:	08006bf9 	.word	0x08006bf9
 8006bd8:	08006bf9 	.word	0x08006bf9
 8006bdc:	08006bf3 	.word	0x08006bf3
 8006be0:	2300      	movs	r3, #0
 8006be2:	77fb      	strb	r3, [r7, #31]
 8006be4:	e118      	b.n	8006e18 <UART_SetConfig+0x348>
 8006be6:	2302      	movs	r3, #2
 8006be8:	77fb      	strb	r3, [r7, #31]
 8006bea:	e115      	b.n	8006e18 <UART_SetConfig+0x348>
 8006bec:	2304      	movs	r3, #4
 8006bee:	77fb      	strb	r3, [r7, #31]
 8006bf0:	e112      	b.n	8006e18 <UART_SetConfig+0x348>
 8006bf2:	2308      	movs	r3, #8
 8006bf4:	77fb      	strb	r3, [r7, #31]
 8006bf6:	e10f      	b.n	8006e18 <UART_SetConfig+0x348>
 8006bf8:	2310      	movs	r3, #16
 8006bfa:	77fb      	strb	r3, [r7, #31]
 8006bfc:	e10c      	b.n	8006e18 <UART_SetConfig+0x348>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a68      	ldr	r2, [pc, #416]	; (8006da4 <UART_SetConfig+0x2d4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d120      	bne.n	8006c4a <UART_SetConfig+0x17a>
 8006c08:	4b64      	ldr	r3, [pc, #400]	; (8006d9c <UART_SetConfig+0x2cc>)
 8006c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c12:	2b30      	cmp	r3, #48	; 0x30
 8006c14:	d013      	beq.n	8006c3e <UART_SetConfig+0x16e>
 8006c16:	2b30      	cmp	r3, #48	; 0x30
 8006c18:	d814      	bhi.n	8006c44 <UART_SetConfig+0x174>
 8006c1a:	2b20      	cmp	r3, #32
 8006c1c:	d009      	beq.n	8006c32 <UART_SetConfig+0x162>
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d810      	bhi.n	8006c44 <UART_SetConfig+0x174>
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <UART_SetConfig+0x15c>
 8006c26:	2b10      	cmp	r3, #16
 8006c28:	d006      	beq.n	8006c38 <UART_SetConfig+0x168>
 8006c2a:	e00b      	b.n	8006c44 <UART_SetConfig+0x174>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	77fb      	strb	r3, [r7, #31]
 8006c30:	e0f2      	b.n	8006e18 <UART_SetConfig+0x348>
 8006c32:	2302      	movs	r3, #2
 8006c34:	77fb      	strb	r3, [r7, #31]
 8006c36:	e0ef      	b.n	8006e18 <UART_SetConfig+0x348>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	77fb      	strb	r3, [r7, #31]
 8006c3c:	e0ec      	b.n	8006e18 <UART_SetConfig+0x348>
 8006c3e:	2308      	movs	r3, #8
 8006c40:	77fb      	strb	r3, [r7, #31]
 8006c42:	e0e9      	b.n	8006e18 <UART_SetConfig+0x348>
 8006c44:	2310      	movs	r3, #16
 8006c46:	77fb      	strb	r3, [r7, #31]
 8006c48:	e0e6      	b.n	8006e18 <UART_SetConfig+0x348>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a56      	ldr	r2, [pc, #344]	; (8006da8 <UART_SetConfig+0x2d8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d120      	bne.n	8006c96 <UART_SetConfig+0x1c6>
 8006c54:	4b51      	ldr	r3, [pc, #324]	; (8006d9c <UART_SetConfig+0x2cc>)
 8006c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c60:	d013      	beq.n	8006c8a <UART_SetConfig+0x1ba>
 8006c62:	2bc0      	cmp	r3, #192	; 0xc0
 8006c64:	d814      	bhi.n	8006c90 <UART_SetConfig+0x1c0>
 8006c66:	2b80      	cmp	r3, #128	; 0x80
 8006c68:	d009      	beq.n	8006c7e <UART_SetConfig+0x1ae>
 8006c6a:	2b80      	cmp	r3, #128	; 0x80
 8006c6c:	d810      	bhi.n	8006c90 <UART_SetConfig+0x1c0>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <UART_SetConfig+0x1a8>
 8006c72:	2b40      	cmp	r3, #64	; 0x40
 8006c74:	d006      	beq.n	8006c84 <UART_SetConfig+0x1b4>
 8006c76:	e00b      	b.n	8006c90 <UART_SetConfig+0x1c0>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	77fb      	strb	r3, [r7, #31]
 8006c7c:	e0cc      	b.n	8006e18 <UART_SetConfig+0x348>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	77fb      	strb	r3, [r7, #31]
 8006c82:	e0c9      	b.n	8006e18 <UART_SetConfig+0x348>
 8006c84:	2304      	movs	r3, #4
 8006c86:	77fb      	strb	r3, [r7, #31]
 8006c88:	e0c6      	b.n	8006e18 <UART_SetConfig+0x348>
 8006c8a:	2308      	movs	r3, #8
 8006c8c:	77fb      	strb	r3, [r7, #31]
 8006c8e:	e0c3      	b.n	8006e18 <UART_SetConfig+0x348>
 8006c90:	2310      	movs	r3, #16
 8006c92:	77fb      	strb	r3, [r7, #31]
 8006c94:	e0c0      	b.n	8006e18 <UART_SetConfig+0x348>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a44      	ldr	r2, [pc, #272]	; (8006dac <UART_SetConfig+0x2dc>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d125      	bne.n	8006cec <UART_SetConfig+0x21c>
 8006ca0:	4b3e      	ldr	r3, [pc, #248]	; (8006d9c <UART_SetConfig+0x2cc>)
 8006ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cae:	d017      	beq.n	8006ce0 <UART_SetConfig+0x210>
 8006cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb4:	d817      	bhi.n	8006ce6 <UART_SetConfig+0x216>
 8006cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cba:	d00b      	beq.n	8006cd4 <UART_SetConfig+0x204>
 8006cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc0:	d811      	bhi.n	8006ce6 <UART_SetConfig+0x216>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <UART_SetConfig+0x1fe>
 8006cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cca:	d006      	beq.n	8006cda <UART_SetConfig+0x20a>
 8006ccc:	e00b      	b.n	8006ce6 <UART_SetConfig+0x216>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	77fb      	strb	r3, [r7, #31]
 8006cd2:	e0a1      	b.n	8006e18 <UART_SetConfig+0x348>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	77fb      	strb	r3, [r7, #31]
 8006cd8:	e09e      	b.n	8006e18 <UART_SetConfig+0x348>
 8006cda:	2304      	movs	r3, #4
 8006cdc:	77fb      	strb	r3, [r7, #31]
 8006cde:	e09b      	b.n	8006e18 <UART_SetConfig+0x348>
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	77fb      	strb	r3, [r7, #31]
 8006ce4:	e098      	b.n	8006e18 <UART_SetConfig+0x348>
 8006ce6:	2310      	movs	r3, #16
 8006ce8:	77fb      	strb	r3, [r7, #31]
 8006cea:	e095      	b.n	8006e18 <UART_SetConfig+0x348>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a2f      	ldr	r2, [pc, #188]	; (8006db0 <UART_SetConfig+0x2e0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d125      	bne.n	8006d42 <UART_SetConfig+0x272>
 8006cf6:	4b29      	ldr	r3, [pc, #164]	; (8006d9c <UART_SetConfig+0x2cc>)
 8006cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d04:	d017      	beq.n	8006d36 <UART_SetConfig+0x266>
 8006d06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d0a:	d817      	bhi.n	8006d3c <UART_SetConfig+0x26c>
 8006d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d10:	d00b      	beq.n	8006d2a <UART_SetConfig+0x25a>
 8006d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d16:	d811      	bhi.n	8006d3c <UART_SetConfig+0x26c>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <UART_SetConfig+0x254>
 8006d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d20:	d006      	beq.n	8006d30 <UART_SetConfig+0x260>
 8006d22:	e00b      	b.n	8006d3c <UART_SetConfig+0x26c>
 8006d24:	2301      	movs	r3, #1
 8006d26:	77fb      	strb	r3, [r7, #31]
 8006d28:	e076      	b.n	8006e18 <UART_SetConfig+0x348>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	77fb      	strb	r3, [r7, #31]
 8006d2e:	e073      	b.n	8006e18 <UART_SetConfig+0x348>
 8006d30:	2304      	movs	r3, #4
 8006d32:	77fb      	strb	r3, [r7, #31]
 8006d34:	e070      	b.n	8006e18 <UART_SetConfig+0x348>
 8006d36:	2308      	movs	r3, #8
 8006d38:	77fb      	strb	r3, [r7, #31]
 8006d3a:	e06d      	b.n	8006e18 <UART_SetConfig+0x348>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	77fb      	strb	r3, [r7, #31]
 8006d40:	e06a      	b.n	8006e18 <UART_SetConfig+0x348>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a1b      	ldr	r2, [pc, #108]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d138      	bne.n	8006dbe <UART_SetConfig+0x2ee>
 8006d4c:	4b13      	ldr	r3, [pc, #76]	; (8006d9c <UART_SetConfig+0x2cc>)
 8006d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d52:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d5a:	d017      	beq.n	8006d8c <UART_SetConfig+0x2bc>
 8006d5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d60:	d82a      	bhi.n	8006db8 <UART_SetConfig+0x2e8>
 8006d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d66:	d00b      	beq.n	8006d80 <UART_SetConfig+0x2b0>
 8006d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d6c:	d824      	bhi.n	8006db8 <UART_SetConfig+0x2e8>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <UART_SetConfig+0x2aa>
 8006d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d76:	d006      	beq.n	8006d86 <UART_SetConfig+0x2b6>
 8006d78:	e01e      	b.n	8006db8 <UART_SetConfig+0x2e8>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	77fb      	strb	r3, [r7, #31]
 8006d7e:	e04b      	b.n	8006e18 <UART_SetConfig+0x348>
 8006d80:	2302      	movs	r3, #2
 8006d82:	77fb      	strb	r3, [r7, #31]
 8006d84:	e048      	b.n	8006e18 <UART_SetConfig+0x348>
 8006d86:	2304      	movs	r3, #4
 8006d88:	77fb      	strb	r3, [r7, #31]
 8006d8a:	e045      	b.n	8006e18 <UART_SetConfig+0x348>
 8006d8c:	2308      	movs	r3, #8
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e042      	b.n	8006e18 <UART_SetConfig+0x348>
 8006d92:	bf00      	nop
 8006d94:	efff69f3 	.word	0xefff69f3
 8006d98:	40011000 	.word	0x40011000
 8006d9c:	40023800 	.word	0x40023800
 8006da0:	40004400 	.word	0x40004400
 8006da4:	40004800 	.word	0x40004800
 8006da8:	40004c00 	.word	0x40004c00
 8006dac:	40005000 	.word	0x40005000
 8006db0:	40011400 	.word	0x40011400
 8006db4:	40007800 	.word	0x40007800
 8006db8:	2310      	movs	r3, #16
 8006dba:	77fb      	strb	r3, [r7, #31]
 8006dbc:	e02c      	b.n	8006e18 <UART_SetConfig+0x348>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a72      	ldr	r2, [pc, #456]	; (8006f8c <UART_SetConfig+0x4bc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d125      	bne.n	8006e14 <UART_SetConfig+0x344>
 8006dc8:	4b71      	ldr	r3, [pc, #452]	; (8006f90 <UART_SetConfig+0x4c0>)
 8006dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006dd2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006dd6:	d017      	beq.n	8006e08 <UART_SetConfig+0x338>
 8006dd8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ddc:	d817      	bhi.n	8006e0e <UART_SetConfig+0x33e>
 8006dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de2:	d00b      	beq.n	8006dfc <UART_SetConfig+0x32c>
 8006de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de8:	d811      	bhi.n	8006e0e <UART_SetConfig+0x33e>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <UART_SetConfig+0x326>
 8006dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df2:	d006      	beq.n	8006e02 <UART_SetConfig+0x332>
 8006df4:	e00b      	b.n	8006e0e <UART_SetConfig+0x33e>
 8006df6:	2300      	movs	r3, #0
 8006df8:	77fb      	strb	r3, [r7, #31]
 8006dfa:	e00d      	b.n	8006e18 <UART_SetConfig+0x348>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	77fb      	strb	r3, [r7, #31]
 8006e00:	e00a      	b.n	8006e18 <UART_SetConfig+0x348>
 8006e02:	2304      	movs	r3, #4
 8006e04:	77fb      	strb	r3, [r7, #31]
 8006e06:	e007      	b.n	8006e18 <UART_SetConfig+0x348>
 8006e08:	2308      	movs	r3, #8
 8006e0a:	77fb      	strb	r3, [r7, #31]
 8006e0c:	e004      	b.n	8006e18 <UART_SetConfig+0x348>
 8006e0e:	2310      	movs	r3, #16
 8006e10:	77fb      	strb	r3, [r7, #31]
 8006e12:	e001      	b.n	8006e18 <UART_SetConfig+0x348>
 8006e14:	2310      	movs	r3, #16
 8006e16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e20:	d15b      	bne.n	8006eda <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006e22:	7ffb      	ldrb	r3, [r7, #31]
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d828      	bhi.n	8006e7a <UART_SetConfig+0x3aa>
 8006e28:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <UART_SetConfig+0x360>)
 8006e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2e:	bf00      	nop
 8006e30:	08006e55 	.word	0x08006e55
 8006e34:	08006e5d 	.word	0x08006e5d
 8006e38:	08006e65 	.word	0x08006e65
 8006e3c:	08006e7b 	.word	0x08006e7b
 8006e40:	08006e6b 	.word	0x08006e6b
 8006e44:	08006e7b 	.word	0x08006e7b
 8006e48:	08006e7b 	.word	0x08006e7b
 8006e4c:	08006e7b 	.word	0x08006e7b
 8006e50:	08006e73 	.word	0x08006e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e54:	f7fd ffa6 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 8006e58:	61b8      	str	r0, [r7, #24]
        break;
 8006e5a:	e013      	b.n	8006e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e5c:	f7fd ffb6 	bl	8004dcc <HAL_RCC_GetPCLK2Freq>
 8006e60:	61b8      	str	r0, [r7, #24]
        break;
 8006e62:	e00f      	b.n	8006e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e64:	4b4b      	ldr	r3, [pc, #300]	; (8006f94 <UART_SetConfig+0x4c4>)
 8006e66:	61bb      	str	r3, [r7, #24]
        break;
 8006e68:	e00c      	b.n	8006e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e6a:	f7fd fe89 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 8006e6e:	61b8      	str	r0, [r7, #24]
        break;
 8006e70:	e008      	b.n	8006e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e76:	61bb      	str	r3, [r7, #24]
        break;
 8006e78:	e004      	b.n	8006e84 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	77bb      	strb	r3, [r7, #30]
        break;
 8006e82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d074      	beq.n	8006f74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	005a      	lsls	r2, r3, #1
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	085b      	lsrs	r3, r3, #1
 8006e94:	441a      	add	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b0f      	cmp	r3, #15
 8006ea4:	d916      	bls.n	8006ed4 <UART_SetConfig+0x404>
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eac:	d212      	bcs.n	8006ed4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	f023 030f 	bic.w	r3, r3, #15
 8006eb6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	085b      	lsrs	r3, r3, #1
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	f003 0307 	and.w	r3, r3, #7
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	89fb      	ldrh	r3, [r7, #14]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	89fa      	ldrh	r2, [r7, #14]
 8006ed0:	60da      	str	r2, [r3, #12]
 8006ed2:	e04f      	b.n	8006f74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	77bb      	strb	r3, [r7, #30]
 8006ed8:	e04c      	b.n	8006f74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eda:	7ffb      	ldrb	r3, [r7, #31]
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d828      	bhi.n	8006f32 <UART_SetConfig+0x462>
 8006ee0:	a201      	add	r2, pc, #4	; (adr r2, 8006ee8 <UART_SetConfig+0x418>)
 8006ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee6:	bf00      	nop
 8006ee8:	08006f0d 	.word	0x08006f0d
 8006eec:	08006f15 	.word	0x08006f15
 8006ef0:	08006f1d 	.word	0x08006f1d
 8006ef4:	08006f33 	.word	0x08006f33
 8006ef8:	08006f23 	.word	0x08006f23
 8006efc:	08006f33 	.word	0x08006f33
 8006f00:	08006f33 	.word	0x08006f33
 8006f04:	08006f33 	.word	0x08006f33
 8006f08:	08006f2b 	.word	0x08006f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f0c:	f7fd ff4a 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 8006f10:	61b8      	str	r0, [r7, #24]
        break;
 8006f12:	e013      	b.n	8006f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f14:	f7fd ff5a 	bl	8004dcc <HAL_RCC_GetPCLK2Freq>
 8006f18:	61b8      	str	r0, [r7, #24]
        break;
 8006f1a:	e00f      	b.n	8006f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f1c:	4b1d      	ldr	r3, [pc, #116]	; (8006f94 <UART_SetConfig+0x4c4>)
 8006f1e:	61bb      	str	r3, [r7, #24]
        break;
 8006f20:	e00c      	b.n	8006f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f22:	f7fd fe2d 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 8006f26:	61b8      	str	r0, [r7, #24]
        break;
 8006f28:	e008      	b.n	8006f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f2e:	61bb      	str	r3, [r7, #24]
        break;
 8006f30:	e004      	b.n	8006f3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	77bb      	strb	r3, [r7, #30]
        break;
 8006f3a:	bf00      	nop
    }

    if (pclk != 0U)
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d018      	beq.n	8006f74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	085a      	lsrs	r2, r3, #1
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	441a      	add	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b0f      	cmp	r3, #15
 8006f5a:	d909      	bls.n	8006f70 <UART_SetConfig+0x4a0>
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f62:	d205      	bcs.n	8006f70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	60da      	str	r2, [r3, #12]
 8006f6e:	e001      	b.n	8006f74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006f80:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3720      	adds	r7, #32
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	40007c00 	.word	0x40007c00
 8006f90:	40023800 	.word	0x40023800
 8006f94:	00f42400 	.word	0x00f42400

08006f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00a      	beq.n	8006fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00a      	beq.n	8007006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	f003 0308 	and.w	r3, r3, #8
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	430a      	orrs	r2, r1
 8007026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	f003 0310 	and.w	r3, r3, #16
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00a      	beq.n	800704a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	f003 0320 	and.w	r3, r3, #32
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01a      	beq.n	80070ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007096:	d10a      	bne.n	80070ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	605a      	str	r2, [r3, #4]
  }
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af02      	add	r7, sp, #8
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070ec:	f7fb f9ec 	bl	80024c8 <HAL_GetTick>
 80070f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0308 	and.w	r3, r3, #8
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d10e      	bne.n	800711e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f81b 	bl	800714a <UART_WaitOnFlagUntilTimeout>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e011      	b.n	8007142 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2220      	movs	r2, #32
 8007122:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b09c      	sub	sp, #112	; 0x70
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	603b      	str	r3, [r7, #0]
 8007156:	4613      	mov	r3, r2
 8007158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800715a:	e0a7      	b.n	80072ac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800715c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800715e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007162:	f000 80a3 	beq.w	80072ac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007166:	f7fb f9af 	bl	80024c8 <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007172:	429a      	cmp	r2, r3
 8007174:	d302      	bcc.n	800717c <UART_WaitOnFlagUntilTimeout+0x32>
 8007176:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007178:	2b00      	cmp	r3, #0
 800717a:	d13f      	bne.n	80071fc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800718a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800718c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007190:	667b      	str	r3, [r7, #100]	; 0x64
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800719a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800719c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1e6      	bne.n	800717c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3308      	adds	r3, #8
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c0:	f023 0301 	bic.w	r3, r3, #1
 80071c4:	663b      	str	r3, [r7, #96]	; 0x60
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3308      	adds	r3, #8
 80071cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80071d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e5      	bne.n	80071ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2220      	movs	r2, #32
 80071e6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e068      	b.n	80072ce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0304 	and.w	r3, r3, #4
 8007206:	2b00      	cmp	r3, #0
 8007208:	d050      	beq.n	80072ac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007218:	d148      	bne.n	80072ac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007222:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007238:	66fb      	str	r3, [r7, #108]	; 0x6c
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007242:	637b      	str	r3, [r7, #52]	; 0x34
 8007244:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e6      	bne.n	8007224 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3308      	adds	r3, #8
 800725c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	613b      	str	r3, [r7, #16]
   return(result);
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f023 0301 	bic.w	r3, r3, #1
 800726c:	66bb      	str	r3, [r7, #104]	; 0x68
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3308      	adds	r3, #8
 8007274:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007276:	623a      	str	r2, [r7, #32]
 8007278:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727a:	69f9      	ldr	r1, [r7, #28]
 800727c:	6a3a      	ldr	r2, [r7, #32]
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	61bb      	str	r3, [r7, #24]
   return(result);
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e5      	bne.n	8007256 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2220      	movs	r2, #32
 800728e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2220      	movs	r2, #32
 8007294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2220      	movs	r2, #32
 800729c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e010      	b.n	80072ce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	69da      	ldr	r2, [r3, #28]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	4013      	ands	r3, r2
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	bf0c      	ite	eq
 80072bc:	2301      	moveq	r3, #1
 80072be:	2300      	movne	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	461a      	mov	r2, r3
 80072c4:	79fb      	ldrb	r3, [r7, #7]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	f43f af48 	beq.w	800715c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3770      	adds	r7, #112	; 0x70
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
	...

080072d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072d8:	b480      	push	{r7}
 80072da:	b097      	sub	sp, #92	; 0x5c
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	4613      	mov	r3, r2
 80072e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	88fa      	ldrh	r2, [r7, #6]
 80072f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	88fa      	ldrh	r2, [r7, #6]
 80072f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730a:	d10e      	bne.n	800732a <UART_Start_Receive_IT+0x52>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d105      	bne.n	8007320 <UART_Start_Receive_IT+0x48>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f240 12ff 	movw	r2, #511	; 0x1ff
 800731a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800731e:	e02d      	b.n	800737c <UART_Start_Receive_IT+0xa4>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	22ff      	movs	r2, #255	; 0xff
 8007324:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007328:	e028      	b.n	800737c <UART_Start_Receive_IT+0xa4>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10d      	bne.n	800734e <UART_Start_Receive_IT+0x76>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d104      	bne.n	8007344 <UART_Start_Receive_IT+0x6c>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	22ff      	movs	r2, #255	; 0xff
 800733e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007342:	e01b      	b.n	800737c <UART_Start_Receive_IT+0xa4>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	227f      	movs	r2, #127	; 0x7f
 8007348:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800734c:	e016      	b.n	800737c <UART_Start_Receive_IT+0xa4>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007356:	d10d      	bne.n	8007374 <UART_Start_Receive_IT+0x9c>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d104      	bne.n	800736a <UART_Start_Receive_IT+0x92>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	227f      	movs	r2, #127	; 0x7f
 8007364:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007368:	e008      	b.n	800737c <UART_Start_Receive_IT+0xa4>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	223f      	movs	r2, #63	; 0x3f
 800736e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007372:	e003      	b.n	800737c <UART_Start_Receive_IT+0xa4>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2222      	movs	r2, #34	; 0x22
 8007388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3308      	adds	r3, #8
 8007392:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739e:	f043 0301 	orr.w	r3, r3, #1
 80073a2:	657b      	str	r3, [r7, #84]	; 0x54
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3308      	adds	r3, #8
 80073aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073ac:	64ba      	str	r2, [r7, #72]	; 0x48
 80073ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e5      	bne.n	800738c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c8:	d107      	bne.n	80073da <UART_Start_Receive_IT+0x102>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d103      	bne.n	80073da <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4a21      	ldr	r2, [pc, #132]	; (800745c <UART_Start_Receive_IT+0x184>)
 80073d6:	669a      	str	r2, [r3, #104]	; 0x68
 80073d8:	e002      	b.n	80073e0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4a20      	ldr	r2, [pc, #128]	; (8007460 <UART_Start_Receive_IT+0x188>)
 80073de:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d019      	beq.n	800741c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80073fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007406:	637b      	str	r3, [r7, #52]	; 0x34
 8007408:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800740c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e6      	bne.n	80073e8 <UART_Start_Receive_IT+0x110>
 800741a:	e018      	b.n	800744e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	613b      	str	r3, [r7, #16]
   return(result);
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f043 0320 	orr.w	r3, r3, #32
 8007430:	653b      	str	r3, [r7, #80]	; 0x50
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800743a:	623b      	str	r3, [r7, #32]
 800743c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	69f9      	ldr	r1, [r7, #28]
 8007440:	6a3a      	ldr	r2, [r7, #32]
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	61bb      	str	r3, [r7, #24]
   return(result);
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e6      	bne.n	800741c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	375c      	adds	r7, #92	; 0x5c
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	08007713 	.word	0x08007713
 8007460:	080075ad 	.word	0x080075ad

08007464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007464:	b480      	push	{r7}
 8007466:	b095      	sub	sp, #84	; 0x54
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007480:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748a:	643b      	str	r3, [r7, #64]	; 0x40
 800748c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007490:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e6      	bne.n	800746c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3308      	adds	r3, #8
 80074a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	f023 0301 	bic.w	r3, r3, #1
 80074b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3308      	adds	r3, #8
 80074bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e5      	bne.n	800749e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d118      	bne.n	800750c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f023 0310 	bic.w	r3, r3, #16
 80074ee:	647b      	str	r3, [r7, #68]	; 0x44
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	461a      	mov	r2, r3
 80074f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074f8:	61bb      	str	r3, [r7, #24]
 80074fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fc:	6979      	ldr	r1, [r7, #20]
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	e841 2300 	strex	r3, r2, [r1]
 8007504:	613b      	str	r3, [r7, #16]
   return(result);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1e6      	bne.n	80074da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2220      	movs	r2, #32
 8007510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007520:	bf00      	nop
 8007522:	3754      	adds	r7, #84	; 0x54
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f7ff faaa 	bl	8006aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007550:	bf00      	nop
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	60bb      	str	r3, [r7, #8]
   return(result);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6979      	ldr	r1, [r7, #20]
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	613b      	str	r3, [r7, #16]
   return(result);
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e6      	bne.n	8007560 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2220      	movs	r2, #32
 8007596:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff fa76 	bl	8006a90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075a4:	bf00      	nop
 80075a6:	3720      	adds	r7, #32
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b096      	sub	sp, #88	; 0x58
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c4:	2b22      	cmp	r3, #34	; 0x22
 80075c6:	f040 8098 	bne.w	80076fa <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80075d4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80075d8:	b2d9      	uxtb	r1, r3
 80075da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e4:	400a      	ands	r2, r1
 80075e6:	b2d2      	uxtb	r2, r2
 80075e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d17b      	bne.n	800770a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007622:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007626:	653b      	str	r3, [r7, #80]	; 0x50
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	461a      	mov	r2, r3
 800762e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007630:	647b      	str	r3, [r7, #68]	; 0x44
 8007632:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800763e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e6      	bne.n	8007612 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3308      	adds	r3, #8
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	623b      	str	r3, [r7, #32]
   return(result);
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	f023 0301 	bic.w	r3, r3, #1
 800765a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3308      	adds	r3, #8
 8007662:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007664:	633a      	str	r2, [r7, #48]	; 0x30
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800766a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e5      	bne.n	8007644 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2220      	movs	r2, #32
 800767c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007690:	2b01      	cmp	r3, #1
 8007692:	d12e      	bne.n	80076f2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0310 	bic.w	r3, r3, #16
 80076ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076b8:	61fb      	str	r3, [r7, #28]
 80076ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	69b9      	ldr	r1, [r7, #24]
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	e841 2300 	strex	r3, r2, [r1]
 80076c4:	617b      	str	r3, [r7, #20]
   return(result);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e6      	bne.n	800769a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	f003 0310 	and.w	r3, r3, #16
 80076d6:	2b10      	cmp	r3, #16
 80076d8:	d103      	bne.n	80076e2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2210      	movs	r2, #16
 80076e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff f9e4 	bl	8006ab8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076f0:	e00b      	b.n	800770a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7fa fa2a 	bl	8001b4c <HAL_UART_RxCpltCallback>
}
 80076f8:	e007      	b.n	800770a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	699a      	ldr	r2, [r3, #24]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f042 0208 	orr.w	r2, r2, #8
 8007708:	619a      	str	r2, [r3, #24]
}
 800770a:	bf00      	nop
 800770c:	3758      	adds	r7, #88	; 0x58
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b096      	sub	sp, #88	; 0x58
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007720:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800772a:	2b22      	cmp	r3, #34	; 0x22
 800772c:	f040 8098 	bne.w	8007860 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007736:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007740:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007744:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007748:	4013      	ands	r3, r2
 800774a:	b29a      	uxth	r2, r3
 800774c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800774e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007754:	1c9a      	adds	r2, r3, #2
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007760:	b29b      	uxth	r3, r3
 8007762:	3b01      	subs	r3, #1
 8007764:	b29a      	uxth	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d17b      	bne.n	8007870 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800778c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007796:	643b      	str	r3, [r7, #64]	; 0x40
 8007798:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800779c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e6      	bne.n	8007778 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3308      	adds	r3, #8
 80077b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	f023 0301 	bic.w	r3, r3, #1
 80077c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3308      	adds	r3, #8
 80077c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e5      	bne.n	80077aa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d12e      	bne.n	8007858 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	60bb      	str	r3, [r7, #8]
   return(result);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	f023 0310 	bic.w	r3, r3, #16
 8007814:	647b      	str	r3, [r7, #68]	; 0x44
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800781e:	61bb      	str	r3, [r7, #24]
 8007820:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6979      	ldr	r1, [r7, #20]
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	613b      	str	r3, [r7, #16]
   return(result);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e6      	bne.n	8007800 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	f003 0310 	and.w	r3, r3, #16
 800783c:	2b10      	cmp	r3, #16
 800783e:	d103      	bne.n	8007848 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2210      	movs	r2, #16
 8007846:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff f931 	bl	8006ab8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007856:	e00b      	b.n	8007870 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7fa f977 	bl	8001b4c <HAL_UART_RxCpltCallback>
}
 800785e:	e007      	b.n	8007870 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	699a      	ldr	r2, [r3, #24]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0208 	orr.w	r2, r2, #8
 800786e:	619a      	str	r2, [r3, #24]
}
 8007870:	bf00      	nop
 8007872:	3758      	adds	r7, #88	; 0x58
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <siprintf>:
 8007878:	b40e      	push	{r1, r2, r3}
 800787a:	b500      	push	{lr}
 800787c:	b09c      	sub	sp, #112	; 0x70
 800787e:	ab1d      	add	r3, sp, #116	; 0x74
 8007880:	9002      	str	r0, [sp, #8]
 8007882:	9006      	str	r0, [sp, #24]
 8007884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007888:	4809      	ldr	r0, [pc, #36]	; (80078b0 <siprintf+0x38>)
 800788a:	9107      	str	r1, [sp, #28]
 800788c:	9104      	str	r1, [sp, #16]
 800788e:	4909      	ldr	r1, [pc, #36]	; (80078b4 <siprintf+0x3c>)
 8007890:	f853 2b04 	ldr.w	r2, [r3], #4
 8007894:	9105      	str	r1, [sp, #20]
 8007896:	6800      	ldr	r0, [r0, #0]
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	a902      	add	r1, sp, #8
 800789c:	f000 f9cc 	bl	8007c38 <_svfiprintf_r>
 80078a0:	9b02      	ldr	r3, [sp, #8]
 80078a2:	2200      	movs	r2, #0
 80078a4:	701a      	strb	r2, [r3, #0]
 80078a6:	b01c      	add	sp, #112	; 0x70
 80078a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078ac:	b003      	add	sp, #12
 80078ae:	4770      	bx	lr
 80078b0:	20000088 	.word	0x20000088
 80078b4:	ffff0208 	.word	0xffff0208

080078b8 <_vsniprintf_r>:
 80078b8:	b530      	push	{r4, r5, lr}
 80078ba:	4614      	mov	r4, r2
 80078bc:	2c00      	cmp	r4, #0
 80078be:	b09b      	sub	sp, #108	; 0x6c
 80078c0:	4605      	mov	r5, r0
 80078c2:	461a      	mov	r2, r3
 80078c4:	da05      	bge.n	80078d2 <_vsniprintf_r+0x1a>
 80078c6:	238b      	movs	r3, #139	; 0x8b
 80078c8:	6003      	str	r3, [r0, #0]
 80078ca:	f04f 30ff 	mov.w	r0, #4294967295
 80078ce:	b01b      	add	sp, #108	; 0x6c
 80078d0:	bd30      	pop	{r4, r5, pc}
 80078d2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80078d6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80078da:	bf14      	ite	ne
 80078dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80078e0:	4623      	moveq	r3, r4
 80078e2:	9302      	str	r3, [sp, #8]
 80078e4:	9305      	str	r3, [sp, #20]
 80078e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078ea:	9100      	str	r1, [sp, #0]
 80078ec:	9104      	str	r1, [sp, #16]
 80078ee:	f8ad 300e 	strh.w	r3, [sp, #14]
 80078f2:	4669      	mov	r1, sp
 80078f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80078f6:	f000 f99f 	bl	8007c38 <_svfiprintf_r>
 80078fa:	1c43      	adds	r3, r0, #1
 80078fc:	bfbc      	itt	lt
 80078fe:	238b      	movlt	r3, #139	; 0x8b
 8007900:	602b      	strlt	r3, [r5, #0]
 8007902:	2c00      	cmp	r4, #0
 8007904:	d0e3      	beq.n	80078ce <_vsniprintf_r+0x16>
 8007906:	9b00      	ldr	r3, [sp, #0]
 8007908:	2200      	movs	r2, #0
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	e7df      	b.n	80078ce <_vsniprintf_r+0x16>
	...

08007910 <vsniprintf>:
 8007910:	b507      	push	{r0, r1, r2, lr}
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	4613      	mov	r3, r2
 8007916:	460a      	mov	r2, r1
 8007918:	4601      	mov	r1, r0
 800791a:	4803      	ldr	r0, [pc, #12]	; (8007928 <vsniprintf+0x18>)
 800791c:	6800      	ldr	r0, [r0, #0]
 800791e:	f7ff ffcb 	bl	80078b8 <_vsniprintf_r>
 8007922:	b003      	add	sp, #12
 8007924:	f85d fb04 	ldr.w	pc, [sp], #4
 8007928:	20000088 	.word	0x20000088

0800792c <memset>:
 800792c:	4402      	add	r2, r0
 800792e:	4603      	mov	r3, r0
 8007930:	4293      	cmp	r3, r2
 8007932:	d100      	bne.n	8007936 <memset+0xa>
 8007934:	4770      	bx	lr
 8007936:	f803 1b01 	strb.w	r1, [r3], #1
 800793a:	e7f9      	b.n	8007930 <memset+0x4>

0800793c <__errno>:
 800793c:	4b01      	ldr	r3, [pc, #4]	; (8007944 <__errno+0x8>)
 800793e:	6818      	ldr	r0, [r3, #0]
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	20000088 	.word	0x20000088

08007948 <__libc_init_array>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	4d0d      	ldr	r5, [pc, #52]	; (8007980 <__libc_init_array+0x38>)
 800794c:	4c0d      	ldr	r4, [pc, #52]	; (8007984 <__libc_init_array+0x3c>)
 800794e:	1b64      	subs	r4, r4, r5
 8007950:	10a4      	asrs	r4, r4, #2
 8007952:	2600      	movs	r6, #0
 8007954:	42a6      	cmp	r6, r4
 8007956:	d109      	bne.n	800796c <__libc_init_array+0x24>
 8007958:	4d0b      	ldr	r5, [pc, #44]	; (8007988 <__libc_init_array+0x40>)
 800795a:	4c0c      	ldr	r4, [pc, #48]	; (800798c <__libc_init_array+0x44>)
 800795c:	f000 fc6a 	bl	8008234 <_init>
 8007960:	1b64      	subs	r4, r4, r5
 8007962:	10a4      	asrs	r4, r4, #2
 8007964:	2600      	movs	r6, #0
 8007966:	42a6      	cmp	r6, r4
 8007968:	d105      	bne.n	8007976 <__libc_init_array+0x2e>
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007970:	4798      	blx	r3
 8007972:	3601      	adds	r6, #1
 8007974:	e7ee      	b.n	8007954 <__libc_init_array+0xc>
 8007976:	f855 3b04 	ldr.w	r3, [r5], #4
 800797a:	4798      	blx	r3
 800797c:	3601      	adds	r6, #1
 800797e:	e7f2      	b.n	8007966 <__libc_init_array+0x1e>
 8007980:	08008a9c 	.word	0x08008a9c
 8007984:	08008a9c 	.word	0x08008a9c
 8007988:	08008a9c 	.word	0x08008a9c
 800798c:	08008aa0 	.word	0x08008aa0

08007990 <__retarget_lock_acquire_recursive>:
 8007990:	4770      	bx	lr

08007992 <__retarget_lock_release_recursive>:
 8007992:	4770      	bx	lr

08007994 <_free_r>:
 8007994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007996:	2900      	cmp	r1, #0
 8007998:	d044      	beq.n	8007a24 <_free_r+0x90>
 800799a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800799e:	9001      	str	r0, [sp, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f1a1 0404 	sub.w	r4, r1, #4
 80079a6:	bfb8      	it	lt
 80079a8:	18e4      	addlt	r4, r4, r3
 80079aa:	f000 f8df 	bl	8007b6c <__malloc_lock>
 80079ae:	4a1e      	ldr	r2, [pc, #120]	; (8007a28 <_free_r+0x94>)
 80079b0:	9801      	ldr	r0, [sp, #4]
 80079b2:	6813      	ldr	r3, [r2, #0]
 80079b4:	b933      	cbnz	r3, 80079c4 <_free_r+0x30>
 80079b6:	6063      	str	r3, [r4, #4]
 80079b8:	6014      	str	r4, [r2, #0]
 80079ba:	b003      	add	sp, #12
 80079bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079c0:	f000 b8da 	b.w	8007b78 <__malloc_unlock>
 80079c4:	42a3      	cmp	r3, r4
 80079c6:	d908      	bls.n	80079da <_free_r+0x46>
 80079c8:	6825      	ldr	r5, [r4, #0]
 80079ca:	1961      	adds	r1, r4, r5
 80079cc:	428b      	cmp	r3, r1
 80079ce:	bf01      	itttt	eq
 80079d0:	6819      	ldreq	r1, [r3, #0]
 80079d2:	685b      	ldreq	r3, [r3, #4]
 80079d4:	1949      	addeq	r1, r1, r5
 80079d6:	6021      	streq	r1, [r4, #0]
 80079d8:	e7ed      	b.n	80079b6 <_free_r+0x22>
 80079da:	461a      	mov	r2, r3
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	b10b      	cbz	r3, 80079e4 <_free_r+0x50>
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	d9fa      	bls.n	80079da <_free_r+0x46>
 80079e4:	6811      	ldr	r1, [r2, #0]
 80079e6:	1855      	adds	r5, r2, r1
 80079e8:	42a5      	cmp	r5, r4
 80079ea:	d10b      	bne.n	8007a04 <_free_r+0x70>
 80079ec:	6824      	ldr	r4, [r4, #0]
 80079ee:	4421      	add	r1, r4
 80079f0:	1854      	adds	r4, r2, r1
 80079f2:	42a3      	cmp	r3, r4
 80079f4:	6011      	str	r1, [r2, #0]
 80079f6:	d1e0      	bne.n	80079ba <_free_r+0x26>
 80079f8:	681c      	ldr	r4, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	6053      	str	r3, [r2, #4]
 80079fe:	440c      	add	r4, r1
 8007a00:	6014      	str	r4, [r2, #0]
 8007a02:	e7da      	b.n	80079ba <_free_r+0x26>
 8007a04:	d902      	bls.n	8007a0c <_free_r+0x78>
 8007a06:	230c      	movs	r3, #12
 8007a08:	6003      	str	r3, [r0, #0]
 8007a0a:	e7d6      	b.n	80079ba <_free_r+0x26>
 8007a0c:	6825      	ldr	r5, [r4, #0]
 8007a0e:	1961      	adds	r1, r4, r5
 8007a10:	428b      	cmp	r3, r1
 8007a12:	bf04      	itt	eq
 8007a14:	6819      	ldreq	r1, [r3, #0]
 8007a16:	685b      	ldreq	r3, [r3, #4]
 8007a18:	6063      	str	r3, [r4, #4]
 8007a1a:	bf04      	itt	eq
 8007a1c:	1949      	addeq	r1, r1, r5
 8007a1e:	6021      	streq	r1, [r4, #0]
 8007a20:	6054      	str	r4, [r2, #4]
 8007a22:	e7ca      	b.n	80079ba <_free_r+0x26>
 8007a24:	b003      	add	sp, #12
 8007a26:	bd30      	pop	{r4, r5, pc}
 8007a28:	2000b764 	.word	0x2000b764

08007a2c <sbrk_aligned>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	4e0e      	ldr	r6, [pc, #56]	; (8007a68 <sbrk_aligned+0x3c>)
 8007a30:	460c      	mov	r4, r1
 8007a32:	6831      	ldr	r1, [r6, #0]
 8007a34:	4605      	mov	r5, r0
 8007a36:	b911      	cbnz	r1, 8007a3e <sbrk_aligned+0x12>
 8007a38:	f000 fba6 	bl	8008188 <_sbrk_r>
 8007a3c:	6030      	str	r0, [r6, #0]
 8007a3e:	4621      	mov	r1, r4
 8007a40:	4628      	mov	r0, r5
 8007a42:	f000 fba1 	bl	8008188 <_sbrk_r>
 8007a46:	1c43      	adds	r3, r0, #1
 8007a48:	d00a      	beq.n	8007a60 <sbrk_aligned+0x34>
 8007a4a:	1cc4      	adds	r4, r0, #3
 8007a4c:	f024 0403 	bic.w	r4, r4, #3
 8007a50:	42a0      	cmp	r0, r4
 8007a52:	d007      	beq.n	8007a64 <sbrk_aligned+0x38>
 8007a54:	1a21      	subs	r1, r4, r0
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 fb96 	bl	8008188 <_sbrk_r>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d101      	bne.n	8007a64 <sbrk_aligned+0x38>
 8007a60:	f04f 34ff 	mov.w	r4, #4294967295
 8007a64:	4620      	mov	r0, r4
 8007a66:	bd70      	pop	{r4, r5, r6, pc}
 8007a68:	2000b768 	.word	0x2000b768

08007a6c <_malloc_r>:
 8007a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a70:	1ccd      	adds	r5, r1, #3
 8007a72:	f025 0503 	bic.w	r5, r5, #3
 8007a76:	3508      	adds	r5, #8
 8007a78:	2d0c      	cmp	r5, #12
 8007a7a:	bf38      	it	cc
 8007a7c:	250c      	movcc	r5, #12
 8007a7e:	2d00      	cmp	r5, #0
 8007a80:	4607      	mov	r7, r0
 8007a82:	db01      	blt.n	8007a88 <_malloc_r+0x1c>
 8007a84:	42a9      	cmp	r1, r5
 8007a86:	d905      	bls.n	8007a94 <_malloc_r+0x28>
 8007a88:	230c      	movs	r3, #12
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	2600      	movs	r6, #0
 8007a8e:	4630      	mov	r0, r6
 8007a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b68 <_malloc_r+0xfc>
 8007a98:	f000 f868 	bl	8007b6c <__malloc_lock>
 8007a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8007aa0:	461c      	mov	r4, r3
 8007aa2:	bb5c      	cbnz	r4, 8007afc <_malloc_r+0x90>
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	f7ff ffc0 	bl	8007a2c <sbrk_aligned>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	4604      	mov	r4, r0
 8007ab0:	d155      	bne.n	8007b5e <_malloc_r+0xf2>
 8007ab2:	f8d8 4000 	ldr.w	r4, [r8]
 8007ab6:	4626      	mov	r6, r4
 8007ab8:	2e00      	cmp	r6, #0
 8007aba:	d145      	bne.n	8007b48 <_malloc_r+0xdc>
 8007abc:	2c00      	cmp	r4, #0
 8007abe:	d048      	beq.n	8007b52 <_malloc_r+0xe6>
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	4631      	mov	r1, r6
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	eb04 0903 	add.w	r9, r4, r3
 8007aca:	f000 fb5d 	bl	8008188 <_sbrk_r>
 8007ace:	4581      	cmp	r9, r0
 8007ad0:	d13f      	bne.n	8007b52 <_malloc_r+0xe6>
 8007ad2:	6821      	ldr	r1, [r4, #0]
 8007ad4:	1a6d      	subs	r5, r5, r1
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	4638      	mov	r0, r7
 8007ada:	f7ff ffa7 	bl	8007a2c <sbrk_aligned>
 8007ade:	3001      	adds	r0, #1
 8007ae0:	d037      	beq.n	8007b52 <_malloc_r+0xe6>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	442b      	add	r3, r5
 8007ae6:	6023      	str	r3, [r4, #0]
 8007ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d038      	beq.n	8007b62 <_malloc_r+0xf6>
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	42a2      	cmp	r2, r4
 8007af4:	d12b      	bne.n	8007b4e <_malloc_r+0xe2>
 8007af6:	2200      	movs	r2, #0
 8007af8:	605a      	str	r2, [r3, #4]
 8007afa:	e00f      	b.n	8007b1c <_malloc_r+0xb0>
 8007afc:	6822      	ldr	r2, [r4, #0]
 8007afe:	1b52      	subs	r2, r2, r5
 8007b00:	d41f      	bmi.n	8007b42 <_malloc_r+0xd6>
 8007b02:	2a0b      	cmp	r2, #11
 8007b04:	d917      	bls.n	8007b36 <_malloc_r+0xca>
 8007b06:	1961      	adds	r1, r4, r5
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	6025      	str	r5, [r4, #0]
 8007b0c:	bf18      	it	ne
 8007b0e:	6059      	strne	r1, [r3, #4]
 8007b10:	6863      	ldr	r3, [r4, #4]
 8007b12:	bf08      	it	eq
 8007b14:	f8c8 1000 	streq.w	r1, [r8]
 8007b18:	5162      	str	r2, [r4, r5]
 8007b1a:	604b      	str	r3, [r1, #4]
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	f104 060b 	add.w	r6, r4, #11
 8007b22:	f000 f829 	bl	8007b78 <__malloc_unlock>
 8007b26:	f026 0607 	bic.w	r6, r6, #7
 8007b2a:	1d23      	adds	r3, r4, #4
 8007b2c:	1af2      	subs	r2, r6, r3
 8007b2e:	d0ae      	beq.n	8007a8e <_malloc_r+0x22>
 8007b30:	1b9b      	subs	r3, r3, r6
 8007b32:	50a3      	str	r3, [r4, r2]
 8007b34:	e7ab      	b.n	8007a8e <_malloc_r+0x22>
 8007b36:	42a3      	cmp	r3, r4
 8007b38:	6862      	ldr	r2, [r4, #4]
 8007b3a:	d1dd      	bne.n	8007af8 <_malloc_r+0x8c>
 8007b3c:	f8c8 2000 	str.w	r2, [r8]
 8007b40:	e7ec      	b.n	8007b1c <_malloc_r+0xb0>
 8007b42:	4623      	mov	r3, r4
 8007b44:	6864      	ldr	r4, [r4, #4]
 8007b46:	e7ac      	b.n	8007aa2 <_malloc_r+0x36>
 8007b48:	4634      	mov	r4, r6
 8007b4a:	6876      	ldr	r6, [r6, #4]
 8007b4c:	e7b4      	b.n	8007ab8 <_malloc_r+0x4c>
 8007b4e:	4613      	mov	r3, r2
 8007b50:	e7cc      	b.n	8007aec <_malloc_r+0x80>
 8007b52:	230c      	movs	r3, #12
 8007b54:	603b      	str	r3, [r7, #0]
 8007b56:	4638      	mov	r0, r7
 8007b58:	f000 f80e 	bl	8007b78 <__malloc_unlock>
 8007b5c:	e797      	b.n	8007a8e <_malloc_r+0x22>
 8007b5e:	6025      	str	r5, [r4, #0]
 8007b60:	e7dc      	b.n	8007b1c <_malloc_r+0xb0>
 8007b62:	605b      	str	r3, [r3, #4]
 8007b64:	deff      	udf	#255	; 0xff
 8007b66:	bf00      	nop
 8007b68:	2000b764 	.word	0x2000b764

08007b6c <__malloc_lock>:
 8007b6c:	4801      	ldr	r0, [pc, #4]	; (8007b74 <__malloc_lock+0x8>)
 8007b6e:	f7ff bf0f 	b.w	8007990 <__retarget_lock_acquire_recursive>
 8007b72:	bf00      	nop
 8007b74:	2000b760 	.word	0x2000b760

08007b78 <__malloc_unlock>:
 8007b78:	4801      	ldr	r0, [pc, #4]	; (8007b80 <__malloc_unlock+0x8>)
 8007b7a:	f7ff bf0a 	b.w	8007992 <__retarget_lock_release_recursive>
 8007b7e:	bf00      	nop
 8007b80:	2000b760 	.word	0x2000b760

08007b84 <__ssputs_r>:
 8007b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b88:	688e      	ldr	r6, [r1, #8]
 8007b8a:	461f      	mov	r7, r3
 8007b8c:	42be      	cmp	r6, r7
 8007b8e:	680b      	ldr	r3, [r1, #0]
 8007b90:	4682      	mov	sl, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	4690      	mov	r8, r2
 8007b96:	d82c      	bhi.n	8007bf2 <__ssputs_r+0x6e>
 8007b98:	898a      	ldrh	r2, [r1, #12]
 8007b9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b9e:	d026      	beq.n	8007bee <__ssputs_r+0x6a>
 8007ba0:	6965      	ldr	r5, [r4, #20]
 8007ba2:	6909      	ldr	r1, [r1, #16]
 8007ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ba8:	eba3 0901 	sub.w	r9, r3, r1
 8007bac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bb0:	1c7b      	adds	r3, r7, #1
 8007bb2:	444b      	add	r3, r9
 8007bb4:	106d      	asrs	r5, r5, #1
 8007bb6:	429d      	cmp	r5, r3
 8007bb8:	bf38      	it	cc
 8007bba:	461d      	movcc	r5, r3
 8007bbc:	0553      	lsls	r3, r2, #21
 8007bbe:	d527      	bpl.n	8007c10 <__ssputs_r+0x8c>
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	f7ff ff53 	bl	8007a6c <_malloc_r>
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	b360      	cbz	r0, 8007c24 <__ssputs_r+0xa0>
 8007bca:	6921      	ldr	r1, [r4, #16]
 8007bcc:	464a      	mov	r2, r9
 8007bce:	f000 faeb 	bl	80081a8 <memcpy>
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bdc:	81a3      	strh	r3, [r4, #12]
 8007bde:	6126      	str	r6, [r4, #16]
 8007be0:	6165      	str	r5, [r4, #20]
 8007be2:	444e      	add	r6, r9
 8007be4:	eba5 0509 	sub.w	r5, r5, r9
 8007be8:	6026      	str	r6, [r4, #0]
 8007bea:	60a5      	str	r5, [r4, #8]
 8007bec:	463e      	mov	r6, r7
 8007bee:	42be      	cmp	r6, r7
 8007bf0:	d900      	bls.n	8007bf4 <__ssputs_r+0x70>
 8007bf2:	463e      	mov	r6, r7
 8007bf4:	6820      	ldr	r0, [r4, #0]
 8007bf6:	4632      	mov	r2, r6
 8007bf8:	4641      	mov	r1, r8
 8007bfa:	f000 faab 	bl	8008154 <memmove>
 8007bfe:	68a3      	ldr	r3, [r4, #8]
 8007c00:	1b9b      	subs	r3, r3, r6
 8007c02:	60a3      	str	r3, [r4, #8]
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	4433      	add	r3, r6
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c10:	462a      	mov	r2, r5
 8007c12:	f000 fad7 	bl	80081c4 <_realloc_r>
 8007c16:	4606      	mov	r6, r0
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d1e0      	bne.n	8007bde <__ssputs_r+0x5a>
 8007c1c:	6921      	ldr	r1, [r4, #16]
 8007c1e:	4650      	mov	r0, sl
 8007c20:	f7ff feb8 	bl	8007994 <_free_r>
 8007c24:	230c      	movs	r3, #12
 8007c26:	f8ca 3000 	str.w	r3, [sl]
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c30:	81a3      	strh	r3, [r4, #12]
 8007c32:	f04f 30ff 	mov.w	r0, #4294967295
 8007c36:	e7e9      	b.n	8007c0c <__ssputs_r+0x88>

08007c38 <_svfiprintf_r>:
 8007c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3c:	4698      	mov	r8, r3
 8007c3e:	898b      	ldrh	r3, [r1, #12]
 8007c40:	061b      	lsls	r3, r3, #24
 8007c42:	b09d      	sub	sp, #116	; 0x74
 8007c44:	4607      	mov	r7, r0
 8007c46:	460d      	mov	r5, r1
 8007c48:	4614      	mov	r4, r2
 8007c4a:	d50e      	bpl.n	8007c6a <_svfiprintf_r+0x32>
 8007c4c:	690b      	ldr	r3, [r1, #16]
 8007c4e:	b963      	cbnz	r3, 8007c6a <_svfiprintf_r+0x32>
 8007c50:	2140      	movs	r1, #64	; 0x40
 8007c52:	f7ff ff0b 	bl	8007a6c <_malloc_r>
 8007c56:	6028      	str	r0, [r5, #0]
 8007c58:	6128      	str	r0, [r5, #16]
 8007c5a:	b920      	cbnz	r0, 8007c66 <_svfiprintf_r+0x2e>
 8007c5c:	230c      	movs	r3, #12
 8007c5e:	603b      	str	r3, [r7, #0]
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	e0d0      	b.n	8007e08 <_svfiprintf_r+0x1d0>
 8007c66:	2340      	movs	r3, #64	; 0x40
 8007c68:	616b      	str	r3, [r5, #20]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c6e:	2320      	movs	r3, #32
 8007c70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c74:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c78:	2330      	movs	r3, #48	; 0x30
 8007c7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007e20 <_svfiprintf_r+0x1e8>
 8007c7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c82:	f04f 0901 	mov.w	r9, #1
 8007c86:	4623      	mov	r3, r4
 8007c88:	469a      	mov	sl, r3
 8007c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c8e:	b10a      	cbz	r2, 8007c94 <_svfiprintf_r+0x5c>
 8007c90:	2a25      	cmp	r2, #37	; 0x25
 8007c92:	d1f9      	bne.n	8007c88 <_svfiprintf_r+0x50>
 8007c94:	ebba 0b04 	subs.w	fp, sl, r4
 8007c98:	d00b      	beq.n	8007cb2 <_svfiprintf_r+0x7a>
 8007c9a:	465b      	mov	r3, fp
 8007c9c:	4622      	mov	r2, r4
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f7ff ff6f 	bl	8007b84 <__ssputs_r>
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f000 80a9 	beq.w	8007dfe <_svfiprintf_r+0x1c6>
 8007cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cae:	445a      	add	r2, fp
 8007cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 80a1 	beq.w	8007dfe <_svfiprintf_r+0x1c6>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cc6:	f10a 0a01 	add.w	sl, sl, #1
 8007cca:	9304      	str	r3, [sp, #16]
 8007ccc:	9307      	str	r3, [sp, #28]
 8007cce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cd2:	931a      	str	r3, [sp, #104]	; 0x68
 8007cd4:	4654      	mov	r4, sl
 8007cd6:	2205      	movs	r2, #5
 8007cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cdc:	4850      	ldr	r0, [pc, #320]	; (8007e20 <_svfiprintf_r+0x1e8>)
 8007cde:	f7f8 fa9f 	bl	8000220 <memchr>
 8007ce2:	9a04      	ldr	r2, [sp, #16]
 8007ce4:	b9d8      	cbnz	r0, 8007d1e <_svfiprintf_r+0xe6>
 8007ce6:	06d0      	lsls	r0, r2, #27
 8007ce8:	bf44      	itt	mi
 8007cea:	2320      	movmi	r3, #32
 8007cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cf0:	0711      	lsls	r1, r2, #28
 8007cf2:	bf44      	itt	mi
 8007cf4:	232b      	movmi	r3, #43	; 0x2b
 8007cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8007cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8007d00:	d015      	beq.n	8007d2e <_svfiprintf_r+0xf6>
 8007d02:	9a07      	ldr	r2, [sp, #28]
 8007d04:	4654      	mov	r4, sl
 8007d06:	2000      	movs	r0, #0
 8007d08:	f04f 0c0a 	mov.w	ip, #10
 8007d0c:	4621      	mov	r1, r4
 8007d0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d12:	3b30      	subs	r3, #48	; 0x30
 8007d14:	2b09      	cmp	r3, #9
 8007d16:	d94d      	bls.n	8007db4 <_svfiprintf_r+0x17c>
 8007d18:	b1b0      	cbz	r0, 8007d48 <_svfiprintf_r+0x110>
 8007d1a:	9207      	str	r2, [sp, #28]
 8007d1c:	e014      	b.n	8007d48 <_svfiprintf_r+0x110>
 8007d1e:	eba0 0308 	sub.w	r3, r0, r8
 8007d22:	fa09 f303 	lsl.w	r3, r9, r3
 8007d26:	4313      	orrs	r3, r2
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	46a2      	mov	sl, r4
 8007d2c:	e7d2      	b.n	8007cd4 <_svfiprintf_r+0x9c>
 8007d2e:	9b03      	ldr	r3, [sp, #12]
 8007d30:	1d19      	adds	r1, r3, #4
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	9103      	str	r1, [sp, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	bfbb      	ittet	lt
 8007d3a:	425b      	neglt	r3, r3
 8007d3c:	f042 0202 	orrlt.w	r2, r2, #2
 8007d40:	9307      	strge	r3, [sp, #28]
 8007d42:	9307      	strlt	r3, [sp, #28]
 8007d44:	bfb8      	it	lt
 8007d46:	9204      	strlt	r2, [sp, #16]
 8007d48:	7823      	ldrb	r3, [r4, #0]
 8007d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8007d4c:	d10c      	bne.n	8007d68 <_svfiprintf_r+0x130>
 8007d4e:	7863      	ldrb	r3, [r4, #1]
 8007d50:	2b2a      	cmp	r3, #42	; 0x2a
 8007d52:	d134      	bne.n	8007dbe <_svfiprintf_r+0x186>
 8007d54:	9b03      	ldr	r3, [sp, #12]
 8007d56:	1d1a      	adds	r2, r3, #4
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	9203      	str	r2, [sp, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bfb8      	it	lt
 8007d60:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d64:	3402      	adds	r4, #2
 8007d66:	9305      	str	r3, [sp, #20]
 8007d68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007e30 <_svfiprintf_r+0x1f8>
 8007d6c:	7821      	ldrb	r1, [r4, #0]
 8007d6e:	2203      	movs	r2, #3
 8007d70:	4650      	mov	r0, sl
 8007d72:	f7f8 fa55 	bl	8000220 <memchr>
 8007d76:	b138      	cbz	r0, 8007d88 <_svfiprintf_r+0x150>
 8007d78:	9b04      	ldr	r3, [sp, #16]
 8007d7a:	eba0 000a 	sub.w	r0, r0, sl
 8007d7e:	2240      	movs	r2, #64	; 0x40
 8007d80:	4082      	lsls	r2, r0
 8007d82:	4313      	orrs	r3, r2
 8007d84:	3401      	adds	r4, #1
 8007d86:	9304      	str	r3, [sp, #16]
 8007d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d8c:	4825      	ldr	r0, [pc, #148]	; (8007e24 <_svfiprintf_r+0x1ec>)
 8007d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d92:	2206      	movs	r2, #6
 8007d94:	f7f8 fa44 	bl	8000220 <memchr>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d038      	beq.n	8007e0e <_svfiprintf_r+0x1d6>
 8007d9c:	4b22      	ldr	r3, [pc, #136]	; (8007e28 <_svfiprintf_r+0x1f0>)
 8007d9e:	bb1b      	cbnz	r3, 8007de8 <_svfiprintf_r+0x1b0>
 8007da0:	9b03      	ldr	r3, [sp, #12]
 8007da2:	3307      	adds	r3, #7
 8007da4:	f023 0307 	bic.w	r3, r3, #7
 8007da8:	3308      	adds	r3, #8
 8007daa:	9303      	str	r3, [sp, #12]
 8007dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dae:	4433      	add	r3, r6
 8007db0:	9309      	str	r3, [sp, #36]	; 0x24
 8007db2:	e768      	b.n	8007c86 <_svfiprintf_r+0x4e>
 8007db4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007db8:	460c      	mov	r4, r1
 8007dba:	2001      	movs	r0, #1
 8007dbc:	e7a6      	b.n	8007d0c <_svfiprintf_r+0xd4>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	3401      	adds	r4, #1
 8007dc2:	9305      	str	r3, [sp, #20]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	f04f 0c0a 	mov.w	ip, #10
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dd0:	3a30      	subs	r2, #48	; 0x30
 8007dd2:	2a09      	cmp	r2, #9
 8007dd4:	d903      	bls.n	8007dde <_svfiprintf_r+0x1a6>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0c6      	beq.n	8007d68 <_svfiprintf_r+0x130>
 8007dda:	9105      	str	r1, [sp, #20]
 8007ddc:	e7c4      	b.n	8007d68 <_svfiprintf_r+0x130>
 8007dde:	fb0c 2101 	mla	r1, ip, r1, r2
 8007de2:	4604      	mov	r4, r0
 8007de4:	2301      	movs	r3, #1
 8007de6:	e7f0      	b.n	8007dca <_svfiprintf_r+0x192>
 8007de8:	ab03      	add	r3, sp, #12
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	462a      	mov	r2, r5
 8007dee:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <_svfiprintf_r+0x1f4>)
 8007df0:	a904      	add	r1, sp, #16
 8007df2:	4638      	mov	r0, r7
 8007df4:	f3af 8000 	nop.w
 8007df8:	1c42      	adds	r2, r0, #1
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	d1d6      	bne.n	8007dac <_svfiprintf_r+0x174>
 8007dfe:	89ab      	ldrh	r3, [r5, #12]
 8007e00:	065b      	lsls	r3, r3, #25
 8007e02:	f53f af2d 	bmi.w	8007c60 <_svfiprintf_r+0x28>
 8007e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e08:	b01d      	add	sp, #116	; 0x74
 8007e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0e:	ab03      	add	r3, sp, #12
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	462a      	mov	r2, r5
 8007e14:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <_svfiprintf_r+0x1f4>)
 8007e16:	a904      	add	r1, sp, #16
 8007e18:	4638      	mov	r0, r7
 8007e1a:	f000 f879 	bl	8007f10 <_printf_i>
 8007e1e:	e7eb      	b.n	8007df8 <_svfiprintf_r+0x1c0>
 8007e20:	08008a60 	.word	0x08008a60
 8007e24:	08008a6a 	.word	0x08008a6a
 8007e28:	00000000 	.word	0x00000000
 8007e2c:	08007b85 	.word	0x08007b85
 8007e30:	08008a66 	.word	0x08008a66

08007e34 <_printf_common>:
 8007e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e38:	4616      	mov	r6, r2
 8007e3a:	4699      	mov	r9, r3
 8007e3c:	688a      	ldr	r2, [r1, #8]
 8007e3e:	690b      	ldr	r3, [r1, #16]
 8007e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e44:	4293      	cmp	r3, r2
 8007e46:	bfb8      	it	lt
 8007e48:	4613      	movlt	r3, r2
 8007e4a:	6033      	str	r3, [r6, #0]
 8007e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e50:	4607      	mov	r7, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	b10a      	cbz	r2, 8007e5a <_printf_common+0x26>
 8007e56:	3301      	adds	r3, #1
 8007e58:	6033      	str	r3, [r6, #0]
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	0699      	lsls	r1, r3, #26
 8007e5e:	bf42      	ittt	mi
 8007e60:	6833      	ldrmi	r3, [r6, #0]
 8007e62:	3302      	addmi	r3, #2
 8007e64:	6033      	strmi	r3, [r6, #0]
 8007e66:	6825      	ldr	r5, [r4, #0]
 8007e68:	f015 0506 	ands.w	r5, r5, #6
 8007e6c:	d106      	bne.n	8007e7c <_printf_common+0x48>
 8007e6e:	f104 0a19 	add.w	sl, r4, #25
 8007e72:	68e3      	ldr	r3, [r4, #12]
 8007e74:	6832      	ldr	r2, [r6, #0]
 8007e76:	1a9b      	subs	r3, r3, r2
 8007e78:	42ab      	cmp	r3, r5
 8007e7a:	dc26      	bgt.n	8007eca <_printf_common+0x96>
 8007e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e80:	1e13      	subs	r3, r2, #0
 8007e82:	6822      	ldr	r2, [r4, #0]
 8007e84:	bf18      	it	ne
 8007e86:	2301      	movne	r3, #1
 8007e88:	0692      	lsls	r2, r2, #26
 8007e8a:	d42b      	bmi.n	8007ee4 <_printf_common+0xb0>
 8007e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e90:	4649      	mov	r1, r9
 8007e92:	4638      	mov	r0, r7
 8007e94:	47c0      	blx	r8
 8007e96:	3001      	adds	r0, #1
 8007e98:	d01e      	beq.n	8007ed8 <_printf_common+0xa4>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	6922      	ldr	r2, [r4, #16]
 8007e9e:	f003 0306 	and.w	r3, r3, #6
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	bf02      	ittt	eq
 8007ea6:	68e5      	ldreq	r5, [r4, #12]
 8007ea8:	6833      	ldreq	r3, [r6, #0]
 8007eaa:	1aed      	subeq	r5, r5, r3
 8007eac:	68a3      	ldr	r3, [r4, #8]
 8007eae:	bf0c      	ite	eq
 8007eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007eb4:	2500      	movne	r5, #0
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	bfc4      	itt	gt
 8007eba:	1a9b      	subgt	r3, r3, r2
 8007ebc:	18ed      	addgt	r5, r5, r3
 8007ebe:	2600      	movs	r6, #0
 8007ec0:	341a      	adds	r4, #26
 8007ec2:	42b5      	cmp	r5, r6
 8007ec4:	d11a      	bne.n	8007efc <_printf_common+0xc8>
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	e008      	b.n	8007edc <_printf_common+0xa8>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	4652      	mov	r2, sl
 8007ece:	4649      	mov	r1, r9
 8007ed0:	4638      	mov	r0, r7
 8007ed2:	47c0      	blx	r8
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	d103      	bne.n	8007ee0 <_printf_common+0xac>
 8007ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8007edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee0:	3501      	adds	r5, #1
 8007ee2:	e7c6      	b.n	8007e72 <_printf_common+0x3e>
 8007ee4:	18e1      	adds	r1, r4, r3
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	2030      	movs	r0, #48	; 0x30
 8007eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007eee:	4422      	add	r2, r4
 8007ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ef8:	3302      	adds	r3, #2
 8007efa:	e7c7      	b.n	8007e8c <_printf_common+0x58>
 8007efc:	2301      	movs	r3, #1
 8007efe:	4622      	mov	r2, r4
 8007f00:	4649      	mov	r1, r9
 8007f02:	4638      	mov	r0, r7
 8007f04:	47c0      	blx	r8
 8007f06:	3001      	adds	r0, #1
 8007f08:	d0e6      	beq.n	8007ed8 <_printf_common+0xa4>
 8007f0a:	3601      	adds	r6, #1
 8007f0c:	e7d9      	b.n	8007ec2 <_printf_common+0x8e>
	...

08007f10 <_printf_i>:
 8007f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f14:	7e0f      	ldrb	r7, [r1, #24]
 8007f16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f18:	2f78      	cmp	r7, #120	; 0x78
 8007f1a:	4691      	mov	r9, r2
 8007f1c:	4680      	mov	r8, r0
 8007f1e:	460c      	mov	r4, r1
 8007f20:	469a      	mov	sl, r3
 8007f22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f26:	d807      	bhi.n	8007f38 <_printf_i+0x28>
 8007f28:	2f62      	cmp	r7, #98	; 0x62
 8007f2a:	d80a      	bhi.n	8007f42 <_printf_i+0x32>
 8007f2c:	2f00      	cmp	r7, #0
 8007f2e:	f000 80d4 	beq.w	80080da <_printf_i+0x1ca>
 8007f32:	2f58      	cmp	r7, #88	; 0x58
 8007f34:	f000 80c0 	beq.w	80080b8 <_printf_i+0x1a8>
 8007f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f40:	e03a      	b.n	8007fb8 <_printf_i+0xa8>
 8007f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f46:	2b15      	cmp	r3, #21
 8007f48:	d8f6      	bhi.n	8007f38 <_printf_i+0x28>
 8007f4a:	a101      	add	r1, pc, #4	; (adr r1, 8007f50 <_printf_i+0x40>)
 8007f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f50:	08007fa9 	.word	0x08007fa9
 8007f54:	08007fbd 	.word	0x08007fbd
 8007f58:	08007f39 	.word	0x08007f39
 8007f5c:	08007f39 	.word	0x08007f39
 8007f60:	08007f39 	.word	0x08007f39
 8007f64:	08007f39 	.word	0x08007f39
 8007f68:	08007fbd 	.word	0x08007fbd
 8007f6c:	08007f39 	.word	0x08007f39
 8007f70:	08007f39 	.word	0x08007f39
 8007f74:	08007f39 	.word	0x08007f39
 8007f78:	08007f39 	.word	0x08007f39
 8007f7c:	080080c1 	.word	0x080080c1
 8007f80:	08007fe9 	.word	0x08007fe9
 8007f84:	0800807b 	.word	0x0800807b
 8007f88:	08007f39 	.word	0x08007f39
 8007f8c:	08007f39 	.word	0x08007f39
 8007f90:	080080e3 	.word	0x080080e3
 8007f94:	08007f39 	.word	0x08007f39
 8007f98:	08007fe9 	.word	0x08007fe9
 8007f9c:	08007f39 	.word	0x08007f39
 8007fa0:	08007f39 	.word	0x08007f39
 8007fa4:	08008083 	.word	0x08008083
 8007fa8:	682b      	ldr	r3, [r5, #0]
 8007faa:	1d1a      	adds	r2, r3, #4
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	602a      	str	r2, [r5, #0]
 8007fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e09f      	b.n	80080fc <_printf_i+0x1ec>
 8007fbc:	6820      	ldr	r0, [r4, #0]
 8007fbe:	682b      	ldr	r3, [r5, #0]
 8007fc0:	0607      	lsls	r7, r0, #24
 8007fc2:	f103 0104 	add.w	r1, r3, #4
 8007fc6:	6029      	str	r1, [r5, #0]
 8007fc8:	d501      	bpl.n	8007fce <_printf_i+0xbe>
 8007fca:	681e      	ldr	r6, [r3, #0]
 8007fcc:	e003      	b.n	8007fd6 <_printf_i+0xc6>
 8007fce:	0646      	lsls	r6, r0, #25
 8007fd0:	d5fb      	bpl.n	8007fca <_printf_i+0xba>
 8007fd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fd6:	2e00      	cmp	r6, #0
 8007fd8:	da03      	bge.n	8007fe2 <_printf_i+0xd2>
 8007fda:	232d      	movs	r3, #45	; 0x2d
 8007fdc:	4276      	negs	r6, r6
 8007fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fe2:	485a      	ldr	r0, [pc, #360]	; (800814c <_printf_i+0x23c>)
 8007fe4:	230a      	movs	r3, #10
 8007fe6:	e012      	b.n	800800e <_printf_i+0xfe>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	6820      	ldr	r0, [r4, #0]
 8007fec:	1d19      	adds	r1, r3, #4
 8007fee:	6029      	str	r1, [r5, #0]
 8007ff0:	0605      	lsls	r5, r0, #24
 8007ff2:	d501      	bpl.n	8007ff8 <_printf_i+0xe8>
 8007ff4:	681e      	ldr	r6, [r3, #0]
 8007ff6:	e002      	b.n	8007ffe <_printf_i+0xee>
 8007ff8:	0641      	lsls	r1, r0, #25
 8007ffa:	d5fb      	bpl.n	8007ff4 <_printf_i+0xe4>
 8007ffc:	881e      	ldrh	r6, [r3, #0]
 8007ffe:	4853      	ldr	r0, [pc, #332]	; (800814c <_printf_i+0x23c>)
 8008000:	2f6f      	cmp	r7, #111	; 0x6f
 8008002:	bf0c      	ite	eq
 8008004:	2308      	moveq	r3, #8
 8008006:	230a      	movne	r3, #10
 8008008:	2100      	movs	r1, #0
 800800a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800800e:	6865      	ldr	r5, [r4, #4]
 8008010:	60a5      	str	r5, [r4, #8]
 8008012:	2d00      	cmp	r5, #0
 8008014:	bfa2      	ittt	ge
 8008016:	6821      	ldrge	r1, [r4, #0]
 8008018:	f021 0104 	bicge.w	r1, r1, #4
 800801c:	6021      	strge	r1, [r4, #0]
 800801e:	b90e      	cbnz	r6, 8008024 <_printf_i+0x114>
 8008020:	2d00      	cmp	r5, #0
 8008022:	d04b      	beq.n	80080bc <_printf_i+0x1ac>
 8008024:	4615      	mov	r5, r2
 8008026:	fbb6 f1f3 	udiv	r1, r6, r3
 800802a:	fb03 6711 	mls	r7, r3, r1, r6
 800802e:	5dc7      	ldrb	r7, [r0, r7]
 8008030:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008034:	4637      	mov	r7, r6
 8008036:	42bb      	cmp	r3, r7
 8008038:	460e      	mov	r6, r1
 800803a:	d9f4      	bls.n	8008026 <_printf_i+0x116>
 800803c:	2b08      	cmp	r3, #8
 800803e:	d10b      	bne.n	8008058 <_printf_i+0x148>
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	07de      	lsls	r6, r3, #31
 8008044:	d508      	bpl.n	8008058 <_printf_i+0x148>
 8008046:	6923      	ldr	r3, [r4, #16]
 8008048:	6861      	ldr	r1, [r4, #4]
 800804a:	4299      	cmp	r1, r3
 800804c:	bfde      	ittt	le
 800804e:	2330      	movle	r3, #48	; 0x30
 8008050:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008054:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008058:	1b52      	subs	r2, r2, r5
 800805a:	6122      	str	r2, [r4, #16]
 800805c:	f8cd a000 	str.w	sl, [sp]
 8008060:	464b      	mov	r3, r9
 8008062:	aa03      	add	r2, sp, #12
 8008064:	4621      	mov	r1, r4
 8008066:	4640      	mov	r0, r8
 8008068:	f7ff fee4 	bl	8007e34 <_printf_common>
 800806c:	3001      	adds	r0, #1
 800806e:	d14a      	bne.n	8008106 <_printf_i+0x1f6>
 8008070:	f04f 30ff 	mov.w	r0, #4294967295
 8008074:	b004      	add	sp, #16
 8008076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	f043 0320 	orr.w	r3, r3, #32
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	4833      	ldr	r0, [pc, #204]	; (8008150 <_printf_i+0x240>)
 8008084:	2778      	movs	r7, #120	; 0x78
 8008086:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	6829      	ldr	r1, [r5, #0]
 800808e:	061f      	lsls	r7, r3, #24
 8008090:	f851 6b04 	ldr.w	r6, [r1], #4
 8008094:	d402      	bmi.n	800809c <_printf_i+0x18c>
 8008096:	065f      	lsls	r7, r3, #25
 8008098:	bf48      	it	mi
 800809a:	b2b6      	uxthmi	r6, r6
 800809c:	07df      	lsls	r7, r3, #31
 800809e:	bf48      	it	mi
 80080a0:	f043 0320 	orrmi.w	r3, r3, #32
 80080a4:	6029      	str	r1, [r5, #0]
 80080a6:	bf48      	it	mi
 80080a8:	6023      	strmi	r3, [r4, #0]
 80080aa:	b91e      	cbnz	r6, 80080b4 <_printf_i+0x1a4>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	f023 0320 	bic.w	r3, r3, #32
 80080b2:	6023      	str	r3, [r4, #0]
 80080b4:	2310      	movs	r3, #16
 80080b6:	e7a7      	b.n	8008008 <_printf_i+0xf8>
 80080b8:	4824      	ldr	r0, [pc, #144]	; (800814c <_printf_i+0x23c>)
 80080ba:	e7e4      	b.n	8008086 <_printf_i+0x176>
 80080bc:	4615      	mov	r5, r2
 80080be:	e7bd      	b.n	800803c <_printf_i+0x12c>
 80080c0:	682b      	ldr	r3, [r5, #0]
 80080c2:	6826      	ldr	r6, [r4, #0]
 80080c4:	6961      	ldr	r1, [r4, #20]
 80080c6:	1d18      	adds	r0, r3, #4
 80080c8:	6028      	str	r0, [r5, #0]
 80080ca:	0635      	lsls	r5, r6, #24
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	d501      	bpl.n	80080d4 <_printf_i+0x1c4>
 80080d0:	6019      	str	r1, [r3, #0]
 80080d2:	e002      	b.n	80080da <_printf_i+0x1ca>
 80080d4:	0670      	lsls	r0, r6, #25
 80080d6:	d5fb      	bpl.n	80080d0 <_printf_i+0x1c0>
 80080d8:	8019      	strh	r1, [r3, #0]
 80080da:	2300      	movs	r3, #0
 80080dc:	6123      	str	r3, [r4, #16]
 80080de:	4615      	mov	r5, r2
 80080e0:	e7bc      	b.n	800805c <_printf_i+0x14c>
 80080e2:	682b      	ldr	r3, [r5, #0]
 80080e4:	1d1a      	adds	r2, r3, #4
 80080e6:	602a      	str	r2, [r5, #0]
 80080e8:	681d      	ldr	r5, [r3, #0]
 80080ea:	6862      	ldr	r2, [r4, #4]
 80080ec:	2100      	movs	r1, #0
 80080ee:	4628      	mov	r0, r5
 80080f0:	f7f8 f896 	bl	8000220 <memchr>
 80080f4:	b108      	cbz	r0, 80080fa <_printf_i+0x1ea>
 80080f6:	1b40      	subs	r0, r0, r5
 80080f8:	6060      	str	r0, [r4, #4]
 80080fa:	6863      	ldr	r3, [r4, #4]
 80080fc:	6123      	str	r3, [r4, #16]
 80080fe:	2300      	movs	r3, #0
 8008100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008104:	e7aa      	b.n	800805c <_printf_i+0x14c>
 8008106:	6923      	ldr	r3, [r4, #16]
 8008108:	462a      	mov	r2, r5
 800810a:	4649      	mov	r1, r9
 800810c:	4640      	mov	r0, r8
 800810e:	47d0      	blx	sl
 8008110:	3001      	adds	r0, #1
 8008112:	d0ad      	beq.n	8008070 <_printf_i+0x160>
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	079b      	lsls	r3, r3, #30
 8008118:	d413      	bmi.n	8008142 <_printf_i+0x232>
 800811a:	68e0      	ldr	r0, [r4, #12]
 800811c:	9b03      	ldr	r3, [sp, #12]
 800811e:	4298      	cmp	r0, r3
 8008120:	bfb8      	it	lt
 8008122:	4618      	movlt	r0, r3
 8008124:	e7a6      	b.n	8008074 <_printf_i+0x164>
 8008126:	2301      	movs	r3, #1
 8008128:	4632      	mov	r2, r6
 800812a:	4649      	mov	r1, r9
 800812c:	4640      	mov	r0, r8
 800812e:	47d0      	blx	sl
 8008130:	3001      	adds	r0, #1
 8008132:	d09d      	beq.n	8008070 <_printf_i+0x160>
 8008134:	3501      	adds	r5, #1
 8008136:	68e3      	ldr	r3, [r4, #12]
 8008138:	9903      	ldr	r1, [sp, #12]
 800813a:	1a5b      	subs	r3, r3, r1
 800813c:	42ab      	cmp	r3, r5
 800813e:	dcf2      	bgt.n	8008126 <_printf_i+0x216>
 8008140:	e7eb      	b.n	800811a <_printf_i+0x20a>
 8008142:	2500      	movs	r5, #0
 8008144:	f104 0619 	add.w	r6, r4, #25
 8008148:	e7f5      	b.n	8008136 <_printf_i+0x226>
 800814a:	bf00      	nop
 800814c:	08008a71 	.word	0x08008a71
 8008150:	08008a82 	.word	0x08008a82

08008154 <memmove>:
 8008154:	4288      	cmp	r0, r1
 8008156:	b510      	push	{r4, lr}
 8008158:	eb01 0402 	add.w	r4, r1, r2
 800815c:	d902      	bls.n	8008164 <memmove+0x10>
 800815e:	4284      	cmp	r4, r0
 8008160:	4623      	mov	r3, r4
 8008162:	d807      	bhi.n	8008174 <memmove+0x20>
 8008164:	1e43      	subs	r3, r0, #1
 8008166:	42a1      	cmp	r1, r4
 8008168:	d008      	beq.n	800817c <memmove+0x28>
 800816a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800816e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008172:	e7f8      	b.n	8008166 <memmove+0x12>
 8008174:	4402      	add	r2, r0
 8008176:	4601      	mov	r1, r0
 8008178:	428a      	cmp	r2, r1
 800817a:	d100      	bne.n	800817e <memmove+0x2a>
 800817c:	bd10      	pop	{r4, pc}
 800817e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008186:	e7f7      	b.n	8008178 <memmove+0x24>

08008188 <_sbrk_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d06      	ldr	r5, [pc, #24]	; (80081a4 <_sbrk_r+0x1c>)
 800818c:	2300      	movs	r3, #0
 800818e:	4604      	mov	r4, r0
 8008190:	4608      	mov	r0, r1
 8008192:	602b      	str	r3, [r5, #0]
 8008194:	f7fa f8d6 	bl	8002344 <_sbrk>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_sbrk_r+0x1a>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_sbrk_r+0x1a>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	2000b75c 	.word	0x2000b75c

080081a8 <memcpy>:
 80081a8:	440a      	add	r2, r1
 80081aa:	4291      	cmp	r1, r2
 80081ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80081b0:	d100      	bne.n	80081b4 <memcpy+0xc>
 80081b2:	4770      	bx	lr
 80081b4:	b510      	push	{r4, lr}
 80081b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081be:	4291      	cmp	r1, r2
 80081c0:	d1f9      	bne.n	80081b6 <memcpy+0xe>
 80081c2:	bd10      	pop	{r4, pc}

080081c4 <_realloc_r>:
 80081c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c8:	4680      	mov	r8, r0
 80081ca:	4614      	mov	r4, r2
 80081cc:	460e      	mov	r6, r1
 80081ce:	b921      	cbnz	r1, 80081da <_realloc_r+0x16>
 80081d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081d4:	4611      	mov	r1, r2
 80081d6:	f7ff bc49 	b.w	8007a6c <_malloc_r>
 80081da:	b92a      	cbnz	r2, 80081e8 <_realloc_r+0x24>
 80081dc:	f7ff fbda 	bl	8007994 <_free_r>
 80081e0:	4625      	mov	r5, r4
 80081e2:	4628      	mov	r0, r5
 80081e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e8:	f000 f81b 	bl	8008222 <_malloc_usable_size_r>
 80081ec:	4284      	cmp	r4, r0
 80081ee:	4607      	mov	r7, r0
 80081f0:	d802      	bhi.n	80081f8 <_realloc_r+0x34>
 80081f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081f6:	d812      	bhi.n	800821e <_realloc_r+0x5a>
 80081f8:	4621      	mov	r1, r4
 80081fa:	4640      	mov	r0, r8
 80081fc:	f7ff fc36 	bl	8007a6c <_malloc_r>
 8008200:	4605      	mov	r5, r0
 8008202:	2800      	cmp	r0, #0
 8008204:	d0ed      	beq.n	80081e2 <_realloc_r+0x1e>
 8008206:	42bc      	cmp	r4, r7
 8008208:	4622      	mov	r2, r4
 800820a:	4631      	mov	r1, r6
 800820c:	bf28      	it	cs
 800820e:	463a      	movcs	r2, r7
 8008210:	f7ff ffca 	bl	80081a8 <memcpy>
 8008214:	4631      	mov	r1, r6
 8008216:	4640      	mov	r0, r8
 8008218:	f7ff fbbc 	bl	8007994 <_free_r>
 800821c:	e7e1      	b.n	80081e2 <_realloc_r+0x1e>
 800821e:	4635      	mov	r5, r6
 8008220:	e7df      	b.n	80081e2 <_realloc_r+0x1e>

08008222 <_malloc_usable_size_r>:
 8008222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008226:	1f18      	subs	r0, r3, #4
 8008228:	2b00      	cmp	r3, #0
 800822a:	bfbc      	itt	lt
 800822c:	580b      	ldrlt	r3, [r1, r0]
 800822e:	18c0      	addlt	r0, r0, r3
 8008230:	4770      	bx	lr
	...

08008234 <_init>:
 8008234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008236:	bf00      	nop
 8008238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823a:	bc08      	pop	{r3}
 800823c:	469e      	mov	lr, r3
 800823e:	4770      	bx	lr

08008240 <_fini>:
 8008240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008242:	bf00      	nop
 8008244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008246:	bc08      	pop	{r3}
 8008248:	469e      	mov	lr, r3
 800824a:	4770      	bx	lr
