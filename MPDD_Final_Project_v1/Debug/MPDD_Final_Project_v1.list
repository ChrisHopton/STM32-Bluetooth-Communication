
MPDD_Final_Project_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b050  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800b218  0800b218  0001b218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2a8  0800b2a8  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2a8  0800b2a8  0001b2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2b0  0800b2b0  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2b0  0800b2b0  0001b2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2b4  0800b2b4  0001b2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800b2b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e0  2000017c  0800b434  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000225c  0800b434  0002225c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce66  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004119  00000000  00000000  0003d055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  00041170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000123a  00000000  00000000  00042908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029191  00000000  00000000  00043b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ecab  00000000  00000000  0006ccd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f754f  00000000  00000000  0008b97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006694  00000000  00000000  00182ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00189564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000017c 	.word	0x2000017c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b200 	.word	0x0800b200

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000180 	.word	0x20000180
 8000204:	0800b200 	.word	0x0800b200

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <ILI9163_writeCommand+0x44>)
 8000526:	f001 fdff 	bl	8002128 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000530:	4809      	ldr	r0, [pc, #36]	; (8000558 <ILI9163_writeCommand+0x44>)
 8000532:	f001 fdf9 	bl	8002128 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 8000536:	1df9      	adds	r1, r7, #7
 8000538:	2300      	movs	r3, #0
 800053a:	2201      	movs	r2, #1
 800053c:	4807      	ldr	r0, [pc, #28]	; (800055c <ILI9163_writeCommand+0x48>)
 800053e:	f004 fa5e 	bl	80049fe <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <ILI9163_writeCommand+0x44>)
 800054a:	f001 fded 	bl	8002128 <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40020400 	.word	0x40020400
 800055c:	20000198 	.word	0x20000198

08000560 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <ILI9163_writeData+0x44>)
 8000572:	f001 fdd9 	bl	8002128 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057c:	4809      	ldr	r0, [pc, #36]	; (80005a4 <ILI9163_writeData+0x44>)
 800057e:	f001 fdd3 	bl	8002128 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 8000582:	1df9      	adds	r1, r7, #7
 8000584:	2300      	movs	r3, #0
 8000586:	2201      	movs	r2, #1
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <ILI9163_writeData+0x48>)
 800058a:	f004 fa38 	bl	80049fe <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <ILI9163_writeData+0x44>)
 8000596:	f001 fdc7 	bl	8002128 <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40020400 	.word	0x40020400
 80005a8:	20000198 	.word	0x20000198

080005ac <ILI9163_reset>:

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
}

void ILI9163_reset(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <ILI9163_reset+0x2c>)
 80005b8:	f001 fdb6 	bl	8002128 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80005bc:	2032      	movs	r0, #50	; 0x32
 80005be:	f000 ff3d 	bl	800143c <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <ILI9163_reset+0x2c>)
 80005ca:	f001 fdad 	bl	8002128 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f000 ff34 	bl	800143c <HAL_Delay>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40020c00 	.word	0x40020c00

080005dc <ILI9163_init>:

void ILI9163_init(int rotation) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ea:	486e      	ldr	r0, [pc, #440]	; (80007a4 <ILI9163_init+0x1c8>)
 80005ec:	f001 fd9c 	bl	8002128 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f6:	486c      	ldr	r0, [pc, #432]	; (80007a8 <ILI9163_init+0x1cc>)
 80005f8:	f001 fd96 	bl	8002128 <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 80005fc:	f7ff ffd6 	bl	80005ac <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 8000600:	2011      	movs	r0, #17
 8000602:	f7ff ff87 	bl	8000514 <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 8000606:	2005      	movs	r0, #5
 8000608:	f000 ff18 	bl	800143c <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 800060c:	203a      	movs	r0, #58	; 0x3a
 800060e:	f7ff ff81 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 8000612:	2005      	movs	r0, #5
 8000614:	f7ff ffa4 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 8000618:	2026      	movs	r0, #38	; 0x26
 800061a:	f7ff ff7b 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 800061e:	2004      	movs	r0, #4
 8000620:	f7ff ff9e 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8000624:	20f2      	movs	r0, #242	; 0xf2
 8000626:	f7ff ff75 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff ff98 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 8000630:	20e0      	movs	r0, #224	; 0xe0
 8000632:	f7ff ff6f 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 8000636:	203f      	movs	r0, #63	; 0x3f
 8000638:	f7ff ff92 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800063c:	2025      	movs	r0, #37	; 0x25
 800063e:	f7ff ff8f 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 8000642:	201c      	movs	r0, #28
 8000644:	f7ff ff8c 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 8000648:	201e      	movs	r0, #30
 800064a:	f7ff ff89 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800064e:	2020      	movs	r0, #32
 8000650:	f7ff ff86 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 8000654:	2012      	movs	r0, #18
 8000656:	f7ff ff83 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 800065a:	202a      	movs	r0, #42	; 0x2a
 800065c:	f7ff ff80 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 8000660:	2090      	movs	r0, #144	; 0x90
 8000662:	f7ff ff7d 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 8000666:	2024      	movs	r0, #36	; 0x24
 8000668:	f7ff ff7a 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 800066c:	2011      	movs	r0, #17
 800066e:	f7ff ff77 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff ff74 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ff71 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff ff6e 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff ff6b 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ff68 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 8000690:	20e1      	movs	r0, #225	; 0xe1
 8000692:	f7ff ff3f 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 8000696:	2020      	movs	r0, #32
 8000698:	f7ff ff62 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800069c:	2020      	movs	r0, #32
 800069e:	f7ff ff5f 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80006a2:	2020      	movs	r0, #32
 80006a4:	f7ff ff5c 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80006a8:	2020      	movs	r0, #32
 80006aa:	f7ff ff59 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 80006ae:	2005      	movs	r0, #5
 80006b0:	f7ff ff56 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ff53 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 80006ba:	2015      	movs	r0, #21
 80006bc:	f7ff ff50 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 80006c0:	20a7      	movs	r0, #167	; 0xa7
 80006c2:	f7ff ff4d 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 80006c6:	203d      	movs	r0, #61	; 0x3d
 80006c8:	f7ff ff4a 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 80006cc:	2018      	movs	r0, #24
 80006ce:	f7ff ff47 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 80006d2:	2025      	movs	r0, #37	; 0x25
 80006d4:	f7ff ff44 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 80006d8:	202a      	movs	r0, #42	; 0x2a
 80006da:	f7ff ff41 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 80006de:	202b      	movs	r0, #43	; 0x2b
 80006e0:	f7ff ff3e 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 80006e4:	202b      	movs	r0, #43	; 0x2b
 80006e6:	f7ff ff3b 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 80006ea:	203a      	movs	r0, #58	; 0x3a
 80006ec:	f7ff ff38 	bl	8000560 <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 80006f0:	20b1      	movs	r0, #177	; 0xb1
 80006f2:	f7ff ff0f 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 80006f6:	2008      	movs	r0, #8
 80006f8:	f7ff ff32 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff2f 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 8000702:	20b2      	movs	r0, #178	; 0xb2
 8000704:	f7ff ff06 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000708:	2008      	movs	r0, #8
 800070a:	f7ff ff29 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800070e:	2002      	movs	r0, #2
 8000710:	f7ff ff26 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8000714:	20b3      	movs	r0, #179	; 0xb3
 8000716:	f7ff fefd 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800071a:	2008      	movs	r0, #8
 800071c:	f7ff ff20 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff ff1d 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8000726:	20b4      	movs	r0, #180	; 0xb4
 8000728:	f7ff fef4 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 800072c:	2007      	movs	r0, #7
 800072e:	f7ff ff17 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8000732:	202a      	movs	r0, #42	; 0x2a
 8000734:	f7ff feee 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff ff11 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 800073e:	2000      	movs	r0, #0
 8000740:	f7ff ff0e 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff ff0b 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 800074a:	207f      	movs	r0, #127	; 0x7f
 800074c:	f7ff ff08 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8000750:	202b      	movs	r0, #43	; 0x2b
 8000752:	f7ff fedf 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff ff02 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff feff 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff fefc 	bl	8000560 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 8000768:	209f      	movs	r0, #159	; 0x9f
 800076a:	f7ff fef9 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 800076e:	2036      	movs	r0, #54	; 0x36
 8000770:	f7ff fed0 	bl	8000514 <ILI9163_writeCommand>
	if(rotation)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d003      	beq.n	8000782 <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 800077a:	20a8      	movs	r0, #168	; 0xa8
 800077c:	f7ff fef0 	bl	8000560 <ILI9163_writeData>
 8000780:	e002      	b.n	8000788 <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 8000782:	2068      	movs	r0, #104	; 0x68
 8000784:	f7ff feec 	bl	8000560 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 8000788:	2013      	movs	r0, #19
 800078a:	f7ff fec3 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 800078e:	2029      	movs	r0, #41	; 0x29
 8000790:	f7ff fec0 	bl	8000514 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 8000794:	202c      	movs	r0, #44	; 0x2c
 8000796:	f7ff febd 	bl	8000514 <ILI9163_writeCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020c00 	.word	0x40020c00

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b5b0      	push	{r4, r5, r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f000 fde6 	bl	8001382 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f84f 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 f965 	bl	8000a88 <MX_GPIO_Init>
  MX_DMA_Init();
 80007be:	f000 f945 	bl	8000a4c <MX_DMA_Init>
  MX_SPI1_Init();
 80007c2:	f000 f8b1 	bl	8000928 <MX_SPI1_Init>
  MX_TIM14_Init();
 80007c6:	f000 f8ed 	bl	80009a4 <MX_TIM14_Init>
  MX_USART6_UART_Init();
 80007ca:	f000 f90f 	bl	80009ec <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 80007ce:	f009 fe5b 	bl	800a488 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  ILI9163_init(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff ff02 	bl	80005dc <ILI9163_init>
//  char *message = "STM32 is ready\r\n";
//   HAL_UART_Transmit(&huart6, (uint8_t *)message, strlen(message), HAL_MAX_DELAY); // Send message over USART6

   // Start receiving data in interrupt mode

   HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
 80007d8:	2201      	movs	r2, #1
 80007da:	4919      	ldr	r1, [pc, #100]	; (8000840 <main+0x94>)
 80007dc:	4819      	ldr	r0, [pc, #100]	; (8000844 <main+0x98>)
 80007de:	f005 f850 	bl	8005882 <HAL_UART_Receive_IT>
	  //char *dataToSend = "Hello Bluetooth!";

	  // Check if data is received from USB CDC
	  // Check if data is received from USB CDC

	  statePinStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0); // Replace GPIOx with the actual GPIO port and STATE_PIN with the actual pin number
 80007e2:	2101      	movs	r1, #1
 80007e4:	4818      	ldr	r0, [pc, #96]	; (8000848 <main+0x9c>)
 80007e6:	f001 fc87 	bl	80020f8 <HAL_GPIO_ReadPin>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <main+0xa0>)
 80007f0:	701a      	strb	r2, [r3, #0]

	  if(statePinStatus == GPIO_PIN_SET) {
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <main+0xa0>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d11b      	bne.n	8000832 <main+0x86>
	          // The module is connected to another Bluetooth device
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn on LED
 80007fa:	2201      	movs	r2, #1
 80007fc:	2101      	movs	r1, #1
 80007fe:	4814      	ldr	r0, [pc, #80]	; (8000850 <main+0xa4>)
 8000800:	f001 fc92 	bl	8002128 <HAL_GPIO_WritePin>
//
	       uint8_t dataToSend[] = "Say: Ghazal Is Halal "; // Data you want to send
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <main+0xa8>)
 8000806:	463c      	mov	r4, r7
 8000808:	461d      	mov	r5, r3
 800080a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000812:	6020      	str	r0, [r4, #0]
 8000814:	3404      	adds	r4, #4
 8000816:	8021      	strh	r1, [r4, #0]
	       uint16_t dataSize = sizeof(dataToSend); // Calculate the size of the data
 8000818:	2316      	movs	r3, #22
 800081a:	82fb      	strh	r3, [r7, #22]


	          // Call the function to transmit data
	          transmitData(&huart6, dataToSend, dataSize);
 800081c:	8afa      	ldrh	r2, [r7, #22]
 800081e:	463b      	mov	r3, r7
 8000820:	4619      	mov	r1, r3
 8000822:	4808      	ldr	r0, [pc, #32]	; (8000844 <main+0x98>)
 8000824:	f000 f9e4 	bl	8000bf0 <transmitData>
	          HAL_Delay(10000);
 8000828:	f242 7010 	movw	r0, #10000	; 0x2710
 800082c:	f000 fe06 	bl	800143c <HAL_Delay>
 8000830:	e7d7      	b.n	80007e2 <main+0x36>
//	              }
	          }

	      else {
	         // The module is not connected
	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn off LED
 8000832:	2200      	movs	r2, #0
 8000834:	2101      	movs	r1, #1
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <main+0xa4>)
 8000838:	f001 fc76 	bl	8002128 <HAL_GPIO_WritePin>
	  statePinStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0); // Replace GPIOx with the actual GPIO port and STATE_PIN with the actual pin number
 800083c:	e7d1      	b.n	80007e2 <main+0x36>
 800083e:	bf00      	nop
 8000840:	20000334 	.word	0x20000334
 8000844:	200002a8 	.word	0x200002a8
 8000848:	40021800 	.word	0x40021800
 800084c:	20000721 	.word	0x20000721
 8000850:	40020400 	.word	0x40020400
 8000854:	0800b218 	.word	0x0800b218

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f00a fc3a 	bl	800b0e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800087c:	f002 ff4a 	bl	8003714 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <SystemClock_Config+0xc8>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a26      	ldr	r2, [pc, #152]	; (8000920 <SystemClock_Config+0xc8>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <SystemClock_Config+0xc8>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <SystemClock_Config+0xcc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008a0:	4a20      	ldr	r2, [pc, #128]	; (8000924 <SystemClock_Config+0xcc>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <SystemClock_Config+0xcc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008cc:	2348      	movs	r3, #72	; 0x48
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008d4:	2303      	movs	r3, #3
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f002 ff29 	bl	8003734 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e8:	f000 f9d4 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2302      	movs	r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2102      	movs	r1, #2
 8000908:	4618      	mov	r0, r3
 800090a:	f003 f9b7 	bl	8003c7c <HAL_RCC_ClockConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000914:	f000 f9be 	bl	8000c94 <Error_Handler>
  }
}
 8000918:	bf00      	nop
 800091a:	3750      	adds	r7, #80	; 0x50
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_SPI1_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <MX_SPI1_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_SPI1_Init+0x74>)
 8000934:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000938:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_SPI1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SPI1_Init+0x74>)
 8000942:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000946:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_SPI1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI1_Init+0x74>)
 8000956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI1_Init+0x74>)
 800095e:	2208      	movs	r2, #8
 8000960:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_SPI1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI1_Init+0x74>)
 8000976:	2207      	movs	r2, #7
 8000978:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_SPI1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_SPI1_Init+0x74>)
 8000988:	f003 ff8e 	bl	80048a8 <HAL_SPI_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 f97f 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000198 	.word	0x20000198
 80009a0:	40013000 	.word	0x40013000

080009a4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_TIM14_Init+0x40>)
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <MX_TIM14_Init+0x44>)
 80009ac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <MX_TIM14_Init+0x40>)
 80009b0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80009b4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_TIM14_Init+0x40>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_TIM14_Init+0x40>)
 80009be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009c2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_TIM14_Init+0x40>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_TIM14_Init+0x40>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_TIM14_Init+0x40>)
 80009d2:	f004 fc1f 	bl	8005214 <HAL_TIM_Base_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80009dc:	f000 f95a 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000025c 	.word	0x2000025c
 80009e8:	40002000 	.word	0x40002000

080009ec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART6_UART_Init+0x58>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <MX_USART6_UART_Init+0x5c>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART6_UART_Init+0x58>)
 80009f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART6_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USART6_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART6_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART6_UART_Init+0x58>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART6_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART6_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART6_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART6_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART6_UART_Init+0x58>)
 8000a30:	f004 fe56 	bl	80056e0 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000a3a:	f000 f92b 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200002a8 	.word	0x200002a8
 8000a48:	40011400 	.word	0x40011400

08000a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_DMA_Init+0x38>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <MX_DMA_Init+0x38>)
 8000a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_DMA_Init+0x38>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	203b      	movs	r0, #59	; 0x3b
 8000a70:	f000 fde3 	bl	800163a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a74:	203b      	movs	r0, #59	; 0x3b
 8000a76:	f000 fdfc 	bl	8001672 <HAL_NVIC_EnableIRQ>

}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9e:	4b4f      	ldr	r3, [pc, #316]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a4e      	ldr	r2, [pc, #312]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000aa4:	f043 0310 	orr.w	r3, r3, #16
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b4c      	ldr	r3, [pc, #304]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b49      	ldr	r3, [pc, #292]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a48      	ldr	r2, [pc, #288]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b46      	ldr	r3, [pc, #280]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	4b43      	ldr	r3, [pc, #268]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a42      	ldr	r2, [pc, #264]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b40      	ldr	r3, [pc, #256]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a3c      	ldr	r2, [pc, #240]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b3a      	ldr	r3, [pc, #232]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a36      	ldr	r2, [pc, #216]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b16:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a30      	ldr	r2, [pc, #192]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <MX_GPIO_Init+0x154>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f64a 3103 	movw	r1, #43779	; 0xab03
 8000b34:	482a      	ldr	r0, [pc, #168]	; (8000be0 <MX_GPIO_Init+0x158>)
 8000b36:	f001 faf7 	bl	8002128 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b3a:	2320      	movs	r3, #32
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b3e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4825      	ldr	r0, [pc, #148]	; (8000be4 <MX_GPIO_Init+0x15c>)
 8000b50:	f001 f926 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 8000b54:	f240 3301 	movw	r3, #769	; 0x301
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	481c      	ldr	r0, [pc, #112]	; (8000be0 <MX_GPIO_Init+0x158>)
 8000b6e:	f001 f917 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB11 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 8000b72:	f64a 0302 	movw	r3, #43010	; 0xa802
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4815      	ldr	r0, [pc, #84]	; (8000be0 <MX_GPIO_Init+0x158>)
 8000b8c:	f001 f908 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ble_state_Pin */
  GPIO_InitStruct.Pin = ble_state_Pin;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ble_state_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4811      	ldr	r0, [pc, #68]	; (8000be8 <MX_GPIO_Init+0x160>)
 8000ba4:	f001 f8fc 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000ba8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480b      	ldr	r0, [pc, #44]	; (8000bec <MX_GPIO_Init+0x164>)
 8000bc0:	f001 f8ee 	bl	8001da0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2017      	movs	r0, #23
 8000bca:	f000 fd36 	bl	800163a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bce:	2017      	movs	r0, #23
 8000bd0:	f000 fd4f 	bl	8001672 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd4:	bf00      	nop
 8000bd6:	3730      	adds	r7, #48	; 0x30
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40021800 	.word	0x40021800
 8000bec:	40020800 	.word	0x40020800

08000bf0 <transmitData>:

/* USER CODE BEGIN 4 */
void transmitData(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(huart, data, size, 1000); // 1000 is timeout duration
 8000bfe:	88fa      	ldrh	r2, [r7, #6]
 8000c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f004 fdb8 	bl	800577c <HAL_UART_Transmit>
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6) {
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_UART_RxCpltCallback+0x6c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d127      	bne.n	8000c76 <HAL_UART_RxCpltCallback+0x62>
    // Print the received byte for debugging
   // HAL_UART_Transmit(&huart6, (uint8_t *)receiveBuffer, 1, HAL_MAX_DELAY); // Echo the byte

    // Append received byte to receivedData buffer
    receivedData[receivedDataIndex++] = receiveBuffer[0];
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_UART_RxCpltCallback+0x70>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	b2d1      	uxtb	r1, r2
 8000c2e:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <HAL_UART_RxCpltCallback+0x70>)
 8000c30:	7011      	strb	r1, [r2, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_UART_RxCpltCallback+0x74>)
 8000c36:	7819      	ldrb	r1, [r3, #0]
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_UART_RxCpltCallback+0x78>)
 8000c3a:	5499      	strb	r1, [r3, r2]

    // Check for end of message or buffer overflow
    if (receiveBuffer[0] == '\n' || receivedDataIndex >= sizeof(receivedData) - 1) {
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_UART_RxCpltCallback+0x74>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b0a      	cmp	r3, #10
 8000c42:	d113      	bne.n	8000c6c <HAL_UART_RxCpltCallback+0x58>
      // Null-terminate the string and reset index
      receivedData[receivedDataIndex] = '\0';
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_UART_RxCpltCallback+0x70>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_UART_RxCpltCallback+0x78>)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	5499      	strb	r1, [r3, r2]
      receivedDataIndex = 0;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_UART_RxCpltCallback+0x70>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]

      // Echo received data back to the sender for confirmation
      HAL_UART_Transmit(&huart6, (uint8_t *)receivedData, strlen(receivedData), HAL_MAX_DELAY);
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <HAL_UART_RxCpltCallback+0x78>)
 8000c58:	f7ff fad6 	bl	8000208 <strlen>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	4909      	ldr	r1, [pc, #36]	; (8000c8c <HAL_UART_RxCpltCallback+0x78>)
 8000c66:	480a      	ldr	r0, [pc, #40]	; (8000c90 <HAL_UART_RxCpltCallback+0x7c>)
 8000c68:	f004 fd88 	bl	800577c <HAL_UART_Transmit>
    }

    // Re-enable UART receive interrupt for the next byte
    HAL_UART_Receive_IT(&huart6, (uint8_t *)receiveBuffer, sizeof(receiveBuffer));
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4906      	ldr	r1, [pc, #24]	; (8000c88 <HAL_UART_RxCpltCallback+0x74>)
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <HAL_UART_RxCpltCallback+0x7c>)
 8000c72:	f004 fe06 	bl	8005882 <HAL_UART_Receive_IT>
  }
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40011400 	.word	0x40011400
 8000c84:	20000720 	.word	0x20000720
 8000c88:	20000334 	.word	0x20000334
 8000c8c:	20000338 	.word	0x20000338
 8000c90:	200002a8 	.word	0x200002a8

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <Error_Handler+0x8>
	...

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_MspInit+0x44>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <HAL_MspInit+0x44>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_MspInit+0x44>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a37      	ldr	r2, [pc, #220]	; (8000de4 <HAL_SPI_MspInit+0xfc>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d168      	bne.n	8000ddc <HAL_SPI_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d0a:	4b37      	ldr	r3, [pc, #220]	; (8000de8 <HAL_SPI_MspInit+0x100>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a36      	ldr	r2, [pc, #216]	; (8000de8 <HAL_SPI_MspInit+0x100>)
 8000d10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <HAL_SPI_MspInit+0x100>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <HAL_SPI_MspInit+0x100>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a30      	ldr	r2, [pc, #192]	; (8000de8 <HAL_SPI_MspInit+0x100>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <HAL_SPI_MspInit+0x100>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d3a:	23e0      	movs	r3, #224	; 0xe0
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d4a:	2305      	movs	r3, #5
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4825      	ldr	r0, [pc, #148]	; (8000dec <HAL_SPI_MspInit+0x104>)
 8000d56:	f001 f823 	bl	8001da0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000d5c:	4a25      	ldr	r2, [pc, #148]	; (8000df4 <HAL_SPI_MspInit+0x10c>)
 8000d5e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000d60:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000d62:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d66:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d68:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000d6a:	2240      	movs	r2, #64	; 0x40
 8000d6c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6e:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000d76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000d7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d82:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d8a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000db0:	480f      	ldr	r0, [pc, #60]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000db2:	f000 fc79 	bl	80016a8 <HAL_DMA_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_SPI_MspInit+0xd8>
    {
      Error_Handler();
 8000dbc:	f7ff ff6a 	bl	8000c94 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000dc4:	655a      	str	r2, [r3, #84]	; 0x54
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_SPI_MspInit+0x108>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2023      	movs	r0, #35	; 0x23
 8000dd2:	f000 fc32 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000dd6:	2023      	movs	r0, #35	; 0x23
 8000dd8:	f000 fc4b 	bl	8001672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	; 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40013000 	.word	0x40013000
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000
 8000df0:	200001fc 	.word	0x200001fc
 8000df4:	40026458 	.word	0x40026458

08000df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_TIM_Base_MspInit+0x44>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d113      	bne.n	8000e32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_TIM_Base_MspInit+0x48>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <HAL_TIM_Base_MspInit+0x48>)
 8000e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_TIM_Base_MspInit+0x48>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	202d      	movs	r0, #45	; 0x2d
 8000e28:	f000 fc07 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000e2c:	202d      	movs	r0, #45	; 0x2d
 8000e2e:	f000 fc20 	bl	8001672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40002000 	.word	0x40002000
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0aa      	sub	sp, #168	; 0xa8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	2284      	movs	r2, #132	; 0x84
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f00a f93b 	bl	800b0e0 <memset>
  if(huart->Instance==USART6)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <HAL_UART_MspInit+0xc4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d144      	bne.n	8000efe <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000e74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	4618      	mov	r0, r3
 8000e84:	f003 f920 	bl	80040c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e8e:	f7ff ff01 	bl	8000c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <HAL_UART_MspInit+0xc8>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a1d      	ldr	r2, [pc, #116]	; (8000f0c <HAL_UART_MspInit+0xc8>)
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <HAL_UART_MspInit+0xc8>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_UART_MspInit+0xc8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a17      	ldr	r2, [pc, #92]	; (8000f0c <HAL_UART_MspInit+0xc8>)
 8000eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_UART_MspInit+0xc8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000ec2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000ec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000edc:	2308      	movs	r3, #8
 8000ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <HAL_UART_MspInit+0xcc>)
 8000eea:	f000 ff59 	bl	8001da0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2047      	movs	r0, #71	; 0x47
 8000ef4:	f000 fba1 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000ef8:	2047      	movs	r0, #71	; 0x47
 8000efa:	f000 fbba 	bl	8001672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000efe:	bf00      	nop
 8000f00:	37a8      	adds	r7, #168	; 0xa8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40011400 	.word	0x40011400
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40021800 	.word	0x40021800

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f68:	f000 fa48 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	key = 0;
 8000f76:	4b51      	ldr	r3, [pc, #324]	; (80010bc <EXTI9_5_IRQHandler+0x14c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	801a      	strh	r2, [r3, #0]
		for(uint8_t c=0 ; c<4 ; c++){
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	e075      	b.n	800106e <EXTI9_5_IRQHandler+0xfe>
			for(uint8_t i=0 ; i<4 ; i++){
 8000f82:	2300      	movs	r3, #0
 8000f84:	71bb      	strb	r3, [r7, #6]
 8000f86:	e00e      	b.n	8000fa6 <EXTI9_5_IRQHandler+0x36>
				HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	4a4d      	ldr	r2, [pc, #308]	; (80010c0 <EXTI9_5_IRQHandler+0x150>)
 8000f8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f90:	79bb      	ldrb	r3, [r7, #6]
 8000f92:	4a4c      	ldr	r2, [pc, #304]	; (80010c4 <EXTI9_5_IRQHandler+0x154>)
 8000f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f001 f8c4 	bl	8002128 <HAL_GPIO_WritePin>
			for(uint8_t i=0 ; i<4 ; i++){
 8000fa0:	79bb      	ldrb	r3, [r7, #6]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	71bb      	strb	r3, [r7, #6]
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d9ed      	bls.n	8000f88 <EXTI9_5_IRQHandler+0x18>
			}
			HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4a44      	ldr	r2, [pc, #272]	; (80010c0 <EXTI9_5_IRQHandler+0x150>)
 8000fb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	4a43      	ldr	r2, [pc, #268]	; (80010c4 <EXTI9_5_IRQHandler+0x154>)
 8000fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f001 f8b2 	bl	8002128 <HAL_GPIO_WritePin>
			for(uint8_t r=0 ; r<4 ; r++){
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	717b      	strb	r3, [r7, #5]
 8000fc8:	e04b      	b.n	8001062 <EXTI9_5_IRQHandler+0xf2>
				if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000fca:	797b      	ldrb	r3, [r7, #5]
 8000fcc:	4a3e      	ldr	r2, [pc, #248]	; (80010c8 <EXTI9_5_IRQHandler+0x158>)
 8000fce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fd2:	797b      	ldrb	r3, [r7, #5]
 8000fd4:	493d      	ldr	r1, [pc, #244]	; (80010cc <EXTI9_5_IRQHandler+0x15c>)
 8000fd6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4610      	mov	r0, r2
 8000fde:	f001 f88b 	bl	80020f8 <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d139      	bne.n	800105c <EXTI9_5_IRQHandler+0xec>
					if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 8000fe8:	797b      	ldrb	r3, [r7, #5]
 8000fea:	4a37      	ldr	r2, [pc, #220]	; (80010c8 <EXTI9_5_IRQHandler+0x158>)
 8000fec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ff0:	797b      	ldrb	r3, [r7, #5]
 8000ff2:	4936      	ldr	r1, [pc, #216]	; (80010cc <EXTI9_5_IRQHandler+0x15c>)
 8000ff4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	f001 f87c 	bl	80020f8 <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d12a      	bne.n	800105c <EXTI9_5_IRQHandler+0xec>
						key |= 1<<c;
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2201      	movs	r2, #1
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	b21a      	sxth	r2, r3
 8001010:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <EXTI9_5_IRQHandler+0x14c>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <EXTI9_5_IRQHandler+0x14c>)
 800101e:	801a      	strh	r2, [r3, #0]
						key |= 1<<(r+8);
 8001020:	797b      	ldrb	r3, [r7, #5]
 8001022:	3308      	adds	r3, #8
 8001024:	2201      	movs	r2, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	b21a      	sxth	r2, r3
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <EXTI9_5_IRQHandler+0x14c>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b20      	ldr	r3, [pc, #128]	; (80010bc <EXTI9_5_IRQHandler+0x14c>)
 800103a:	801a      	strh	r2, [r3, #0]
						while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET){
 800103c:	bf00      	nop
 800103e:	797b      	ldrb	r3, [r7, #5]
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <EXTI9_5_IRQHandler+0x158>)
 8001042:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001046:	797b      	ldrb	r3, [r7, #5]
 8001048:	4920      	ldr	r1, [pc, #128]	; (80010cc <EXTI9_5_IRQHandler+0x15c>)
 800104a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800104e:	4619      	mov	r1, r3
 8001050:	4610      	mov	r0, r2
 8001052:	f001 f851 	bl	80020f8 <HAL_GPIO_ReadPin>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f0      	beq.n	800103e <EXTI9_5_IRQHandler+0xce>
			for(uint8_t r=0 ; r<4 ; r++){
 800105c:	797b      	ldrb	r3, [r7, #5]
 800105e:	3301      	adds	r3, #1
 8001060:	717b      	strb	r3, [r7, #5]
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	2b03      	cmp	r3, #3
 8001066:	d9b0      	bls.n	8000fca <EXTI9_5_IRQHandler+0x5a>
		for(uint8_t c=0 ; c<4 ; c++){
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	3301      	adds	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b03      	cmp	r3, #3
 8001072:	d986      	bls.n	8000f82 <EXTI9_5_IRQHandler+0x12>
					}
				}
			}
		}

		keyChar = KeyPadGetChar(key);
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <EXTI9_5_IRQHandler+0x14c>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f000 f85f 	bl	800113c <KeyPadGetChar>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <EXTI9_5_IRQHandler+0x160>)
 8001084:	701a      	strb	r2, [r3, #0]
		key = 0;
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <EXTI9_5_IRQHandler+0x14c>)
 8001088:	2200      	movs	r2, #0
 800108a:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f64a 0102 	movw	r1, #43010	; 0xa802
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <EXTI9_5_IRQHandler+0x164>)
 8001094:	f001 f848 	bl	8002128 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001098:	2020      	movs	r0, #32
 800109a:	f001 f85f 	bl	800215c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800109e:	2040      	movs	r0, #64	; 0x40
 80010a0:	f001 f85c 	bl	800215c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80010a4:	2080      	movs	r0, #128	; 0x80
 80010a6:	f001 f859 	bl	800215c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80010aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010ae:	f001 f855 	bl	800215c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000332 	.word	0x20000332
 80010c0:	20000000 	.word	0x20000000
 80010c4:	0800b278 	.word	0x0800b278
 80010c8:	20000010 	.word	0x20000010
 80010cc:	0800b280 	.word	0x0800b280
 80010d0:	20000330 	.word	0x20000330
 80010d4:	40020400 	.word	0x40020400

080010d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <SPI1_IRQHandler+0x10>)
 80010de:	f003 fdfd 	bl	8004cdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000198 	.word	0x20000198

080010ec <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80010f2:	f004 f8e6 	bl	80052c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000025c 	.word	0x2000025c

08001100 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <DMA2_Stream3_IRQHandler+0x10>)
 8001106:	f000 fc0f 	bl	8001928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200001fc 	.word	0x200001fc

08001114 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <OTG_FS_IRQHandler+0x10>)
 800111a:	f001 f988 	bl	800242e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20001c0c 	.word	0x20001c0c

08001128 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <USART6_IRQHandler+0x10>)
 800112e:	f004 fbed 	bl	800590c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200002a8 	.word	0x200002a8

0800113c <KeyPadGetChar>:

/* USER CODE BEGIN 1 */
char KeyPadGetChar(uint16_t	key)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
  switch(key)
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	f640 0208 	movw	r2, #2056	; 0x808
 800114c:	4293      	cmp	r3, r2
 800114e:	f300 809f 	bgt.w	8001290 <KeyPadGetChar+0x154>
 8001152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001156:	dc1a      	bgt.n	800118e <KeyPadGetChar+0x52>
 8001158:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800115c:	f300 8098 	bgt.w	8001290 <KeyPadGetChar+0x154>
 8001160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001164:	dc2a      	bgt.n	80011bc <KeyPadGetChar+0x80>
 8001166:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800116a:	f300 8091 	bgt.w	8001290 <KeyPadGetChar+0x154>
 800116e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001172:	dc3b      	bgt.n	80011ec <KeyPadGetChar+0xb0>
 8001174:	2b00      	cmp	r3, #0
 8001176:	d069      	beq.n	800124c <KeyPadGetChar+0x110>
 8001178:	2b00      	cmp	r3, #0
 800117a:	f2c0 8089 	blt.w	8001290 <KeyPadGetChar+0x154>
 800117e:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8001182:	f300 8085 	bgt.w	8001290 <KeyPadGetChar+0x154>
 8001186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800118a:	dc47      	bgt.n	800121c <KeyPadGetChar+0xe0>
 800118c:	e080      	b.n	8001290 <KeyPadGetChar+0x154>
 800118e:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 8001192:	2b07      	cmp	r3, #7
 8001194:	d87c      	bhi.n	8001290 <KeyPadGetChar+0x154>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <KeyPadGetChar+0x60>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	0800125d 	.word	0x0800125d
 80011a0:	0800126d 	.word	0x0800126d
 80011a4:	08001291 	.word	0x08001291
 80011a8:	0800127d 	.word	0x0800127d
 80011ac:	08001291 	.word	0x08001291
 80011b0:	08001291 	.word	0x08001291
 80011b4:	08001291 	.word	0x08001291
 80011b8:	0800128d 	.word	0x0800128d
 80011bc:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80011c0:	2b07      	cmp	r3, #7
 80011c2:	d865      	bhi.n	8001290 <KeyPadGetChar+0x154>
 80011c4:	a201      	add	r2, pc, #4	; (adr r2, 80011cc <KeyPadGetChar+0x90>)
 80011c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ca:	bf00      	nop
 80011cc:	08001259 	.word	0x08001259
 80011d0:	08001269 	.word	0x08001269
 80011d4:	08001291 	.word	0x08001291
 80011d8:	08001279 	.word	0x08001279
 80011dc:	08001291 	.word	0x08001291
 80011e0:	08001291 	.word	0x08001291
 80011e4:	08001291 	.word	0x08001291
 80011e8:	08001289 	.word	0x08001289
 80011ec:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	d84d      	bhi.n	8001290 <KeyPadGetChar+0x154>
 80011f4:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <KeyPadGetChar+0xc0>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	08001255 	.word	0x08001255
 8001200:	08001265 	.word	0x08001265
 8001204:	08001291 	.word	0x08001291
 8001208:	08001275 	.word	0x08001275
 800120c:	08001291 	.word	0x08001291
 8001210:	08001291 	.word	0x08001291
 8001214:	08001291 	.word	0x08001291
 8001218:	08001285 	.word	0x08001285
 800121c:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8001220:	2b07      	cmp	r3, #7
 8001222:	d835      	bhi.n	8001290 <KeyPadGetChar+0x154>
 8001224:	a201      	add	r2, pc, #4	; (adr r2, 800122c <KeyPadGetChar+0xf0>)
 8001226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122a:	bf00      	nop
 800122c:	08001251 	.word	0x08001251
 8001230:	08001261 	.word	0x08001261
 8001234:	08001291 	.word	0x08001291
 8001238:	08001271 	.word	0x08001271
 800123c:	08001291 	.word	0x08001291
 8001240:	08001291 	.word	0x08001291
 8001244:	08001291 	.word	0x08001291
 8001248:	08001281 	.word	0x08001281
  {
    case 0x0000:
      return 0;
 800124c:	2300      	movs	r3, #0
 800124e:	e020      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0101:
			return '1';
 8001250:	2331      	movs	r3, #49	; 0x31
 8001252:	e01e      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0201:
			return '2';
 8001254:	2332      	movs	r3, #50	; 0x32
 8001256:	e01c      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0401:
			return '3';
 8001258:	2333      	movs	r3, #51	; 0x33
 800125a:	e01a      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0801:
			return 'A';
 800125c:	2341      	movs	r3, #65	; 0x41
 800125e:	e018      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0102:
			return '4';
 8001260:	2334      	movs	r3, #52	; 0x34
 8001262:	e016      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0202:
			return '5';
 8001264:	2335      	movs	r3, #53	; 0x35
 8001266:	e014      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0402:
			return '6';
 8001268:	2336      	movs	r3, #54	; 0x36
 800126a:	e012      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0802:
			return 'B';
 800126c:	2342      	movs	r3, #66	; 0x42
 800126e:	e010      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0104:
			return '7';
 8001270:	2337      	movs	r3, #55	; 0x37
 8001272:	e00e      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0204:
			return '8';
 8001274:	2338      	movs	r3, #56	; 0x38
 8001276:	e00c      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0404:
			return '9';
 8001278:	2339      	movs	r3, #57	; 0x39
 800127a:	e00a      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0804:
			return 'C';
 800127c:	2343      	movs	r3, #67	; 0x43
 800127e:	e008      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0108:
			return '*';
 8001280:	232a      	movs	r3, #42	; 0x2a
 8001282:	e006      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0208:
			return '0';
 8001284:	2330      	movs	r3, #48	; 0x30
 8001286:	e004      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0408:
			return '#';
 8001288:	2323      	movs	r3, #35	; 0x23
 800128a:	e002      	b.n	8001292 <KeyPadGetChar+0x156>
		case 0x0808:
			return 'D';
 800128c:	2344      	movs	r3, #68	; 0x44
 800128e:	e000      	b.n	8001292 <KeyPadGetChar+0x156>
		default:
			return 0;
 8001290:	2300      	movs	r3, #0
	}
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop

080012a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a8:	4a14      	ldr	r2, [pc, #80]	; (80012fc <_sbrk+0x5c>)
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <_sbrk+0x60>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <_sbrk+0x64>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <_sbrk+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d207      	bcs.n	80012e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d0:	f009 ff1e 	bl	800b110 <__errno>
 80012d4:	4603      	mov	r3, r0
 80012d6:	220c      	movs	r2, #12
 80012d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e009      	b.n	80012f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <_sbrk+0x64>)
 80012f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20050000 	.word	0x20050000
 8001300:	00000400 	.word	0x00000400
 8001304:	20000724 	.word	0x20000724
 8001308:	20002260 	.word	0x20002260

0800130c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001368 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001336:	490e      	ldr	r1, [pc, #56]	; (8001370 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800134c:	4c0b      	ldr	r4, [pc, #44]	; (800137c <LoopFillZerobss+0x26>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800135a:	f7ff ffd7 	bl	800130c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135e:	f009 fedd 	bl	800b11c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff fa23 	bl	80007ac <main>
  bx  lr    
 8001366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001368:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001374:	0800b2b8 	.word	0x0800b2b8
  ldr r2, =_sbss
 8001378:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 800137c:	2000225c 	.word	0x2000225c

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>

08001382 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001386:	2003      	movs	r0, #3
 8001388:	f000 f94c 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800138c:	2000      	movs	r0, #0
 800138e:	f000 f805 	bl	800139c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001392:	f7ff fc85 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x54>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_InitTick+0x58>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f967 	bl	800168e <HAL_SYSTICK_Config>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00e      	b.n	80013e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d80a      	bhi.n	80013e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d0:	2200      	movs	r2, #0
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f000 f92f 	bl	800163a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <HAL_InitTick+0x5c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e000      	b.n	80013e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000020 	.word	0x20000020
 80013f4:	20000028 	.word	0x20000028
 80013f8:	20000024 	.word	0x20000024

080013fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x20>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x24>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <HAL_IncTick+0x24>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000028 	.word	0x20000028
 8001420:	20000728 	.word	0x20000728

08001424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <HAL_GetTick+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000728 	.word	0x20000728

0800143c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff ffee 	bl	8001424 <HAL_GetTick>
 8001448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001454:	d005      	beq.n	8001462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_Delay+0x44>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001462:	bf00      	nop
 8001464:	f7ff ffde 	bl	8001424 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d8f7      	bhi.n	8001464 <HAL_Delay+0x28>
  {
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000028 	.word	0x20000028

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b2:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <__NVIC_SetPriorityGrouping+0x40>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	60d3      	str	r3, [r2, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00
 80014c8:	05fa0000 	.word	0x05fa0000

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4907      	ldr	r1, [pc, #28]	; (8001520 <__NVIC_EnableIRQ+0x38>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f0:	d301      	bcc.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <SysTick_Config+0x40>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	210f      	movs	r1, #15
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f7ff ff8e 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SysTick_Config+0x40>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <SysTick_Config+0x40>)
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff29 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800164c:	f7ff ff3e 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff ff8e 	bl	8001578 <NVIC_EncodePriority>
 800165c:	4602      	mov	r2, r0
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5d 	bl	8001524 <__NVIC_SetPriority>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff31 	bl	80014e8 <__NVIC_EnableIRQ>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffa2 	bl	80015e0 <SysTick_Config>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016b4:	f7ff feb6 	bl	8001424 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e099      	b.n	80017f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2202      	movs	r2, #2
 80016c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e4:	e00f      	b.n	8001706 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e6:	f7ff fe9d 	bl	8001424 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b05      	cmp	r3, #5
 80016f2:	d908      	bls.n	8001706 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2220      	movs	r2, #32
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2203      	movs	r2, #3
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e078      	b.n	80017f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e8      	bne.n	80016e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_DMA_Init+0x158>)
 8001720:	4013      	ands	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4313      	orrs	r3, r2
 8001756:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	2b04      	cmp	r3, #4
 800175e:	d107      	bne.n	8001770 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4313      	orrs	r3, r2
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4313      	orrs	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f023 0307 	bic.w	r3, r3, #7
 8001786:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	4313      	orrs	r3, r2
 8001790:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	2b04      	cmp	r3, #4
 8001798:	d117      	bne.n	80017ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00e      	beq.n	80017ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fa7b 	bl	8001ca8 <DMA_CheckFifoParam>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2240      	movs	r2, #64	; 0x40
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017c6:	2301      	movs	r3, #1
 80017c8:	e016      	b.n	80017f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fa32 	bl	8001c3c <DMA_CalcBaseAndBitshift>
 80017d8:	4603      	mov	r3, r0
 80017da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	223f      	movs	r2, #63	; 0x3f
 80017e2:	409a      	lsls	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	f010803f 	.word	0xf010803f

08001804 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001812:	f7ff fe07 	bl	8001424 <HAL_GetTick>
 8001816:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d008      	beq.n	8001836 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e052      	b.n	80018dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0216 	bic.w	r2, r2, #22
 8001844:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001854:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	2b00      	cmp	r3, #0
 800185c:	d103      	bne.n	8001866 <HAL_DMA_Abort+0x62>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001862:	2b00      	cmp	r3, #0
 8001864:	d007      	beq.n	8001876 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0208 	bic.w	r2, r2, #8
 8001874:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001886:	e013      	b.n	80018b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001888:	f7ff fdcc 	bl	8001424 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b05      	cmp	r3, #5
 8001894:	d90c      	bls.n	80018b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2220      	movs	r2, #32
 800189a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2203      	movs	r2, #3
 80018a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e015      	b.n	80018dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1e4      	bne.n	8001888 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c2:	223f      	movs	r2, #63	; 0x3f
 80018c4:	409a      	lsls	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d004      	beq.n	8001902 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00c      	b.n	800191c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2205      	movs	r2, #5
 8001906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001934:	4b8e      	ldr	r3, [pc, #568]	; (8001b70 <HAL_DMA_IRQHandler+0x248>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a8e      	ldr	r2, [pc, #568]	; (8001b74 <HAL_DMA_IRQHandler+0x24c>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	0a9b      	lsrs	r3, r3, #10
 8001940:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001952:	2208      	movs	r2, #8
 8001954:	409a      	lsls	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d01a      	beq.n	8001994 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d013      	beq.n	8001994 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0204 	bic.w	r2, r2, #4
 800197a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001980:	2208      	movs	r2, #8
 8001982:	409a      	lsls	r2, r3
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001998:	2201      	movs	r2, #1
 800199a:	409a      	lsls	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d012      	beq.n	80019ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b6:	2201      	movs	r2, #1
 80019b8:	409a      	lsls	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c2:	f043 0202 	orr.w	r2, r3, #2
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ce:	2204      	movs	r2, #4
 80019d0:	409a      	lsls	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d012      	beq.n	8001a00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00b      	beq.n	8001a00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	2204      	movs	r2, #4
 80019ee:	409a      	lsls	r2, r3
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f8:	f043 0204 	orr.w	r2, r3, #4
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a04:	2210      	movs	r2, #16
 8001a06:	409a      	lsls	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d043      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d03c      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a22:	2210      	movs	r2, #16
 8001a24:	409a      	lsls	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d018      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d108      	bne.n	8001a58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d024      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	4798      	blx	r3
 8001a56:	e01f      	b.n	8001a98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01b      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
 8001a68:	e016      	b.n	8001a98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0208 	bic.w	r2, r2, #8
 8001a86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 808f 	beq.w	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 8087 	beq.w	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abe:	2220      	movs	r2, #32
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d136      	bne.n	8001b40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0216 	bic.w	r2, r2, #22
 8001ae0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001af0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <HAL_DMA_IRQHandler+0x1da>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0208 	bic.w	r2, r2, #8
 8001b10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b16:	223f      	movs	r2, #63	; 0x3f
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d07e      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	4798      	blx	r3
        }
        return;
 8001b3e:	e079      	b.n	8001c34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d01d      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10d      	bne.n	8001b78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d031      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
 8001b6c:	e02c      	b.n	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
 8001b6e:	bf00      	nop
 8001b70:	20000020 	.word	0x20000020
 8001b74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d023      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4798      	blx	r3
 8001b88:	e01e      	b.n	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10f      	bne.n	8001bb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0210 	bic.w	r2, r2, #16
 8001ba6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d032      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d022      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2205      	movs	r2, #5
 8001be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d307      	bcc.n	8001c10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f2      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0x2cc>
 8001c0e:	e000      	b.n	8001c12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	4798      	blx	r3
 8001c32:	e000      	b.n	8001c36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c34:	bf00      	nop
    }
  }
}
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	3b10      	subs	r3, #16
 8001c4c:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <DMA_CalcBaseAndBitshift+0x60>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <DMA_CalcBaseAndBitshift+0x64>)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d908      	bls.n	8001c7c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	1d1a      	adds	r2, r3, #4
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	659a      	str	r2, [r3, #88]	; 0x58
 8001c7a:	e006      	b.n	8001c8a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	aaaaaaab 	.word	0xaaaaaaab
 8001ca0:	0800b2a0 	.word	0x0800b2a0
 8001ca4:	fffffc00 	.word	0xfffffc00

08001ca8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d11f      	bne.n	8001d02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d856      	bhi.n	8001d76 <DMA_CheckFifoParam+0xce>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <DMA_CheckFifoParam+0x28>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001ce1 	.word	0x08001ce1
 8001cd4:	08001cf3 	.word	0x08001cf3
 8001cd8:	08001ce1 	.word	0x08001ce1
 8001cdc:	08001d77 	.word	0x08001d77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d046      	beq.n	8001d7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cf0:	e043      	b.n	8001d7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cfa:	d140      	bne.n	8001d7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d00:	e03d      	b.n	8001d7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d0a:	d121      	bne.n	8001d50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d837      	bhi.n	8001d82 <DMA_CheckFifoParam+0xda>
 8001d12:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <DMA_CheckFifoParam+0x70>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d29 	.word	0x08001d29
 8001d1c:	08001d2f 	.word	0x08001d2f
 8001d20:	08001d29 	.word	0x08001d29
 8001d24:	08001d41 	.word	0x08001d41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d2c:	e030      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d025      	beq.n	8001d86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d3e:	e022      	b.n	8001d86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d48:	d11f      	bne.n	8001d8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d4e:	e01c      	b.n	8001d8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d903      	bls.n	8001d5e <DMA_CheckFifoParam+0xb6>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d003      	beq.n	8001d64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d5c:	e018      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
      break;
 8001d62:	e015      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00e      	beq.n	8001d8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
      break;
 8001d74:	e00b      	b.n	8001d8e <DMA_CheckFifoParam+0xe6>
      break;
 8001d76:	bf00      	nop
 8001d78:	e00a      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      break;
 8001d7a:	bf00      	nop
 8001d7c:	e008      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      break;
 8001d7e:	bf00      	nop
 8001d80:	e006      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      break;
 8001d82:	bf00      	nop
 8001d84:	e004      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      break;
 8001d86:	bf00      	nop
 8001d88:	e002      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d8a:	bf00      	nop
 8001d8c:	e000      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      break;
 8001d8e:	bf00      	nop
    }
  } 
  
  return status; 
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e175      	b.n	80020ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f040 8164 	bne.w	80020a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d005      	beq.n	8001df6 <HAL_GPIO_Init+0x56>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d130      	bne.n	8001e58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2203      	movs	r2, #3
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 0201 	and.w	r2, r3, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d017      	beq.n	8001e94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d123      	bne.n	8001ee8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	69b9      	ldr	r1, [r7, #24]
 8001ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80be 	beq.w	80020a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_GPIO_Init+0x324>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a65      	ldr	r2, [pc, #404]	; (80020c4 <HAL_GPIO_Init+0x324>)
 8001f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <HAL_GPIO_Init+0x324>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f42:	4a61      	ldr	r2, [pc, #388]	; (80020c8 <HAL_GPIO_Init+0x328>)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	220f      	movs	r2, #15
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a58      	ldr	r2, [pc, #352]	; (80020cc <HAL_GPIO_Init+0x32c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d037      	beq.n	8001fde <HAL_GPIO_Init+0x23e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a57      	ldr	r2, [pc, #348]	; (80020d0 <HAL_GPIO_Init+0x330>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d031      	beq.n	8001fda <HAL_GPIO_Init+0x23a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a56      	ldr	r2, [pc, #344]	; (80020d4 <HAL_GPIO_Init+0x334>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d02b      	beq.n	8001fd6 <HAL_GPIO_Init+0x236>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a55      	ldr	r2, [pc, #340]	; (80020d8 <HAL_GPIO_Init+0x338>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d025      	beq.n	8001fd2 <HAL_GPIO_Init+0x232>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a54      	ldr	r2, [pc, #336]	; (80020dc <HAL_GPIO_Init+0x33c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <HAL_GPIO_Init+0x22e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a53      	ldr	r2, [pc, #332]	; (80020e0 <HAL_GPIO_Init+0x340>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d019      	beq.n	8001fca <HAL_GPIO_Init+0x22a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a52      	ldr	r2, [pc, #328]	; (80020e4 <HAL_GPIO_Init+0x344>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0x226>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a51      	ldr	r2, [pc, #324]	; (80020e8 <HAL_GPIO_Init+0x348>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_GPIO_Init+0x222>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a50      	ldr	r2, [pc, #320]	; (80020ec <HAL_GPIO_Init+0x34c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <HAL_GPIO_Init+0x21e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4f      	ldr	r2, [pc, #316]	; (80020f0 <HAL_GPIO_Init+0x350>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_GPIO_Init+0x21a>
 8001fb6:	2309      	movs	r3, #9
 8001fb8:	e012      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fba:	230a      	movs	r3, #10
 8001fbc:	e010      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	e00e      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fc2:	2307      	movs	r3, #7
 8001fc4:	e00c      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fc6:	2306      	movs	r3, #6
 8001fc8:	e00a      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fca:	2305      	movs	r3, #5
 8001fcc:	e008      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fce:	2304      	movs	r3, #4
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e004      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e002      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	f002 0203 	and.w	r2, r2, #3
 8001fe6:	0092      	lsls	r2, r2, #2
 8001fe8:	4093      	lsls	r3, r2
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ff0:	4935      	ldr	r1, [pc, #212]	; (80020c8 <HAL_GPIO_Init+0x328>)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_GPIO_Init+0x354>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002022:	4a34      	ldr	r2, [pc, #208]	; (80020f4 <HAL_GPIO_Init+0x354>)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002028:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <HAL_GPIO_Init+0x354>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800204c:	4a29      	ldr	r2, [pc, #164]	; (80020f4 <HAL_GPIO_Init+0x354>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <HAL_GPIO_Init+0x354>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002076:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <HAL_GPIO_Init+0x354>)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_GPIO_Init+0x354>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020a0:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <HAL_GPIO_Init+0x354>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3301      	adds	r3, #1
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2b0f      	cmp	r3, #15
 80020b0:	f67f ae86 	bls.w	8001dc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40013800 	.word	0x40013800
 80020cc:	40020000 	.word	0x40020000
 80020d0:	40020400 	.word	0x40020400
 80020d4:	40020800 	.word	0x40020800
 80020d8:	40020c00 	.word	0x40020c00
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40021400 	.word	0x40021400
 80020e4:	40021800 	.word	0x40021800
 80020e8:	40021c00 	.word	0x40021c00
 80020ec:	40022000 	.word	0x40022000
 80020f0:	40022400 	.word	0x40022400
 80020f4:	40013c00 	.word	0x40013c00

080020f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	e001      	b.n	800211a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
 8002134:	4613      	mov	r3, r2
 8002136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002138:	787b      	ldrb	r3, [r7, #1]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002144:	e003      	b.n	800214e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002146:	887b      	ldrh	r3, [r7, #2]
 8002148:	041a      	lsls	r2, r3, #16
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	619a      	str	r2, [r3, #24]
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d006      	beq.n	8002180 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f806 	bl	800218c <HAL_GPIO_EXTI_Callback>
  }
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40013c00 	.word	0x40013c00

0800218c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a4:	b08f      	sub	sp, #60	; 0x3c
 80021a6:	af0a      	add	r7, sp, #40	; 0x28
 80021a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e116      	b.n	80023e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f008 fb4c 	bl	800a86c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2203      	movs	r2, #3
 80021d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 fe5b 	bl	8006eae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	687e      	ldr	r6, [r7, #4]
 8002200:	466d      	mov	r5, sp
 8002202:	f106 0410 	add.w	r4, r6, #16
 8002206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800220a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800220c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800220e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002212:	e885 0003 	stmia.w	r5, {r0, r1}
 8002216:	1d33      	adds	r3, r6, #4
 8002218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800221a:	6838      	ldr	r0, [r7, #0]
 800221c:	f004 fd3c 	bl	8006c98 <USB_CoreInit>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2202      	movs	r2, #2
 800222a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e0d7      	b.n	80023e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f004 fe49 	bl	8006ed0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	e04a      	b.n	80022da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	333d      	adds	r3, #61	; 0x3d
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	333c      	adds	r3, #60	; 0x3c
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	b298      	uxth	r0, r3
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3344      	adds	r3, #68	; 0x44
 8002280:	4602      	mov	r2, r0
 8002282:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	3340      	adds	r3, #64	; 0x40
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3348      	adds	r3, #72	; 0x48
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	334c      	adds	r3, #76	; 0x4c
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	3354      	adds	r3, #84	; 0x54
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	3301      	adds	r3, #1
 80022d8:	73fb      	strb	r3, [r7, #15]
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d3af      	bcc.n	8002244 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e4:	2300      	movs	r3, #0
 80022e6:	73fb      	strb	r3, [r7, #15]
 80022e8:	e044      	b.n	8002374 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002316:	7bfa      	ldrb	r2, [r7, #15]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4413      	add	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	3301      	adds	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	d3b5      	bcc.n	80022ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	687e      	ldr	r6, [r7, #4]
 8002386:	466d      	mov	r5, sp
 8002388:	f106 0410 	add.w	r4, r6, #16
 800238c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800238e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002394:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002398:	e885 0003 	stmia.w	r5, {r0, r1}
 800239c:	1d33      	adds	r3, r6, #4
 800239e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a0:	6838      	ldr	r0, [r7, #0]
 80023a2:	f004 fde1 	bl	8006f68 <USB_DevInit>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e014      	b.n	80023e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d102      	bne.n	80023d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f001 f97b 	bl	80036cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f005 ff2f 	bl	800823e <USB_DevDisconnect>

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_PCD_Start+0x16>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e012      	b.n	8002426 <HAL_PCD_Start+0x3c>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f004 fd3d 	bl	8006e8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f005 fef0 	bl	80081fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800242e:	b590      	push	{r4, r7, lr}
 8002430:	b08d      	sub	sp, #52	; 0x34
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f005 ffae 	bl	80083a6 <USB_GetMode>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 84b7 	bne.w	8002dc0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f005 ff12 	bl	8008280 <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 84ad 	beq.w	8002dbe <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f005 feff 	bl	8008280 <USB_ReadInterrupts>
 8002482:	4603      	mov	r3, r0
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b02      	cmp	r3, #2
 800248a:	d107      	bne.n	800249c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f002 0202 	and.w	r2, r2, #2
 800249a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f005 feed 	bl	8008280 <USB_ReadInterrupts>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d161      	bne.n	8002574 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0210 	bic.w	r2, r2, #16
 80024be:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	f003 020f 	and.w	r2, r3, #15
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4413      	add	r3, r2
 80024dc:	3304      	adds	r3, #4
 80024de:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	0c5b      	lsrs	r3, r3, #17
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d124      	bne.n	8002536 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d035      	beq.n	8002564 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	6a38      	ldr	r0, [r7, #32]
 800250c:	f005 fd24 	bl	8007f58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800251c:	441a      	add	r2, r3
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	6a1a      	ldr	r2, [r3, #32]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800252e:	441a      	add	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	621a      	str	r2, [r3, #32]
 8002534:	e016      	b.n	8002564 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	0c5b      	lsrs	r3, r3, #17
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	2b06      	cmp	r3, #6
 8002540:	d110      	bne.n	8002564 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002548:	2208      	movs	r2, #8
 800254a:	4619      	mov	r1, r3
 800254c:	6a38      	ldr	r0, [r7, #32]
 800254e:	f005 fd03 	bl	8007f58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	6a1a      	ldr	r2, [r3, #32]
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800255e:	441a      	add	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0210 	orr.w	r2, r2, #16
 8002572:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f005 fe81 	bl	8008280 <USB_ReadInterrupts>
 800257e:	4603      	mov	r3, r0
 8002580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002584:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002588:	f040 80a7 	bne.w	80026da <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f005 fe86 	bl	80082a6 <USB_ReadDevAllOutEpInterrupt>
 800259a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800259c:	e099      	b.n	80026d2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 808e 	beq.w	80026c6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f005 feaa 	bl	800830e <USB_ReadDevOutEPInterrupt>
 80025ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00c      	beq.n	80025e0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d2:	461a      	mov	r2, r3
 80025d4:	2301      	movs	r3, #1
 80025d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fef0 	bl	80033c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00c      	beq.n	8002604 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f6:	461a      	mov	r2, r3
 80025f8:	2308      	movs	r3, #8
 80025fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80025fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 ffc6 	bl	8003590 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	4413      	add	r3, r2
 8002616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800261a:	461a      	mov	r2, r3
 800261c:	2310      	movs	r3, #16
 800261e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d030      	beq.n	800268c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002632:	2b80      	cmp	r3, #128	; 0x80
 8002634:	d109      	bne.n	800264a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002644:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002648:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800264a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	4413      	add	r3, r2
 800265c:	3304      	adds	r3, #4
 800265e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	78db      	ldrb	r3, [r3, #3]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d108      	bne.n	800267a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2200      	movs	r2, #0
 800266c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	b2db      	uxtb	r3, r3
 8002672:	4619      	mov	r1, r3
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f008 fa2d 	bl	800aad4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	4413      	add	r3, r2
 8002682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002686:	461a      	mov	r2, r3
 8002688:	2302      	movs	r3, #2
 800268a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a2:	461a      	mov	r2, r3
 80026a4:	2320      	movs	r3, #32
 80026a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026be:	461a      	mov	r2, r3
 80026c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	3301      	adds	r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	085b      	lsrs	r3, r3, #1
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f47f af62 	bne.w	800259e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f005 fdce 	bl	8008280 <USB_ReadInterrupts>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026ee:	f040 80db 	bne.w	80028a8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f005 fdef 	bl	80082da <USB_ReadDevAllInEpInterrupt>
 80026fc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002702:	e0cd      	b.n	80028a0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80c2 	beq.w	8002894 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f005 fe15 	bl	800834a <USB_ReadDevInEPInterrupt>
 8002720:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d057      	beq.n	80027dc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	2201      	movs	r2, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	43db      	mvns	r3, r3
 8002746:	69f9      	ldr	r1, [r7, #28]
 8002748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800274c:	4013      	ands	r3, r2
 800274e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800275c:	461a      	mov	r2, r3
 800275e:	2301      	movs	r3, #1
 8002760:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d132      	bne.n	80027d0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	334c      	adds	r3, #76	; 0x4c
 800277a:	6819      	ldr	r1, [r3, #0]
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4403      	add	r3, r0
 800278a:	3348      	adds	r3, #72	; 0x48
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4419      	add	r1, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4403      	add	r3, r0
 800279e:	334c      	adds	r3, #76	; 0x4c
 80027a0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d113      	bne.n	80027d0 <HAL_PCD_IRQHandler+0x3a2>
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	3354      	adds	r3, #84	; 0x54
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d108      	bne.n	80027d0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027c8:	461a      	mov	r2, r3
 80027ca:	2101      	movs	r1, #1
 80027cc:	f005 fe1e 	bl	800840c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	4619      	mov	r1, r3
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f008 f8f7 	bl	800a9ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f2:	461a      	mov	r2, r3
 80027f4:	2308      	movs	r3, #8
 80027f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	4413      	add	r3, r2
 800280a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280e:	461a      	mov	r2, r3
 8002810:	2310      	movs	r3, #16
 8002812:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800282a:	461a      	mov	r2, r3
 800282c:	2340      	movs	r3, #64	; 0x40
 800282e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d023      	beq.n	8002882 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800283a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800283c:	6a38      	ldr	r0, [r7, #32]
 800283e:	f004 fcf1 	bl	8007224 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	3338      	adds	r3, #56	; 0x38
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	3304      	adds	r3, #4
 8002854:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	78db      	ldrb	r3, [r3, #3]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d108      	bne.n	8002870 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2200      	movs	r2, #0
 8002862:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4619      	mov	r1, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f008 f944 	bl	800aaf8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	4413      	add	r3, r2
 8002878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800287c:	461a      	mov	r2, r3
 800287e:	2302      	movs	r3, #2
 8002880:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800288c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fd08 	bl	80032a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	3301      	adds	r3, #1
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f47f af2e 	bne.w	8002704 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f005 fce7 	bl	8008280 <USB_ReadInterrupts>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028bc:	d122      	bne.n	8002904 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d108      	bne.n	80028ee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028e4:	2100      	movs	r1, #0
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f008 fabe 	bl	800ae68 <HAL_PCDEx_LPM_Callback>
 80028ec:	e002      	b.n	80028f4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f008 f8e2 	bl	800aab8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f005 fcb9 	bl	8008280 <USB_ReadInterrupts>
 800290e:	4603      	mov	r3, r0
 8002910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002918:	d112      	bne.n	8002940 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d102      	bne.n	8002930 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f008 f89e 	bl	800aa6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800293e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f005 fc9b 	bl	8008280 <USB_ReadInterrupts>
 800294a:	4603      	mov	r3, r0
 800294c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002954:	d121      	bne.n	800299a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002964:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d111      	bne.n	8002994 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	f003 020f 	and.w	r2, r3, #15
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800298a:	2101      	movs	r1, #1
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f008 fa6b 	bl	800ae68 <HAL_PCDEx_LPM_Callback>
 8002992:	e002      	b.n	800299a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f008 f869 	bl	800aa6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f005 fc6e 	bl	8008280 <USB_ReadInterrupts>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ae:	f040 80b7 	bne.w	8002b20 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2110      	movs	r1, #16
 80029cc:	4618      	mov	r0, r3
 80029ce:	f004 fc29 	bl	8007224 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d6:	e046      	b.n	8002a66 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e4:	461a      	mov	r2, r3
 80029e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029ea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fc:	0151      	lsls	r1, r2, #5
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	440a      	add	r2, r1
 8002a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a1e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a30:	0151      	lsls	r1, r2, #5
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	440a      	add	r2, r1
 8002a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a50:	0151      	lsls	r1, r2, #5
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	440a      	add	r2, r1
 8002a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a5e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	3301      	adds	r3, #1
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d3b3      	bcc.n	80029d8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a7e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a82:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d016      	beq.n	8002aba <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a9c:	f043 030b 	orr.w	r3, r3, #11
 8002aa0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab2:	f043 030b 	orr.w	r3, r3, #11
 8002ab6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab8:	e015      	b.n	8002ae6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f242 032b 	movw	r3, #8235	; 0x202b
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae0:	f043 030b 	orr.w	r3, r3, #11
 8002ae4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002af8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f005 fc7e 	bl	800840c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f005 fbab 	bl	8008280 <USB_ReadInterrupts>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b34:	d124      	bne.n	8002b80 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f005 fc42 	bl	80083c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f004 fbea 	bl	800731e <USB_GetDevSpeed>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681c      	ldr	r4, [r3, #0]
 8002b56:	f001 fa83 	bl	8004060 <HAL_RCC_GetHCLKFreq>
 8002b5a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	4620      	mov	r0, r4
 8002b66:	f004 f8ef 	bl	8006d48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f007 ff55 	bl	800aa1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f005 fb7b 	bl	8008280 <USB_ReadInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d10a      	bne.n	8002baa <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f007 ff32 	bl	800a9fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f002 0208 	and.w	r2, r2, #8
 8002ba8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f005 fb66 	bl	8008280 <USB_ReadInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bba:	2b80      	cmp	r3, #128	; 0x80
 8002bbc:	d122      	bne.n	8002c04 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bca:	2301      	movs	r3, #1
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	e014      	b.n	8002bfa <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d105      	bne.n	8002bf4 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	4619      	mov	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fb27 	bl	8003242 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d3e5      	bcc.n	8002bd0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f005 fb39 	bl	8008280 <USB_ReadInterrupts>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c18:	d13b      	bne.n	8002c92 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1e:	e02b      	b.n	8002c78 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3340      	adds	r3, #64	; 0x40
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d115      	bne.n	8002c72 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c46:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	da12      	bge.n	8002c72 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	333f      	adds	r3, #63	; 0x3f
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fae8 	bl	8003242 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	3301      	adds	r3, #1
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d3ce      	bcc.n	8002c20 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f005 faf2 	bl	8008280 <USB_ReadInterrupts>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ca6:	d155      	bne.n	8002d54 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ca8:	2301      	movs	r3, #1
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cac:	e045      	b.n	8002d3a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d12e      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cd6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	da2b      	bge.n	8002d34 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002ce8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d121      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d30:	6053      	str	r3, [r2, #4]
            break;
 8002d32:	e007      	b.n	8002d44 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	3301      	adds	r3, #1
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d3b4      	bcc.n	8002cae <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f005 fa91 	bl	8008280 <USB_ReadInterrupts>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d68:	d10a      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f007 fed6 	bl	800ab1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f005 fa7b 	bl	8008280 <USB_ReadInterrupts>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d115      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f007 fec6 	bl	800ab38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	e000      	b.n	8002dc0 <HAL_PCD_IRQHandler+0x992>
      return;
 8002dbe:	bf00      	nop
    }
  }
}
 8002dc0:	3734      	adds	r7, #52	; 0x34
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd90      	pop	{r4, r7, pc}

08002dc6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_PCD_SetAddress+0x1a>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e013      	b.n	8002e08 <HAL_PCD_SetAddress+0x42>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f005 f9d9 	bl	80081b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	4608      	mov	r0, r1
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4603      	mov	r3, r0
 8002e20:	70fb      	strb	r3, [r7, #3]
 8002e22:	460b      	mov	r3, r1
 8002e24:	803b      	strh	r3, [r7, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	da0f      	bge.n	8002e56 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	f003 020f 	and.w	r2, r3, #15
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	3338      	adds	r3, #56	; 0x38
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	705a      	strb	r2, [r3, #1]
 8002e54:	e00f      	b.n	8002e76 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	f003 020f 	and.w	r2, r3, #15
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e82:	883a      	ldrh	r2, [r7, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	78ba      	ldrb	r2, [r7, #2]
 8002e8c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	785b      	ldrb	r3, [r3, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d004      	beq.n	8002ea0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ea0:	78bb      	ldrb	r3, [r7, #2]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d102      	bne.n	8002eac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_PCD_EP_Open+0xaa>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e00e      	b.n	8002ed8 <HAL_PCD_EP_Open+0xc8>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68f9      	ldr	r1, [r7, #12]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f004 fa4d 	bl	8007368 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002ed6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	da0f      	bge.n	8002f14 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 020f 	and.w	r2, r3, #15
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	3338      	adds	r3, #56	; 0x38
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	3304      	adds	r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	705a      	strb	r2, [r3, #1]
 8002f12:	e00f      	b.n	8002f34 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_PCD_EP_Close+0x6e>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e00e      	b.n	8002f6c <HAL_PCD_EP_Close+0x8c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68f9      	ldr	r1, [r7, #12]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f004 fa8b 	bl	8007478 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	460b      	mov	r3, r1
 8002f82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f84:	7afb      	ldrb	r3, [r7, #11]
 8002f86:	f003 020f 	and.w	r2, r3, #15
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2200      	movs	r2, #0
 8002fae:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d102      	bne.n	8002fd0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fd0:	7afb      	ldrb	r3, [r7, #11]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6979      	ldr	r1, [r7, #20]
 8002fe8:	f004 fd72 	bl	8007ad0 <USB_EP0StartXfer>
 8002fec:	e008      	b.n	8003000 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	6979      	ldr	r1, [r7, #20]
 8002ffc:	f004 fb18 	bl	8007630 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 020f 	and.w	r2, r3, #15
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800302c:	681b      	ldr	r3, [r3, #0]
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b086      	sub	sp, #24
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	460b      	mov	r3, r1
 8003048:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800304a:	7afb      	ldrb	r3, [r7, #11]
 800304c:	f003 020f 	and.w	r2, r3, #15
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	3338      	adds	r3, #56	; 0x38
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	3304      	adds	r3, #4
 8003060:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2200      	movs	r2, #0
 8003072:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2201      	movs	r2, #1
 8003078:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800307a:	7afb      	ldrb	r3, [r7, #11]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	b2da      	uxtb	r2, r3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d102      	bne.n	8003094 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003094:	7afb      	ldrb	r3, [r7, #11]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	6979      	ldr	r1, [r7, #20]
 80030ac:	f004 fd10 	bl	8007ad0 <USB_EP0StartXfer>
 80030b0:	e008      	b.n	80030c4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	6979      	ldr	r1, [r7, #20]
 80030c0:	f004 fab6 	bl	8007630 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	460b      	mov	r3, r1
 80030d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	f003 020f 	and.w	r2, r3, #15
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d901      	bls.n	80030ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e050      	b.n	800318e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	da0f      	bge.n	8003114 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	f003 020f 	and.w	r2, r3, #15
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	3338      	adds	r3, #56	; 0x38
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	4413      	add	r3, r2
 8003108:	3304      	adds	r3, #4
 800310a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	705a      	strb	r2, [r3, #1]
 8003112:	e00d      	b.n	8003130 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	3304      	adds	r3, #4
 8003128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	b2da      	uxtb	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_PCD_EP_SetStall+0x82>
 800314c:	2302      	movs	r3, #2
 800314e:	e01e      	b.n	800318e <HAL_PCD_EP_SetStall+0xc0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68f9      	ldr	r1, [r7, #12]
 800315e:	4618      	mov	r0, r3
 8003160:	f004 ff52 	bl	8008008 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10a      	bne.n	8003184 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	b2d9      	uxtb	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800317e:	461a      	mov	r2, r3
 8003180:	f005 f944 	bl	800840c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	f003 020f 	and.w	r2, r3, #15
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d901      	bls.n	80031b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e042      	b.n	800323a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	da0f      	bge.n	80031dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 020f 	and.w	r2, r3, #15
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	3338      	adds	r3, #56	; 0x38
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	3304      	adds	r3, #4
 80031d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	705a      	strb	r2, [r3, #1]
 80031da:	e00f      	b.n	80031fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	f003 020f 	and.w	r2, r3, #15
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	3304      	adds	r3, #4
 80031f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_PCD_EP_ClrStall+0x86>
 8003218:	2302      	movs	r3, #2
 800321a:	e00e      	b.n	800323a <HAL_PCD_EP_ClrStall+0xa4>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68f9      	ldr	r1, [r7, #12]
 800322a:	4618      	mov	r0, r3
 800322c:	f004 ff5a 	bl	80080e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800324e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003252:	2b00      	cmp	r3, #0
 8003254:	da0c      	bge.n	8003270 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	f003 020f 	and.w	r2, r3, #15
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	3338      	adds	r3, #56	; 0x38
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	3304      	adds	r3, #4
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	e00c      	b.n	800328a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	f003 020f 	and.w	r2, r3, #15
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	3304      	adds	r3, #4
 8003288:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68f9      	ldr	r1, [r7, #12]
 8003290:	4618      	mov	r0, r3
 8003292:	f004 fd79 	bl	8007d88 <USB_EPStopXfer>
 8003296:	4603      	mov	r3, r0
 8003298:	72fb      	strb	r3, [r7, #11]

  return ret;
 800329a:	7afb      	ldrb	r3, [r7, #11]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	; 0x28
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	3338      	adds	r3, #56	; 0x38
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	3304      	adds	r3, #4
 80032ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a1a      	ldr	r2, [r3, #32]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d901      	bls.n	80032dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e06c      	b.n	80033b6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	699a      	ldr	r2, [r3, #24]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d902      	bls.n	80032f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	3303      	adds	r3, #3
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003300:	e02b      	b.n	800335a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	429a      	cmp	r2, r3
 8003316:	d902      	bls.n	800331e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3303      	adds	r3, #3
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6919      	ldr	r1, [r3, #16]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003336:	b2db      	uxtb	r3, r3
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	4603      	mov	r3, r0
 800333c:	6978      	ldr	r0, [r7, #20]
 800333e:	f004 fdcd 	bl	8007edc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	441a      	add	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1a      	ldr	r2, [r3, #32]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	441a      	add	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	429a      	cmp	r2, r3
 800336e:	d809      	bhi.n	8003384 <PCD_WriteEmptyTxFifo+0xe0>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003378:	429a      	cmp	r2, r3
 800337a:	d203      	bcs.n	8003384 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1be      	bne.n	8003302 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	699a      	ldr	r2, [r3, #24]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	429a      	cmp	r2, r3
 800338e:	d811      	bhi.n	80033b4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	2201      	movs	r2, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	6939      	ldr	r1, [r7, #16]
 80033ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033b0:	4013      	ands	r3, r2
 80033b2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3720      	adds	r7, #32
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	333c      	adds	r3, #60	; 0x3c
 80033d8:	3304      	adds	r3, #4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d17b      	bne.n	80034ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d015      	beq.n	800342c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	4a61      	ldr	r2, [pc, #388]	; (8003588 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	f240 80b9 	bls.w	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80b3 	beq.w	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003422:	461a      	mov	r2, r3
 8003424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003428:	6093      	str	r3, [r2, #8]
 800342a:	e0a7      	b.n	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003442:	461a      	mov	r2, r3
 8003444:	2320      	movs	r3, #32
 8003446:	6093      	str	r3, [r2, #8]
 8003448:	e098      	b.n	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003450:	2b00      	cmp	r3, #0
 8003452:	f040 8093 	bne.w	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	4a4b      	ldr	r2, [pc, #300]	; (8003588 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d90f      	bls.n	800347e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003474:	461a      	mov	r2, r3
 8003476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347a:	6093      	str	r3, [r2, #8]
 800347c:	e07e      	b.n	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	3304      	adds	r3, #4
 8003492:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	0159      	lsls	r1, r3, #5
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	440b      	add	r3, r1
 80034a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034aa:	1ad2      	subs	r2, r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d114      	bne.n	80034e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034c8:	461a      	mov	r2, r3
 80034ca:	2101      	movs	r1, #1
 80034cc:	f004 ff9e 	bl	800840c <USB_EP0_OutStart>
 80034d0:	e006      	b.n	80034e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	441a      	add	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	4619      	mov	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f007 fa54 	bl	800a994 <HAL_PCD_DataOutStageCallback>
 80034ec:	e046      	b.n	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	4a26      	ldr	r2, [pc, #152]	; (800358c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d124      	bne.n	8003540 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350c:	461a      	mov	r2, r3
 800350e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003512:	6093      	str	r3, [r2, #8]
 8003514:	e032      	b.n	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	2320      	movs	r3, #32
 8003530:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f007 fa2b 	bl	800a994 <HAL_PCD_DataOutStageCallback>
 800353e:	e01d      	b.n	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d114      	bne.n	8003570 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d108      	bne.n	8003570 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003568:	461a      	mov	r2, r3
 800356a:	2100      	movs	r1, #0
 800356c:	f004 ff4e 	bl	800840c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	4619      	mov	r1, r3
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f007 fa0c 	bl	800a994 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	4f54300a 	.word	0x4f54300a
 800358c:	4f54310a 	.word	0x4f54310a

08003590 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	333c      	adds	r3, #60	; 0x3c
 80035a8:	3304      	adds	r3, #4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4a15      	ldr	r2, [pc, #84]	; (8003618 <PCD_EP_OutSetupPacket_int+0x88>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d90e      	bls.n	80035e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d009      	beq.n	80035e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035dc:	461a      	mov	r2, r3
 80035de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f007 f9c3 	bl	800a970 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <PCD_EP_OutSetupPacket_int+0x88>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d90c      	bls.n	800360c <PCD_EP_OutSetupPacket_int+0x7c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d108      	bne.n	800360c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003604:	461a      	mov	r2, r3
 8003606:	2101      	movs	r1, #1
 8003608:	f004 ff00 	bl	800840c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	4f54300a 	.word	0x4f54300a

0800361c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	70fb      	strb	r3, [r7, #3]
 8003628:	4613      	mov	r3, r2
 800362a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d107      	bne.n	800364a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800363a:	883b      	ldrh	r3, [r7, #0]
 800363c:	0419      	lsls	r1, r3, #16
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	430a      	orrs	r2, r1
 8003646:	629a      	str	r2, [r3, #40]	; 0x28
 8003648:	e028      	b.n	800369c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	0c1b      	lsrs	r3, r3, #16
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	4413      	add	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003658:	2300      	movs	r3, #0
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	e00d      	b.n	800367a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	3340      	adds	r3, #64	; 0x40
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	4413      	add	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	3301      	adds	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	3b01      	subs	r3, #1
 8003680:	429a      	cmp	r2, r3
 8003682:	d3ec      	bcc.n	800365e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003684:	883b      	ldrh	r3, [r7, #0]
 8003686:	0418      	lsls	r0, r3, #16
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6819      	ldr	r1, [r3, #0]
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	3b01      	subs	r3, #1
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	4302      	orrs	r2, r0
 8003694:	3340      	adds	r3, #64	; 0x40
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036fa:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_PCDEx_ActivateLPM+0x44>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	10000003 	.word	0x10000003

08003714 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800371e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003722:	6013      	str	r3, [r2, #0]
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40007000 	.word	0x40007000

08003734 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800373c:	2300      	movs	r3, #0
 800373e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e291      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8087 	beq.w	8003866 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003758:	4b96      	ldr	r3, [pc, #600]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b04      	cmp	r3, #4
 8003762:	d00c      	beq.n	800377e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003764:	4b93      	ldr	r3, [pc, #588]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 030c 	and.w	r3, r3, #12
 800376c:	2b08      	cmp	r3, #8
 800376e:	d112      	bne.n	8003796 <HAL_RCC_OscConfig+0x62>
 8003770:	4b90      	ldr	r3, [pc, #576]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800377c:	d10b      	bne.n	8003796 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377e:	4b8d      	ldr	r3, [pc, #564]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d06c      	beq.n	8003864 <HAL_RCC_OscConfig+0x130>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d168      	bne.n	8003864 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e26b      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379e:	d106      	bne.n	80037ae <HAL_RCC_OscConfig+0x7a>
 80037a0:	4b84      	ldr	r3, [pc, #528]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a83      	ldr	r2, [pc, #524]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80037a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	e02e      	b.n	800380c <HAL_RCC_OscConfig+0xd8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x9c>
 80037b6:	4b7f      	ldr	r3, [pc, #508]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a7e      	ldr	r2, [pc, #504]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80037bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	4b7c      	ldr	r3, [pc, #496]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a7b      	ldr	r2, [pc, #492]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80037c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e01d      	b.n	800380c <HAL_RCC_OscConfig+0xd8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCC_OscConfig+0xc0>
 80037da:	4b76      	ldr	r3, [pc, #472]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a75      	ldr	r2, [pc, #468]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80037e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b73      	ldr	r3, [pc, #460]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a72      	ldr	r2, [pc, #456]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e00b      	b.n	800380c <HAL_RCC_OscConfig+0xd8>
 80037f4:	4b6f      	ldr	r3, [pc, #444]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a6e      	ldr	r2, [pc, #440]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80037fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	4b6c      	ldr	r3, [pc, #432]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a6b      	ldr	r2, [pc, #428]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d013      	beq.n	800383c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fd fe06 	bl	8001424 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800381c:	f7fd fe02 	bl	8001424 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e21f      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b61      	ldr	r3, [pc, #388]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0xe8>
 800383a:	e014      	b.n	8003866 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fd fdf2 	bl	8001424 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003844:	f7fd fdee 	bl	8001424 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b64      	cmp	r3, #100	; 0x64
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e20b      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003856:	4b57      	ldr	r3, [pc, #348]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x110>
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d069      	beq.n	8003946 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003872:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800387e:	4b4d      	ldr	r3, [pc, #308]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b08      	cmp	r3, #8
 8003888:	d11c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x190>
 800388a:	4b4a      	ldr	r3, [pc, #296]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d116      	bne.n	80038c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_RCC_OscConfig+0x17a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d001      	beq.n	80038ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e1df      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ae:	4b41      	ldr	r3, [pc, #260]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	493d      	ldr	r1, [pc, #244]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c2:	e040      	b.n	8003946 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d023      	beq.n	8003914 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038cc:	4b39      	ldr	r3, [pc, #228]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a38      	ldr	r2, [pc, #224]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fd fda4 	bl	8001424 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e0:	f7fd fda0 	bl	8001424 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e1bd      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f2:	4b30      	ldr	r3, [pc, #192]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fe:	4b2d      	ldr	r3, [pc, #180]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4929      	ldr	r1, [pc, #164]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]
 8003912:	e018      	b.n	8003946 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003914:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a26      	ldr	r2, [pc, #152]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fd fd80 	bl	8001424 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003928:	f7fd fd7c 	bl	8001424 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e199      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393a:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d038      	beq.n	80039c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d019      	beq.n	800398e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 800395c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395e:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003966:	f7fd fd5d 	bl	8001424 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800396e:	f7fd fd59 	bl	8001424 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e176      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x23a>
 800398c:	e01a      	b.n	80039c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398e:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003992:	4a08      	ldr	r2, [pc, #32]	; (80039b4 <HAL_RCC_OscConfig+0x280>)
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399a:	f7fd fd43 	bl	8001424 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a2:	f7fd fd3f 	bl	8001424 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d903      	bls.n	80039b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e15c      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
 80039b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b8:	4b91      	ldr	r3, [pc, #580]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 80039ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1ee      	bne.n	80039a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80a4 	beq.w	8003b1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d2:	4b8b      	ldr	r3, [pc, #556]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10d      	bne.n	80039fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	4b88      	ldr	r3, [pc, #544]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	4a87      	ldr	r2, [pc, #540]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ea:	4b85      	ldr	r3, [pc, #532]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fa:	4b82      	ldr	r3, [pc, #520]	; (8003c04 <HAL_RCC_OscConfig+0x4d0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d118      	bne.n	8003a38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a06:	4b7f      	ldr	r3, [pc, #508]	; (8003c04 <HAL_RCC_OscConfig+0x4d0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a7e      	ldr	r2, [pc, #504]	; (8003c04 <HAL_RCC_OscConfig+0x4d0>)
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a12:	f7fd fd07 	bl	8001424 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1a:	f7fd fd03 	bl	8001424 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b64      	cmp	r3, #100	; 0x64
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e120      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2c:	4b75      	ldr	r3, [pc, #468]	; (8003c04 <HAL_RCC_OscConfig+0x4d0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d106      	bne.n	8003a4e <HAL_RCC_OscConfig+0x31a>
 8003a40:	4b6f      	ldr	r3, [pc, #444]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	4a6e      	ldr	r2, [pc, #440]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4c:	e02d      	b.n	8003aaa <HAL_RCC_OscConfig+0x376>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x33c>
 8003a56:	4b6a      	ldr	r3, [pc, #424]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	4a69      	ldr	r2, [pc, #420]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	6713      	str	r3, [r2, #112]	; 0x70
 8003a62:	4b67      	ldr	r3, [pc, #412]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	4a66      	ldr	r2, [pc, #408]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003a68:	f023 0304 	bic.w	r3, r3, #4
 8003a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6e:	e01c      	b.n	8003aaa <HAL_RCC_OscConfig+0x376>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d10c      	bne.n	8003a92 <HAL_RCC_OscConfig+0x35e>
 8003a78:	4b61      	ldr	r3, [pc, #388]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	4a60      	ldr	r2, [pc, #384]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003a7e:	f043 0304 	orr.w	r3, r3, #4
 8003a82:	6713      	str	r3, [r2, #112]	; 0x70
 8003a84:	4b5e      	ldr	r3, [pc, #376]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	4a5d      	ldr	r2, [pc, #372]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a90:	e00b      	b.n	8003aaa <HAL_RCC_OscConfig+0x376>
 8003a92:	4b5b      	ldr	r3, [pc, #364]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9e:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	4a57      	ldr	r2, [pc, #348]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003aa4:	f023 0304 	bic.w	r3, r3, #4
 8003aa8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d015      	beq.n	8003ade <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab2:	f7fd fcb7 	bl	8001424 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab8:	e00a      	b.n	8003ad0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aba:	f7fd fcb3 	bl	8001424 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e0ce      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad0:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ee      	beq.n	8003aba <HAL_RCC_OscConfig+0x386>
 8003adc:	e014      	b.n	8003b08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ade:	f7fd fca1 	bl	8001424 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fd fc9d 	bl	8001424 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e0b8      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afc:	4b40      	ldr	r3, [pc, #256]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ee      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0e:	4b3c      	ldr	r3, [pc, #240]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	4a3b      	ldr	r2, [pc, #236]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80a4 	beq.w	8003c6c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b24:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d06b      	beq.n	8003c08 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d149      	bne.n	8003bcc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a30      	ldr	r2, [pc, #192]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fd fc6e 	bl	8001424 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fd fc6a 	bl	8001424 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e087      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5e:	4b28      	ldr	r3, [pc, #160]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	019b      	lsls	r3, r3, #6
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	3b01      	subs	r3, #1
 8003b84:	041b      	lsls	r3, r3, #16
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	061b      	lsls	r3, r3, #24
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003b92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b96:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b98:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a18      	ldr	r2, [pc, #96]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fd fc3e 	bl	8001424 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fd fc3a 	bl	8001424 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e057      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0x478>
 8003bca:	e04f      	b.n	8003c6c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a0b      	ldr	r2, [pc, #44]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fd fc24 	bl	8001424 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fd fc20 	bl	8001424 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e03d      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <HAL_RCC_OscConfig+0x4cc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4ac>
 8003bfe:	e035      	b.n	8003c6c <HAL_RCC_OscConfig+0x538>
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <HAL_RCC_OscConfig+0x544>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d028      	beq.n	8003c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d121      	bne.n	8003c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d11a      	bne.n	8003c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c38:	4013      	ands	r3, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d111      	bne.n	8003c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	3b01      	subs	r3, #1
 8003c52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800

08003c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0d0      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c94:	4b6a      	ldr	r3, [pc, #424]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d910      	bls.n	8003cc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b67      	ldr	r3, [pc, #412]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 020f 	bic.w	r2, r3, #15
 8003caa:	4965      	ldr	r1, [pc, #404]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb2:	4b63      	ldr	r3, [pc, #396]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0b8      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d020      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cdc:	4b59      	ldr	r3, [pc, #356]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a58      	ldr	r2, [pc, #352]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ce6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf4:	4b53      	ldr	r3, [pc, #332]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a52      	ldr	r2, [pc, #328]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d00:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	494d      	ldr	r1, [pc, #308]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d040      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d115      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e07f      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3e:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e073      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4e:	4b3d      	ldr	r3, [pc, #244]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e06b      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5e:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f023 0203 	bic.w	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4936      	ldr	r1, [pc, #216]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d70:	f7fd fb58 	bl	8001424 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d78:	f7fd fb54 	bl	8001424 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e053      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 020c 	and.w	r2, r3, #12
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1eb      	bne.n	8003d78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d210      	bcs.n	8003dd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 020f 	bic.w	r2, r3, #15
 8003db6:	4922      	ldr	r1, [pc, #136]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e032      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ddc:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4916      	ldr	r1, [pc, #88]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dfa:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	490e      	ldr	r1, [pc, #56]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e0e:	f000 f821 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8003e12:	4602      	mov	r2, r0
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	490a      	ldr	r1, [pc, #40]	; (8003e48 <HAL_RCC_ClockConfig+0x1cc>)
 8003e20:	5ccb      	ldrb	r3, [r1, r3]
 8003e22:	fa22 f303 	lsr.w	r3, r2, r3
 8003e26:	4a09      	ldr	r2, [pc, #36]	; (8003e4c <HAL_RCC_ClockConfig+0x1d0>)
 8003e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_RCC_ClockConfig+0x1d4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fd fab4 	bl	800139c <HAL_InitTick>

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023c00 	.word	0x40023c00
 8003e44:	40023800 	.word	0x40023800
 8003e48:	0800b288 	.word	0x0800b288
 8003e4c:	20000020 	.word	0x20000020
 8003e50:	20000024 	.word	0x20000024

08003e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e58:	b094      	sub	sp, #80	; 0x50
 8003e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e60:	2300      	movs	r3, #0
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e64:	2300      	movs	r3, #0
 8003e66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e6c:	4b79      	ldr	r3, [pc, #484]	; (8004054 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 030c 	and.w	r3, r3, #12
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d00d      	beq.n	8003e94 <HAL_RCC_GetSysClockFreq+0x40>
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	f200 80e1 	bhi.w	8004040 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x34>
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d003      	beq.n	8003e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e86:	e0db      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e88:	4b73      	ldr	r3, [pc, #460]	; (8004058 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e8c:	e0db      	b.n	8004046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e8e:	4b73      	ldr	r3, [pc, #460]	; (800405c <HAL_RCC_GetSysClockFreq+0x208>)
 8003e90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e92:	e0d8      	b.n	8004046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e94:	4b6f      	ldr	r3, [pc, #444]	; (8004054 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e9c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e9e:	4b6d      	ldr	r3, [pc, #436]	; (8004054 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d063      	beq.n	8003f72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eaa:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	099b      	lsrs	r3, r3, #6
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ec6:	4622      	mov	r2, r4
 8003ec8:	462b      	mov	r3, r5
 8003eca:	f04f 0000 	mov.w	r0, #0
 8003ece:	f04f 0100 	mov.w	r1, #0
 8003ed2:	0159      	lsls	r1, r3, #5
 8003ed4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed8:	0150      	lsls	r0, r2, #5
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4621      	mov	r1, r4
 8003ee0:	1a51      	subs	r1, r2, r1
 8003ee2:	6139      	str	r1, [r7, #16]
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ef8:	4659      	mov	r1, fp
 8003efa:	018b      	lsls	r3, r1, #6
 8003efc:	4651      	mov	r1, sl
 8003efe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f02:	4651      	mov	r1, sl
 8003f04:	018a      	lsls	r2, r1, #6
 8003f06:	4651      	mov	r1, sl
 8003f08:	ebb2 0801 	subs.w	r8, r2, r1
 8003f0c:	4659      	mov	r1, fp
 8003f0e:	eb63 0901 	sbc.w	r9, r3, r1
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f26:	4690      	mov	r8, r2
 8003f28:	4699      	mov	r9, r3
 8003f2a:	4623      	mov	r3, r4
 8003f2c:	eb18 0303 	adds.w	r3, r8, r3
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	462b      	mov	r3, r5
 8003f34:	eb49 0303 	adc.w	r3, r9, r3
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f46:	4629      	mov	r1, r5
 8003f48:	024b      	lsls	r3, r1, #9
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f50:	4621      	mov	r1, r4
 8003f52:	024a      	lsls	r2, r1, #9
 8003f54:	4610      	mov	r0, r2
 8003f56:	4619      	mov	r1, r3
 8003f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f64:	f7fc f958 	bl	8000218 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f70:	e058      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f72:	4b38      	ldr	r3, [pc, #224]	; (8004054 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	099b      	lsrs	r3, r3, #6
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f82:	623b      	str	r3, [r7, #32]
 8003f84:	2300      	movs	r3, #0
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
 8003f88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	464b      	mov	r3, r9
 8003f90:	f04f 0000 	mov.w	r0, #0
 8003f94:	f04f 0100 	mov.w	r1, #0
 8003f98:	0159      	lsls	r1, r3, #5
 8003f9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f9e:	0150      	lsls	r0, r2, #5
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4641      	mov	r1, r8
 8003fa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003faa:	4649      	mov	r1, r9
 8003fac:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fc4:	ebb2 040a 	subs.w	r4, r2, sl
 8003fc8:	eb63 050b 	sbc.w	r5, r3, fp
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	00eb      	lsls	r3, r5, #3
 8003fd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fda:	00e2      	lsls	r2, r4, #3
 8003fdc:	4614      	mov	r4, r2
 8003fde:	461d      	mov	r5, r3
 8003fe0:	4643      	mov	r3, r8
 8003fe2:	18e3      	adds	r3, r4, r3
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	eb45 0303 	adc.w	r3, r5, r3
 8003fec:	607b      	str	r3, [r7, #4]
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	028b      	lsls	r3, r1, #10
 8003ffe:	4621      	mov	r1, r4
 8004000:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004004:	4621      	mov	r1, r4
 8004006:	028a      	lsls	r2, r1, #10
 8004008:	4610      	mov	r0, r2
 800400a:	4619      	mov	r1, r3
 800400c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400e:	2200      	movs	r2, #0
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	61fa      	str	r2, [r7, #28]
 8004014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004018:	f7fc f8fe 	bl	8000218 <__aeabi_uldivmod>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4613      	mov	r3, r2
 8004022:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_RCC_GetSysClockFreq+0x200>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	3301      	adds	r3, #1
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004038:	fbb2 f3f3 	udiv	r3, r2, r3
 800403c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800403e:	e002      	b.n	8004046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004040:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_RCC_GetSysClockFreq+0x204>)
 8004042:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004048:	4618      	mov	r0, r3
 800404a:	3750      	adds	r7, #80	; 0x50
 800404c:	46bd      	mov	sp, r7
 800404e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004052:	bf00      	nop
 8004054:	40023800 	.word	0x40023800
 8004058:	00f42400 	.word	0x00f42400
 800405c:	007a1200 	.word	0x007a1200

08004060 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <HAL_RCC_GetHCLKFreq+0x14>)
 8004066:	681b      	ldr	r3, [r3, #0]
}
 8004068:	4618      	mov	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000020 	.word	0x20000020

08004078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800407c:	f7ff fff0 	bl	8004060 <HAL_RCC_GetHCLKFreq>
 8004080:	4602      	mov	r2, r0
 8004082:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	0a9b      	lsrs	r3, r3, #10
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	4903      	ldr	r1, [pc, #12]	; (800409c <HAL_RCC_GetPCLK1Freq+0x24>)
 800408e:	5ccb      	ldrb	r3, [r1, r3]
 8004090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004094:	4618      	mov	r0, r3
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40023800 	.word	0x40023800
 800409c:	0800b298 	.word	0x0800b298

080040a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040a4:	f7ff ffdc 	bl	8004060 <HAL_RCC_GetHCLKFreq>
 80040a8:	4602      	mov	r2, r0
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	0b5b      	lsrs	r3, r3, #13
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	4903      	ldr	r1, [pc, #12]	; (80040c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040b6:	5ccb      	ldrb	r3, [r1, r3]
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040bc:	4618      	mov	r0, r3
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40023800 	.word	0x40023800
 80040c4:	0800b298 	.word	0x0800b298

080040c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d012      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040f0:	4b69      	ldr	r3, [pc, #420]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a68      	ldr	r2, [pc, #416]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040fa:	6093      	str	r3, [r2, #8]
 80040fc:	4b66      	ldr	r3, [pc, #408]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004104:	4964      	ldr	r1, [pc, #400]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004112:	2301      	movs	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d017      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004122:	4b5d      	ldr	r3, [pc, #372]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004130:	4959      	ldr	r1, [pc, #356]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004140:	d101      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004142:	2301      	movs	r3, #1
 8004144:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800414e:	2301      	movs	r3, #1
 8004150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d017      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800415e:	4b4e      	ldr	r3, [pc, #312]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004164:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	494a      	ldr	r1, [pc, #296]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800417c:	d101      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800417e:	2301      	movs	r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800418a:	2301      	movs	r3, #1
 800418c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800419a:	2301      	movs	r3, #1
 800419c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 808b 	beq.w	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041ac:	4b3a      	ldr	r3, [pc, #232]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	4a39      	ldr	r2, [pc, #228]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b6:	6413      	str	r3, [r2, #64]	; 0x40
 80041b8:	4b37      	ldr	r3, [pc, #220]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041c4:	4b35      	ldr	r3, [pc, #212]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a34      	ldr	r2, [pc, #208]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d0:	f7fd f928 	bl	8001424 <HAL_GetTick>
 80041d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d8:	f7fd f924 	bl	8001424 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	; 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e357      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041ea:	4b2c      	ldr	r3, [pc, #176]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041f6:	4b28      	ldr	r3, [pc, #160]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d035      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	429a      	cmp	r2, r3
 8004212:	d02e      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004214:	4b20      	ldr	r3, [pc, #128]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800421e:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a1d      	ldr	r2, [pc, #116]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800422a:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a1a      	ldr	r2, [pc, #104]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004234:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004236:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800423c:	4b16      	ldr	r3, [pc, #88]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d114      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fd f8ec 	bl	8001424 <HAL_GetTick>
 800424c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424e:	e00a      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004250:	f7fd f8e8 	bl	8001424 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	; 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e319      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004266:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0ee      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800427e:	d111      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800428e:	400b      	ands	r3, r1
 8004290:	4901      	ldr	r1, [pc, #4]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
 8004296:	e00b      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004298:	40023800 	.word	0x40023800
 800429c:	40007000 	.word	0x40007000
 80042a0:	0ffffcff 	.word	0x0ffffcff
 80042a4:	4baa      	ldr	r3, [pc, #680]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4aa9      	ldr	r2, [pc, #676]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042ae:	6093      	str	r3, [r2, #8]
 80042b0:	4ba7      	ldr	r3, [pc, #668]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042bc:	49a4      	ldr	r1, [pc, #656]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d010      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042ce:	4ba0      	ldr	r3, [pc, #640]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d4:	4a9e      	ldr	r2, [pc, #632]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042de:	4b9c      	ldr	r3, [pc, #624]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	4999      	ldr	r1, [pc, #612]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042fc:	4b94      	ldr	r3, [pc, #592]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800430a:	4991      	ldr	r1, [pc, #580]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800431e:	4b8c      	ldr	r3, [pc, #560]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800432c:	4988      	ldr	r1, [pc, #544]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004340:	4b83      	ldr	r3, [pc, #524]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434e:	4980      	ldr	r1, [pc, #512]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004362:	4b7b      	ldr	r3, [pc, #492]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	4977      	ldr	r1, [pc, #476]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004384:	4b72      	ldr	r3, [pc, #456]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f023 0203 	bic.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	496f      	ldr	r1, [pc, #444]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043a6:	4b6a      	ldr	r3, [pc, #424]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ac:	f023 020c 	bic.w	r2, r3, #12
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b4:	4966      	ldr	r1, [pc, #408]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043c8:	4b61      	ldr	r3, [pc, #388]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d6:	495e      	ldr	r1, [pc, #376]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043ea:	4b59      	ldr	r3, [pc, #356]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f8:	4955      	ldr	r1, [pc, #340]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800440c:	4b50      	ldr	r3, [pc, #320]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	494d      	ldr	r1, [pc, #308]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800442e:	4b48      	ldr	r3, [pc, #288]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004434:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	4944      	ldr	r1, [pc, #272]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004450:	4b3f      	ldr	r3, [pc, #252]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445e:	493c      	ldr	r1, [pc, #240]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004472:	4b37      	ldr	r3, [pc, #220]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004478:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004480:	4933      	ldr	r1, [pc, #204]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004494:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a2:	492b      	ldr	r1, [pc, #172]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d011      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044b6:	4b26      	ldr	r3, [pc, #152]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c4:	4922      	ldr	r1, [pc, #136]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d4:	d101      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044f6:	4b16      	ldr	r3, [pc, #88]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004504:	4912      	ldr	r1, [pc, #72]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00b      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004518:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004528:	4909      	ldr	r1, [pc, #36]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d006      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 80d9 	beq.w	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004544:	4b02      	ldr	r3, [pc, #8]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a01      	ldr	r2, [pc, #4]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800454a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800454e:	e001      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004550:	40023800 	.word	0x40023800
 8004554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004556:	f7fc ff65 	bl	8001424 <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800455e:	f7fc ff61 	bl	8001424 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b64      	cmp	r3, #100	; 0x64
 800456a:	d901      	bls.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e194      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004570:	4b6c      	ldr	r3, [pc, #432]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f0      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d021      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458c:	2b00      	cmp	r3, #0
 800458e:	d11d      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004590:	4b64      	ldr	r3, [pc, #400]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004596:	0c1b      	lsrs	r3, r3, #16
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800459e:	4b61      	ldr	r3, [pc, #388]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a4:	0e1b      	lsrs	r3, r3, #24
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	019a      	lsls	r2, r3, #6
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	041b      	lsls	r3, r3, #16
 80045b6:	431a      	orrs	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	061b      	lsls	r3, r3, #24
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	071b      	lsls	r3, r3, #28
 80045c4:	4957      	ldr	r1, [pc, #348]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d004      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d02e      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f6:	d129      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045f8:	4b4a      	ldr	r3, [pc, #296]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fe:	0c1b      	lsrs	r3, r3, #16
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004606:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460c:	0f1b      	lsrs	r3, r3, #28
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	019a      	lsls	r2, r3, #6
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	431a      	orrs	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	071b      	lsls	r3, r3, #28
 800462c:	493d      	ldr	r1, [pc, #244]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004634:	4b3b      	ldr	r3, [pc, #236]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463a:	f023 021f 	bic.w	r2, r3, #31
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	3b01      	subs	r3, #1
 8004644:	4937      	ldr	r1, [pc, #220]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01d      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004658:	4b32      	ldr	r3, [pc, #200]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800465a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465e:	0e1b      	lsrs	r3, r3, #24
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004666:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466c:	0f1b      	lsrs	r3, r3, #28
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	019a      	lsls	r2, r3, #6
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	431a      	orrs	r2, r3
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	061b      	lsls	r3, r3, #24
 8004686:	431a      	orrs	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	071b      	lsls	r3, r3, #28
 800468c:	4925      	ldr	r1, [pc, #148]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d011      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	019a      	lsls	r2, r3, #6
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	041b      	lsls	r3, r3, #16
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	061b      	lsls	r3, r3, #24
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	071b      	lsls	r3, r3, #28
 80046bc:	4919      	ldr	r1, [pc, #100]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046c4:	4b17      	ldr	r3, [pc, #92]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a16      	ldr	r2, [pc, #88]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d0:	f7fc fea8 	bl	8001424 <HAL_GetTick>
 80046d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046d8:	f7fc fea4 	bl	8001424 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	; 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e0d7      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046ea:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	f040 80cd 	bne.w	8004898 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a08      	ldr	r2, [pc, #32]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470a:	f7fc fe8b 	bl	8001424 <HAL_GetTick>
 800470e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004710:	e00a      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004712:	f7fc fe87 	bl	8001424 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b64      	cmp	r3, #100	; 0x64
 800471e:	d903      	bls.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e0ba      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004724:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004728:	4b5e      	ldr	r3, [pc, #376]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004734:	d0ed      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004752:	2b00      	cmp	r3, #0
 8004754:	d02e      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d12a      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800475e:	4b51      	ldr	r3, [pc, #324]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004764:	0c1b      	lsrs	r3, r3, #16
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800476c:	4b4d      	ldr	r3, [pc, #308]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	0f1b      	lsrs	r3, r3, #28
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	019a      	lsls	r2, r3, #6
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	061b      	lsls	r3, r3, #24
 800478c:	431a      	orrs	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	071b      	lsls	r3, r3, #28
 8004792:	4944      	ldr	r1, [pc, #272]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800479a:	4b42      	ldr	r3, [pc, #264]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800479c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	3b01      	subs	r3, #1
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	493d      	ldr	r1, [pc, #244]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d022      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c8:	d11d      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047ca:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d0:	0e1b      	lsrs	r3, r3, #24
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047d8:	4b32      	ldr	r3, [pc, #200]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047de:	0f1b      	lsrs	r3, r3, #28
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	019a      	lsls	r2, r3, #6
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	431a      	orrs	r2, r3
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	061b      	lsls	r3, r3, #24
 80047f8:	431a      	orrs	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	071b      	lsls	r3, r3, #28
 80047fe:	4929      	ldr	r1, [pc, #164]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d028      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004812:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004818:	0e1b      	lsrs	r3, r3, #24
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004820:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004826:	0c1b      	lsrs	r3, r3, #16
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	019a      	lsls	r2, r3, #6
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	041b      	lsls	r3, r3, #16
 8004838:	431a      	orrs	r2, r3
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	061b      	lsls	r3, r3, #24
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	071b      	lsls	r3, r3, #28
 8004846:	4917      	ldr	r1, [pc, #92]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004854:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	4911      	ldr	r1, [pc, #68]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004864:	4b0f      	ldr	r3, [pc, #60]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a0e      	ldr	r2, [pc, #56]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800486a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004870:	f7fc fdd8 	bl	8001424 <HAL_GetTick>
 8004874:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004876:	e008      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004878:	f7fc fdd4 	bl	8001424 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b64      	cmp	r3, #100	; 0x64
 8004884:	d901      	bls.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e007      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004896:	d1ef      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023800 	.word	0x40023800

080048a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e09d      	b.n	80049f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d108      	bne.n	80048d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ca:	d009      	beq.n	80048e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	61da      	str	r2, [r3, #28]
 80048d2:	e005      	b.n	80048e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fc f9f4 	bl	8000ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004916:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004920:	d902      	bls.n	8004928 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	e002      	b.n	800492e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800492c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004936:	d007      	beq.n	8004948 <HAL_SPI_Init+0xa0>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004940:	d002      	beq.n	8004948 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498a:	ea42 0103 	orr.w	r1, r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	0c1b      	lsrs	r3, r3, #16
 80049a4:	f003 0204 	and.w	r2, r3, #4
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049c4:	ea42 0103 	orr.w	r1, r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b088      	sub	sp, #32
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_SPI_Transmit+0x22>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e158      	b.n	8004cd2 <HAL_SPI_Transmit+0x2d4>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a28:	f7fc fcfc 	bl	8001424 <HAL_GetTick>
 8004a2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d002      	beq.n	8004a44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a3e:	2302      	movs	r3, #2
 8004a40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a42:	e13d      	b.n	8004cc0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_SPI_Transmit+0x52>
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a54:	e134      	b.n	8004cc0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2203      	movs	r2, #3
 8004a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	88fa      	ldrh	r2, [r7, #6]
 8004a6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa0:	d10f      	bne.n	8004ac2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ab0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ac0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	d007      	beq.n	8004ae0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ae8:	d94b      	bls.n	8004b82 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_SPI_Transmit+0xfa>
 8004af2:	8afb      	ldrh	r3, [r7, #22]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d13e      	bne.n	8004b76 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	881a      	ldrh	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b1c:	e02b      	b.n	8004b76 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d112      	bne.n	8004b52 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b30:	881a      	ldrh	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	1c9a      	adds	r2, r3, #2
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b50:	e011      	b.n	8004b76 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b52:	f7fc fc67 	bl	8001424 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d803      	bhi.n	8004b6a <HAL_SPI_Transmit+0x16c>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b68:	d102      	bne.n	8004b70 <HAL_SPI_Transmit+0x172>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b74:	e0a4      	b.n	8004cc0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1ce      	bne.n	8004b1e <HAL_SPI_Transmit+0x120>
 8004b80:	e07c      	b.n	8004c7c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_SPI_Transmit+0x192>
 8004b8a:	8afb      	ldrh	r3, [r7, #22]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d170      	bne.n	8004c72 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d912      	bls.n	8004bc0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	881a      	ldrh	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	1c9a      	adds	r2, r3, #2
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b02      	subs	r3, #2
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bbe:	e058      	b.n	8004c72 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	7812      	ldrb	r2, [r2, #0]
 8004bcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004be6:	e044      	b.n	8004c72 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d12b      	bne.n	8004c4e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d912      	bls.n	8004c26 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	881a      	ldrh	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	1c9a      	adds	r2, r3, #2
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b02      	subs	r3, #2
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c24:	e025      	b.n	8004c72 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	330c      	adds	r3, #12
 8004c30:	7812      	ldrb	r2, [r2, #0]
 8004c32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c4c:	e011      	b.n	8004c72 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c4e:	f7fc fbe9 	bl	8001424 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d803      	bhi.n	8004c66 <HAL_SPI_Transmit+0x268>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d102      	bne.n	8004c6c <HAL_SPI_Transmit+0x26e>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d102      	bne.n	8004c72 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c70:	e026      	b.n	8004cc0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1b5      	bne.n	8004be8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	6839      	ldr	r1, [r7, #0]
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 fa5d 	bl	8005140 <SPI_EndRxTxTransaction>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e000      	b.n	8004cc0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004cbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3720      	adds	r7, #32
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10e      	bne.n	8004d1c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d004      	beq.n	8004d1c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	4798      	blx	r3
    return;
 8004d1a:	e0ce      	b.n	8004eba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d009      	beq.n	8004d3a <HAL_SPI_IRQHandler+0x5e>
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	4798      	blx	r3
    return;
 8004d38:	e0bf      	b.n	8004eba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <HAL_SPI_IRQHandler+0x7e>
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d105      	bne.n	8004d5a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80b0 	beq.w	8004eba <HAL_SPI_IRQHandler+0x1de>
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80aa 	beq.w	8004eba <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d023      	beq.n	8004db8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d011      	beq.n	8004da0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d80:	f043 0204 	orr.w	r2, r3, #4
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	e00b      	b.n	8004db8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004da0:	2300      	movs	r3, #0
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	693b      	ldr	r3, [r7, #16]
        return;
 8004db6:	e080      	b.n	8004eba <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d014      	beq.n	8004dec <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc6:	f043 0201 	orr.w	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00c      	beq.n	8004e10 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfa:	f043 0208 	orr.w	r2, r3, #8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d04f      	beq.n	8004eb8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e26:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d104      	bne.n	8004e44 <HAL_SPI_IRQHandler+0x168>
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d034      	beq.n	8004eae <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0203 	bic.w	r2, r2, #3
 8004e52:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d011      	beq.n	8004e80 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e60:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <HAL_SPI_IRQHandler+0x1e4>)
 8004e62:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fc fd3b 	bl	80018e4 <HAL_DMA_Abort_IT>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d016      	beq.n	8004eb6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8c:	4a0c      	ldr	r2, [pc, #48]	; (8004ec0 <HAL_SPI_IRQHandler+0x1e4>)
 8004e8e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fc fd25 	bl	80018e4 <HAL_DMA_Abort_IT>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004eac:	e003      	b.n	8004eb6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f808 	bl	8004ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004eb4:	e000      	b.n	8004eb8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004eb6:	bf00      	nop
    return;
 8004eb8:	bf00      	nop
  }
}
 8004eba:	3720      	adds	r7, #32
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	08004ed9 	.word	0x08004ed9

08004ec4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f7ff ffe5 	bl	8004ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	4613      	mov	r3, r2
 8004f12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f14:	f7fc fa86 	bl	8001424 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	4413      	add	r3, r2
 8004f22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f24:	f7fc fa7e 	bl	8001424 <HAL_GetTick>
 8004f28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f2a:	4b39      	ldr	r3, [pc, #228]	; (8005010 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	015b      	lsls	r3, r3, #5
 8004f30:	0d1b      	lsrs	r3, r3, #20
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	fb02 f303 	mul.w	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f3a:	e054      	b.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f42:	d050      	beq.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f44:	f7fc fa6e 	bl	8001424 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d902      	bls.n	8004f5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d13d      	bne.n	8004fd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f72:	d111      	bne.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7c:	d004      	beq.n	8004f88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f86:	d107      	bne.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa0:	d10f      	bne.n	8004fc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e017      	b.n	8005006 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	bf0c      	ite	eq
 8004ff6:	2301      	moveq	r3, #1
 8004ff8:	2300      	movne	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	429a      	cmp	r2, r3
 8005002:	d19b      	bne.n	8004f3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3720      	adds	r7, #32
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000020 	.word	0x20000020

08005014 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08a      	sub	sp, #40	; 0x28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005026:	f7fc f9fd 	bl	8001424 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	4413      	add	r3, r2
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005036:	f7fc f9f5 	bl	8001424 <HAL_GetTick>
 800503a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005044:	4b3d      	ldr	r3, [pc, #244]	; (800513c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	00da      	lsls	r2, r3, #3
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	0d1b      	lsrs	r3, r3, #20
 8005054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005056:	fb02 f303 	mul.w	r3, r2, r3
 800505a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800505c:	e060      	b.n	8005120 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005064:	d107      	bne.n	8005076 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	b2db      	uxtb	r3, r3
 8005072:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005074:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507c:	d050      	beq.n	8005120 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800507e:	f7fc f9d1 	bl	8001424 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508a:	429a      	cmp	r2, r3
 800508c:	d902      	bls.n	8005094 <SPI_WaitFifoStateUntilTimeout+0x80>
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	2b00      	cmp	r3, #0
 8005092:	d13d      	bne.n	8005110 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ac:	d111      	bne.n	80050d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b6:	d004      	beq.n	80050c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c0:	d107      	bne.n	80050d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050da:	d10f      	bne.n	80050fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e010      	b.n	8005132 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	3b01      	subs	r3, #1
 800511e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4013      	ands	r3, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	429a      	cmp	r2, r3
 800512e:	d196      	bne.n	800505e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3728      	adds	r7, #40	; 0x28
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000020 	.word	0x20000020

08005140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2200      	movs	r2, #0
 8005154:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f7ff ff5b 	bl	8005014 <SPI_WaitFifoStateUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005168:	f043 0220 	orr.w	r2, r3, #32
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e046      	b.n	8005202 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005174:	4b25      	ldr	r3, [pc, #148]	; (800520c <SPI_EndRxTxTransaction+0xcc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a25      	ldr	r2, [pc, #148]	; (8005210 <SPI_EndRxTxTransaction+0xd0>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	0d5b      	lsrs	r3, r3, #21
 8005180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005184:	fb02 f303 	mul.w	r3, r2, r3
 8005188:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005192:	d112      	bne.n	80051ba <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2200      	movs	r2, #0
 800519c:	2180      	movs	r1, #128	; 0x80
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff feb0 	bl	8004f04 <SPI_WaitFlagStateUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d016      	beq.n	80051d8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ae:	f043 0220 	orr.w	r2, r3, #32
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e023      	b.n	8005202 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d0:	2b80      	cmp	r3, #128	; 0x80
 80051d2:	d0f2      	beq.n	80051ba <SPI_EndRxTxTransaction+0x7a>
 80051d4:	e000      	b.n	80051d8 <SPI_EndRxTxTransaction+0x98>
        break;
 80051d6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2200      	movs	r2, #0
 80051e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff ff15 	bl	8005014 <SPI_WaitFifoStateUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f4:	f043 0220 	orr.w	r2, r3, #32
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e000      	b.n	8005202 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000020 	.word	0x20000020
 8005210:	165e9f81 	.word	0x165e9f81

08005214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e049      	b.n	80052ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fb fddc 	bl	8000df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3304      	adds	r3, #4
 8005250:	4619      	mov	r1, r3
 8005252:	4610      	mov	r0, r2
 8005254:	f000 f986 	bl	8005564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b082      	sub	sp, #8
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d122      	bne.n	800531e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d11b      	bne.n	800531e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f06f 0202 	mvn.w	r2, #2
 80052ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f90f 	bl	8005528 <HAL_TIM_IC_CaptureCallback>
 800530a:	e005      	b.n	8005318 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f901 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f912 	bl	800553c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b04      	cmp	r3, #4
 800532a:	d122      	bne.n	8005372 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b04      	cmp	r3, #4
 8005338:	d11b      	bne.n	8005372 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f06f 0204 	mvn.w	r2, #4
 8005342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f8e5 	bl	8005528 <HAL_TIM_IC_CaptureCallback>
 800535e:	e005      	b.n	800536c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f8d7 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f8e8 	bl	800553c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b08      	cmp	r3, #8
 800537e:	d122      	bne.n	80053c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b08      	cmp	r3, #8
 800538c:	d11b      	bne.n	80053c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f06f 0208 	mvn.w	r2, #8
 8005396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2204      	movs	r2, #4
 800539c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f003 0303 	and.w	r3, r3, #3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f8bb 	bl	8005528 <HAL_TIM_IC_CaptureCallback>
 80053b2:	e005      	b.n	80053c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f8ad 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f8be 	bl	800553c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d122      	bne.n	800541a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d11b      	bne.n	800541a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f06f 0210 	mvn.w	r2, #16
 80053ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2208      	movs	r2, #8
 80053f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f891 	bl	8005528 <HAL_TIM_IC_CaptureCallback>
 8005406:	e005      	b.n	8005414 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f883 	bl	8005514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f894 	bl	800553c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b01      	cmp	r3, #1
 8005426:	d10e      	bne.n	8005446 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b01      	cmp	r3, #1
 8005434:	d107      	bne.n	8005446 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f06f 0201 	mvn.w	r2, #1
 800543e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f85d 	bl	8005500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005450:	2b80      	cmp	r3, #128	; 0x80
 8005452:	d10e      	bne.n	8005472 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	2b80      	cmp	r3, #128	; 0x80
 8005460:	d107      	bne.n	8005472 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800546a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f923 	bl	80056b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005480:	d10e      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548c:	2b80      	cmp	r3, #128	; 0x80
 800548e:	d107      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f916 	bl	80056cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	d10e      	bne.n	80054cc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d107      	bne.n	80054cc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f842 	bl	8005550 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d10e      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d107      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0220 	mvn.w	r2, #32
 80054f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f8d6 	bl	80056a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a40      	ldr	r2, [pc, #256]	; (8005678 <TIM_Base_SetConfig+0x114>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d013      	beq.n	80055a4 <TIM_Base_SetConfig+0x40>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005582:	d00f      	beq.n	80055a4 <TIM_Base_SetConfig+0x40>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a3d      	ldr	r2, [pc, #244]	; (800567c <TIM_Base_SetConfig+0x118>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00b      	beq.n	80055a4 <TIM_Base_SetConfig+0x40>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a3c      	ldr	r2, [pc, #240]	; (8005680 <TIM_Base_SetConfig+0x11c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d007      	beq.n	80055a4 <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a3b      	ldr	r2, [pc, #236]	; (8005684 <TIM_Base_SetConfig+0x120>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a3a      	ldr	r2, [pc, #232]	; (8005688 <TIM_Base_SetConfig+0x124>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d108      	bne.n	80055b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a2f      	ldr	r2, [pc, #188]	; (8005678 <TIM_Base_SetConfig+0x114>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d02b      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c4:	d027      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2c      	ldr	r2, [pc, #176]	; (800567c <TIM_Base_SetConfig+0x118>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d023      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2b      	ldr	r2, [pc, #172]	; (8005680 <TIM_Base_SetConfig+0x11c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d01f      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2a      	ldr	r2, [pc, #168]	; (8005684 <TIM_Base_SetConfig+0x120>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01b      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a29      	ldr	r2, [pc, #164]	; (8005688 <TIM_Base_SetConfig+0x124>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d017      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a28      	ldr	r2, [pc, #160]	; (800568c <TIM_Base_SetConfig+0x128>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a27      	ldr	r2, [pc, #156]	; (8005690 <TIM_Base_SetConfig+0x12c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00f      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a26      	ldr	r2, [pc, #152]	; (8005694 <TIM_Base_SetConfig+0x130>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00b      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a25      	ldr	r2, [pc, #148]	; (8005698 <TIM_Base_SetConfig+0x134>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d007      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a24      	ldr	r2, [pc, #144]	; (800569c <TIM_Base_SetConfig+0x138>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a23      	ldr	r2, [pc, #140]	; (80056a0 <TIM_Base_SetConfig+0x13c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d108      	bne.n	8005628 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a0a      	ldr	r2, [pc, #40]	; (8005678 <TIM_Base_SetConfig+0x114>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d003      	beq.n	800565c <TIM_Base_SetConfig+0xf8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a0c      	ldr	r2, [pc, #48]	; (8005688 <TIM_Base_SetConfig+0x124>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d103      	bne.n	8005664 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	615a      	str	r2, [r3, #20]
}
 800566a:	bf00      	nop
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40010000 	.word	0x40010000
 800567c:	40000400 	.word	0x40000400
 8005680:	40000800 	.word	0x40000800
 8005684:	40000c00 	.word	0x40000c00
 8005688:	40010400 	.word	0x40010400
 800568c:	40014000 	.word	0x40014000
 8005690:	40014400 	.word	0x40014400
 8005694:	40014800 	.word	0x40014800
 8005698:	40001800 	.word	0x40001800
 800569c:	40001c00 	.word	0x40001c00
 80056a0:	40002000 	.word	0x40002000

080056a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e040      	b.n	8005774 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7fb fb9e 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2224      	movs	r2, #36	; 0x24
 800570c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0201 	bic.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fbe6 	bl	8005ef0 <UART_SetConfig>
 8005724:	4603      	mov	r3, r0
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e022      	b.n	8005774 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fe3e 	bl	80063b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800574a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800575a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fec5 	bl	80064fc <UART_CheckIdleState>
 8005772:	4603      	mov	r3, r0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08a      	sub	sp, #40	; 0x28
 8005780:	af02      	add	r7, sp, #8
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005790:	2b20      	cmp	r3, #32
 8005792:	d171      	bne.n	8005878 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <HAL_UART_Transmit+0x24>
 800579a:	88fb      	ldrh	r3, [r7, #6]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e06a      	b.n	800587a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2221      	movs	r2, #33	; 0x21
 80057b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057b2:	f7fb fe37 	bl	8001424 <HAL_GetTick>
 80057b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	88fa      	ldrh	r2, [r7, #6]
 80057c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d0:	d108      	bne.n	80057e4 <HAL_UART_Transmit+0x68>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d104      	bne.n	80057e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	e003      	b.n	80057ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057ec:	e02c      	b.n	8005848 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2200      	movs	r2, #0
 80057f6:	2180      	movs	r1, #128	; 0x80
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 feb6 	bl	800656a <UART_WaitOnFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e038      	b.n	800587a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10b      	bne.n	8005826 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800581c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	3302      	adds	r3, #2
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	e007      	b.n	8005836 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	781a      	ldrb	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	3301      	adds	r3, #1
 8005834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1cc      	bne.n	80057ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2200      	movs	r2, #0
 800585c:	2140      	movs	r1, #64	; 0x40
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fe83 	bl	800656a <UART_WaitOnFlagUntilTimeout>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e005      	b.n	800587a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	e000      	b.n	800587a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005878:	2302      	movs	r3, #2
  }
}
 800587a:	4618      	mov	r0, r3
 800587c:	3720      	adds	r7, #32
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b08a      	sub	sp, #40	; 0x28
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	4613      	mov	r3, r2
 800588e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005896:	2b20      	cmp	r3, #32
 8005898:	d132      	bne.n	8005900 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_UART_Receive_IT+0x24>
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e02b      	b.n	8005902 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d018      	beq.n	80058f0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	613b      	str	r3, [r7, #16]
   return(result);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	623b      	str	r3, [r7, #32]
 80058de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	69f9      	ldr	r1, [r7, #28]
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e6      	bne.n	80058be <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058f0:	88fb      	ldrh	r3, [r7, #6]
 80058f2:	461a      	mov	r2, r3
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 fefe 	bl	80066f8 <UART_Start_Receive_IT>
 80058fc:	4603      	mov	r3, r0
 80058fe:	e000      	b.n	8005902 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005900:	2302      	movs	r3, #2
  }
}
 8005902:	4618      	mov	r0, r3
 8005904:	3728      	adds	r7, #40	; 0x28
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b0ba      	sub	sp, #232	; 0xe8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005932:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005936:	f640 030f 	movw	r3, #2063	; 0x80f
 800593a:	4013      	ands	r3, r2
 800593c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005940:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d115      	bne.n	8005974 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00f      	beq.n	8005974 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8297 	beq.w	8005e98 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	4798      	blx	r3
      }
      return;
 8005972:	e291      	b.n	8005e98 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 8117 	beq.w	8005bac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800597e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800598a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800598e:	4b85      	ldr	r3, [pc, #532]	; (8005ba4 <HAL_UART_IRQHandler+0x298>)
 8005990:	4013      	ands	r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 810a 	beq.w	8005bac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d011      	beq.n	80059c8 <HAL_UART_IRQHandler+0xbc>
 80059a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00b      	beq.n	80059c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2201      	movs	r2, #1
 80059b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059be:	f043 0201 	orr.w	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d011      	beq.n	80059f8 <HAL_UART_IRQHandler+0xec>
 80059d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00b      	beq.n	80059f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2202      	movs	r2, #2
 80059e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ee:	f043 0204 	orr.w	r2, r3, #4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d011      	beq.n	8005a28 <HAL_UART_IRQHandler+0x11c>
 8005a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00b      	beq.n	8005a28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2204      	movs	r2, #4
 8005a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a1e:	f043 0202 	orr.w	r2, r3, #2
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d017      	beq.n	8005a64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d105      	bne.n	8005a4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00b      	beq.n	8005a64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2208      	movs	r2, #8
 8005a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a5a:	f043 0208 	orr.w	r2, r3, #8
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d012      	beq.n	8005a96 <HAL_UART_IRQHandler+0x18a>
 8005a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00c      	beq.n	8005a96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8c:	f043 0220 	orr.w	r2, r3, #32
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 81fd 	beq.w	8005e9c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b40      	cmp	r3, #64	; 0x40
 8005ae0:	d005      	beq.n	8005aee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ae6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d04f      	beq.n	8005b8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fec8 	bl	8006884 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	d141      	bne.n	8005b86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3308      	adds	r3, #8
 8005b08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3308      	adds	r3, #8
 8005b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1d9      	bne.n	8005b02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d013      	beq.n	8005b7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b5a:	4a13      	ldr	r2, [pc, #76]	; (8005ba8 <HAL_UART_IRQHandler+0x29c>)
 8005b5c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fb febe 	bl	80018e4 <HAL_DMA_Abort_IT>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d017      	beq.n	8005b9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	e00f      	b.n	8005b9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f9a0 	bl	8005ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	e00b      	b.n	8005b9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f99c 	bl	8005ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8c:	e007      	b.n	8005b9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f998 	bl	8005ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005b9c:	e17e      	b.n	8005e9c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9e:	bf00      	nop
    return;
 8005ba0:	e17c      	b.n	8005e9c <HAL_UART_IRQHandler+0x590>
 8005ba2:	bf00      	nop
 8005ba4:	04000120 	.word	0x04000120
 8005ba8:	0800694d 	.word	0x0800694d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	f040 814c 	bne.w	8005e4e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 8145 	beq.w	8005e4e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 813e 	beq.w	8005e4e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2210      	movs	r2, #16
 8005bd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	f040 80b6 	bne.w	8005d56 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bf6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8150 	beq.w	8005ea0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	f080 8148 	bcs.w	8005ea0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c24:	f000 8086 	beq.w	8005d34 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1da      	bne.n	8005c28 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3308      	adds	r3, #8
 8005c78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c84:	f023 0301 	bic.w	r3, r3, #1
 8005c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e1      	bne.n	8005c72 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3308      	adds	r3, #8
 8005cce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e3      	bne.n	8005cae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d04:	f023 0310 	bic.w	r3, r3, #16
 8005d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	461a      	mov	r2, r3
 8005d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d16:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e4      	bne.n	8005cf4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fb fd68 	bl	8001804 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f8c2 	bl	8005ed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d54:	e0a4      	b.n	8005ea0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 8096 	beq.w	8005ea4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8091 	beq.w	8005ea4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005da4:	647b      	str	r3, [r7, #68]	; 0x44
 8005da6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005daa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e4      	bne.n	8005d82 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	623b      	str	r3, [r7, #32]
   return(result);
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	f023 0301 	bic.w	r3, r3, #1
 8005dce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ddc:	633a      	str	r2, [r7, #48]	; 0x30
 8005dde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e3      	bne.n	8005db8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	e853 3f00 	ldrex	r3, [r3]
 8005e10:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f023 0310 	bic.w	r3, r3, #16
 8005e18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e26:	61fb      	str	r3, [r7, #28]
 8005e28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	69b9      	ldr	r1, [r7, #24]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	617b      	str	r3, [r7, #20]
   return(result);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e4      	bne.n	8005e04 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f846 	bl	8005ed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e4c:	e02a      	b.n	8005ea4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00e      	beq.n	8005e78 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d008      	beq.n	8005e78 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01c      	beq.n	8005ea8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3
    }
    return;
 8005e76:	e017      	b.n	8005ea8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d012      	beq.n	8005eaa <HAL_UART_IRQHandler+0x59e>
 8005e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00c      	beq.n	8005eaa <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fd71 	bl	8006978 <UART_EndTransmit_IT>
    return;
 8005e96:	e008      	b.n	8005eaa <HAL_UART_IRQHandler+0x59e>
      return;
 8005e98:	bf00      	nop
 8005e9a:	e006      	b.n	8005eaa <HAL_UART_IRQHandler+0x59e>
    return;
 8005e9c:	bf00      	nop
 8005e9e:	e004      	b.n	8005eaa <HAL_UART_IRQHandler+0x59e>
      return;
 8005ea0:	bf00      	nop
 8005ea2:	e002      	b.n	8005eaa <HAL_UART_IRQHandler+0x59e>
      return;
 8005ea4:	bf00      	nop
 8005ea6:	e000      	b.n	8005eaa <HAL_UART_IRQHandler+0x59e>
    return;
 8005ea8:	bf00      	nop
  }

}
 8005eaa:	37e8      	adds	r7, #232	; 0xe8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	4ba6      	ldr	r3, [pc, #664]	; (80061b4 <UART_SetConfig+0x2c4>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	6979      	ldr	r1, [r7, #20]
 8005f24:	430b      	orrs	r3, r1
 8005f26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a94      	ldr	r2, [pc, #592]	; (80061b8 <UART_SetConfig+0x2c8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d120      	bne.n	8005fae <UART_SetConfig+0xbe>
 8005f6c:	4b93      	ldr	r3, [pc, #588]	; (80061bc <UART_SetConfig+0x2cc>)
 8005f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d816      	bhi.n	8005fa8 <UART_SetConfig+0xb8>
 8005f7a:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <UART_SetConfig+0x90>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005f91 	.word	0x08005f91
 8005f84:	08005f9d 	.word	0x08005f9d
 8005f88:	08005f97 	.word	0x08005f97
 8005f8c:	08005fa3 	.word	0x08005fa3
 8005f90:	2301      	movs	r3, #1
 8005f92:	77fb      	strb	r3, [r7, #31]
 8005f94:	e150      	b.n	8006238 <UART_SetConfig+0x348>
 8005f96:	2302      	movs	r3, #2
 8005f98:	77fb      	strb	r3, [r7, #31]
 8005f9a:	e14d      	b.n	8006238 <UART_SetConfig+0x348>
 8005f9c:	2304      	movs	r3, #4
 8005f9e:	77fb      	strb	r3, [r7, #31]
 8005fa0:	e14a      	b.n	8006238 <UART_SetConfig+0x348>
 8005fa2:	2308      	movs	r3, #8
 8005fa4:	77fb      	strb	r3, [r7, #31]
 8005fa6:	e147      	b.n	8006238 <UART_SetConfig+0x348>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e144      	b.n	8006238 <UART_SetConfig+0x348>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a83      	ldr	r2, [pc, #524]	; (80061c0 <UART_SetConfig+0x2d0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d132      	bne.n	800601e <UART_SetConfig+0x12e>
 8005fb8:	4b80      	ldr	r3, [pc, #512]	; (80061bc <UART_SetConfig+0x2cc>)
 8005fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbe:	f003 030c 	and.w	r3, r3, #12
 8005fc2:	2b0c      	cmp	r3, #12
 8005fc4:	d828      	bhi.n	8006018 <UART_SetConfig+0x128>
 8005fc6:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <UART_SetConfig+0xdc>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08006001 	.word	0x08006001
 8005fd0:	08006019 	.word	0x08006019
 8005fd4:	08006019 	.word	0x08006019
 8005fd8:	08006019 	.word	0x08006019
 8005fdc:	0800600d 	.word	0x0800600d
 8005fe0:	08006019 	.word	0x08006019
 8005fe4:	08006019 	.word	0x08006019
 8005fe8:	08006019 	.word	0x08006019
 8005fec:	08006007 	.word	0x08006007
 8005ff0:	08006019 	.word	0x08006019
 8005ff4:	08006019 	.word	0x08006019
 8005ff8:	08006019 	.word	0x08006019
 8005ffc:	08006013 	.word	0x08006013
 8006000:	2300      	movs	r3, #0
 8006002:	77fb      	strb	r3, [r7, #31]
 8006004:	e118      	b.n	8006238 <UART_SetConfig+0x348>
 8006006:	2302      	movs	r3, #2
 8006008:	77fb      	strb	r3, [r7, #31]
 800600a:	e115      	b.n	8006238 <UART_SetConfig+0x348>
 800600c:	2304      	movs	r3, #4
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e112      	b.n	8006238 <UART_SetConfig+0x348>
 8006012:	2308      	movs	r3, #8
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e10f      	b.n	8006238 <UART_SetConfig+0x348>
 8006018:	2310      	movs	r3, #16
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e10c      	b.n	8006238 <UART_SetConfig+0x348>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a68      	ldr	r2, [pc, #416]	; (80061c4 <UART_SetConfig+0x2d4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d120      	bne.n	800606a <UART_SetConfig+0x17a>
 8006028:	4b64      	ldr	r3, [pc, #400]	; (80061bc <UART_SetConfig+0x2cc>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006032:	2b30      	cmp	r3, #48	; 0x30
 8006034:	d013      	beq.n	800605e <UART_SetConfig+0x16e>
 8006036:	2b30      	cmp	r3, #48	; 0x30
 8006038:	d814      	bhi.n	8006064 <UART_SetConfig+0x174>
 800603a:	2b20      	cmp	r3, #32
 800603c:	d009      	beq.n	8006052 <UART_SetConfig+0x162>
 800603e:	2b20      	cmp	r3, #32
 8006040:	d810      	bhi.n	8006064 <UART_SetConfig+0x174>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <UART_SetConfig+0x15c>
 8006046:	2b10      	cmp	r3, #16
 8006048:	d006      	beq.n	8006058 <UART_SetConfig+0x168>
 800604a:	e00b      	b.n	8006064 <UART_SetConfig+0x174>
 800604c:	2300      	movs	r3, #0
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e0f2      	b.n	8006238 <UART_SetConfig+0x348>
 8006052:	2302      	movs	r3, #2
 8006054:	77fb      	strb	r3, [r7, #31]
 8006056:	e0ef      	b.n	8006238 <UART_SetConfig+0x348>
 8006058:	2304      	movs	r3, #4
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	e0ec      	b.n	8006238 <UART_SetConfig+0x348>
 800605e:	2308      	movs	r3, #8
 8006060:	77fb      	strb	r3, [r7, #31]
 8006062:	e0e9      	b.n	8006238 <UART_SetConfig+0x348>
 8006064:	2310      	movs	r3, #16
 8006066:	77fb      	strb	r3, [r7, #31]
 8006068:	e0e6      	b.n	8006238 <UART_SetConfig+0x348>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a56      	ldr	r2, [pc, #344]	; (80061c8 <UART_SetConfig+0x2d8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d120      	bne.n	80060b6 <UART_SetConfig+0x1c6>
 8006074:	4b51      	ldr	r3, [pc, #324]	; (80061bc <UART_SetConfig+0x2cc>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800607e:	2bc0      	cmp	r3, #192	; 0xc0
 8006080:	d013      	beq.n	80060aa <UART_SetConfig+0x1ba>
 8006082:	2bc0      	cmp	r3, #192	; 0xc0
 8006084:	d814      	bhi.n	80060b0 <UART_SetConfig+0x1c0>
 8006086:	2b80      	cmp	r3, #128	; 0x80
 8006088:	d009      	beq.n	800609e <UART_SetConfig+0x1ae>
 800608a:	2b80      	cmp	r3, #128	; 0x80
 800608c:	d810      	bhi.n	80060b0 <UART_SetConfig+0x1c0>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <UART_SetConfig+0x1a8>
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	d006      	beq.n	80060a4 <UART_SetConfig+0x1b4>
 8006096:	e00b      	b.n	80060b0 <UART_SetConfig+0x1c0>
 8006098:	2300      	movs	r3, #0
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	e0cc      	b.n	8006238 <UART_SetConfig+0x348>
 800609e:	2302      	movs	r3, #2
 80060a0:	77fb      	strb	r3, [r7, #31]
 80060a2:	e0c9      	b.n	8006238 <UART_SetConfig+0x348>
 80060a4:	2304      	movs	r3, #4
 80060a6:	77fb      	strb	r3, [r7, #31]
 80060a8:	e0c6      	b.n	8006238 <UART_SetConfig+0x348>
 80060aa:	2308      	movs	r3, #8
 80060ac:	77fb      	strb	r3, [r7, #31]
 80060ae:	e0c3      	b.n	8006238 <UART_SetConfig+0x348>
 80060b0:	2310      	movs	r3, #16
 80060b2:	77fb      	strb	r3, [r7, #31]
 80060b4:	e0c0      	b.n	8006238 <UART_SetConfig+0x348>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a44      	ldr	r2, [pc, #272]	; (80061cc <UART_SetConfig+0x2dc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d125      	bne.n	800610c <UART_SetConfig+0x21c>
 80060c0:	4b3e      	ldr	r3, [pc, #248]	; (80061bc <UART_SetConfig+0x2cc>)
 80060c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ce:	d017      	beq.n	8006100 <UART_SetConfig+0x210>
 80060d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060d4:	d817      	bhi.n	8006106 <UART_SetConfig+0x216>
 80060d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060da:	d00b      	beq.n	80060f4 <UART_SetConfig+0x204>
 80060dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e0:	d811      	bhi.n	8006106 <UART_SetConfig+0x216>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <UART_SetConfig+0x1fe>
 80060e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ea:	d006      	beq.n	80060fa <UART_SetConfig+0x20a>
 80060ec:	e00b      	b.n	8006106 <UART_SetConfig+0x216>
 80060ee:	2300      	movs	r3, #0
 80060f0:	77fb      	strb	r3, [r7, #31]
 80060f2:	e0a1      	b.n	8006238 <UART_SetConfig+0x348>
 80060f4:	2302      	movs	r3, #2
 80060f6:	77fb      	strb	r3, [r7, #31]
 80060f8:	e09e      	b.n	8006238 <UART_SetConfig+0x348>
 80060fa:	2304      	movs	r3, #4
 80060fc:	77fb      	strb	r3, [r7, #31]
 80060fe:	e09b      	b.n	8006238 <UART_SetConfig+0x348>
 8006100:	2308      	movs	r3, #8
 8006102:	77fb      	strb	r3, [r7, #31]
 8006104:	e098      	b.n	8006238 <UART_SetConfig+0x348>
 8006106:	2310      	movs	r3, #16
 8006108:	77fb      	strb	r3, [r7, #31]
 800610a:	e095      	b.n	8006238 <UART_SetConfig+0x348>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a2f      	ldr	r2, [pc, #188]	; (80061d0 <UART_SetConfig+0x2e0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d125      	bne.n	8006162 <UART_SetConfig+0x272>
 8006116:	4b29      	ldr	r3, [pc, #164]	; (80061bc <UART_SetConfig+0x2cc>)
 8006118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006120:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006124:	d017      	beq.n	8006156 <UART_SetConfig+0x266>
 8006126:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800612a:	d817      	bhi.n	800615c <UART_SetConfig+0x26c>
 800612c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006130:	d00b      	beq.n	800614a <UART_SetConfig+0x25a>
 8006132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006136:	d811      	bhi.n	800615c <UART_SetConfig+0x26c>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <UART_SetConfig+0x254>
 800613c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006140:	d006      	beq.n	8006150 <UART_SetConfig+0x260>
 8006142:	e00b      	b.n	800615c <UART_SetConfig+0x26c>
 8006144:	2301      	movs	r3, #1
 8006146:	77fb      	strb	r3, [r7, #31]
 8006148:	e076      	b.n	8006238 <UART_SetConfig+0x348>
 800614a:	2302      	movs	r3, #2
 800614c:	77fb      	strb	r3, [r7, #31]
 800614e:	e073      	b.n	8006238 <UART_SetConfig+0x348>
 8006150:	2304      	movs	r3, #4
 8006152:	77fb      	strb	r3, [r7, #31]
 8006154:	e070      	b.n	8006238 <UART_SetConfig+0x348>
 8006156:	2308      	movs	r3, #8
 8006158:	77fb      	strb	r3, [r7, #31]
 800615a:	e06d      	b.n	8006238 <UART_SetConfig+0x348>
 800615c:	2310      	movs	r3, #16
 800615e:	77fb      	strb	r3, [r7, #31]
 8006160:	e06a      	b.n	8006238 <UART_SetConfig+0x348>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1b      	ldr	r2, [pc, #108]	; (80061d4 <UART_SetConfig+0x2e4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d138      	bne.n	80061de <UART_SetConfig+0x2ee>
 800616c:	4b13      	ldr	r3, [pc, #76]	; (80061bc <UART_SetConfig+0x2cc>)
 800616e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006172:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006176:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800617a:	d017      	beq.n	80061ac <UART_SetConfig+0x2bc>
 800617c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006180:	d82a      	bhi.n	80061d8 <UART_SetConfig+0x2e8>
 8006182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006186:	d00b      	beq.n	80061a0 <UART_SetConfig+0x2b0>
 8006188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800618c:	d824      	bhi.n	80061d8 <UART_SetConfig+0x2e8>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <UART_SetConfig+0x2aa>
 8006192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006196:	d006      	beq.n	80061a6 <UART_SetConfig+0x2b6>
 8006198:	e01e      	b.n	80061d8 <UART_SetConfig+0x2e8>
 800619a:	2300      	movs	r3, #0
 800619c:	77fb      	strb	r3, [r7, #31]
 800619e:	e04b      	b.n	8006238 <UART_SetConfig+0x348>
 80061a0:	2302      	movs	r3, #2
 80061a2:	77fb      	strb	r3, [r7, #31]
 80061a4:	e048      	b.n	8006238 <UART_SetConfig+0x348>
 80061a6:	2304      	movs	r3, #4
 80061a8:	77fb      	strb	r3, [r7, #31]
 80061aa:	e045      	b.n	8006238 <UART_SetConfig+0x348>
 80061ac:	2308      	movs	r3, #8
 80061ae:	77fb      	strb	r3, [r7, #31]
 80061b0:	e042      	b.n	8006238 <UART_SetConfig+0x348>
 80061b2:	bf00      	nop
 80061b4:	efff69f3 	.word	0xefff69f3
 80061b8:	40011000 	.word	0x40011000
 80061bc:	40023800 	.word	0x40023800
 80061c0:	40004400 	.word	0x40004400
 80061c4:	40004800 	.word	0x40004800
 80061c8:	40004c00 	.word	0x40004c00
 80061cc:	40005000 	.word	0x40005000
 80061d0:	40011400 	.word	0x40011400
 80061d4:	40007800 	.word	0x40007800
 80061d8:	2310      	movs	r3, #16
 80061da:	77fb      	strb	r3, [r7, #31]
 80061dc:	e02c      	b.n	8006238 <UART_SetConfig+0x348>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a72      	ldr	r2, [pc, #456]	; (80063ac <UART_SetConfig+0x4bc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d125      	bne.n	8006234 <UART_SetConfig+0x344>
 80061e8:	4b71      	ldr	r3, [pc, #452]	; (80063b0 <UART_SetConfig+0x4c0>)
 80061ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061f6:	d017      	beq.n	8006228 <UART_SetConfig+0x338>
 80061f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061fc:	d817      	bhi.n	800622e <UART_SetConfig+0x33e>
 80061fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006202:	d00b      	beq.n	800621c <UART_SetConfig+0x32c>
 8006204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006208:	d811      	bhi.n	800622e <UART_SetConfig+0x33e>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <UART_SetConfig+0x326>
 800620e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006212:	d006      	beq.n	8006222 <UART_SetConfig+0x332>
 8006214:	e00b      	b.n	800622e <UART_SetConfig+0x33e>
 8006216:	2300      	movs	r3, #0
 8006218:	77fb      	strb	r3, [r7, #31]
 800621a:	e00d      	b.n	8006238 <UART_SetConfig+0x348>
 800621c:	2302      	movs	r3, #2
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e00a      	b.n	8006238 <UART_SetConfig+0x348>
 8006222:	2304      	movs	r3, #4
 8006224:	77fb      	strb	r3, [r7, #31]
 8006226:	e007      	b.n	8006238 <UART_SetConfig+0x348>
 8006228:	2308      	movs	r3, #8
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	e004      	b.n	8006238 <UART_SetConfig+0x348>
 800622e:	2310      	movs	r3, #16
 8006230:	77fb      	strb	r3, [r7, #31]
 8006232:	e001      	b.n	8006238 <UART_SetConfig+0x348>
 8006234:	2310      	movs	r3, #16
 8006236:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006240:	d15b      	bne.n	80062fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006242:	7ffb      	ldrb	r3, [r7, #31]
 8006244:	2b08      	cmp	r3, #8
 8006246:	d828      	bhi.n	800629a <UART_SetConfig+0x3aa>
 8006248:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <UART_SetConfig+0x360>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	08006275 	.word	0x08006275
 8006254:	0800627d 	.word	0x0800627d
 8006258:	08006285 	.word	0x08006285
 800625c:	0800629b 	.word	0x0800629b
 8006260:	0800628b 	.word	0x0800628b
 8006264:	0800629b 	.word	0x0800629b
 8006268:	0800629b 	.word	0x0800629b
 800626c:	0800629b 	.word	0x0800629b
 8006270:	08006293 	.word	0x08006293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006274:	f7fd ff00 	bl	8004078 <HAL_RCC_GetPCLK1Freq>
 8006278:	61b8      	str	r0, [r7, #24]
        break;
 800627a:	e013      	b.n	80062a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800627c:	f7fd ff10 	bl	80040a0 <HAL_RCC_GetPCLK2Freq>
 8006280:	61b8      	str	r0, [r7, #24]
        break;
 8006282:	e00f      	b.n	80062a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006284:	4b4b      	ldr	r3, [pc, #300]	; (80063b4 <UART_SetConfig+0x4c4>)
 8006286:	61bb      	str	r3, [r7, #24]
        break;
 8006288:	e00c      	b.n	80062a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800628a:	f7fd fde3 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 800628e:	61b8      	str	r0, [r7, #24]
        break;
 8006290:	e008      	b.n	80062a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006296:	61bb      	str	r3, [r7, #24]
        break;
 8006298:	e004      	b.n	80062a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	77bb      	strb	r3, [r7, #30]
        break;
 80062a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d074      	beq.n	8006394 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	005a      	lsls	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	085b      	lsrs	r3, r3, #1
 80062b4:	441a      	add	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80062be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b0f      	cmp	r3, #15
 80062c4:	d916      	bls.n	80062f4 <UART_SetConfig+0x404>
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062cc:	d212      	bcs.n	80062f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f023 030f 	bic.w	r3, r3, #15
 80062d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	085b      	lsrs	r3, r3, #1
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	89fb      	ldrh	r3, [r7, #14]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	89fa      	ldrh	r2, [r7, #14]
 80062f0:	60da      	str	r2, [r3, #12]
 80062f2:	e04f      	b.n	8006394 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	77bb      	strb	r3, [r7, #30]
 80062f8:	e04c      	b.n	8006394 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062fa:	7ffb      	ldrb	r3, [r7, #31]
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d828      	bhi.n	8006352 <UART_SetConfig+0x462>
 8006300:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <UART_SetConfig+0x418>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	0800632d 	.word	0x0800632d
 800630c:	08006335 	.word	0x08006335
 8006310:	0800633d 	.word	0x0800633d
 8006314:	08006353 	.word	0x08006353
 8006318:	08006343 	.word	0x08006343
 800631c:	08006353 	.word	0x08006353
 8006320:	08006353 	.word	0x08006353
 8006324:	08006353 	.word	0x08006353
 8006328:	0800634b 	.word	0x0800634b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800632c:	f7fd fea4 	bl	8004078 <HAL_RCC_GetPCLK1Freq>
 8006330:	61b8      	str	r0, [r7, #24]
        break;
 8006332:	e013      	b.n	800635c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006334:	f7fd feb4 	bl	80040a0 <HAL_RCC_GetPCLK2Freq>
 8006338:	61b8      	str	r0, [r7, #24]
        break;
 800633a:	e00f      	b.n	800635c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800633c:	4b1d      	ldr	r3, [pc, #116]	; (80063b4 <UART_SetConfig+0x4c4>)
 800633e:	61bb      	str	r3, [r7, #24]
        break;
 8006340:	e00c      	b.n	800635c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006342:	f7fd fd87 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8006346:	61b8      	str	r0, [r7, #24]
        break;
 8006348:	e008      	b.n	800635c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800634a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800634e:	61bb      	str	r3, [r7, #24]
        break;
 8006350:	e004      	b.n	800635c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	77bb      	strb	r3, [r7, #30]
        break;
 800635a:	bf00      	nop
    }

    if (pclk != 0U)
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d018      	beq.n	8006394 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	085a      	lsrs	r2, r3, #1
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	441a      	add	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	fbb2 f3f3 	udiv	r3, r2, r3
 8006374:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	2b0f      	cmp	r3, #15
 800637a:	d909      	bls.n	8006390 <UART_SetConfig+0x4a0>
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006382:	d205      	bcs.n	8006390 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	b29a      	uxth	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60da      	str	r2, [r3, #12]
 800638e:	e001      	b.n	8006394 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80063a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	40007c00 	.word	0x40007c00
 80063b0:	40023800 	.word	0x40023800
 80063b4:	00f42400 	.word	0x00f42400

080063b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	f003 0310 	and.w	r3, r3, #16
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01a      	beq.n	80064ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064b6:	d10a      	bne.n	80064ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	605a      	str	r2, [r3, #4]
  }
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af02      	add	r7, sp, #8
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800650c:	f7fa ff8a 	bl	8001424 <HAL_GetTick>
 8006510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b08      	cmp	r3, #8
 800651e:	d10e      	bne.n	800653e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f81b 	bl	800656a <UART_WaitOnFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e011      	b.n	8006562 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2220      	movs	r2, #32
 8006542:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b09c      	sub	sp, #112	; 0x70
 800656e:	af00      	add	r7, sp, #0
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	603b      	str	r3, [r7, #0]
 8006576:	4613      	mov	r3, r2
 8006578:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657a:	e0a7      	b.n	80066cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800657e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006582:	f000 80a3 	beq.w	80066cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006586:	f7fa ff4d 	bl	8001424 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006592:	429a      	cmp	r2, r3
 8006594:	d302      	bcc.n	800659c <UART_WaitOnFlagUntilTimeout+0x32>
 8006596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006598:	2b00      	cmp	r3, #0
 800659a:	d13f      	bne.n	800661c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065b0:	667b      	str	r3, [r7, #100]	; 0x64
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e6      	bne.n	800659c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3308      	adds	r3, #8
 80065d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e0:	f023 0301 	bic.w	r3, r3, #1
 80065e4:	663b      	str	r3, [r7, #96]	; 0x60
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3308      	adds	r3, #8
 80065ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80065f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e5      	bne.n	80065ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2220      	movs	r2, #32
 8006606:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2220      	movs	r2, #32
 800660c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e068      	b.n	80066ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	d050      	beq.n	80066cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006638:	d148      	bne.n	80066cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006642:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006658:	66fb      	str	r3, [r7, #108]	; 0x6c
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006662:	637b      	str	r3, [r7, #52]	; 0x34
 8006664:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e6      	bne.n	8006644 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3308      	adds	r3, #8
 800667c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	613b      	str	r3, [r7, #16]
   return(result);
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	66bb      	str	r3, [r7, #104]	; 0x68
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3308      	adds	r3, #8
 8006694:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006696:	623a      	str	r2, [r7, #32]
 8006698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	69f9      	ldr	r1, [r7, #28]
 800669c:	6a3a      	ldr	r2, [r7, #32]
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e5      	bne.n	8006676 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e010      	b.n	80066ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	69da      	ldr	r2, [r3, #28]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	4013      	ands	r3, r2
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	429a      	cmp	r2, r3
 80066da:	bf0c      	ite	eq
 80066dc:	2301      	moveq	r3, #1
 80066de:	2300      	movne	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	f43f af48 	beq.w	800657c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3770      	adds	r7, #112	; 0x70
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
	...

080066f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b097      	sub	sp, #92	; 0x5c
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	4613      	mov	r3, r2
 8006704:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	88fa      	ldrh	r2, [r7, #6]
 8006710:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	88fa      	ldrh	r2, [r7, #6]
 8006718:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672a:	d10e      	bne.n	800674a <UART_Start_Receive_IT+0x52>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d105      	bne.n	8006740 <UART_Start_Receive_IT+0x48>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f240 12ff 	movw	r2, #511	; 0x1ff
 800673a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800673e:	e02d      	b.n	800679c <UART_Start_Receive_IT+0xa4>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	22ff      	movs	r2, #255	; 0xff
 8006744:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006748:	e028      	b.n	800679c <UART_Start_Receive_IT+0xa4>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10d      	bne.n	800676e <UART_Start_Receive_IT+0x76>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d104      	bne.n	8006764 <UART_Start_Receive_IT+0x6c>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	22ff      	movs	r2, #255	; 0xff
 800675e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006762:	e01b      	b.n	800679c <UART_Start_Receive_IT+0xa4>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	227f      	movs	r2, #127	; 0x7f
 8006768:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800676c:	e016      	b.n	800679c <UART_Start_Receive_IT+0xa4>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006776:	d10d      	bne.n	8006794 <UART_Start_Receive_IT+0x9c>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d104      	bne.n	800678a <UART_Start_Receive_IT+0x92>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	227f      	movs	r2, #127	; 0x7f
 8006784:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006788:	e008      	b.n	800679c <UART_Start_Receive_IT+0xa4>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	223f      	movs	r2, #63	; 0x3f
 800678e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006792:	e003      	b.n	800679c <UART_Start_Receive_IT+0xa4>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2222      	movs	r2, #34	; 0x22
 80067a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3308      	adds	r3, #8
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067be:	f043 0301 	orr.w	r3, r3, #1
 80067c2:	657b      	str	r3, [r7, #84]	; 0x54
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3308      	adds	r3, #8
 80067ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80067ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e5      	bne.n	80067ac <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e8:	d107      	bne.n	80067fa <UART_Start_Receive_IT+0x102>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d103      	bne.n	80067fa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4a21      	ldr	r2, [pc, #132]	; (800687c <UART_Start_Receive_IT+0x184>)
 80067f6:	669a      	str	r2, [r3, #104]	; 0x68
 80067f8:	e002      	b.n	8006800 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4a20      	ldr	r2, [pc, #128]	; (8006880 <UART_Start_Receive_IT+0x188>)
 80067fe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d019      	beq.n	800683c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800681c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006826:	637b      	str	r3, [r7, #52]	; 0x34
 8006828:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800682c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e6      	bne.n	8006808 <UART_Start_Receive_IT+0x110>
 800683a:	e018      	b.n	800686e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	613b      	str	r3, [r7, #16]
   return(result);
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f043 0320 	orr.w	r3, r3, #32
 8006850:	653b      	str	r3, [r7, #80]	; 0x50
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800685a:	623b      	str	r3, [r7, #32]
 800685c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	69f9      	ldr	r1, [r7, #28]
 8006860:	6a3a      	ldr	r2, [r7, #32]
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	61bb      	str	r3, [r7, #24]
   return(result);
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e6      	bne.n	800683c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	375c      	adds	r7, #92	; 0x5c
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	08006b33 	.word	0x08006b33
 8006880:	080069cd 	.word	0x080069cd

08006884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b095      	sub	sp, #84	; 0x54
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068aa:	643b      	str	r3, [r7, #64]	; 0x40
 80068ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e6      	bne.n	800688c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3308      	adds	r3, #8
 80068c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	e853 3f00 	ldrex	r3, [r3]
 80068cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	f023 0301 	bic.w	r3, r3, #1
 80068d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3308      	adds	r3, #8
 80068dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068e6:	e841 2300 	strex	r3, r2, [r1]
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1e5      	bne.n	80068be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d118      	bne.n	800692c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	e853 3f00 	ldrex	r3, [r3]
 8006906:	60bb      	str	r3, [r7, #8]
   return(result);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f023 0310 	bic.w	r3, r3, #16
 800690e:	647b      	str	r3, [r7, #68]	; 0x44
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	461a      	mov	r2, r3
 8006916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006918:	61bb      	str	r3, [r7, #24]
 800691a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6979      	ldr	r1, [r7, #20]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	e841 2300 	strex	r3, r2, [r1]
 8006924:	613b      	str	r3, [r7, #16]
   return(result);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e6      	bne.n	80068fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2220      	movs	r2, #32
 8006930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006940:	bf00      	nop
 8006942:	3754      	adds	r7, #84	; 0x54
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006958:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f7ff faaa 	bl	8005ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006970:	bf00      	nop
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	60bb      	str	r3, [r7, #8]
   return(result);
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006994:	61fb      	str	r3, [r7, #28]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	61bb      	str	r3, [r7, #24]
 80069a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	6979      	ldr	r1, [r7, #20]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	613b      	str	r3, [r7, #16]
   return(result);
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e6      	bne.n	8006980 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff fa76 	bl	8005eb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069c4:	bf00      	nop
 80069c6:	3720      	adds	r7, #32
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b096      	sub	sp, #88	; 0x58
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069da:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e4:	2b22      	cmp	r3, #34	; 0x22
 80069e6:	f040 8098 	bne.w	8006b1a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80069f8:	b2d9      	uxtb	r1, r3
 80069fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a04:	400a      	ands	r2, r1
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d17b      	bne.n	8006b2a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a46:	653b      	str	r3, [r7, #80]	; 0x50
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a50:	647b      	str	r3, [r7, #68]	; 0x44
 8006a52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a58:	e841 2300 	strex	r3, r2, [r1]
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e6      	bne.n	8006a32 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3308      	adds	r3, #8
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	623b      	str	r3, [r7, #32]
   return(result);
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	f023 0301 	bic.w	r3, r3, #1
 8006a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3308      	adds	r3, #8
 8006a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a84:	633a      	str	r2, [r7, #48]	; 0x30
 8006a86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a8c:	e841 2300 	strex	r3, r2, [r1]
 8006a90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e5      	bne.n	8006a64 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d12e      	bne.n	8006b12 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0310 	bic.w	r3, r3, #16
 8006ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ad8:	61fb      	str	r3, [r7, #28]
 8006ada:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	69b9      	ldr	r1, [r7, #24]
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e6      	bne.n	8006aba <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	f003 0310 	and.w	r3, r3, #16
 8006af6:	2b10      	cmp	r3, #16
 8006af8:	d103      	bne.n	8006b02 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2210      	movs	r2, #16
 8006b00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff f9e4 	bl	8005ed8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b10:	e00b      	b.n	8006b2a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fa f87e 	bl	8000c14 <HAL_UART_RxCpltCallback>
}
 8006b18:	e007      	b.n	8006b2a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f042 0208 	orr.w	r2, r2, #8
 8006b28:	619a      	str	r2, [r3, #24]
}
 8006b2a:	bf00      	nop
 8006b2c:	3758      	adds	r7, #88	; 0x58
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b096      	sub	sp, #88	; 0x58
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b4a:	2b22      	cmp	r3, #34	; 0x22
 8006b4c:	f040 8098 	bne.w	8006c80 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b60:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006b64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b68:	4013      	ands	r3, r2
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b6e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b74:	1c9a      	adds	r2, r3, #2
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d17b      	bne.n	8006c90 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb6:	643b      	str	r3, [r7, #64]	; 0x40
 8006bb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e6      	bne.n	8006b98 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3308      	adds	r3, #8
 8006bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	e853 3f00 	ldrex	r3, [r3]
 8006bd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f023 0301 	bic.w	r3, r3, #1
 8006be0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3308      	adds	r3, #8
 8006be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bf2:	e841 2300 	strex	r3, r2, [r1]
 8006bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1e5      	bne.n	8006bca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d12e      	bne.n	8006c78 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f023 0310 	bic.w	r3, r3, #16
 8006c34:	647b      	str	r3, [r7, #68]	; 0x44
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6979      	ldr	r1, [r7, #20]
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e6      	bne.n	8006c20 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b10      	cmp	r3, #16
 8006c5e:	d103      	bne.n	8006c68 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2210      	movs	r2, #16
 8006c66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff f931 	bl	8005ed8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c76:	e00b      	b.n	8006c90 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7f9 ffcb 	bl	8000c14 <HAL_UART_RxCpltCallback>
}
 8006c7e:	e007      	b.n	8006c90 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	699a      	ldr	r2, [r3, #24]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0208 	orr.w	r2, r2, #8
 8006c8e:	619a      	str	r2, [r3, #24]
}
 8006c90:	bf00      	nop
 8006c92:	3758      	adds	r7, #88	; 0x58
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c98:	b084      	sub	sp, #16
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	f107 001c 	add.w	r0, r7, #28
 8006ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d120      	bne.n	8006cf2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68da      	ldr	r2, [r3, #12]
 8006cc0:	4b20      	ldr	r3, [pc, #128]	; (8006d44 <USB_CoreInit+0xac>)
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d105      	bne.n	8006ce6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 fbee 	bl	80084c8 <USB_CoreReset>
 8006cec:	4603      	mov	r3, r0
 8006cee:	73fb      	strb	r3, [r7, #15]
 8006cf0:	e010      	b.n	8006d14 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 fbe2 	bl	80084c8 <USB_CoreReset>
 8006d04:	4603      	mov	r3, r0
 8006d06:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d10b      	bne.n	8006d32 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f043 0206 	orr.w	r2, r3, #6
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f043 0220 	orr.w	r2, r3, #32
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d3e:	b004      	add	sp, #16
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	ffbdffbf 	.word	0xffbdffbf

08006d48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	4613      	mov	r3, r2
 8006d54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d165      	bne.n	8006e28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4a41      	ldr	r2, [pc, #260]	; (8006e64 <USB_SetTurnaroundTime+0x11c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d906      	bls.n	8006d72 <USB_SetTurnaroundTime+0x2a>
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4a40      	ldr	r2, [pc, #256]	; (8006e68 <USB_SetTurnaroundTime+0x120>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d202      	bcs.n	8006d72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d6c:	230f      	movs	r3, #15
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	e062      	b.n	8006e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	4a3c      	ldr	r2, [pc, #240]	; (8006e68 <USB_SetTurnaroundTime+0x120>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d306      	bcc.n	8006d88 <USB_SetTurnaroundTime+0x40>
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	4a3b      	ldr	r2, [pc, #236]	; (8006e6c <USB_SetTurnaroundTime+0x124>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d202      	bcs.n	8006d88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d82:	230e      	movs	r3, #14
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	e057      	b.n	8006e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4a38      	ldr	r2, [pc, #224]	; (8006e6c <USB_SetTurnaroundTime+0x124>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d306      	bcc.n	8006d9e <USB_SetTurnaroundTime+0x56>
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4a37      	ldr	r2, [pc, #220]	; (8006e70 <USB_SetTurnaroundTime+0x128>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d202      	bcs.n	8006d9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d98:	230d      	movs	r3, #13
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	e04c      	b.n	8006e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	4a33      	ldr	r2, [pc, #204]	; (8006e70 <USB_SetTurnaroundTime+0x128>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d306      	bcc.n	8006db4 <USB_SetTurnaroundTime+0x6c>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	4a32      	ldr	r2, [pc, #200]	; (8006e74 <USB_SetTurnaroundTime+0x12c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d802      	bhi.n	8006db4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006dae:	230c      	movs	r3, #12
 8006db0:	617b      	str	r3, [r7, #20]
 8006db2:	e041      	b.n	8006e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	4a2f      	ldr	r2, [pc, #188]	; (8006e74 <USB_SetTurnaroundTime+0x12c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d906      	bls.n	8006dca <USB_SetTurnaroundTime+0x82>
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4a2e      	ldr	r2, [pc, #184]	; (8006e78 <USB_SetTurnaroundTime+0x130>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d802      	bhi.n	8006dca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006dc4:	230b      	movs	r3, #11
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	e036      	b.n	8006e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	4a2a      	ldr	r2, [pc, #168]	; (8006e78 <USB_SetTurnaroundTime+0x130>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d906      	bls.n	8006de0 <USB_SetTurnaroundTime+0x98>
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	4a29      	ldr	r2, [pc, #164]	; (8006e7c <USB_SetTurnaroundTime+0x134>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d802      	bhi.n	8006de0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006dda:	230a      	movs	r3, #10
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	e02b      	b.n	8006e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4a26      	ldr	r2, [pc, #152]	; (8006e7c <USB_SetTurnaroundTime+0x134>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d906      	bls.n	8006df6 <USB_SetTurnaroundTime+0xae>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4a25      	ldr	r2, [pc, #148]	; (8006e80 <USB_SetTurnaroundTime+0x138>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d202      	bcs.n	8006df6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006df0:	2309      	movs	r3, #9
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	e020      	b.n	8006e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	4a21      	ldr	r2, [pc, #132]	; (8006e80 <USB_SetTurnaroundTime+0x138>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d306      	bcc.n	8006e0c <USB_SetTurnaroundTime+0xc4>
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	4a20      	ldr	r2, [pc, #128]	; (8006e84 <USB_SetTurnaroundTime+0x13c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d802      	bhi.n	8006e0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006e06:	2308      	movs	r3, #8
 8006e08:	617b      	str	r3, [r7, #20]
 8006e0a:	e015      	b.n	8006e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	4a1d      	ldr	r2, [pc, #116]	; (8006e84 <USB_SetTurnaroundTime+0x13c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d906      	bls.n	8006e22 <USB_SetTurnaroundTime+0xda>
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	4a1c      	ldr	r2, [pc, #112]	; (8006e88 <USB_SetTurnaroundTime+0x140>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d202      	bcs.n	8006e22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006e1c:	2307      	movs	r3, #7
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	e00a      	b.n	8006e38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006e22:	2306      	movs	r3, #6
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	e007      	b.n	8006e38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006e28:	79fb      	ldrb	r3, [r7, #7]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006e2e:	2309      	movs	r3, #9
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	e001      	b.n	8006e38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006e34:	2309      	movs	r3, #9
 8006e36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	68da      	ldr	r2, [r3, #12]
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	029b      	lsls	r3, r3, #10
 8006e4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006e50:	431a      	orrs	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	00d8acbf 	.word	0x00d8acbf
 8006e68:	00e4e1c0 	.word	0x00e4e1c0
 8006e6c:	00f42400 	.word	0x00f42400
 8006e70:	01067380 	.word	0x01067380
 8006e74:	011a499f 	.word	0x011a499f
 8006e78:	01312cff 	.word	0x01312cff
 8006e7c:	014ca43f 	.word	0x014ca43f
 8006e80:	016e3600 	.word	0x016e3600
 8006e84:	01a6ab1f 	.word	0x01a6ab1f
 8006e88:	01e84800 	.word	0x01e84800

08006e8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f043 0201 	orr.w	r2, r3, #1
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f023 0201 	bic.w	r2, r3, #1
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006eec:	78fb      	ldrb	r3, [r7, #3]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d115      	bne.n	8006f1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006efe:	2001      	movs	r0, #1
 8006f00:	f7fa fa9c 	bl	800143c <HAL_Delay>
      ms++;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3301      	adds	r3, #1
 8006f08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 fa4b 	bl	80083a6 <USB_GetMode>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d01e      	beq.n	8006f54 <USB_SetCurrentMode+0x84>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b31      	cmp	r3, #49	; 0x31
 8006f1a:	d9f0      	bls.n	8006efe <USB_SetCurrentMode+0x2e>
 8006f1c:	e01a      	b.n	8006f54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f1e:	78fb      	ldrb	r3, [r7, #3]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d115      	bne.n	8006f50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f30:	2001      	movs	r0, #1
 8006f32:	f7fa fa83 	bl	800143c <HAL_Delay>
      ms++;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f001 fa32 	bl	80083a6 <USB_GetMode>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d005      	beq.n	8006f54 <USB_SetCurrentMode+0x84>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b31      	cmp	r3, #49	; 0x31
 8006f4c:	d9f0      	bls.n	8006f30 <USB_SetCurrentMode+0x60>
 8006f4e:	e001      	b.n	8006f54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e005      	b.n	8006f60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b32      	cmp	r3, #50	; 0x32
 8006f58:	d101      	bne.n	8006f5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f68:	b084      	sub	sp, #16
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b086      	sub	sp, #24
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f82:	2300      	movs	r3, #0
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	e009      	b.n	8006f9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	3340      	adds	r3, #64	; 0x40
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	2200      	movs	r2, #0
 8006f94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	613b      	str	r3, [r7, #16]
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	2b0e      	cmp	r3, #14
 8006fa0:	d9f2      	bls.n	8006f88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d11c      	bne.n	8006fe2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fb6:	f043 0302 	orr.w	r3, r3, #2
 8006fba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	e005      	b.n	8006fee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007000:	4619      	mov	r1, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007008:	461a      	mov	r2, r3
 800700a:	680b      	ldr	r3, [r1, #0]
 800700c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	2b01      	cmp	r3, #1
 8007012:	d10c      	bne.n	800702e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d104      	bne.n	8007024 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800701a:	2100      	movs	r1, #0
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f965 	bl	80072ec <USB_SetDevSpeed>
 8007022:	e008      	b.n	8007036 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007024:	2101      	movs	r1, #1
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f960 	bl	80072ec <USB_SetDevSpeed>
 800702c:	e003      	b.n	8007036 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800702e:	2103      	movs	r1, #3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f95b 	bl	80072ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007036:	2110      	movs	r1, #16
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f8f3 	bl	8007224 <USB_FlushTxFifo>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f91f 	bl	800728c <USB_FlushRxFifo>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705e:	461a      	mov	r2, r3
 8007060:	2300      	movs	r3, #0
 8007062:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706a:	461a      	mov	r2, r3
 800706c:	2300      	movs	r3, #0
 800706e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007076:	461a      	mov	r2, r3
 8007078:	2300      	movs	r3, #0
 800707a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]
 8007080:	e043      	b.n	800710a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007098:	d118      	bne.n	80070cc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10a      	bne.n	80070b6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ac:	461a      	mov	r2, r3
 80070ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	e013      	b.n	80070de <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c2:	461a      	mov	r2, r3
 80070c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	e008      	b.n	80070de <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d8:	461a      	mov	r2, r3
 80070da:	2300      	movs	r3, #0
 80070dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ea:	461a      	mov	r2, r3
 80070ec:	2300      	movs	r3, #0
 80070ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fc:	461a      	mov	r2, r3
 80070fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007102:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	3301      	adds	r3, #1
 8007108:	613b      	str	r3, [r7, #16]
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	429a      	cmp	r2, r3
 8007110:	d3b7      	bcc.n	8007082 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007112:	2300      	movs	r3, #0
 8007114:	613b      	str	r3, [r7, #16]
 8007116:	e043      	b.n	80071a0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800712a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800712e:	d118      	bne.n	8007162 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007142:	461a      	mov	r2, r3
 8007144:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	e013      	b.n	8007174 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007158:	461a      	mov	r2, r3
 800715a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e008      	b.n	8007174 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716e:	461a      	mov	r2, r3
 8007170:	2300      	movs	r3, #0
 8007172:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007180:	461a      	mov	r2, r3
 8007182:	2300      	movs	r3, #0
 8007184:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007192:	461a      	mov	r2, r3
 8007194:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007198:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	3301      	adds	r3, #1
 800719e:	613b      	str	r3, [r7, #16]
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d3b7      	bcc.n	8007118 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d105      	bne.n	80071dc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	f043 0210 	orr.w	r2, r3, #16
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	699a      	ldr	r2, [r3, #24]
 80071e0:	4b0e      	ldr	r3, [pc, #56]	; (800721c <USB_DevInit+0x2b4>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d005      	beq.n	80071fa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	f043 0208 	orr.w	r2, r3, #8
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d105      	bne.n	800720c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699a      	ldr	r2, [r3, #24]
 8007204:	4b06      	ldr	r3, [pc, #24]	; (8007220 <USB_DevInit+0x2b8>)
 8007206:	4313      	orrs	r3, r2
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800720c:	7dfb      	ldrb	r3, [r7, #23]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007218:	b004      	add	sp, #16
 800721a:	4770      	bx	lr
 800721c:	803c3800 	.word	0x803c3800
 8007220:	40000004 	.word	0x40000004

08007224 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3301      	adds	r3, #1
 8007236:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4a13      	ldr	r2, [pc, #76]	; (8007288 <USB_FlushTxFifo+0x64>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d901      	bls.n	8007244 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e01b      	b.n	800727c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	daf2      	bge.n	8007232 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	019b      	lsls	r3, r3, #6
 8007254:	f043 0220 	orr.w	r2, r3, #32
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3301      	adds	r3, #1
 8007260:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4a08      	ldr	r2, [pc, #32]	; (8007288 <USB_FlushTxFifo+0x64>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d901      	bls.n	800726e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e006      	b.n	800727c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	f003 0320 	and.w	r3, r3, #32
 8007276:	2b20      	cmp	r3, #32
 8007278:	d0f0      	beq.n	800725c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	00030d40 	.word	0x00030d40

0800728c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4a11      	ldr	r2, [pc, #68]	; (80072e8 <USB_FlushRxFifo+0x5c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d901      	bls.n	80072aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e018      	b.n	80072dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	daf2      	bge.n	8007298 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2210      	movs	r2, #16
 80072ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4a08      	ldr	r2, [pc, #32]	; (80072e8 <USB_FlushRxFifo+0x5c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d901      	bls.n	80072ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e006      	b.n	80072dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f003 0310 	and.w	r3, r3, #16
 80072d6:	2b10      	cmp	r3, #16
 80072d8:	d0f0      	beq.n	80072bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	00030d40 	.word	0x00030d40

080072ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	78fb      	ldrb	r3, [r7, #3]
 8007306:	68f9      	ldr	r1, [r7, #12]
 8007308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800730c:	4313      	orrs	r3, r2
 800730e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800731e:	b480      	push	{r7}
 8007320:	b087      	sub	sp, #28
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f003 0306 	and.w	r3, r3, #6
 8007336:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d102      	bne.n	8007344 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800733e:	2300      	movs	r3, #0
 8007340:	75fb      	strb	r3, [r7, #23]
 8007342:	e00a      	b.n	800735a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b02      	cmp	r3, #2
 8007348:	d002      	beq.n	8007350 <USB_GetDevSpeed+0x32>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b06      	cmp	r3, #6
 800734e:	d102      	bne.n	8007356 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007350:	2302      	movs	r3, #2
 8007352:	75fb      	strb	r3, [r7, #23]
 8007354:	e001      	b.n	800735a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007356:	230f      	movs	r3, #15
 8007358:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
}
 800735c:	4618      	mov	r0, r3
 800735e:	371c      	adds	r7, #28
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d139      	bne.n	80073f8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738a:	69da      	ldr	r2, [r3, #28]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	2101      	movs	r1, #1
 8007396:	fa01 f303 	lsl.w	r3, r1, r3
 800739a:	b29b      	uxth	r3, r3
 800739c:	68f9      	ldr	r1, [r7, #12]
 800739e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073a2:	4313      	orrs	r3, r2
 80073a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d153      	bne.n	8007464 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	791b      	ldrb	r3, [r3, #4]
 80073d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	059b      	lsls	r3, r3, #22
 80073de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073e0:	431a      	orrs	r2, r3
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	0159      	lsls	r1, r3, #5
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	440b      	add	r3, r1
 80073ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ee:	4619      	mov	r1, r3
 80073f0:	4b20      	ldr	r3, [pc, #128]	; (8007474 <USB_ActivateEndpoint+0x10c>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	600b      	str	r3, [r1, #0]
 80073f6:	e035      	b.n	8007464 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fe:	69da      	ldr	r2, [r3, #28]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	2101      	movs	r1, #1
 800740a:	fa01 f303 	lsl.w	r3, r1, r3
 800740e:	041b      	lsls	r3, r3, #16
 8007410:	68f9      	ldr	r1, [r7, #12]
 8007412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007416:	4313      	orrs	r3, r2
 8007418:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d119      	bne.n	8007464 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	791b      	ldrb	r3, [r3, #4]
 800744a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800744c:	430b      	orrs	r3, r1
 800744e:	431a      	orrs	r2, r3
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	0159      	lsls	r1, r3, #5
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	440b      	add	r3, r1
 8007458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745c:	4619      	mov	r1, r3
 800745e:	4b05      	ldr	r3, [pc, #20]	; (8007474 <USB_ActivateEndpoint+0x10c>)
 8007460:	4313      	orrs	r3, r2
 8007462:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	10008000 	.word	0x10008000

08007478 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d161      	bne.n	8007558 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074aa:	d11f      	bne.n	80074ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	0151      	lsls	r1, r2, #5
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	440a      	add	r2, r1
 80074c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	0151      	lsls	r1, r2, #5
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	440a      	add	r2, r1
 80074e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	f003 030f 	and.w	r3, r3, #15
 80074fc:	2101      	movs	r1, #1
 80074fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007502:	b29b      	uxth	r3, r3
 8007504:	43db      	mvns	r3, r3
 8007506:	68f9      	ldr	r1, [r7, #12]
 8007508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800750c:	4013      	ands	r3, r2
 800750e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007516:	69da      	ldr	r2, [r3, #28]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	f003 030f 	and.w	r3, r3, #15
 8007520:	2101      	movs	r1, #1
 8007522:	fa01 f303 	lsl.w	r3, r1, r3
 8007526:	b29b      	uxth	r3, r3
 8007528:	43db      	mvns	r3, r3
 800752a:	68f9      	ldr	r1, [r7, #12]
 800752c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007530:	4013      	ands	r3, r2
 8007532:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	0159      	lsls	r1, r3, #5
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	440b      	add	r3, r1
 800754a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754e:	4619      	mov	r1, r3
 8007550:	4b35      	ldr	r3, [pc, #212]	; (8007628 <USB_DeactivateEndpoint+0x1b0>)
 8007552:	4013      	ands	r3, r2
 8007554:	600b      	str	r3, [r1, #0]
 8007556:	e060      	b.n	800761a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800756a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800756e:	d11f      	bne.n	80075b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	0151      	lsls	r1, r2, #5
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	440a      	add	r2, r1
 8007586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800758a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800758e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	f003 030f 	and.w	r3, r3, #15
 80075c0:	2101      	movs	r1, #1
 80075c2:	fa01 f303 	lsl.w	r3, r1, r3
 80075c6:	041b      	lsls	r3, r3, #16
 80075c8:	43db      	mvns	r3, r3
 80075ca:	68f9      	ldr	r1, [r7, #12]
 80075cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075d0:	4013      	ands	r3, r2
 80075d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075da:	69da      	ldr	r2, [r3, #28]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	f003 030f 	and.w	r3, r3, #15
 80075e4:	2101      	movs	r1, #1
 80075e6:	fa01 f303 	lsl.w	r3, r1, r3
 80075ea:	041b      	lsls	r3, r3, #16
 80075ec:	43db      	mvns	r3, r3
 80075ee:	68f9      	ldr	r1, [r7, #12]
 80075f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075f4:	4013      	ands	r3, r2
 80075f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	0159      	lsls	r1, r3, #5
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	440b      	add	r3, r1
 800760e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007612:	4619      	mov	r1, r3
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <USB_DeactivateEndpoint+0x1b4>)
 8007616:	4013      	ands	r3, r2
 8007618:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	ec337800 	.word	0xec337800
 800762c:	eff37800 	.word	0xeff37800

08007630 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	; 0x28
 8007634:	af02      	add	r7, sp, #8
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	785b      	ldrb	r3, [r3, #1]
 800764c:	2b01      	cmp	r3, #1
 800764e:	f040 8163 	bne.w	8007918 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d132      	bne.n	80076c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007666:	691a      	ldr	r2, [r3, #16]
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	0159      	lsls	r1, r3, #5
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	440b      	add	r3, r1
 8007670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007674:	4619      	mov	r1, r3
 8007676:	4ba5      	ldr	r3, [pc, #660]	; (800790c <USB_EPStartXfer+0x2dc>)
 8007678:	4013      	ands	r3, r2
 800767a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	440a      	add	r2, r1
 8007692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800769a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	0159      	lsls	r1, r3, #5
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	440b      	add	r3, r1
 80076b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b6:	4619      	mov	r1, r3
 80076b8:	4b95      	ldr	r3, [pc, #596]	; (8007910 <USB_EPStartXfer+0x2e0>)
 80076ba:	4013      	ands	r3, r2
 80076bc:	610b      	str	r3, [r1, #16]
 80076be:	e074      	b.n	80077aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076cc:	691a      	ldr	r2, [r3, #16]
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	0159      	lsls	r1, r3, #5
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	440b      	add	r3, r1
 80076d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076da:	4619      	mov	r1, r3
 80076dc:	4b8c      	ldr	r3, [pc, #560]	; (8007910 <USB_EPStartXfer+0x2e0>)
 80076de:	4013      	ands	r3, r2
 80076e0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ee:	691a      	ldr	r2, [r3, #16]
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	0159      	lsls	r1, r3, #5
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	440b      	add	r3, r1
 80076f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fc:	4619      	mov	r1, r3
 80076fe:	4b83      	ldr	r3, [pc, #524]	; (800790c <USB_EPStartXfer+0x2dc>)
 8007700:	4013      	ands	r3, r2
 8007702:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007710:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	6999      	ldr	r1, [r3, #24]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	440b      	add	r3, r1
 800771c:	1e59      	subs	r1, r3, #1
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	fbb1 f3f3 	udiv	r3, r1, r3
 8007726:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007728:	4b7a      	ldr	r3, [pc, #488]	; (8007914 <USB_EPStartXfer+0x2e4>)
 800772a:	400b      	ands	r3, r1
 800772c:	69b9      	ldr	r1, [r7, #24]
 800772e:	0148      	lsls	r0, r1, #5
 8007730:	69f9      	ldr	r1, [r7, #28]
 8007732:	4401      	add	r1, r0
 8007734:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007738:	4313      	orrs	r3, r2
 800773a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007748:	691a      	ldr	r2, [r3, #16]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007752:	69b9      	ldr	r1, [r7, #24]
 8007754:	0148      	lsls	r0, r1, #5
 8007756:	69f9      	ldr	r1, [r7, #28]
 8007758:	4401      	add	r1, r0
 800775a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800775e:	4313      	orrs	r3, r2
 8007760:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	791b      	ldrb	r3, [r3, #4]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d11f      	bne.n	80077aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	4413      	add	r3, r2
 8007772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	69ba      	ldr	r2, [r7, #24]
 800777a:	0151      	lsls	r1, r2, #5
 800777c:	69fa      	ldr	r2, [r7, #28]
 800777e:	440a      	add	r2, r1
 8007780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007784:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007788:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	0151      	lsls	r1, r2, #5
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	440a      	add	r2, r1
 80077a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80077aa:	79fb      	ldrb	r3, [r7, #7]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d14b      	bne.n	8007848 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d009      	beq.n	80077cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	015a      	lsls	r2, r3, #5
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	4413      	add	r3, r2
 80077c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c4:	461a      	mov	r2, r3
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	791b      	ldrb	r3, [r3, #4]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d128      	bne.n	8007826 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d110      	bne.n	8007806 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	0151      	lsls	r1, r2, #5
 80077f6:	69fa      	ldr	r2, [r7, #28]
 80077f8:	440a      	add	r2, r1
 80077fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	e00f      	b.n	8007826 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	0151      	lsls	r1, r2, #5
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	440a      	add	r2, r1
 800781c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007824:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	0151      	lsls	r1, r2, #5
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	440a      	add	r2, r1
 800783c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007840:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	e137      	b.n	8007ab8 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	0151      	lsls	r1, r2, #5
 800785a:	69fa      	ldr	r2, [r7, #28]
 800785c:	440a      	add	r2, r1
 800785e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007862:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007866:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	791b      	ldrb	r3, [r3, #4]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d015      	beq.n	800789c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	f000 811f 	beq.w	8007ab8 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	f003 030f 	and.w	r3, r3, #15
 800788a:	2101      	movs	r1, #1
 800788c:	fa01 f303 	lsl.w	r3, r1, r3
 8007890:	69f9      	ldr	r1, [r7, #28]
 8007892:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007896:	4313      	orrs	r3, r2
 8007898:	634b      	str	r3, [r1, #52]	; 0x34
 800789a:	e10d      	b.n	8007ab8 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d110      	bne.n	80078ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	69fa      	ldr	r2, [r7, #28]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	e00f      	b.n	80078ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	6919      	ldr	r1, [r3, #16]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	781a      	ldrb	r2, [r3, #0]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	b298      	uxth	r0, r3
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	4603      	mov	r3, r0
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 faea 	bl	8007edc <USB_WritePacket>
 8007908:	e0d6      	b.n	8007ab8 <USB_EPStartXfer+0x488>
 800790a:	bf00      	nop
 800790c:	e007ffff 	.word	0xe007ffff
 8007910:	fff80000 	.word	0xfff80000
 8007914:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007924:	691a      	ldr	r2, [r3, #16]
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	0159      	lsls	r1, r3, #5
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	440b      	add	r3, r1
 800792e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007932:	4619      	mov	r1, r3
 8007934:	4b63      	ldr	r3, [pc, #396]	; (8007ac4 <USB_EPStartXfer+0x494>)
 8007936:	4013      	ands	r3, r2
 8007938:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	0159      	lsls	r1, r3, #5
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	440b      	add	r3, r1
 8007950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007954:	4619      	mov	r1, r3
 8007956:	4b5c      	ldr	r3, [pc, #368]	; (8007ac8 <USB_EPStartXfer+0x498>)
 8007958:	4013      	ands	r3, r2
 800795a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d123      	bne.n	80079ac <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007970:	691a      	ldr	r2, [r3, #16]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800797a:	69b9      	ldr	r1, [r7, #24]
 800797c:	0148      	lsls	r0, r1, #5
 800797e:	69f9      	ldr	r1, [r7, #28]
 8007980:	4401      	add	r1, r0
 8007982:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007986:	4313      	orrs	r3, r2
 8007988:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	0151      	lsls	r1, r2, #5
 800799c:	69fa      	ldr	r2, [r7, #28]
 800799e:	440a      	add	r2, r1
 80079a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079a8:	6113      	str	r3, [r2, #16]
 80079aa:	e037      	b.n	8007a1c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	699a      	ldr	r2, [r3, #24]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	4413      	add	r3, r2
 80079b6:	1e5a      	subs	r2, r3, #1
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	8afa      	ldrh	r2, [r7, #22]
 80079c8:	fb03 f202 	mul.w	r2, r3, r2
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079dc:	691a      	ldr	r2, [r3, #16]
 80079de:	8afb      	ldrh	r3, [r7, #22]
 80079e0:	04d9      	lsls	r1, r3, #19
 80079e2:	4b3a      	ldr	r3, [pc, #232]	; (8007acc <USB_EPStartXfer+0x49c>)
 80079e4:	400b      	ands	r3, r1
 80079e6:	69b9      	ldr	r1, [r7, #24]
 80079e8:	0148      	lsls	r0, r1, #5
 80079ea:	69f9      	ldr	r1, [r7, #28]
 80079ec:	4401      	add	r1, r0
 80079ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079f2:	4313      	orrs	r3, r2
 80079f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a02:	691a      	ldr	r2, [r3, #16]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a0c:	69b9      	ldr	r1, [r7, #24]
 8007a0e:	0148      	lsls	r0, r1, #5
 8007a10:	69f9      	ldr	r1, [r7, #28]
 8007a12:	4401      	add	r1, r0
 8007a14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d10d      	bne.n	8007a3e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d009      	beq.n	8007a3e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	6919      	ldr	r1, [r3, #16]
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3a:	460a      	mov	r2, r1
 8007a3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	791b      	ldrb	r3, [r3, #4]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d128      	bne.n	8007a98 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d110      	bne.n	8007a78 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	0151      	lsls	r1, r2, #5
 8007a68:	69fa      	ldr	r2, [r7, #28]
 8007a6a:	440a      	add	r2, r1
 8007a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	e00f      	b.n	8007a98 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	0151      	lsls	r1, r2, #5
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	0151      	lsls	r1, r2, #5
 8007aaa:	69fa      	ldr	r2, [r7, #28]
 8007aac:	440a      	add	r2, r1
 8007aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ab2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ab6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3720      	adds	r7, #32
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	fff80000 	.word	0xfff80000
 8007ac8:	e007ffff 	.word	0xe007ffff
 8007acc:	1ff80000 	.word	0x1ff80000

08007ad0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	4613      	mov	r3, r2
 8007adc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	f040 80ce 	bne.w	8007c8e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d132      	bne.n	8007b60 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b06:	691a      	ldr	r2, [r3, #16]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	0159      	lsls	r1, r3, #5
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	440b      	add	r3, r1
 8007b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b14:	4619      	mov	r1, r3
 8007b16:	4b9a      	ldr	r3, [pc, #616]	; (8007d80 <USB_EP0StartXfer+0x2b0>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	0151      	lsls	r1, r2, #5
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	440a      	add	r2, r1
 8007b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b48:	691a      	ldr	r2, [r3, #16]
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	0159      	lsls	r1, r3, #5
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	440b      	add	r3, r1
 8007b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b56:	4619      	mov	r1, r3
 8007b58:	4b8a      	ldr	r3, [pc, #552]	; (8007d84 <USB_EP0StartXfer+0x2b4>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	610b      	str	r3, [r1, #16]
 8007b5e:	e04e      	b.n	8007bfe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6c:	691a      	ldr	r2, [r3, #16]
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	0159      	lsls	r1, r3, #5
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	440b      	add	r3, r1
 8007b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4b81      	ldr	r3, [pc, #516]	; (8007d84 <USB_EP0StartXfer+0x2b4>)
 8007b7e:	4013      	ands	r3, r2
 8007b80:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8e:	691a      	ldr	r2, [r3, #16]
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	0159      	lsls	r1, r3, #5
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	440b      	add	r3, r1
 8007b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4b78      	ldr	r3, [pc, #480]	; (8007d80 <USB_EP0StartXfer+0x2b0>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	699a      	ldr	r2, [r3, #24]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d903      	bls.n	8007bb8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	68da      	ldr	r2, [r3, #12]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	0151      	lsls	r1, r2, #5
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	440a      	add	r2, r1
 8007bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be4:	691a      	ldr	r2, [r3, #16]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bee:	6939      	ldr	r1, [r7, #16]
 8007bf0:	0148      	lsls	r0, r1, #5
 8007bf2:	6979      	ldr	r1, [r7, #20]
 8007bf4:	4401      	add	r1, r0
 8007bf6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d11e      	bne.n	8007c42 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d009      	beq.n	8007c20 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c18:	461a      	mov	r2, r3
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	0151      	lsls	r1, r2, #5
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	440a      	add	r2, r1
 8007c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c3e:	6013      	str	r3, [r2, #0]
 8007c40:	e097      	b.n	8007d72 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	0151      	lsls	r1, r2, #5
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	440a      	add	r2, r1
 8007c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c60:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 8083 	beq.w	8007d72 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c82:	6979      	ldr	r1, [r7, #20]
 8007c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	634b      	str	r3, [r1, #52]	; 0x34
 8007c8c:	e071      	b.n	8007d72 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9a:	691a      	ldr	r2, [r3, #16]
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	0159      	lsls	r1, r3, #5
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	440b      	add	r3, r1
 8007ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4b36      	ldr	r3, [pc, #216]	; (8007d84 <USB_EP0StartXfer+0x2b4>)
 8007cac:	4013      	ands	r3, r2
 8007cae:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbc:	691a      	ldr	r2, [r3, #16]
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	0159      	lsls	r1, r3, #5
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	440b      	add	r3, r1
 8007cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4b2c      	ldr	r3, [pc, #176]	; (8007d80 <USB_EP0StartXfer+0x2b0>)
 8007cce:	4013      	ands	r3, r2
 8007cd0:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	0151      	lsls	r1, r2, #5
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	440a      	add	r2, r1
 8007d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d16:	691a      	ldr	r2, [r3, #16]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d20:	6939      	ldr	r1, [r7, #16]
 8007d22:	0148      	lsls	r0, r1, #5
 8007d24:	6979      	ldr	r1, [r7, #20]
 8007d26:	4401      	add	r1, r0
 8007d28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d10d      	bne.n	8007d52 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d009      	beq.n	8007d52 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	6919      	ldr	r1, [r3, #16]
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4e:	460a      	mov	r2, r1
 8007d50:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	0151      	lsls	r1, r2, #5
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	440a      	add	r2, r1
 8007d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	371c      	adds	r7, #28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	e007ffff 	.word	0xe007ffff
 8007d84:	fff80000 	.word	0xfff80000

08007d88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	785b      	ldrb	r3, [r3, #1]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d14a      	bne.n	8007e3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dbe:	f040 8086 	bne.w	8007ece <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	7812      	ldrb	r2, [r2, #0]
 8007dd6:	0151      	lsls	r1, r2, #5
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	440a      	add	r2, r1
 8007ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007de4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	7812      	ldrb	r2, [r2, #0]
 8007dfa:	0151      	lsls	r1, r2, #5
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	440a      	add	r2, r1
 8007e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d902      	bls.n	8007e20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e1e:	e056      	b.n	8007ece <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e38:	d0e7      	beq.n	8007e0a <USB_EPStopXfer+0x82>
 8007e3a:	e048      	b.n	8007ece <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e54:	d13b      	bne.n	8007ece <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	015a      	lsls	r2, r3, #5
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	7812      	ldrb	r2, [r2, #0]
 8007e6a:	0151      	lsls	r1, r2, #5
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	440a      	add	r2, r1
 8007e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	7812      	ldrb	r2, [r2, #0]
 8007e8e:	0151      	lsls	r1, r2, #5
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	440a      	add	r2, r1
 8007e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f242 7210 	movw	r2, #10000	; 0x2710
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d902      	bls.n	8007eb4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8007eb2:	e00c      	b.n	8007ece <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ecc:	d0e7      	beq.n	8007e9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	371c      	adds	r7, #28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b089      	sub	sp, #36	; 0x24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	461a      	mov	r2, r3
 8007eea:	460b      	mov	r3, r1
 8007eec:	71fb      	strb	r3, [r7, #7]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007efa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d123      	bne.n	8007f4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f02:	88bb      	ldrh	r3, [r7, #4]
 8007f04:	3303      	adds	r3, #3
 8007f06:	089b      	lsrs	r3, r3, #2
 8007f08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	61bb      	str	r3, [r7, #24]
 8007f0e:	e018      	b.n	8007f42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	031a      	lsls	r2, r3, #12
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	3301      	adds	r3, #1
 8007f28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	3301      	adds	r3, #1
 8007f34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	61bb      	str	r3, [r7, #24]
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d3e2      	bcc.n	8007f10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3724      	adds	r7, #36	; 0x24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b08b      	sub	sp, #44	; 0x2c
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	4613      	mov	r3, r2
 8007f64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f6e:	88fb      	ldrh	r3, [r7, #6]
 8007f70:	089b      	lsrs	r3, r3, #2
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f76:	88fb      	ldrh	r3, [r7, #6]
 8007f78:	f003 0303 	and.w	r3, r3, #3
 8007f7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f7e:	2300      	movs	r3, #0
 8007f80:	623b      	str	r3, [r7, #32]
 8007f82:	e014      	b.n	8007fae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	3301      	adds	r3, #1
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	3301      	adds	r3, #1
 8007f9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	3301      	adds	r3, #1
 8007fac:	623b      	str	r3, [r7, #32]
 8007fae:	6a3a      	ldr	r2, [r7, #32]
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d3e6      	bcc.n	8007f84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007fb6:	8bfb      	ldrh	r3, [r7, #30]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d01e      	beq.n	8007ffa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f107 0310 	add.w	r3, r7, #16
 8007fcc:	6812      	ldr	r2, [r2, #0]
 8007fce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	701a      	strb	r2, [r3, #0]
      i++;
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	3301      	adds	r3, #1
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007fee:	8bfb      	ldrh	r3, [r7, #30]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ff4:	8bfb      	ldrh	r3, [r7, #30]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1ea      	bne.n	8007fd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	372c      	adds	r7, #44	; 0x2c
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	785b      	ldrb	r3, [r3, #1]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d12c      	bne.n	800807e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	db12      	blt.n	800805c <USB_EPSetStall+0x54>
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00f      	beq.n	800805c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	0151      	lsls	r1, r2, #5
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	440a      	add	r2, r1
 8008052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008056:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800805a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	440a      	add	r2, r1
 8008072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008076:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	e02b      	b.n	80080d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4413      	add	r3, r2
 8008086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	db12      	blt.n	80080b6 <USB_EPSetStall+0xae>
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00f      	beq.n	80080b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4413      	add	r3, r2
 800809e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	0151      	lsls	r1, r2, #5
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	440a      	add	r2, r1
 80080ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80080b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	0151      	lsls	r1, r2, #5
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	440a      	add	r2, r1
 80080cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	785b      	ldrb	r3, [r3, #1]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d128      	bne.n	8008152 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	0151      	lsls	r1, r2, #5
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	440a      	add	r2, r1
 8008116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800811a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800811e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	791b      	ldrb	r3, [r3, #4]
 8008124:	2b03      	cmp	r3, #3
 8008126:	d003      	beq.n	8008130 <USB_EPClearStall+0x4c>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	791b      	ldrb	r3, [r3, #4]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d138      	bne.n	80081a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	0151      	lsls	r1, r2, #5
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	440a      	add	r2, r1
 8008146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800814a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	e027      	b.n	80081a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	0151      	lsls	r1, r2, #5
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	440a      	add	r2, r1
 8008168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800816c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008170:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	791b      	ldrb	r3, [r3, #4]
 8008176:	2b03      	cmp	r3, #3
 8008178:	d003      	beq.n	8008182 <USB_EPClearStall+0x9e>
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	791b      	ldrb	r3, [r3, #4]
 800817e:	2b02      	cmp	r3, #2
 8008180:	d10f      	bne.n	80081a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	0151      	lsls	r1, r2, #5
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	440a      	add	r2, r1
 8008198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800819c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	460b      	mov	r3, r1
 80081ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80081d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	78fb      	ldrb	r3, [r7, #3]
 80081de:	011b      	lsls	r3, r3, #4
 80081e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80081e4:	68f9      	ldr	r1, [r7, #12]
 80081e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081ea:	4313      	orrs	r3, r2
 80081ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008216:	f023 0303 	bic.w	r3, r3, #3
 800821a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800822a:	f023 0302 	bic.w	r3, r3, #2
 800822e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800823e:	b480      	push	{r7}
 8008240:	b085      	sub	sp, #20
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008258:	f023 0303 	bic.w	r3, r3, #3
 800825c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800826c:	f043 0302 	orr.w	r3, r3, #2
 8008270:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	4013      	ands	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008298:	68fb      	ldr	r3, [r7, #12]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b085      	sub	sp, #20
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	4013      	ands	r3, r2
 80082c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	0c1b      	lsrs	r3, r3, #16
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80082da:	b480      	push	{r7}
 80082dc:	b085      	sub	sp, #20
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	4013      	ands	r3, r2
 80082fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	b29b      	uxth	r3, r3
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800830e:	b480      	push	{r7}
 8008310:	b085      	sub	sp, #20
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800831e:	78fb      	ldrb	r3, [r7, #3]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4413      	add	r3, r2
 8008326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	4013      	ands	r3, r2
 800833a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800833c:	68bb      	ldr	r3, [r7, #8]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800834a:	b480      	push	{r7}
 800834c:	b087      	sub	sp, #28
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	460b      	mov	r3, r1
 8008354:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800836a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800836e:	78fb      	ldrb	r3, [r7, #3]
 8008370:	f003 030f 	and.w	r3, r3, #15
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	fa22 f303 	lsr.w	r3, r2, r3
 800837a:	01db      	lsls	r3, r3, #7
 800837c:	b2db      	uxtb	r3, r3
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	4313      	orrs	r3, r2
 8008382:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	4413      	add	r3, r2
 800838c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4013      	ands	r3, r2
 8008396:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008398:	68bb      	ldr	r3, [r7, #8]
}
 800839a:	4618      	mov	r0, r3
 800839c:	371c      	adds	r7, #28
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b083      	sub	sp, #12
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	f003 0301 	and.w	r3, r3, #1
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
	...

080083c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083de:	4619      	mov	r1, r3
 80083e0:	4b09      	ldr	r3, [pc, #36]	; (8008408 <USB_ActivateSetup+0x44>)
 80083e2:	4013      	ands	r3, r2
 80083e4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	fffff800 	.word	0xfffff800

0800840c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	460b      	mov	r3, r1
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	333c      	adds	r3, #60	; 0x3c
 8008422:	3304      	adds	r3, #4
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	4a26      	ldr	r2, [pc, #152]	; (80084c4 <USB_EP0_OutStart+0xb8>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d90a      	bls.n	8008446 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800843c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008440:	d101      	bne.n	8008446 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	e037      	b.n	80084b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844c:	461a      	mov	r2, r3
 800844e:	2300      	movs	r3, #0
 8008450:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008464:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008474:	f043 0318 	orr.w	r3, r3, #24
 8008478:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008488:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800848c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800848e:	7afb      	ldrb	r3, [r7, #11]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d10f      	bne.n	80084b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849a:	461a      	mov	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80084b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	4f54300a 	.word	0x4f54300a

080084c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3301      	adds	r3, #1
 80084d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	4a13      	ldr	r2, [pc, #76]	; (800852c <USB_CoreReset+0x64>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d901      	bls.n	80084e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e01b      	b.n	800851e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	daf2      	bge.n	80084d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	f043 0201 	orr.w	r2, r3, #1
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4a09      	ldr	r2, [pc, #36]	; (800852c <USB_CoreReset+0x64>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d901      	bls.n	8008510 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e006      	b.n	800851e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b01      	cmp	r3, #1
 800851a:	d0f0      	beq.n	80084fe <USB_CoreReset+0x36>

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	00030d40 	.word	0x00030d40

08008530 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800853c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008540:	f002 fd12 	bl	800af68 <malloc>
 8008544:	4603      	mov	r3, r0
 8008546:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d109      	bne.n	8008562 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	32b0      	adds	r2, #176	; 0xb0
 8008558:	2100      	movs	r1, #0
 800855a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800855e:	2302      	movs	r3, #2
 8008560:	e0d4      	b.n	800870c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008562:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008566:	2100      	movs	r1, #0
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f002 fdb9 	bl	800b0e0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	32b0      	adds	r2, #176	; 0xb0
 8008578:	68f9      	ldr	r1, [r7, #12]
 800857a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	32b0      	adds	r2, #176	; 0xb0
 8008588:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	7c1b      	ldrb	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d138      	bne.n	800860c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800859a:	4b5e      	ldr	r3, [pc, #376]	; (8008714 <USBD_CDC_Init+0x1e4>)
 800859c:	7819      	ldrb	r1, [r3, #0]
 800859e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085a2:	2202      	movs	r2, #2
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f002 fb3c 	bl	800ac22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80085aa:	4b5a      	ldr	r3, [pc, #360]	; (8008714 <USBD_CDC_Init+0x1e4>)
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	f003 020f 	and.w	r2, r3, #15
 80085b2:	6879      	ldr	r1, [r7, #4]
 80085b4:	4613      	mov	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	440b      	add	r3, r1
 80085be:	3324      	adds	r3, #36	; 0x24
 80085c0:	2201      	movs	r2, #1
 80085c2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80085c4:	4b54      	ldr	r3, [pc, #336]	; (8008718 <USBD_CDC_Init+0x1e8>)
 80085c6:	7819      	ldrb	r1, [r3, #0]
 80085c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085cc:	2202      	movs	r2, #2
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f002 fb27 	bl	800ac22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80085d4:	4b50      	ldr	r3, [pc, #320]	; (8008718 <USBD_CDC_Init+0x1e8>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	f003 020f 	and.w	r2, r3, #15
 80085dc:	6879      	ldr	r1, [r7, #4]
 80085de:	4613      	mov	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	440b      	add	r3, r1
 80085e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085ec:	2201      	movs	r2, #1
 80085ee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80085f0:	4b4a      	ldr	r3, [pc, #296]	; (800871c <USBD_CDC_Init+0x1ec>)
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	f003 020f 	and.w	r2, r3, #15
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	4613      	mov	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	440b      	add	r3, r1
 8008604:	3326      	adds	r3, #38	; 0x26
 8008606:	2210      	movs	r2, #16
 8008608:	801a      	strh	r2, [r3, #0]
 800860a:	e035      	b.n	8008678 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800860c:	4b41      	ldr	r3, [pc, #260]	; (8008714 <USBD_CDC_Init+0x1e4>)
 800860e:	7819      	ldrb	r1, [r3, #0]
 8008610:	2340      	movs	r3, #64	; 0x40
 8008612:	2202      	movs	r2, #2
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f002 fb04 	bl	800ac22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800861a:	4b3e      	ldr	r3, [pc, #248]	; (8008714 <USBD_CDC_Init+0x1e4>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	f003 020f 	and.w	r2, r3, #15
 8008622:	6879      	ldr	r1, [r7, #4]
 8008624:	4613      	mov	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	440b      	add	r3, r1
 800862e:	3324      	adds	r3, #36	; 0x24
 8008630:	2201      	movs	r2, #1
 8008632:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008634:	4b38      	ldr	r3, [pc, #224]	; (8008718 <USBD_CDC_Init+0x1e8>)
 8008636:	7819      	ldrb	r1, [r3, #0]
 8008638:	2340      	movs	r3, #64	; 0x40
 800863a:	2202      	movs	r2, #2
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f002 faf0 	bl	800ac22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008642:	4b35      	ldr	r3, [pc, #212]	; (8008718 <USBD_CDC_Init+0x1e8>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	f003 020f 	and.w	r2, r3, #15
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	4613      	mov	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	440b      	add	r3, r1
 8008656:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800865a:	2201      	movs	r2, #1
 800865c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800865e:	4b2f      	ldr	r3, [pc, #188]	; (800871c <USBD_CDC_Init+0x1ec>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	f003 020f 	and.w	r2, r3, #15
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	4613      	mov	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	440b      	add	r3, r1
 8008672:	3326      	adds	r3, #38	; 0x26
 8008674:	2210      	movs	r2, #16
 8008676:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008678:	4b28      	ldr	r3, [pc, #160]	; (800871c <USBD_CDC_Init+0x1ec>)
 800867a:	7819      	ldrb	r1, [r3, #0]
 800867c:	2308      	movs	r3, #8
 800867e:	2203      	movs	r2, #3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f002 face 	bl	800ac22 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008686:	4b25      	ldr	r3, [pc, #148]	; (800871c <USBD_CDC_Init+0x1ec>)
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	f003 020f 	and.w	r2, r3, #15
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	4613      	mov	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	440b      	add	r3, r1
 800869a:	3324      	adds	r3, #36	; 0x24
 800869c:	2201      	movs	r2, #1
 800869e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	33b0      	adds	r3, #176	; 0xb0
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80086d6:	2302      	movs	r3, #2
 80086d8:	e018      	b.n	800870c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	7c1b      	ldrb	r3, [r3, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10a      	bne.n	80086f8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086e2:	4b0d      	ldr	r3, [pc, #52]	; (8008718 <USBD_CDC_Init+0x1e8>)
 80086e4:	7819      	ldrb	r1, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f002 fb85 	bl	800ae00 <USBD_LL_PrepareReceive>
 80086f6:	e008      	b.n	800870a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086f8:	4b07      	ldr	r3, [pc, #28]	; (8008718 <USBD_CDC_Init+0x1e8>)
 80086fa:	7819      	ldrb	r1, [r3, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008702:	2340      	movs	r3, #64	; 0x40
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f002 fb7b 	bl	800ae00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	200000b3 	.word	0x200000b3
 8008718:	200000b4 	.word	0x200000b4
 800871c:	200000b5 	.word	0x200000b5

08008720 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800872c:	4b3a      	ldr	r3, [pc, #232]	; (8008818 <USBD_CDC_DeInit+0xf8>)
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f002 fa9b 	bl	800ac6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008738:	4b37      	ldr	r3, [pc, #220]	; (8008818 <USBD_CDC_DeInit+0xf8>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	f003 020f 	and.w	r2, r3, #15
 8008740:	6879      	ldr	r1, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	3324      	adds	r3, #36	; 0x24
 800874e:	2200      	movs	r2, #0
 8008750:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008752:	4b32      	ldr	r3, [pc, #200]	; (800881c <USBD_CDC_DeInit+0xfc>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f002 fa88 	bl	800ac6e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800875e:	4b2f      	ldr	r3, [pc, #188]	; (800881c <USBD_CDC_DeInit+0xfc>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	f003 020f 	and.w	r2, r3, #15
 8008766:	6879      	ldr	r1, [r7, #4]
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	440b      	add	r3, r1
 8008772:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008776:	2200      	movs	r2, #0
 8008778:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800877a:	4b29      	ldr	r3, [pc, #164]	; (8008820 <USBD_CDC_DeInit+0x100>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f002 fa74 	bl	800ac6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008786:	4b26      	ldr	r3, [pc, #152]	; (8008820 <USBD_CDC_DeInit+0x100>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	f003 020f 	and.w	r2, r3, #15
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	440b      	add	r3, r1
 800879a:	3324      	adds	r3, #36	; 0x24
 800879c:	2200      	movs	r2, #0
 800879e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80087a0:	4b1f      	ldr	r3, [pc, #124]	; (8008820 <USBD_CDC_DeInit+0x100>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	f003 020f 	and.w	r2, r3, #15
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	4613      	mov	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	440b      	add	r3, r1
 80087b4:	3326      	adds	r3, #38	; 0x26
 80087b6:	2200      	movs	r2, #0
 80087b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	32b0      	adds	r2, #176	; 0xb0
 80087c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01f      	beq.n	800880c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	33b0      	adds	r3, #176	; 0xb0
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	32b0      	adds	r2, #176	; 0xb0
 80087ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f002 fbc2 	bl	800af78 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	32b0      	adds	r2, #176	; 0xb0
 80087fe:	2100      	movs	r1, #0
 8008800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	200000b3 	.word	0x200000b3
 800881c:	200000b4 	.word	0x200000b4
 8008820:	200000b5 	.word	0x200000b5

08008824 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	32b0      	adds	r2, #176	; 0xb0
 8008838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800883e:	2300      	movs	r3, #0
 8008840:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008850:	2303      	movs	r3, #3
 8008852:	e0bf      	b.n	80089d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800885c:	2b00      	cmp	r3, #0
 800885e:	d050      	beq.n	8008902 <USBD_CDC_Setup+0xde>
 8008860:	2b20      	cmp	r3, #32
 8008862:	f040 80af 	bne.w	80089c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	88db      	ldrh	r3, [r3, #6]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d03a      	beq.n	80088e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	b25b      	sxtb	r3, r3
 8008874:	2b00      	cmp	r3, #0
 8008876:	da1b      	bge.n	80088b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	33b0      	adds	r3, #176	; 0xb0
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800888e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	88d2      	ldrh	r2, [r2, #6]
 8008894:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	88db      	ldrh	r3, [r3, #6]
 800889a:	2b07      	cmp	r3, #7
 800889c:	bf28      	it	cs
 800889e:	2307      	movcs	r3, #7
 80088a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	89fa      	ldrh	r2, [r7, #14]
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 fd6d 	bl	800a388 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80088ae:	e090      	b.n	80089d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	785a      	ldrb	r2, [r3, #1]
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	88db      	ldrh	r3, [r3, #6]
 80088be:	2b3f      	cmp	r3, #63	; 0x3f
 80088c0:	d803      	bhi.n	80088ca <USBD_CDC_Setup+0xa6>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	88db      	ldrh	r3, [r3, #6]
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	e000      	b.n	80088cc <USBD_CDC_Setup+0xa8>
 80088ca:	2240      	movs	r2, #64	; 0x40
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80088d2:	6939      	ldr	r1, [r7, #16]
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80088da:	461a      	mov	r2, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f001 fd7f 	bl	800a3e0 <USBD_CtlPrepareRx>
      break;
 80088e2:	e076      	b.n	80089d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	33b0      	adds	r3, #176	; 0xb0
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	7850      	ldrb	r0, [r2, #1]
 80088fa:	2200      	movs	r2, #0
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	4798      	blx	r3
      break;
 8008900:	e067      	b.n	80089d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	785b      	ldrb	r3, [r3, #1]
 8008906:	2b0b      	cmp	r3, #11
 8008908:	d851      	bhi.n	80089ae <USBD_CDC_Setup+0x18a>
 800890a:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <USBD_CDC_Setup+0xec>)
 800890c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008910:	08008941 	.word	0x08008941
 8008914:	080089bd 	.word	0x080089bd
 8008918:	080089af 	.word	0x080089af
 800891c:	080089af 	.word	0x080089af
 8008920:	080089af 	.word	0x080089af
 8008924:	080089af 	.word	0x080089af
 8008928:	080089af 	.word	0x080089af
 800892c:	080089af 	.word	0x080089af
 8008930:	080089af 	.word	0x080089af
 8008934:	080089af 	.word	0x080089af
 8008938:	0800896b 	.word	0x0800896b
 800893c:	08008995 	.word	0x08008995
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b03      	cmp	r3, #3
 800894a:	d107      	bne.n	800895c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800894c:	f107 030a 	add.w	r3, r7, #10
 8008950:	2202      	movs	r2, #2
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 fd17 	bl	800a388 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800895a:	e032      	b.n	80089c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 fca1 	bl	800a2a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008964:	2303      	movs	r3, #3
 8008966:	75fb      	strb	r3, [r7, #23]
          break;
 8008968:	e02b      	b.n	80089c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b03      	cmp	r3, #3
 8008974:	d107      	bne.n	8008986 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008976:	f107 030d 	add.w	r3, r7, #13
 800897a:	2201      	movs	r2, #1
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f001 fd02 	bl	800a388 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008984:	e01d      	b.n	80089c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 fc8c 	bl	800a2a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800898e:	2303      	movs	r3, #3
 8008990:	75fb      	strb	r3, [r7, #23]
          break;
 8008992:	e016      	b.n	80089c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b03      	cmp	r3, #3
 800899e:	d00f      	beq.n	80089c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f001 fc7f 	bl	800a2a6 <USBD_CtlError>
            ret = USBD_FAIL;
 80089a8:	2303      	movs	r3, #3
 80089aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80089ac:	e008      	b.n	80089c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f001 fc78 	bl	800a2a6 <USBD_CtlError>
          ret = USBD_FAIL;
 80089b6:	2303      	movs	r3, #3
 80089b8:	75fb      	strb	r3, [r7, #23]
          break;
 80089ba:	e002      	b.n	80089c2 <USBD_CDC_Setup+0x19e>
          break;
 80089bc:	bf00      	nop
 80089be:	e008      	b.n	80089d2 <USBD_CDC_Setup+0x1ae>
          break;
 80089c0:	bf00      	nop
      }
      break;
 80089c2:	e006      	b.n	80089d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 fc6d 	bl	800a2a6 <USBD_CtlError>
      ret = USBD_FAIL;
 80089cc:	2303      	movs	r3, #3
 80089ce:	75fb      	strb	r3, [r7, #23]
      break;
 80089d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3718      	adds	r7, #24
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	32b0      	adds	r2, #176	; 0xb0
 80089fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e065      	b.n	8008ad2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	32b0      	adds	r2, #176	; 0xb0
 8008a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a16:	78fb      	ldrb	r3, [r7, #3]
 8008a18:	f003 020f 	and.w	r2, r3, #15
 8008a1c:	6879      	ldr	r1, [r7, #4]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	440b      	add	r3, r1
 8008a28:	3318      	adds	r3, #24
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d02f      	beq.n	8008a90 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008a30:	78fb      	ldrb	r3, [r7, #3]
 8008a32:	f003 020f 	and.w	r2, r3, #15
 8008a36:	6879      	ldr	r1, [r7, #4]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	440b      	add	r3, r1
 8008a42:	3318      	adds	r3, #24
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	78fb      	ldrb	r3, [r7, #3]
 8008a48:	f003 010f 	and.w	r1, r3, #15
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	440b      	add	r3, r1
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4403      	add	r3, r0
 8008a58:	3348      	adds	r3, #72	; 0x48
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a60:	fb01 f303 	mul.w	r3, r1, r3
 8008a64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d112      	bne.n	8008a90 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	f003 020f 	and.w	r2, r3, #15
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	440b      	add	r3, r1
 8008a7c:	3318      	adds	r3, #24
 8008a7e:	2200      	movs	r2, #0
 8008a80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a82:	78f9      	ldrb	r1, [r7, #3]
 8008a84:	2300      	movs	r3, #0
 8008a86:	2200      	movs	r2, #0
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f002 f998 	bl	800adbe <USBD_LL_Transmit>
 8008a8e:	e01f      	b.n	8008ad0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	33b0      	adds	r3, #176	; 0xb0
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d010      	beq.n	8008ad0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	33b0      	adds	r3, #176	; 0xb0
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008acc:	78fa      	ldrb	r2, [r7, #3]
 8008ace:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	32b0      	adds	r2, #176	; 0xb0
 8008af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	32b0      	adds	r2, #176	; 0xb0
 8008b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e01a      	b.n	8008b42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b0c:	78fb      	ldrb	r3, [r7, #3]
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f002 f996 	bl	800ae42 <USBD_LL_GetRxDataSize>
 8008b16:	4602      	mov	r2, r0
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	33b0      	adds	r3, #176	; 0xb0
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	32b0      	adds	r2, #176	; 0xb0
 8008b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d101      	bne.n	8008b6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e025      	b.n	8008bb8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	33b0      	adds	r3, #176	; 0xb0
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d01a      	beq.n	8008bb6 <USBD_CDC_EP0_RxReady+0x6c>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008b86:	2bff      	cmp	r3, #255	; 0xff
 8008b88:	d015      	beq.n	8008bb6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	33b0      	adds	r3, #176	; 0xb0
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008ba2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008baa:	b292      	uxth	r2, r2
 8008bac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	22ff      	movs	r2, #255	; 0xff
 8008bb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008bc8:	2182      	movs	r1, #130	; 0x82
 8008bca:	4818      	ldr	r0, [pc, #96]	; (8008c2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008bcc:	f000 fd09 	bl	80095e2 <USBD_GetEpDesc>
 8008bd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	4815      	ldr	r0, [pc, #84]	; (8008c2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008bd6:	f000 fd04 	bl	80095e2 <USBD_GetEpDesc>
 8008bda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008bdc:	2181      	movs	r1, #129	; 0x81
 8008bde:	4813      	ldr	r0, [pc, #76]	; (8008c2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008be0:	f000 fcff 	bl	80095e2 <USBD_GetEpDesc>
 8008be4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	2210      	movs	r2, #16
 8008bf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d006      	beq.n	8008c06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c00:	711a      	strb	r2, [r3, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d006      	beq.n	8008c1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c14:	711a      	strb	r2, [r3, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2243      	movs	r2, #67	; 0x43
 8008c1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c20:	4b02      	ldr	r3, [pc, #8]	; (8008c2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3718      	adds	r7, #24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20000070 	.word	0x20000070

08008c30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c38:	2182      	movs	r1, #130	; 0x82
 8008c3a:	4818      	ldr	r0, [pc, #96]	; (8008c9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c3c:	f000 fcd1 	bl	80095e2 <USBD_GetEpDesc>
 8008c40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c42:	2101      	movs	r1, #1
 8008c44:	4815      	ldr	r0, [pc, #84]	; (8008c9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c46:	f000 fccc 	bl	80095e2 <USBD_GetEpDesc>
 8008c4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c4c:	2181      	movs	r1, #129	; 0x81
 8008c4e:	4813      	ldr	r0, [pc, #76]	; (8008c9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c50:	f000 fcc7 	bl	80095e2 <USBD_GetEpDesc>
 8008c54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2210      	movs	r2, #16
 8008c60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d006      	beq.n	8008c76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	711a      	strb	r2, [r3, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f042 0202 	orr.w	r2, r2, #2
 8008c74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d006      	beq.n	8008c8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	711a      	strb	r2, [r3, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f042 0202 	orr.w	r2, r2, #2
 8008c88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2243      	movs	r2, #67	; 0x43
 8008c8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c90:	4b02      	ldr	r3, [pc, #8]	; (8008c9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000070 	.word	0x20000070

08008ca0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ca8:	2182      	movs	r1, #130	; 0x82
 8008caa:	4818      	ldr	r0, [pc, #96]	; (8008d0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008cac:	f000 fc99 	bl	80095e2 <USBD_GetEpDesc>
 8008cb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	4815      	ldr	r0, [pc, #84]	; (8008d0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008cb6:	f000 fc94 	bl	80095e2 <USBD_GetEpDesc>
 8008cba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008cbc:	2181      	movs	r1, #129	; 0x81
 8008cbe:	4813      	ldr	r0, [pc, #76]	; (8008d0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008cc0:	f000 fc8f 	bl	80095e2 <USBD_GetEpDesc>
 8008cc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2210      	movs	r2, #16
 8008cd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d006      	beq.n	8008ce6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ce0:	711a      	strb	r2, [r3, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d006      	beq.n	8008cfa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cf4:	711a      	strb	r2, [r3, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2243      	movs	r2, #67	; 0x43
 8008cfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d00:	4b02      	ldr	r3, [pc, #8]	; (8008d0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000070 	.word	0x20000070

08008d10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	220a      	movs	r2, #10
 8008d1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d1e:	4b03      	ldr	r3, [pc, #12]	; (8008d2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	2000002c 	.word	0x2000002c

08008d30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d101      	bne.n	8008d44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e009      	b.n	8008d58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	33b0      	adds	r3, #176	; 0xb0
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b087      	sub	sp, #28
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	32b0      	adds	r2, #176	; 0xb0
 8008d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d7e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e008      	b.n	8008d9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	371c      	adds	r7, #28
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	32b0      	adds	r2, #176	; 0xb0
 8008dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e004      	b.n	8008dd6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
	...

08008de4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	32b0      	adds	r2, #176	; 0xb0
 8008df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dfa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	32b0      	adds	r2, #176	; 0xb0
 8008e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e018      	b.n	8008e44 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	7c1b      	ldrb	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10a      	bne.n	8008e30 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e1a:	4b0c      	ldr	r3, [pc, #48]	; (8008e4c <USBD_CDC_ReceivePacket+0x68>)
 8008e1c:	7819      	ldrb	r1, [r3, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f001 ffe9 	bl	800ae00 <USBD_LL_PrepareReceive>
 8008e2e:	e008      	b.n	8008e42 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e30:	4b06      	ldr	r3, [pc, #24]	; (8008e4c <USBD_CDC_ReceivePacket+0x68>)
 8008e32:	7819      	ldrb	r1, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e3a:	2340      	movs	r3, #64	; 0x40
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f001 ffdf 	bl	800ae00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	200000b4 	.word	0x200000b4

08008e50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e01f      	b.n	8008ea8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	79fa      	ldrb	r2, [r7, #7]
 8008e9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f001 fe59 	bl	800ab54 <USBD_LL_Init>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e025      	b.n	8008f14 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	32ae      	adds	r2, #174	; 0xae
 8008eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00f      	beq.n	8008f04 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	32ae      	adds	r2, #174	; 0xae
 8008eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef4:	f107 020e 	add.w	r2, r7, #14
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4798      	blx	r3
 8008efc:	4602      	mov	r2, r0
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f001 fe61 	bl	800abec <USBD_LL_Start>
 8008f2a:	4603      	mov	r3, r0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f3c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	460b      	mov	r3, r1
 8008f54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d009      	beq.n	8008f78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	78fa      	ldrb	r2, [r7, #3]
 8008f6e:	4611      	mov	r1, r2
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	4798      	blx	r3
 8008f74:	4603      	mov	r3, r0
 8008f76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	78fa      	ldrb	r2, [r7, #3]
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	4798      	blx	r3
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f001 f932 	bl	800a232 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008fdc:	461a      	mov	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fea:	f003 031f 	and.w	r3, r3, #31
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d01a      	beq.n	8009028 <USBD_LL_SetupStage+0x72>
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d822      	bhi.n	800903c <USBD_LL_SetupStage+0x86>
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <USBD_LL_SetupStage+0x4a>
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d00a      	beq.n	8009014 <USBD_LL_SetupStage+0x5e>
 8008ffe:	e01d      	b.n	800903c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fb5f 	bl	80096cc <USBD_StdDevReq>
 800900e:	4603      	mov	r3, r0
 8009010:	73fb      	strb	r3, [r7, #15]
      break;
 8009012:	e020      	b.n	8009056 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fbc7 	bl	80097b0 <USBD_StdItfReq>
 8009022:	4603      	mov	r3, r0
 8009024:	73fb      	strb	r3, [r7, #15]
      break;
 8009026:	e016      	b.n	8009056 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fc29 	bl	8009888 <USBD_StdEPReq>
 8009036:	4603      	mov	r3, r0
 8009038:	73fb      	strb	r3, [r7, #15]
      break;
 800903a:	e00c      	b.n	8009056 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009042:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009046:	b2db      	uxtb	r3, r3
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f001 fe2e 	bl	800acac <USBD_LL_StallEP>
 8009050:	4603      	mov	r3, r0
 8009052:	73fb      	strb	r3, [r7, #15]
      break;
 8009054:	bf00      	nop
  }

  return ret;
 8009056:	7bfb      	ldrb	r3, [r7, #15]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	460b      	mov	r3, r1
 800906a:	607a      	str	r2, [r7, #4]
 800906c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009072:	7afb      	ldrb	r3, [r7, #11]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d16e      	bne.n	8009156 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800907e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009086:	2b03      	cmp	r3, #3
 8009088:	f040 8098 	bne.w	80091bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	429a      	cmp	r2, r3
 8009096:	d913      	bls.n	80090c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	1ad2      	subs	r2, r2, r3
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	4293      	cmp	r3, r2
 80090b0:	bf28      	it	cs
 80090b2:	4613      	movcs	r3, r2
 80090b4:	461a      	mov	r2, r3
 80090b6:	6879      	ldr	r1, [r7, #4]
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f001 f9ae 	bl	800a41a <USBD_CtlContinueRx>
 80090be:	e07d      	b.n	80091bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80090c6:	f003 031f 	and.w	r3, r3, #31
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d014      	beq.n	80090f8 <USBD_LL_DataOutStage+0x98>
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d81d      	bhi.n	800910e <USBD_LL_DataOutStage+0xae>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <USBD_LL_DataOutStage+0x7c>
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d003      	beq.n	80090e2 <USBD_LL_DataOutStage+0x82>
 80090da:	e018      	b.n	800910e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	75bb      	strb	r3, [r7, #22]
            break;
 80090e0:	e018      	b.n	8009114 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	4619      	mov	r1, r3
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 fa5e 	bl	80095ae <USBD_CoreFindIF>
 80090f2:	4603      	mov	r3, r0
 80090f4:	75bb      	strb	r3, [r7, #22]
            break;
 80090f6:	e00d      	b.n	8009114 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	4619      	mov	r1, r3
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f000 fa60 	bl	80095c8 <USBD_CoreFindEP>
 8009108:	4603      	mov	r3, r0
 800910a:	75bb      	strb	r3, [r7, #22]
            break;
 800910c:	e002      	b.n	8009114 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800910e:	2300      	movs	r3, #0
 8009110:	75bb      	strb	r3, [r7, #22]
            break;
 8009112:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009114:	7dbb      	ldrb	r3, [r7, #22]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d119      	bne.n	800914e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b03      	cmp	r3, #3
 8009124:	d113      	bne.n	800914e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009126:	7dba      	ldrb	r2, [r7, #22]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	32ae      	adds	r2, #174	; 0xae
 800912c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00b      	beq.n	800914e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009136:	7dba      	ldrb	r2, [r7, #22]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800913e:	7dba      	ldrb	r2, [r7, #22]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	32ae      	adds	r2, #174	; 0xae
 8009144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f001 f974 	bl	800a43c <USBD_CtlSendStatus>
 8009154:	e032      	b.n	80091bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009156:	7afb      	ldrb	r3, [r7, #11]
 8009158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800915c:	b2db      	uxtb	r3, r3
 800915e:	4619      	mov	r1, r3
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f000 fa31 	bl	80095c8 <USBD_CoreFindEP>
 8009166:	4603      	mov	r3, r0
 8009168:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800916a:	7dbb      	ldrb	r3, [r7, #22]
 800916c:	2bff      	cmp	r3, #255	; 0xff
 800916e:	d025      	beq.n	80091bc <USBD_LL_DataOutStage+0x15c>
 8009170:	7dbb      	ldrb	r3, [r7, #22]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d122      	bne.n	80091bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b03      	cmp	r3, #3
 8009180:	d117      	bne.n	80091b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009182:	7dba      	ldrb	r2, [r7, #22]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	32ae      	adds	r2, #174	; 0xae
 8009188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00f      	beq.n	80091b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009192:	7dba      	ldrb	r2, [r7, #22]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800919a:	7dba      	ldrb	r2, [r7, #22]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	32ae      	adds	r2, #174	; 0xae
 80091a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	7afa      	ldrb	r2, [r7, #11]
 80091a8:	4611      	mov	r1, r2
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	4798      	blx	r3
 80091ae:	4603      	mov	r3, r0
 80091b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d001      	beq.n	80091bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80091b8:	7dfb      	ldrb	r3, [r7, #23]
 80091ba:	e000      	b.n	80091be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b086      	sub	sp, #24
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	60f8      	str	r0, [r7, #12]
 80091ce:	460b      	mov	r3, r1
 80091d0:	607a      	str	r2, [r7, #4]
 80091d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80091d4:	7afb      	ldrb	r3, [r7, #11]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d16f      	bne.n	80092ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3314      	adds	r3, #20
 80091de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d15a      	bne.n	80092a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	689a      	ldr	r2, [r3, #8]
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d914      	bls.n	8009220 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	689a      	ldr	r2, [r3, #8]
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	1ad2      	subs	r2, r2, r3
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	461a      	mov	r2, r3
 800920a:	6879      	ldr	r1, [r7, #4]
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f001 f8d6 	bl	800a3be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009212:	2300      	movs	r3, #0
 8009214:	2200      	movs	r2, #0
 8009216:	2100      	movs	r1, #0
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f001 fdf1 	bl	800ae00 <USBD_LL_PrepareReceive>
 800921e:	e03f      	b.n	80092a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	68da      	ldr	r2, [r3, #12]
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	429a      	cmp	r2, r3
 800922a:	d11c      	bne.n	8009266 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009234:	429a      	cmp	r2, r3
 8009236:	d316      	bcc.n	8009266 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009242:	429a      	cmp	r2, r3
 8009244:	d20f      	bcs.n	8009266 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009246:	2200      	movs	r2, #0
 8009248:	2100      	movs	r1, #0
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f001 f8b7 	bl	800a3be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009258:	2300      	movs	r3, #0
 800925a:	2200      	movs	r2, #0
 800925c:	2100      	movs	r1, #0
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f001 fdce 	bl	800ae00 <USBD_LL_PrepareReceive>
 8009264:	e01c      	b.n	80092a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b03      	cmp	r3, #3
 8009270:	d10f      	bne.n	8009292 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d009      	beq.n	8009292 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009292:	2180      	movs	r1, #128	; 0x80
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f001 fd09 	bl	800acac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f001 f8e1 	bl	800a462 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d03a      	beq.n	8009320 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f7ff fe42 	bl	8008f34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80092b8:	e032      	b.n	8009320 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80092ba:	7afb      	ldrb	r3, [r7, #11]
 80092bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	4619      	mov	r1, r3
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 f97f 	bl	80095c8 <USBD_CoreFindEP>
 80092ca:	4603      	mov	r3, r0
 80092cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
 80092d0:	2bff      	cmp	r3, #255	; 0xff
 80092d2:	d025      	beq.n	8009320 <USBD_LL_DataInStage+0x15a>
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d122      	bne.n	8009320 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d11c      	bne.n	8009320 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80092e6:	7dfa      	ldrb	r2, [r7, #23]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	32ae      	adds	r2, #174	; 0xae
 80092ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d014      	beq.n	8009320 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80092f6:	7dfa      	ldrb	r2, [r7, #23]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80092fe:	7dfa      	ldrb	r2, [r7, #23]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	32ae      	adds	r2, #174	; 0xae
 8009304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	7afa      	ldrb	r2, [r7, #11]
 800930c:	4611      	mov	r1, r2
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	4798      	blx	r3
 8009312:	4603      	mov	r3, r0
 8009314:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009316:	7dbb      	ldrb	r3, [r7, #22]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d001      	beq.n	8009320 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800931c:	7dbb      	ldrb	r3, [r7, #22]
 800931e:	e000      	b.n	8009322 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b084      	sub	sp, #16
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009362:	2b00      	cmp	r3, #0
 8009364:	d014      	beq.n	8009390 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00e      	beq.n	8009390 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	6852      	ldr	r2, [r2, #4]
 800937e:	b2d2      	uxtb	r2, r2
 8009380:	4611      	mov	r1, r2
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	4798      	blx	r3
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800938c:	2303      	movs	r3, #3
 800938e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009390:	2340      	movs	r3, #64	; 0x40
 8009392:	2200      	movs	r2, #0
 8009394:	2100      	movs	r1, #0
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f001 fc43 	bl	800ac22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2240      	movs	r2, #64	; 0x40
 80093a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093ac:	2340      	movs	r3, #64	; 0x40
 80093ae:	2200      	movs	r2, #0
 80093b0:	2180      	movs	r1, #128	; 0x80
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f001 fc35 	bl	800ac22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2240      	movs	r2, #64	; 0x40
 80093c2:	621a      	str	r2, [r3, #32]

  return ret;
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	460b      	mov	r3, r1
 80093d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	78fa      	ldrb	r2, [r7, #3]
 80093de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2204      	movs	r2, #4
 8009408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b04      	cmp	r3, #4
 800942c:	d106      	bne.n	800943c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009434:	b2da      	uxtb	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b082      	sub	sp, #8
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b03      	cmp	r3, #3
 800945c:	d110      	bne.n	8009480 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00b      	beq.n	8009480 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800946e:	69db      	ldr	r3, [r3, #28]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d005      	beq.n	8009480 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	460b      	mov	r3, r1
 8009494:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	32ae      	adds	r2, #174	; 0xae
 80094a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d101      	bne.n	80094ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e01c      	b.n	80094e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d115      	bne.n	80094e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	32ae      	adds	r2, #174	; 0xae
 80094c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c6:	6a1b      	ldr	r3, [r3, #32]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00b      	beq.n	80094e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	32ae      	adds	r2, #174	; 0xae
 80094d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094da:	6a1b      	ldr	r3, [r3, #32]
 80094dc:	78fa      	ldrb	r2, [r7, #3]
 80094de:	4611      	mov	r1, r2
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b082      	sub	sp, #8
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	32ae      	adds	r2, #174	; 0xae
 8009504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800950c:	2303      	movs	r3, #3
 800950e:	e01c      	b.n	800954a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b03      	cmp	r3, #3
 800951a:	d115      	bne.n	8009548 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	32ae      	adds	r2, #174	; 0xae
 8009526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00b      	beq.n	8009548 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	32ae      	adds	r2, #174	; 0xae
 800953a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	78fa      	ldrb	r2, [r7, #3]
 8009542:	4611      	mov	r1, r2
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009552:	b480      	push	{r7}
 8009554:	b083      	sub	sp, #12
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00e      	beq.n	80095a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	6852      	ldr	r2, [r2, #4]
 8009592:	b2d2      	uxtb	r2, r2
 8009594:	4611      	mov	r1, r2
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	4798      	blx	r3
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80095a0:	2303      	movs	r3, #3
 80095a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b083      	sub	sp, #12
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	460b      	mov	r3, r1
 80095b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095bc:	4618      	mov	r0, r3
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b086      	sub	sp, #24
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	460b      	mov	r3, r1
 80095ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	885b      	ldrh	r3, [r3, #2]
 80095fe:	b29a      	uxth	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	b29b      	uxth	r3, r3
 8009606:	429a      	cmp	r2, r3
 8009608:	d920      	bls.n	800964c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	b29b      	uxth	r3, r3
 8009610:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009612:	e013      	b.n	800963c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009614:	f107 030a 	add.w	r3, r7, #10
 8009618:	4619      	mov	r1, r3
 800961a:	6978      	ldr	r0, [r7, #20]
 800961c:	f000 f81b 	bl	8009656 <USBD_GetNextDesc>
 8009620:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	785b      	ldrb	r3, [r3, #1]
 8009626:	2b05      	cmp	r3, #5
 8009628:	d108      	bne.n	800963c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	789b      	ldrb	r3, [r3, #2]
 8009632:	78fa      	ldrb	r2, [r7, #3]
 8009634:	429a      	cmp	r2, r3
 8009636:	d008      	beq.n	800964a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009638:	2300      	movs	r3, #0
 800963a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	885b      	ldrh	r3, [r3, #2]
 8009640:	b29a      	uxth	r2, r3
 8009642:	897b      	ldrh	r3, [r7, #10]
 8009644:	429a      	cmp	r2, r3
 8009646:	d8e5      	bhi.n	8009614 <USBD_GetEpDesc+0x32>
 8009648:	e000      	b.n	800964c <USBD_GetEpDesc+0x6a>
          break;
 800964a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800964c:	693b      	ldr	r3, [r7, #16]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009656:	b480      	push	{r7}
 8009658:	b085      	sub	sp, #20
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	881a      	ldrh	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	b29b      	uxth	r3, r3
 800966e:	4413      	add	r3, r2
 8009670:	b29a      	uxth	r2, r3
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4413      	add	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009682:	68fb      	ldr	r3, [r7, #12]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009690:	b480      	push	{r7}
 8009692:	b087      	sub	sp, #28
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	3301      	adds	r3, #1
 80096a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80096ae:	8a3b      	ldrh	r3, [r7, #16]
 80096b0:	021b      	lsls	r3, r3, #8
 80096b2:	b21a      	sxth	r2, r3
 80096b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	b21b      	sxth	r3, r3
 80096bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80096be:	89fb      	ldrh	r3, [r7, #14]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096e2:	2b40      	cmp	r3, #64	; 0x40
 80096e4:	d005      	beq.n	80096f2 <USBD_StdDevReq+0x26>
 80096e6:	2b40      	cmp	r3, #64	; 0x40
 80096e8:	d857      	bhi.n	800979a <USBD_StdDevReq+0xce>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00f      	beq.n	800970e <USBD_StdDevReq+0x42>
 80096ee:	2b20      	cmp	r3, #32
 80096f0:	d153      	bne.n	800979a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	32ae      	adds	r2, #174	; 0xae
 80096fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	4798      	blx	r3
 8009708:	4603      	mov	r3, r0
 800970a:	73fb      	strb	r3, [r7, #15]
      break;
 800970c:	e04a      	b.n	80097a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	785b      	ldrb	r3, [r3, #1]
 8009712:	2b09      	cmp	r3, #9
 8009714:	d83b      	bhi.n	800978e <USBD_StdDevReq+0xc2>
 8009716:	a201      	add	r2, pc, #4	; (adr r2, 800971c <USBD_StdDevReq+0x50>)
 8009718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971c:	08009771 	.word	0x08009771
 8009720:	08009785 	.word	0x08009785
 8009724:	0800978f 	.word	0x0800978f
 8009728:	0800977b 	.word	0x0800977b
 800972c:	0800978f 	.word	0x0800978f
 8009730:	0800974f 	.word	0x0800974f
 8009734:	08009745 	.word	0x08009745
 8009738:	0800978f 	.word	0x0800978f
 800973c:	08009767 	.word	0x08009767
 8009740:	08009759 	.word	0x08009759
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fa3c 	bl	8009bc4 <USBD_GetDescriptor>
          break;
 800974c:	e024      	b.n	8009798 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fbcb 	bl	8009eec <USBD_SetAddress>
          break;
 8009756:	e01f      	b.n	8009798 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fc0a 	bl	8009f74 <USBD_SetConfig>
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]
          break;
 8009764:	e018      	b.n	8009798 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fcad 	bl	800a0c8 <USBD_GetConfig>
          break;
 800976e:	e013      	b.n	8009798 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fcde 	bl	800a134 <USBD_GetStatus>
          break;
 8009778:	e00e      	b.n	8009798 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fd0d 	bl	800a19c <USBD_SetFeature>
          break;
 8009782:	e009      	b.n	8009798 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fd31 	bl	800a1ee <USBD_ClrFeature>
          break;
 800978c:	e004      	b.n	8009798 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fd88 	bl	800a2a6 <USBD_CtlError>
          break;
 8009796:	bf00      	nop
      }
      break;
 8009798:	e004      	b.n	80097a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fd82 	bl	800a2a6 <USBD_CtlError>
      break;
 80097a2:	bf00      	nop
  }

  return ret;
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop

080097b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097c6:	2b40      	cmp	r3, #64	; 0x40
 80097c8:	d005      	beq.n	80097d6 <USBD_StdItfReq+0x26>
 80097ca:	2b40      	cmp	r3, #64	; 0x40
 80097cc:	d852      	bhi.n	8009874 <USBD_StdItfReq+0xc4>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <USBD_StdItfReq+0x26>
 80097d2:	2b20      	cmp	r3, #32
 80097d4:	d14e      	bne.n	8009874 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	3b01      	subs	r3, #1
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d840      	bhi.n	8009866 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	889b      	ldrh	r3, [r3, #4]
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d836      	bhi.n	800985c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	889b      	ldrh	r3, [r3, #4]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	4619      	mov	r1, r3
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7ff fed9 	bl	80095ae <USBD_CoreFindIF>
 80097fc:	4603      	mov	r3, r0
 80097fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009800:	7bbb      	ldrb	r3, [r7, #14]
 8009802:	2bff      	cmp	r3, #255	; 0xff
 8009804:	d01d      	beq.n	8009842 <USBD_StdItfReq+0x92>
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d11a      	bne.n	8009842 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800980c:	7bba      	ldrb	r2, [r7, #14]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	32ae      	adds	r2, #174	; 0xae
 8009812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00f      	beq.n	800983c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800981c:	7bba      	ldrb	r2, [r7, #14]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009824:	7bba      	ldrb	r2, [r7, #14]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	32ae      	adds	r2, #174	; 0xae
 800982a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	4798      	blx	r3
 8009836:	4603      	mov	r3, r0
 8009838:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800983a:	e004      	b.n	8009846 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800983c:	2303      	movs	r3, #3
 800983e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009840:	e001      	b.n	8009846 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009842:	2303      	movs	r3, #3
 8009844:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	88db      	ldrh	r3, [r3, #6]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d110      	bne.n	8009870 <USBD_StdItfReq+0xc0>
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10d      	bne.n	8009870 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fdf1 	bl	800a43c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800985a:	e009      	b.n	8009870 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fd21 	bl	800a2a6 <USBD_CtlError>
          break;
 8009864:	e004      	b.n	8009870 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fd1c 	bl	800a2a6 <USBD_CtlError>
          break;
 800986e:	e000      	b.n	8009872 <USBD_StdItfReq+0xc2>
          break;
 8009870:	bf00      	nop
      }
      break;
 8009872:	e004      	b.n	800987e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fd15 	bl	800a2a6 <USBD_CtlError>
      break;
 800987c:	bf00      	nop
  }

  return ret;
 800987e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	889b      	ldrh	r3, [r3, #4]
 800989a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098a4:	2b40      	cmp	r3, #64	; 0x40
 80098a6:	d007      	beq.n	80098b8 <USBD_StdEPReq+0x30>
 80098a8:	2b40      	cmp	r3, #64	; 0x40
 80098aa:	f200 817f 	bhi.w	8009bac <USBD_StdEPReq+0x324>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d02a      	beq.n	8009908 <USBD_StdEPReq+0x80>
 80098b2:	2b20      	cmp	r3, #32
 80098b4:	f040 817a 	bne.w	8009bac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff fe83 	bl	80095c8 <USBD_CoreFindEP>
 80098c2:	4603      	mov	r3, r0
 80098c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098c6:	7b7b      	ldrb	r3, [r7, #13]
 80098c8:	2bff      	cmp	r3, #255	; 0xff
 80098ca:	f000 8174 	beq.w	8009bb6 <USBD_StdEPReq+0x32e>
 80098ce:	7b7b      	ldrb	r3, [r7, #13]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f040 8170 	bne.w	8009bb6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80098d6:	7b7a      	ldrb	r2, [r7, #13]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80098de:	7b7a      	ldrb	r2, [r7, #13]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	32ae      	adds	r2, #174	; 0xae
 80098e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 8163 	beq.w	8009bb6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80098f0:	7b7a      	ldrb	r2, [r7, #13]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	32ae      	adds	r2, #174	; 0xae
 80098f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	4798      	blx	r3
 8009902:	4603      	mov	r3, r0
 8009904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009906:	e156      	b.n	8009bb6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	785b      	ldrb	r3, [r3, #1]
 800990c:	2b03      	cmp	r3, #3
 800990e:	d008      	beq.n	8009922 <USBD_StdEPReq+0x9a>
 8009910:	2b03      	cmp	r3, #3
 8009912:	f300 8145 	bgt.w	8009ba0 <USBD_StdEPReq+0x318>
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 809b 	beq.w	8009a52 <USBD_StdEPReq+0x1ca>
 800991c:	2b01      	cmp	r3, #1
 800991e:	d03c      	beq.n	800999a <USBD_StdEPReq+0x112>
 8009920:	e13e      	b.n	8009ba0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b02      	cmp	r3, #2
 800992c:	d002      	beq.n	8009934 <USBD_StdEPReq+0xac>
 800992e:	2b03      	cmp	r3, #3
 8009930:	d016      	beq.n	8009960 <USBD_StdEPReq+0xd8>
 8009932:	e02c      	b.n	800998e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009934:	7bbb      	ldrb	r3, [r7, #14]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00d      	beq.n	8009956 <USBD_StdEPReq+0xce>
 800993a:	7bbb      	ldrb	r3, [r7, #14]
 800993c:	2b80      	cmp	r3, #128	; 0x80
 800993e:	d00a      	beq.n	8009956 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	4619      	mov	r1, r3
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f001 f9b1 	bl	800acac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800994a:	2180      	movs	r1, #128	; 0x80
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 f9ad 	bl	800acac <USBD_LL_StallEP>
 8009952:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009954:	e020      	b.n	8009998 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fca4 	bl	800a2a6 <USBD_CtlError>
              break;
 800995e:	e01b      	b.n	8009998 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	885b      	ldrh	r3, [r3, #2]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10e      	bne.n	8009986 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009968:	7bbb      	ldrb	r3, [r7, #14]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00b      	beq.n	8009986 <USBD_StdEPReq+0xfe>
 800996e:	7bbb      	ldrb	r3, [r7, #14]
 8009970:	2b80      	cmp	r3, #128	; 0x80
 8009972:	d008      	beq.n	8009986 <USBD_StdEPReq+0xfe>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	88db      	ldrh	r3, [r3, #6]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d104      	bne.n	8009986 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800997c:	7bbb      	ldrb	r3, [r7, #14]
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f001 f993 	bl	800acac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fd58 	bl	800a43c <USBD_CtlSendStatus>

              break;
 800998c:	e004      	b.n	8009998 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fc88 	bl	800a2a6 <USBD_CtlError>
              break;
 8009996:	bf00      	nop
          }
          break;
 8009998:	e107      	b.n	8009baa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d002      	beq.n	80099ac <USBD_StdEPReq+0x124>
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d016      	beq.n	80099d8 <USBD_StdEPReq+0x150>
 80099aa:	e04b      	b.n	8009a44 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00d      	beq.n	80099ce <USBD_StdEPReq+0x146>
 80099b2:	7bbb      	ldrb	r3, [r7, #14]
 80099b4:	2b80      	cmp	r3, #128	; 0x80
 80099b6:	d00a      	beq.n	80099ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80099b8:	7bbb      	ldrb	r3, [r7, #14]
 80099ba:	4619      	mov	r1, r3
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f001 f975 	bl	800acac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80099c2:	2180      	movs	r1, #128	; 0x80
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 f971 	bl	800acac <USBD_LL_StallEP>
 80099ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099cc:	e040      	b.n	8009a50 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fc68 	bl	800a2a6 <USBD_CtlError>
              break;
 80099d6:	e03b      	b.n	8009a50 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	885b      	ldrh	r3, [r3, #2]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d136      	bne.n	8009a4e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d004      	beq.n	80099f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80099ea:	7bbb      	ldrb	r3, [r7, #14]
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f001 f97b 	bl	800acea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fd21 	bl	800a43c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80099fa:	7bbb      	ldrb	r3, [r7, #14]
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7ff fde2 	bl	80095c8 <USBD_CoreFindEP>
 8009a04:	4603      	mov	r3, r0
 8009a06:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a08:	7b7b      	ldrb	r3, [r7, #13]
 8009a0a:	2bff      	cmp	r3, #255	; 0xff
 8009a0c:	d01f      	beq.n	8009a4e <USBD_StdEPReq+0x1c6>
 8009a0e:	7b7b      	ldrb	r3, [r7, #13]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d11c      	bne.n	8009a4e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009a14:	7b7a      	ldrb	r2, [r7, #13]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009a1c:	7b7a      	ldrb	r2, [r7, #13]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	32ae      	adds	r2, #174	; 0xae
 8009a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d010      	beq.n	8009a4e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a2c:	7b7a      	ldrb	r2, [r7, #13]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	32ae      	adds	r2, #174	; 0xae
 8009a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	4798      	blx	r3
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009a42:	e004      	b.n	8009a4e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fc2d 	bl	800a2a6 <USBD_CtlError>
              break;
 8009a4c:	e000      	b.n	8009a50 <USBD_StdEPReq+0x1c8>
              break;
 8009a4e:	bf00      	nop
          }
          break;
 8009a50:	e0ab      	b.n	8009baa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d002      	beq.n	8009a64 <USBD_StdEPReq+0x1dc>
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d032      	beq.n	8009ac8 <USBD_StdEPReq+0x240>
 8009a62:	e097      	b.n	8009b94 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d007      	beq.n	8009a7a <USBD_StdEPReq+0x1f2>
 8009a6a:	7bbb      	ldrb	r3, [r7, #14]
 8009a6c:	2b80      	cmp	r3, #128	; 0x80
 8009a6e:	d004      	beq.n	8009a7a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fc17 	bl	800a2a6 <USBD_CtlError>
                break;
 8009a78:	e091      	b.n	8009b9e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	da0b      	bge.n	8009a9a <USBD_StdEPReq+0x212>
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a88:	4613      	mov	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	3310      	adds	r3, #16
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	4413      	add	r3, r2
 8009a96:	3304      	adds	r3, #4
 8009a98:	e00b      	b.n	8009ab2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a9a:	7bbb      	ldrb	r3, [r7, #14]
 8009a9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	4413      	add	r3, r2
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2202      	movs	r2, #2
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fc61 	bl	800a388 <USBD_CtlSendData>
              break;
 8009ac6:	e06a      	b.n	8009b9e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	da11      	bge.n	8009af4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ad0:	7bbb      	ldrb	r3, [r7, #14]
 8009ad2:	f003 020f 	and.w	r2, r3, #15
 8009ad6:	6879      	ldr	r1, [r7, #4]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	440b      	add	r3, r1
 8009ae2:	3324      	adds	r3, #36	; 0x24
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d117      	bne.n	8009b1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fbda 	bl	800a2a6 <USBD_CtlError>
                  break;
 8009af2:	e054      	b.n	8009b9e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	f003 020f 	and.w	r2, r3, #15
 8009afa:	6879      	ldr	r1, [r7, #4]
 8009afc:	4613      	mov	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4413      	add	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	440b      	add	r3, r1
 8009b06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b0a:	881b      	ldrh	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d104      	bne.n	8009b1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fbc7 	bl	800a2a6 <USBD_CtlError>
                  break;
 8009b18:	e041      	b.n	8009b9e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	da0b      	bge.n	8009b3a <USBD_StdEPReq+0x2b2>
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
 8009b24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b28:	4613      	mov	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	3310      	adds	r3, #16
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	4413      	add	r3, r2
 8009b36:	3304      	adds	r3, #4
 8009b38:	e00b      	b.n	8009b52 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
 8009b3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	4413      	add	r3, r2
 8009b50:	3304      	adds	r3, #4
 8009b52:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d002      	beq.n	8009b60 <USBD_StdEPReq+0x2d8>
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
 8009b5c:	2b80      	cmp	r3, #128	; 0x80
 8009b5e:	d103      	bne.n	8009b68 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	2200      	movs	r2, #0
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	e00e      	b.n	8009b86 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f001 f8db 	bl	800ad28 <USBD_LL_IsStallEP>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d003      	beq.n	8009b80 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	601a      	str	r2, [r3, #0]
 8009b7e:	e002      	b.n	8009b86 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fbfb 	bl	800a388 <USBD_CtlSendData>
              break;
 8009b92:	e004      	b.n	8009b9e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fb85 	bl	800a2a6 <USBD_CtlError>
              break;
 8009b9c:	bf00      	nop
          }
          break;
 8009b9e:	e004      	b.n	8009baa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fb7f 	bl	800a2a6 <USBD_CtlError>
          break;
 8009ba8:	bf00      	nop
      }
      break;
 8009baa:	e005      	b.n	8009bb8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 fb79 	bl	800a2a6 <USBD_CtlError>
      break;
 8009bb4:	e000      	b.n	8009bb8 <USBD_StdEPReq+0x330>
      break;
 8009bb6:	bf00      	nop
  }

  return ret;
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
	...

08009bc4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	885b      	ldrh	r3, [r3, #2]
 8009bde:	0a1b      	lsrs	r3, r3, #8
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	3b01      	subs	r3, #1
 8009be4:	2b0e      	cmp	r3, #14
 8009be6:	f200 8152 	bhi.w	8009e8e <USBD_GetDescriptor+0x2ca>
 8009bea:	a201      	add	r2, pc, #4	; (adr r2, 8009bf0 <USBD_GetDescriptor+0x2c>)
 8009bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf0:	08009c61 	.word	0x08009c61
 8009bf4:	08009c79 	.word	0x08009c79
 8009bf8:	08009cb9 	.word	0x08009cb9
 8009bfc:	08009e8f 	.word	0x08009e8f
 8009c00:	08009e8f 	.word	0x08009e8f
 8009c04:	08009e2f 	.word	0x08009e2f
 8009c08:	08009e5b 	.word	0x08009e5b
 8009c0c:	08009e8f 	.word	0x08009e8f
 8009c10:	08009e8f 	.word	0x08009e8f
 8009c14:	08009e8f 	.word	0x08009e8f
 8009c18:	08009e8f 	.word	0x08009e8f
 8009c1c:	08009e8f 	.word	0x08009e8f
 8009c20:	08009e8f 	.word	0x08009e8f
 8009c24:	08009e8f 	.word	0x08009e8f
 8009c28:	08009c2d 	.word	0x08009c2d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c32:	69db      	ldr	r3, [r3, #28]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00b      	beq.n	8009c50 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	7c12      	ldrb	r2, [r2, #16]
 8009c44:	f107 0108 	add.w	r1, r7, #8
 8009c48:	4610      	mov	r0, r2
 8009c4a:	4798      	blx	r3
 8009c4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c4e:	e126      	b.n	8009e9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fb27 	bl	800a2a6 <USBD_CtlError>
        err++;
 8009c58:	7afb      	ldrb	r3, [r7, #11]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	72fb      	strb	r3, [r7, #11]
      break;
 8009c5e:	e11e      	b.n	8009e9e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	7c12      	ldrb	r2, [r2, #16]
 8009c6c:	f107 0108 	add.w	r1, r7, #8
 8009c70:	4610      	mov	r0, r2
 8009c72:	4798      	blx	r3
 8009c74:	60f8      	str	r0, [r7, #12]
      break;
 8009c76:	e112      	b.n	8009e9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	7c1b      	ldrb	r3, [r3, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10d      	bne.n	8009c9c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c88:	f107 0208 	add.w	r2, r7, #8
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	4798      	blx	r3
 8009c90:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3301      	adds	r3, #1
 8009c96:	2202      	movs	r2, #2
 8009c98:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c9a:	e100      	b.n	8009e9e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca4:	f107 0208 	add.w	r2, r7, #8
 8009ca8:	4610      	mov	r0, r2
 8009caa:	4798      	blx	r3
 8009cac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	701a      	strb	r2, [r3, #0]
      break;
 8009cb6:	e0f2      	b.n	8009e9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	885b      	ldrh	r3, [r3, #2]
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	2b05      	cmp	r3, #5
 8009cc0:	f200 80ac 	bhi.w	8009e1c <USBD_GetDescriptor+0x258>
 8009cc4:	a201      	add	r2, pc, #4	; (adr r2, 8009ccc <USBD_GetDescriptor+0x108>)
 8009cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cca:	bf00      	nop
 8009ccc:	08009ce5 	.word	0x08009ce5
 8009cd0:	08009d19 	.word	0x08009d19
 8009cd4:	08009d4d 	.word	0x08009d4d
 8009cd8:	08009d81 	.word	0x08009d81
 8009cdc:	08009db5 	.word	0x08009db5
 8009ce0:	08009de9 	.word	0x08009de9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00b      	beq.n	8009d08 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	7c12      	ldrb	r2, [r2, #16]
 8009cfc:	f107 0108 	add.w	r1, r7, #8
 8009d00:	4610      	mov	r0, r2
 8009d02:	4798      	blx	r3
 8009d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d06:	e091      	b.n	8009e2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 facb 	bl	800a2a6 <USBD_CtlError>
            err++;
 8009d10:	7afb      	ldrb	r3, [r7, #11]
 8009d12:	3301      	adds	r3, #1
 8009d14:	72fb      	strb	r3, [r7, #11]
          break;
 8009d16:	e089      	b.n	8009e2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d00b      	beq.n	8009d3c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	7c12      	ldrb	r2, [r2, #16]
 8009d30:	f107 0108 	add.w	r1, r7, #8
 8009d34:	4610      	mov	r0, r2
 8009d36:	4798      	blx	r3
 8009d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d3a:	e077      	b.n	8009e2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fab1 	bl	800a2a6 <USBD_CtlError>
            err++;
 8009d44:	7afb      	ldrb	r3, [r7, #11]
 8009d46:	3301      	adds	r3, #1
 8009d48:	72fb      	strb	r3, [r7, #11]
          break;
 8009d4a:	e06f      	b.n	8009e2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00b      	beq.n	8009d70 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	7c12      	ldrb	r2, [r2, #16]
 8009d64:	f107 0108 	add.w	r1, r7, #8
 8009d68:	4610      	mov	r0, r2
 8009d6a:	4798      	blx	r3
 8009d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d6e:	e05d      	b.n	8009e2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fa97 	bl	800a2a6 <USBD_CtlError>
            err++;
 8009d78:	7afb      	ldrb	r3, [r7, #11]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d7e:	e055      	b.n	8009e2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00b      	beq.n	8009da4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	7c12      	ldrb	r2, [r2, #16]
 8009d98:	f107 0108 	add.w	r1, r7, #8
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	4798      	blx	r3
 8009da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009da2:	e043      	b.n	8009e2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fa7d 	bl	800a2a6 <USBD_CtlError>
            err++;
 8009dac:	7afb      	ldrb	r3, [r7, #11]
 8009dae:	3301      	adds	r3, #1
 8009db0:	72fb      	strb	r3, [r7, #11]
          break;
 8009db2:	e03b      	b.n	8009e2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00b      	beq.n	8009dd8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	7c12      	ldrb	r2, [r2, #16]
 8009dcc:	f107 0108 	add.w	r1, r7, #8
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	4798      	blx	r3
 8009dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dd6:	e029      	b.n	8009e2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fa63 	bl	800a2a6 <USBD_CtlError>
            err++;
 8009de0:	7afb      	ldrb	r3, [r7, #11]
 8009de2:	3301      	adds	r3, #1
 8009de4:	72fb      	strb	r3, [r7, #11]
          break;
 8009de6:	e021      	b.n	8009e2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00b      	beq.n	8009e0c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	7c12      	ldrb	r2, [r2, #16]
 8009e00:	f107 0108 	add.w	r1, r7, #8
 8009e04:	4610      	mov	r0, r2
 8009e06:	4798      	blx	r3
 8009e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e0a:	e00f      	b.n	8009e2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fa49 	bl	800a2a6 <USBD_CtlError>
            err++;
 8009e14:	7afb      	ldrb	r3, [r7, #11]
 8009e16:	3301      	adds	r3, #1
 8009e18:	72fb      	strb	r3, [r7, #11]
          break;
 8009e1a:	e007      	b.n	8009e2c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fa41 	bl	800a2a6 <USBD_CtlError>
          err++;
 8009e24:	7afb      	ldrb	r3, [r7, #11]
 8009e26:	3301      	adds	r3, #1
 8009e28:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009e2a:	bf00      	nop
      }
      break;
 8009e2c:	e037      	b.n	8009e9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	7c1b      	ldrb	r3, [r3, #16]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d109      	bne.n	8009e4a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3e:	f107 0208 	add.w	r2, r7, #8
 8009e42:	4610      	mov	r0, r2
 8009e44:	4798      	blx	r3
 8009e46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e48:	e029      	b.n	8009e9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fa2a 	bl	800a2a6 <USBD_CtlError>
        err++;
 8009e52:	7afb      	ldrb	r3, [r7, #11]
 8009e54:	3301      	adds	r3, #1
 8009e56:	72fb      	strb	r3, [r7, #11]
      break;
 8009e58:	e021      	b.n	8009e9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	7c1b      	ldrb	r3, [r3, #16]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10d      	bne.n	8009e7e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e6a:	f107 0208 	add.w	r2, r7, #8
 8009e6e:	4610      	mov	r0, r2
 8009e70:	4798      	blx	r3
 8009e72:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	3301      	adds	r3, #1
 8009e78:	2207      	movs	r2, #7
 8009e7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e7c:	e00f      	b.n	8009e9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fa10 	bl	800a2a6 <USBD_CtlError>
        err++;
 8009e86:	7afb      	ldrb	r3, [r7, #11]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e8c:	e007      	b.n	8009e9e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fa08 	bl	800a2a6 <USBD_CtlError>
      err++;
 8009e96:	7afb      	ldrb	r3, [r7, #11]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e9c:	bf00      	nop
  }

  if (err != 0U)
 8009e9e:	7afb      	ldrb	r3, [r7, #11]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d11e      	bne.n	8009ee2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	88db      	ldrh	r3, [r3, #6]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d016      	beq.n	8009eda <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009eac:	893b      	ldrh	r3, [r7, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00e      	beq.n	8009ed0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	88da      	ldrh	r2, [r3, #6]
 8009eb6:	893b      	ldrh	r3, [r7, #8]
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	bf28      	it	cs
 8009ebc:	4613      	movcs	r3, r2
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ec2:	893b      	ldrh	r3, [r7, #8]
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	68f9      	ldr	r1, [r7, #12]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 fa5d 	bl	800a388 <USBD_CtlSendData>
 8009ece:	e009      	b.n	8009ee4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f9e7 	bl	800a2a6 <USBD_CtlError>
 8009ed8:	e004      	b.n	8009ee4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 faae 	bl	800a43c <USBD_CtlSendStatus>
 8009ee0:	e000      	b.n	8009ee4 <USBD_GetDescriptor+0x320>
    return;
 8009ee2:	bf00      	nop
  }
}
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop

08009eec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	889b      	ldrh	r3, [r3, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d131      	bne.n	8009f62 <USBD_SetAddress+0x76>
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	88db      	ldrh	r3, [r3, #6]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d12d      	bne.n	8009f62 <USBD_SetAddress+0x76>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	885b      	ldrh	r3, [r3, #2]
 8009f0a:	2b7f      	cmp	r3, #127	; 0x7f
 8009f0c:	d829      	bhi.n	8009f62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	885b      	ldrh	r3, [r3, #2]
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	d104      	bne.n	8009f30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f9bc 	bl	800a2a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f2e:	e01d      	b.n	8009f6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	7bfa      	ldrb	r2, [r7, #15]
 8009f34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 ff1f 	bl	800ad80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fa7a 	bl	800a43c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d004      	beq.n	8009f58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2202      	movs	r2, #2
 8009f52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f56:	e009      	b.n	8009f6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f60:	e004      	b.n	8009f6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f99e 	bl	800a2a6 <USBD_CtlError>
  }
}
 8009f6a:	bf00      	nop
 8009f6c:	bf00      	nop
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	885b      	ldrh	r3, [r3, #2]
 8009f86:	b2da      	uxtb	r2, r3
 8009f88:	4b4e      	ldr	r3, [pc, #312]	; (800a0c4 <USBD_SetConfig+0x150>)
 8009f8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f8c:	4b4d      	ldr	r3, [pc, #308]	; (800a0c4 <USBD_SetConfig+0x150>)
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d905      	bls.n	8009fa0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f985 	bl	800a2a6 <USBD_CtlError>
    return USBD_FAIL;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e08c      	b.n	800a0ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d002      	beq.n	8009fb2 <USBD_SetConfig+0x3e>
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d029      	beq.n	800a004 <USBD_SetConfig+0x90>
 8009fb0:	e075      	b.n	800a09e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009fb2:	4b44      	ldr	r3, [pc, #272]	; (800a0c4 <USBD_SetConfig+0x150>)
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d020      	beq.n	8009ffc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009fba:	4b42      	ldr	r3, [pc, #264]	; (800a0c4 <USBD_SetConfig+0x150>)
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fc4:	4b3f      	ldr	r3, [pc, #252]	; (800a0c4 <USBD_SetConfig+0x150>)
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f7fe ffbd 	bl	8008f4a <USBD_SetClassConfig>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d008      	beq.n	8009fec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009fda:	6839      	ldr	r1, [r7, #0]
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f962 	bl	800a2a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2202      	movs	r2, #2
 8009fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fea:	e065      	b.n	800a0b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fa25 	bl	800a43c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2203      	movs	r2, #3
 8009ff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ffa:	e05d      	b.n	800a0b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fa1d 	bl	800a43c <USBD_CtlSendStatus>
      break;
 800a002:	e059      	b.n	800a0b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a004:	4b2f      	ldr	r3, [pc, #188]	; (800a0c4 <USBD_SetConfig+0x150>)
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d112      	bne.n	800a032 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2202      	movs	r2, #2
 800a010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a014:	4b2b      	ldr	r3, [pc, #172]	; (800a0c4 <USBD_SetConfig+0x150>)
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a01e:	4b29      	ldr	r3, [pc, #164]	; (800a0c4 <USBD_SetConfig+0x150>)
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7fe ffac 	bl	8008f82 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fa06 	bl	800a43c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a030:	e042      	b.n	800a0b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a032:	4b24      	ldr	r3, [pc, #144]	; (800a0c4 <USBD_SetConfig+0x150>)
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d02a      	beq.n	800a096 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	b2db      	uxtb	r3, r3
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7fe ff9a 	bl	8008f82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a04e:	4b1d      	ldr	r3, [pc, #116]	; (800a0c4 <USBD_SetConfig+0x150>)
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a058:	4b1a      	ldr	r3, [pc, #104]	; (800a0c4 <USBD_SetConfig+0x150>)
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7fe ff73 	bl	8008f4a <USBD_SetClassConfig>
 800a064:	4603      	mov	r3, r0
 800a066:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a068:	7bfb      	ldrb	r3, [r7, #15]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00f      	beq.n	800a08e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f918 	bl	800a2a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	4619      	mov	r1, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7fe ff7f 	bl	8008f82 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2202      	movs	r2, #2
 800a088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a08c:	e014      	b.n	800a0b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f9d4 	bl	800a43c <USBD_CtlSendStatus>
      break;
 800a094:	e010      	b.n	800a0b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f9d0 	bl	800a43c <USBD_CtlSendStatus>
      break;
 800a09c:	e00c      	b.n	800a0b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f900 	bl	800a2a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0a6:	4b07      	ldr	r3, [pc, #28]	; (800a0c4 <USBD_SetConfig+0x150>)
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7fe ff68 	bl	8008f82 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a0b6:	bf00      	nop
  }

  return ret;
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	2000072c 	.word	0x2000072c

0800a0c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	88db      	ldrh	r3, [r3, #6]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d004      	beq.n	800a0e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f8e2 	bl	800a2a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a0e2:	e023      	b.n	800a12c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	dc02      	bgt.n	800a0f6 <USBD_GetConfig+0x2e>
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	dc03      	bgt.n	800a0fc <USBD_GetConfig+0x34>
 800a0f4:	e015      	b.n	800a122 <USBD_GetConfig+0x5a>
 800a0f6:	2b03      	cmp	r3, #3
 800a0f8:	d00b      	beq.n	800a112 <USBD_GetConfig+0x4a>
 800a0fa:	e012      	b.n	800a122 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	3308      	adds	r3, #8
 800a106:	2201      	movs	r2, #1
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f93c 	bl	800a388 <USBD_CtlSendData>
        break;
 800a110:	e00c      	b.n	800a12c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	3304      	adds	r3, #4
 800a116:	2201      	movs	r2, #1
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f934 	bl	800a388 <USBD_CtlSendData>
        break;
 800a120:	e004      	b.n	800a12c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 f8be 	bl	800a2a6 <USBD_CtlError>
        break;
 800a12a:	bf00      	nop
}
 800a12c:	bf00      	nop
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a144:	b2db      	uxtb	r3, r3
 800a146:	3b01      	subs	r3, #1
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d81e      	bhi.n	800a18a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	88db      	ldrh	r3, [r3, #6]
 800a150:	2b02      	cmp	r3, #2
 800a152:	d004      	beq.n	800a15e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f8a5 	bl	800a2a6 <USBD_CtlError>
        break;
 800a15c:	e01a      	b.n	800a194 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d005      	beq.n	800a17a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	f043 0202 	orr.w	r2, r3, #2
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	330c      	adds	r3, #12
 800a17e:	2202      	movs	r2, #2
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f900 	bl	800a388 <USBD_CtlSendData>
      break;
 800a188:	e004      	b.n	800a194 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a18a:	6839      	ldr	r1, [r7, #0]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f88a 	bl	800a2a6 <USBD_CtlError>
      break;
 800a192:	bf00      	nop
  }
}
 800a194:	bf00      	nop
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	885b      	ldrh	r3, [r3, #2]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d107      	bne.n	800a1be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f940 	bl	800a43c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a1bc:	e013      	b.n	800a1e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	885b      	ldrh	r3, [r3, #2]
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d10b      	bne.n	800a1de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	889b      	ldrh	r3, [r3, #4]
 800a1ca:	0a1b      	lsrs	r3, r3, #8
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f930 	bl	800a43c <USBD_CtlSendStatus>
}
 800a1dc:	e003      	b.n	800a1e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a1de:	6839      	ldr	r1, [r7, #0]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f860 	bl	800a2a6 <USBD_CtlError>
}
 800a1e6:	bf00      	nop
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b082      	sub	sp, #8
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	3b01      	subs	r3, #1
 800a202:	2b02      	cmp	r3, #2
 800a204:	d80b      	bhi.n	800a21e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	885b      	ldrh	r3, [r3, #2]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d10c      	bne.n	800a228 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f910 	bl	800a43c <USBD_CtlSendStatus>
      }
      break;
 800a21c:	e004      	b.n	800a228 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a21e:	6839      	ldr	r1, [r7, #0]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 f840 	bl	800a2a6 <USBD_CtlError>
      break;
 800a226:	e000      	b.n	800a22a <USBD_ClrFeature+0x3c>
      break;
 800a228:	bf00      	nop
  }
}
 800a22a:	bf00      	nop
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b084      	sub	sp, #16
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	781a      	ldrb	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	3301      	adds	r3, #1
 800a24c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	781a      	ldrb	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3301      	adds	r3, #1
 800a25a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f7ff fa17 	bl	8009690 <SWAPBYTE>
 800a262:	4603      	mov	r3, r0
 800a264:	461a      	mov	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3301      	adds	r3, #1
 800a26e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	3301      	adds	r3, #1
 800a274:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f7ff fa0a 	bl	8009690 <SWAPBYTE>
 800a27c:	4603      	mov	r3, r0
 800a27e:	461a      	mov	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	3301      	adds	r3, #1
 800a288:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3301      	adds	r3, #1
 800a28e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f7ff f9fd 	bl	8009690 <SWAPBYTE>
 800a296:	4603      	mov	r3, r0
 800a298:	461a      	mov	r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	80da      	strh	r2, [r3, #6]
}
 800a29e:	bf00      	nop
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2b0:	2180      	movs	r1, #128	; 0x80
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fcfa 	bl	800acac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fcf6 	bl	800acac <USBD_LL_StallEP>
}
 800a2c0:	bf00      	nop
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d036      	beq.n	800a34c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a2e2:	6938      	ldr	r0, [r7, #16]
 800a2e4:	f000 f836 	bl	800a354 <USBD_GetLen>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	005b      	lsls	r3, r3, #1
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a2f6:	7dfb      	ldrb	r3, [r7, #23]
 800a2f8:	68ba      	ldr	r2, [r7, #8]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	7812      	ldrb	r2, [r2, #0]
 800a300:	701a      	strb	r2, [r3, #0]
  idx++;
 800a302:	7dfb      	ldrb	r3, [r7, #23]
 800a304:	3301      	adds	r3, #1
 800a306:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a308:	7dfb      	ldrb	r3, [r7, #23]
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	4413      	add	r3, r2
 800a30e:	2203      	movs	r2, #3
 800a310:	701a      	strb	r2, [r3, #0]
  idx++;
 800a312:	7dfb      	ldrb	r3, [r7, #23]
 800a314:	3301      	adds	r3, #1
 800a316:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a318:	e013      	b.n	800a342 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	4413      	add	r3, r2
 800a320:	693a      	ldr	r2, [r7, #16]
 800a322:	7812      	ldrb	r2, [r2, #0]
 800a324:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	3301      	adds	r3, #1
 800a32a:	613b      	str	r3, [r7, #16]
    idx++;
 800a32c:	7dfb      	ldrb	r3, [r7, #23]
 800a32e:	3301      	adds	r3, #1
 800a330:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a332:	7dfb      	ldrb	r3, [r7, #23]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	4413      	add	r3, r2
 800a338:	2200      	movs	r2, #0
 800a33a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a33c:	7dfb      	ldrb	r3, [r7, #23]
 800a33e:	3301      	adds	r3, #1
 800a340:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1e7      	bne.n	800a31a <USBD_GetString+0x52>
 800a34a:	e000      	b.n	800a34e <USBD_GetString+0x86>
    return;
 800a34c:	bf00      	nop
  }
}
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a364:	e005      	b.n	800a372 <USBD_GetLen+0x1e>
  {
    len++;
 800a366:	7bfb      	ldrb	r3, [r7, #15]
 800a368:	3301      	adds	r3, #1
 800a36a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	3301      	adds	r3, #1
 800a370:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1f5      	bne.n	800a366 <USBD_GetLen+0x12>
  }

  return len;
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2202      	movs	r2, #2
 800a398:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 fd05 	bl	800adbe <USBD_LL_Transmit>

  return USBD_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b084      	sub	sp, #16
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	60f8      	str	r0, [r7, #12]
 800a3c6:	60b9      	str	r1, [r7, #8]
 800a3c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	2100      	movs	r1, #0
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f000 fcf4 	bl	800adbe <USBD_LL_Transmit>

  return USBD_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2203      	movs	r2, #3
 800a3f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	2100      	movs	r1, #0
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f000 fcf8 	bl	800ae00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	60b9      	str	r1, [r7, #8]
 800a424:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	2100      	movs	r1, #0
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f000 fce7 	bl	800ae00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2204      	movs	r2, #4
 800a448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a44c:	2300      	movs	r3, #0
 800a44e:	2200      	movs	r2, #0
 800a450:	2100      	movs	r1, #0
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fcb3 	bl	800adbe <USBD_LL_Transmit>

  return USBD_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b082      	sub	sp, #8
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2205      	movs	r2, #5
 800a46e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a472:	2300      	movs	r3, #0
 800a474:	2200      	movs	r2, #0
 800a476:	2100      	movs	r1, #0
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fcc1 	bl	800ae00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a48c:	2200      	movs	r2, #0
 800a48e:	4912      	ldr	r1, [pc, #72]	; (800a4d8 <MX_USB_DEVICE_Init+0x50>)
 800a490:	4812      	ldr	r0, [pc, #72]	; (800a4dc <MX_USB_DEVICE_Init+0x54>)
 800a492:	f7fe fcdd 	bl	8008e50 <USBD_Init>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a49c:	f7f6 fbfa 	bl	8000c94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a4a0:	490f      	ldr	r1, [pc, #60]	; (800a4e0 <MX_USB_DEVICE_Init+0x58>)
 800a4a2:	480e      	ldr	r0, [pc, #56]	; (800a4dc <MX_USB_DEVICE_Init+0x54>)
 800a4a4:	f7fe fd04 	bl	8008eb0 <USBD_RegisterClass>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a4ae:	f7f6 fbf1 	bl	8000c94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a4b2:	490c      	ldr	r1, [pc, #48]	; (800a4e4 <MX_USB_DEVICE_Init+0x5c>)
 800a4b4:	4809      	ldr	r0, [pc, #36]	; (800a4dc <MX_USB_DEVICE_Init+0x54>)
 800a4b6:	f7fe fc3b 	bl	8008d30 <USBD_CDC_RegisterInterface>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a4c0:	f7f6 fbe8 	bl	8000c94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a4c4:	4805      	ldr	r0, [pc, #20]	; (800a4dc <MX_USB_DEVICE_Init+0x54>)
 800a4c6:	f7fe fd29 	bl	8008f1c <USBD_Start>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a4d0:	f7f6 fbe0 	bl	8000c94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a4d4:	bf00      	nop
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	200000cc 	.word	0x200000cc
 800a4dc:	20000730 	.word	0x20000730
 800a4e0:	20000038 	.word	0x20000038
 800a4e4:	200000b8 	.word	0x200000b8

0800a4e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	4905      	ldr	r1, [pc, #20]	; (800a504 <CDC_Init_FS+0x1c>)
 800a4f0:	4805      	ldr	r0, [pc, #20]	; (800a508 <CDC_Init_FS+0x20>)
 800a4f2:	f7fe fc37 	bl	8008d64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a4f6:	4905      	ldr	r1, [pc, #20]	; (800a50c <CDC_Init_FS+0x24>)
 800a4f8:	4803      	ldr	r0, [pc, #12]	; (800a508 <CDC_Init_FS+0x20>)
 800a4fa:	f7fe fc55 	bl	8008da8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a4fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a500:	4618      	mov	r0, r3
 800a502:	bd80      	pop	{r7, pc}
 800a504:	2000120c 	.word	0x2000120c
 800a508:	20000730 	.word	0x20000730
 800a50c:	20000a0c 	.word	0x20000a0c

0800a510 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a510:	b480      	push	{r7}
 800a512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a514:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a516:	4618      	mov	r0, r3
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	4603      	mov	r3, r0
 800a528:	6039      	str	r1, [r7, #0]
 800a52a:	71fb      	strb	r3, [r7, #7]
 800a52c:	4613      	mov	r3, r2
 800a52e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a530:	79fb      	ldrb	r3, [r7, #7]
 800a532:	2b23      	cmp	r3, #35	; 0x23
 800a534:	d84a      	bhi.n	800a5cc <CDC_Control_FS+0xac>
 800a536:	a201      	add	r2, pc, #4	; (adr r2, 800a53c <CDC_Control_FS+0x1c>)
 800a538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53c:	0800a5cd 	.word	0x0800a5cd
 800a540:	0800a5cd 	.word	0x0800a5cd
 800a544:	0800a5cd 	.word	0x0800a5cd
 800a548:	0800a5cd 	.word	0x0800a5cd
 800a54c:	0800a5cd 	.word	0x0800a5cd
 800a550:	0800a5cd 	.word	0x0800a5cd
 800a554:	0800a5cd 	.word	0x0800a5cd
 800a558:	0800a5cd 	.word	0x0800a5cd
 800a55c:	0800a5cd 	.word	0x0800a5cd
 800a560:	0800a5cd 	.word	0x0800a5cd
 800a564:	0800a5cd 	.word	0x0800a5cd
 800a568:	0800a5cd 	.word	0x0800a5cd
 800a56c:	0800a5cd 	.word	0x0800a5cd
 800a570:	0800a5cd 	.word	0x0800a5cd
 800a574:	0800a5cd 	.word	0x0800a5cd
 800a578:	0800a5cd 	.word	0x0800a5cd
 800a57c:	0800a5cd 	.word	0x0800a5cd
 800a580:	0800a5cd 	.word	0x0800a5cd
 800a584:	0800a5cd 	.word	0x0800a5cd
 800a588:	0800a5cd 	.word	0x0800a5cd
 800a58c:	0800a5cd 	.word	0x0800a5cd
 800a590:	0800a5cd 	.word	0x0800a5cd
 800a594:	0800a5cd 	.word	0x0800a5cd
 800a598:	0800a5cd 	.word	0x0800a5cd
 800a59c:	0800a5cd 	.word	0x0800a5cd
 800a5a0:	0800a5cd 	.word	0x0800a5cd
 800a5a4:	0800a5cd 	.word	0x0800a5cd
 800a5a8:	0800a5cd 	.word	0x0800a5cd
 800a5ac:	0800a5cd 	.word	0x0800a5cd
 800a5b0:	0800a5cd 	.word	0x0800a5cd
 800a5b4:	0800a5cd 	.word	0x0800a5cd
 800a5b8:	0800a5cd 	.word	0x0800a5cd
 800a5bc:	0800a5cd 	.word	0x0800a5cd
 800a5c0:	0800a5cd 	.word	0x0800a5cd
 800a5c4:	0800a5cd 	.word	0x0800a5cd
 800a5c8:	0800a5cd 	.word	0x0800a5cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a5cc:	bf00      	nop
  }

  return (USBD_OK);
 800a5ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a5e6:	6879      	ldr	r1, [r7, #4]
 800a5e8:	4805      	ldr	r0, [pc, #20]	; (800a600 <CDC_Receive_FS+0x24>)
 800a5ea:	f7fe fbdd 	bl	8008da8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a5ee:	4804      	ldr	r0, [pc, #16]	; (800a600 <CDC_Receive_FS+0x24>)
 800a5f0:	f7fe fbf8 	bl	8008de4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a5f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	20000730 	.word	0x20000730

0800a604 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a604:	b480      	push	{r7}
 800a606:	b087      	sub	sp, #28
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	4613      	mov	r3, r2
 800a610:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a612:	2300      	movs	r3, #0
 800a614:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a616:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
	...

0800a628 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	6039      	str	r1, [r7, #0]
 800a632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	2212      	movs	r2, #18
 800a638:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a63a:	4b03      	ldr	r3, [pc, #12]	; (800a648 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	200000ec 	.word	0x200000ec

0800a64c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	4603      	mov	r3, r0
 800a654:	6039      	str	r1, [r7, #0]
 800a656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	2204      	movs	r2, #4
 800a65c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a65e:	4b03      	ldr	r3, [pc, #12]	; (800a66c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	2000010c 	.word	0x2000010c

0800a670 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	4603      	mov	r3, r0
 800a678:	6039      	str	r1, [r7, #0]
 800a67a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a67c:	79fb      	ldrb	r3, [r7, #7]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d105      	bne.n	800a68e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	4907      	ldr	r1, [pc, #28]	; (800a6a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a686:	4808      	ldr	r0, [pc, #32]	; (800a6a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a688:	f7ff fe1e 	bl	800a2c8 <USBD_GetString>
 800a68c:	e004      	b.n	800a698 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	4904      	ldr	r1, [pc, #16]	; (800a6a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a692:	4805      	ldr	r0, [pc, #20]	; (800a6a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a694:	f7ff fe18 	bl	800a2c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a698:	4b02      	ldr	r3, [pc, #8]	; (800a6a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20001a0c 	.word	0x20001a0c
 800a6a8:	0800b230 	.word	0x0800b230

0800a6ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	6039      	str	r1, [r7, #0]
 800a6b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	4904      	ldr	r1, [pc, #16]	; (800a6cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a6bc:	4804      	ldr	r0, [pc, #16]	; (800a6d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a6be:	f7ff fe03 	bl	800a2c8 <USBD_GetString>
  return USBD_StrDesc;
 800a6c2:	4b02      	ldr	r3, [pc, #8]	; (800a6cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	20001a0c 	.word	0x20001a0c
 800a6d0:	0800b248 	.word	0x0800b248

0800a6d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	4603      	mov	r3, r0
 800a6dc:	6039      	str	r1, [r7, #0]
 800a6de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	221a      	movs	r2, #26
 800a6e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a6e6:	f000 f855 	bl	800a794 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a6ea:	4b02      	ldr	r3, [pc, #8]	; (800a6f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	20000110 	.word	0x20000110

0800a6f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	4603      	mov	r3, r0
 800a700:	6039      	str	r1, [r7, #0]
 800a702:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a704:	79fb      	ldrb	r3, [r7, #7]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d105      	bne.n	800a716 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a70a:	683a      	ldr	r2, [r7, #0]
 800a70c:	4907      	ldr	r1, [pc, #28]	; (800a72c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a70e:	4808      	ldr	r0, [pc, #32]	; (800a730 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a710:	f7ff fdda 	bl	800a2c8 <USBD_GetString>
 800a714:	e004      	b.n	800a720 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a716:	683a      	ldr	r2, [r7, #0]
 800a718:	4904      	ldr	r1, [pc, #16]	; (800a72c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a71a:	4805      	ldr	r0, [pc, #20]	; (800a730 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a71c:	f7ff fdd4 	bl	800a2c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a720:	4b02      	ldr	r3, [pc, #8]	; (800a72c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a722:	4618      	mov	r0, r3
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	20001a0c 	.word	0x20001a0c
 800a730:	0800b25c 	.word	0x0800b25c

0800a734 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4603      	mov	r3, r0
 800a73c:	6039      	str	r1, [r7, #0]
 800a73e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a740:	79fb      	ldrb	r3, [r7, #7]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d105      	bne.n	800a752 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	4907      	ldr	r1, [pc, #28]	; (800a768 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a74a:	4808      	ldr	r0, [pc, #32]	; (800a76c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a74c:	f7ff fdbc 	bl	800a2c8 <USBD_GetString>
 800a750:	e004      	b.n	800a75c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	4904      	ldr	r1, [pc, #16]	; (800a768 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a756:	4805      	ldr	r0, [pc, #20]	; (800a76c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a758:	f7ff fdb6 	bl	800a2c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a75c:	4b02      	ldr	r3, [pc, #8]	; (800a768 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	20001a0c 	.word	0x20001a0c
 800a76c:	0800b268 	.word	0x0800b268

0800a770 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	6039      	str	r1, [r7, #0]
 800a77a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	220c      	movs	r2, #12
 800a780:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a782:	4b03      	ldr	r3, [pc, #12]	; (800a790 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a784:	4618      	mov	r0, r3
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	20000100 	.word	0x20000100

0800a794 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a79a:	4b0f      	ldr	r3, [pc, #60]	; (800a7d8 <Get_SerialNum+0x44>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a7a0:	4b0e      	ldr	r3, [pc, #56]	; (800a7dc <Get_SerialNum+0x48>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a7a6:	4b0e      	ldr	r3, [pc, #56]	; (800a7e0 <Get_SerialNum+0x4c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d009      	beq.n	800a7ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a7ba:	2208      	movs	r2, #8
 800a7bc:	4909      	ldr	r1, [pc, #36]	; (800a7e4 <Get_SerialNum+0x50>)
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f000 f814 	bl	800a7ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a7c4:	2204      	movs	r2, #4
 800a7c6:	4908      	ldr	r1, [pc, #32]	; (800a7e8 <Get_SerialNum+0x54>)
 800a7c8:	68b8      	ldr	r0, [r7, #8]
 800a7ca:	f000 f80f 	bl	800a7ec <IntToUnicode>
  }
}
 800a7ce:	bf00      	nop
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	1ff0f420 	.word	0x1ff0f420
 800a7dc:	1ff0f424 	.word	0x1ff0f424
 800a7e0:	1ff0f428 	.word	0x1ff0f428
 800a7e4:	20000112 	.word	0x20000112
 800a7e8:	20000122 	.word	0x20000122

0800a7ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7fe:	2300      	movs	r3, #0
 800a800:	75fb      	strb	r3, [r7, #23]
 800a802:	e027      	b.n	800a854 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	0f1b      	lsrs	r3, r3, #28
 800a808:	2b09      	cmp	r3, #9
 800a80a:	d80b      	bhi.n	800a824 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	0f1b      	lsrs	r3, r3, #28
 800a810:	b2da      	uxtb	r2, r3
 800a812:	7dfb      	ldrb	r3, [r7, #23]
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	4619      	mov	r1, r3
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	440b      	add	r3, r1
 800a81c:	3230      	adds	r2, #48	; 0x30
 800a81e:	b2d2      	uxtb	r2, r2
 800a820:	701a      	strb	r2, [r3, #0]
 800a822:	e00a      	b.n	800a83a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	0f1b      	lsrs	r3, r3, #28
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
 800a82c:	005b      	lsls	r3, r3, #1
 800a82e:	4619      	mov	r1, r3
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	440b      	add	r3, r1
 800a834:	3237      	adds	r2, #55	; 0x37
 800a836:	b2d2      	uxtb	r2, r2
 800a838:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	011b      	lsls	r3, r3, #4
 800a83e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a840:	7dfb      	ldrb	r3, [r7, #23]
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	3301      	adds	r3, #1
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	4413      	add	r3, r2
 800a84a:	2200      	movs	r2, #0
 800a84c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a84e:	7dfb      	ldrb	r3, [r7, #23]
 800a850:	3301      	adds	r3, #1
 800a852:	75fb      	strb	r3, [r7, #23]
 800a854:	7dfa      	ldrb	r2, [r7, #23]
 800a856:	79fb      	ldrb	r3, [r7, #7]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d3d3      	bcc.n	800a804 <IntToUnicode+0x18>
  }
}
 800a85c:	bf00      	nop
 800a85e:	bf00      	nop
 800a860:	371c      	adds	r7, #28
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
	...

0800a86c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b0ac      	sub	sp, #176	; 0xb0
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a874:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a878:	2200      	movs	r2, #0
 800a87a:	601a      	str	r2, [r3, #0]
 800a87c:	605a      	str	r2, [r3, #4]
 800a87e:	609a      	str	r2, [r3, #8]
 800a880:	60da      	str	r2, [r3, #12]
 800a882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a884:	f107 0318 	add.w	r3, r7, #24
 800a888:	2284      	movs	r2, #132	; 0x84
 800a88a:	2100      	movs	r1, #0
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 fc27 	bl	800b0e0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a89a:	d161      	bne.n	800a960 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a89c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a8a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a8a8:	f107 0318 	add.w	r3, r7, #24
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7f9 fc0b 	bl	80040c8 <HAL_RCCEx_PeriphCLKConfig>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d001      	beq.n	800a8bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a8b8:	f7f6 f9ec 	bl	8000c94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8bc:	4b2a      	ldr	r3, [pc, #168]	; (800a968 <HAL_PCD_MspInit+0xfc>)
 800a8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c0:	4a29      	ldr	r2, [pc, #164]	; (800a968 <HAL_PCD_MspInit+0xfc>)
 800a8c2:	f043 0301 	orr.w	r3, r3, #1
 800a8c6:	6313      	str	r3, [r2, #48]	; 0x30
 800a8c8:	4b27      	ldr	r3, [pc, #156]	; (800a968 <HAL_PCD_MspInit+0xfc>)
 800a8ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8cc:	f003 0301 	and.w	r3, r3, #1
 800a8d0:	617b      	str	r3, [r7, #20]
 800a8d2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a8d4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a8d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8dc:	2302      	movs	r3, #2
 800a8de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a8ee:	230a      	movs	r3, #10
 800a8f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	481c      	ldr	r0, [pc, #112]	; (800a96c <HAL_PCD_MspInit+0x100>)
 800a8fc:	f7f7 fa50 	bl	8001da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a900:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a908:	2300      	movs	r3, #0
 800a90a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a90e:	2300      	movs	r3, #0
 800a910:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a914:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a918:	4619      	mov	r1, r3
 800a91a:	4814      	ldr	r0, [pc, #80]	; (800a96c <HAL_PCD_MspInit+0x100>)
 800a91c:	f7f7 fa40 	bl	8001da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a920:	4b11      	ldr	r3, [pc, #68]	; (800a968 <HAL_PCD_MspInit+0xfc>)
 800a922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a924:	4a10      	ldr	r2, [pc, #64]	; (800a968 <HAL_PCD_MspInit+0xfc>)
 800a926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a92a:	6353      	str	r3, [r2, #52]	; 0x34
 800a92c:	4b0e      	ldr	r3, [pc, #56]	; (800a968 <HAL_PCD_MspInit+0xfc>)
 800a92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a934:	613b      	str	r3, [r7, #16]
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	4b0b      	ldr	r3, [pc, #44]	; (800a968 <HAL_PCD_MspInit+0xfc>)
 800a93a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a93c:	4a0a      	ldr	r2, [pc, #40]	; (800a968 <HAL_PCD_MspInit+0xfc>)
 800a93e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a942:	6453      	str	r3, [r2, #68]	; 0x44
 800a944:	4b08      	ldr	r3, [pc, #32]	; (800a968 <HAL_PCD_MspInit+0xfc>)
 800a946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a94c:	60fb      	str	r3, [r7, #12]
 800a94e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a950:	2200      	movs	r2, #0
 800a952:	2100      	movs	r1, #0
 800a954:	2043      	movs	r0, #67	; 0x43
 800a956:	f7f6 fe70 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a95a:	2043      	movs	r0, #67	; 0x43
 800a95c:	f7f6 fe89 	bl	8001672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a960:	bf00      	nop
 800a962:	37b0      	adds	r7, #176	; 0xb0
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	40023800 	.word	0x40023800
 800a96c:	40020000 	.word	0x40020000

0800a970 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a984:	4619      	mov	r1, r3
 800a986:	4610      	mov	r0, r2
 800a988:	f7fe fb15 	bl	8008fb6 <USBD_LL_SetupStage>
}
 800a98c:	bf00      	nop
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	460b      	mov	r3, r1
 800a99e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800a9a6:	78fa      	ldrb	r2, [r7, #3]
 800a9a8:	6879      	ldr	r1, [r7, #4]
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	00db      	lsls	r3, r3, #3
 800a9ae:	4413      	add	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	440b      	add	r3, r1
 800a9b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	78fb      	ldrb	r3, [r7, #3]
 800a9bc:	4619      	mov	r1, r3
 800a9be:	f7fe fb4f 	bl	8009060 <USBD_LL_DataOutStage>
}
 800a9c2:	bf00      	nop
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b082      	sub	sp, #8
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800a9dc:	78fa      	ldrb	r2, [r7, #3]
 800a9de:	6879      	ldr	r1, [r7, #4]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	00db      	lsls	r3, r3, #3
 800a9e4:	4413      	add	r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	440b      	add	r3, r1
 800a9ea:	334c      	adds	r3, #76	; 0x4c
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	78fb      	ldrb	r3, [r7, #3]
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	f7fe fbe8 	bl	80091c6 <USBD_LL_DataInStage>
}
 800a9f6:	bf00      	nop
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b082      	sub	sp, #8
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fe fd1c 	bl	800944a <USBD_LL_SOF>
}
 800aa12:	bf00      	nop
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa22:	2301      	movs	r3, #1
 800aa24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d102      	bne.n	800aa34 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	73fb      	strb	r3, [r7, #15]
 800aa32:	e008      	b.n	800aa46 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d102      	bne.n	800aa42 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	73fb      	strb	r3, [r7, #15]
 800aa40:	e001      	b.n	800aa46 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aa42:	f7f6 f927 	bl	8000c94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa4c:	7bfa      	ldrb	r2, [r7, #15]
 800aa4e:	4611      	mov	r1, r2
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fe fcbc 	bl	80093ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fe fc64 	bl	800932a <USBD_LL_Reset>
}
 800aa62:	bf00      	nop
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
	...

0800aa6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fe fcb7 	bl	80093ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	6812      	ldr	r2, [r2, #0]
 800aa8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa92:	f043 0301 	orr.w	r3, r3, #1
 800aa96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a1b      	ldr	r3, [r3, #32]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d005      	beq.n	800aaac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aaa0:	4b04      	ldr	r3, [pc, #16]	; (800aab4 <HAL_PCD_SuspendCallback+0x48>)
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	4a03      	ldr	r2, [pc, #12]	; (800aab4 <HAL_PCD_SuspendCallback+0x48>)
 800aaa6:	f043 0306 	orr.w	r3, r3, #6
 800aaaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aaac:	bf00      	nop
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	e000ed00 	.word	0xe000ed00

0800aab8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fe fca7 	bl	800941a <USBD_LL_Resume>
}
 800aacc:	bf00      	nop
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	460b      	mov	r3, r1
 800aade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aae6:	78fa      	ldrb	r2, [r7, #3]
 800aae8:	4611      	mov	r1, r2
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fcff 	bl	80094ee <USBD_LL_IsoOUTIncomplete>
}
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	460b      	mov	r3, r1
 800ab02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ab0a:	78fa      	ldrb	r2, [r7, #3]
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7fe fcbb 	bl	800948a <USBD_LL_IsoINIncomplete>
}
 800ab14:	bf00      	nop
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe fd11 	bl	8009552 <USBD_LL_DevConnected>
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe fd0e 	bl	8009568 <USBD_LL_DevDisconnected>
}
 800ab4c:	bf00      	nop
 800ab4e:	3708      	adds	r7, #8
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d13c      	bne.n	800abde <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ab64:	4a20      	ldr	r2, [pc, #128]	; (800abe8 <USBD_LL_Init+0x94>)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a1e      	ldr	r2, [pc, #120]	; (800abe8 <USBD_LL_Init+0x94>)
 800ab70:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab74:	4b1c      	ldr	r3, [pc, #112]	; (800abe8 <USBD_LL_Init+0x94>)
 800ab76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ab7c:	4b1a      	ldr	r3, [pc, #104]	; (800abe8 <USBD_LL_Init+0x94>)
 800ab7e:	2206      	movs	r2, #6
 800ab80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ab82:	4b19      	ldr	r3, [pc, #100]	; (800abe8 <USBD_LL_Init+0x94>)
 800ab84:	2202      	movs	r2, #2
 800ab86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ab88:	4b17      	ldr	r3, [pc, #92]	; (800abe8 <USBD_LL_Init+0x94>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab8e:	4b16      	ldr	r3, [pc, #88]	; (800abe8 <USBD_LL_Init+0x94>)
 800ab90:	2202      	movs	r2, #2
 800ab92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ab94:	4b14      	ldr	r3, [pc, #80]	; (800abe8 <USBD_LL_Init+0x94>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ab9a:	4b13      	ldr	r3, [pc, #76]	; (800abe8 <USBD_LL_Init+0x94>)
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aba0:	4b11      	ldr	r3, [pc, #68]	; (800abe8 <USBD_LL_Init+0x94>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800aba6:	4b10      	ldr	r3, [pc, #64]	; (800abe8 <USBD_LL_Init+0x94>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800abac:	4b0e      	ldr	r3, [pc, #56]	; (800abe8 <USBD_LL_Init+0x94>)
 800abae:	2200      	movs	r2, #0
 800abb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800abb2:	480d      	ldr	r0, [pc, #52]	; (800abe8 <USBD_LL_Init+0x94>)
 800abb4:	f7f7 faf5 	bl	80021a2 <HAL_PCD_Init>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d001      	beq.n	800abc2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800abbe:	f7f6 f869 	bl	8000c94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800abc2:	2180      	movs	r1, #128	; 0x80
 800abc4:	4808      	ldr	r0, [pc, #32]	; (800abe8 <USBD_LL_Init+0x94>)
 800abc6:	f7f8 fd70 	bl	80036aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800abca:	2240      	movs	r2, #64	; 0x40
 800abcc:	2100      	movs	r1, #0
 800abce:	4806      	ldr	r0, [pc, #24]	; (800abe8 <USBD_LL_Init+0x94>)
 800abd0:	f7f8 fd24 	bl	800361c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800abd4:	2280      	movs	r2, #128	; 0x80
 800abd6:	2101      	movs	r1, #1
 800abd8:	4803      	ldr	r0, [pc, #12]	; (800abe8 <USBD_LL_Init+0x94>)
 800abda:	f7f8 fd1f 	bl	800361c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	20001c0c 	.word	0x20001c0c

0800abec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7f7 fbf1 	bl	80023ea <HAL_PCD_Start>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 f97e 	bl	800af10 <USBD_Get_USB_Status>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b084      	sub	sp, #16
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	4608      	mov	r0, r1
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	461a      	mov	r2, r3
 800ac30:	4603      	mov	r3, r0
 800ac32:	70fb      	strb	r3, [r7, #3]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70bb      	strb	r3, [r7, #2]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ac4a:	78bb      	ldrb	r3, [r7, #2]
 800ac4c:	883a      	ldrh	r2, [r7, #0]
 800ac4e:	78f9      	ldrb	r1, [r7, #3]
 800ac50:	f7f8 f8de 	bl	8002e10 <HAL_PCD_EP_Open>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 f958 	bl	800af10 <USBD_Get_USB_Status>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	460b      	mov	r3, r1
 800ac78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac88:	78fa      	ldrb	r2, [r7, #3]
 800ac8a:	4611      	mov	r1, r2
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7f8 f927 	bl	8002ee0 <HAL_PCD_EP_Close>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 f939 	bl	800af10 <USBD_Get_USB_Status>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	460b      	mov	r3, r1
 800acb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acc6:	78fa      	ldrb	r2, [r7, #3]
 800acc8:	4611      	mov	r1, r2
 800acca:	4618      	mov	r0, r3
 800accc:	f7f8 f9ff 	bl	80030ce <HAL_PCD_EP_SetStall>
 800acd0:	4603      	mov	r3, r0
 800acd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f91a 	bl	800af10 <USBD_Get_USB_Status>
 800acdc:	4603      	mov	r3, r0
 800acde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ace0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	460b      	mov	r3, r1
 800acf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad04:	78fa      	ldrb	r2, [r7, #3]
 800ad06:	4611      	mov	r1, r2
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7f8 fa44 	bl	8003196 <HAL_PCD_EP_ClrStall>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 f8fb 	bl	800af10 <USBD_Get_USB_Status>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	da0b      	bge.n	800ad5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad4a:	68f9      	ldr	r1, [r7, #12]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	00db      	lsls	r3, r3, #3
 800ad50:	4413      	add	r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	440b      	add	r3, r1
 800ad56:	333e      	adds	r3, #62	; 0x3e
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	e00b      	b.n	800ad74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad5c:	78fb      	ldrb	r3, [r7, #3]
 800ad5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad62:	68f9      	ldr	r1, [r7, #12]
 800ad64:	4613      	mov	r3, r2
 800ad66:	00db      	lsls	r3, r3, #3
 800ad68:	4413      	add	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	440b      	add	r3, r1
 800ad6e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ad72:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	460b      	mov	r3, r1
 800ad8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad9a:	78fa      	ldrb	r2, [r7, #3]
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7f8 f811 	bl	8002dc6 <HAL_PCD_SetAddress>
 800ada4:	4603      	mov	r3, r0
 800ada6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 f8b0 	bl	800af10 <USBD_Get_USB_Status>
 800adb0:	4603      	mov	r3, r0
 800adb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b086      	sub	sp, #24
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	60f8      	str	r0, [r7, #12]
 800adc6:	607a      	str	r2, [r7, #4]
 800adc8:	603b      	str	r3, [r7, #0]
 800adca:	460b      	mov	r3, r1
 800adcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adce:	2300      	movs	r3, #0
 800add0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800addc:	7af9      	ldrb	r1, [r7, #11]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	f7f8 f92a 	bl	800303a <HAL_PCD_EP_Transmit>
 800ade6:	4603      	mov	r3, r0
 800ade8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adea:	7dfb      	ldrb	r3, [r7, #23]
 800adec:	4618      	mov	r0, r3
 800adee:	f000 f88f 	bl	800af10 <USBD_Get_USB_Status>
 800adf2:	4603      	mov	r3, r0
 800adf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adf6:	7dbb      	ldrb	r3, [r7, #22]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3718      	adds	r7, #24
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	607a      	str	r2, [r7, #4]
 800ae0a:	603b      	str	r3, [r7, #0]
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae10:	2300      	movs	r3, #0
 800ae12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae14:	2300      	movs	r3, #0
 800ae16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ae1e:	7af9      	ldrb	r1, [r7, #11]
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	f7f8 f8a6 	bl	8002f74 <HAL_PCD_EP_Receive>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae2c:	7dfb      	ldrb	r3, [r7, #23]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 f86e 	bl	800af10 <USBD_Get_USB_Status>
 800ae34:	4603      	mov	r3, r0
 800ae36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae38:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3718      	adds	r7, #24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b082      	sub	sp, #8
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae54:	78fa      	ldrb	r2, [r7, #3]
 800ae56:	4611      	mov	r1, r2
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7f8 f8d6 	bl	800300a <HAL_PCD_EP_GetRxCount>
 800ae5e:	4603      	mov	r3, r0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ae74:	78fb      	ldrb	r3, [r7, #3]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d002      	beq.n	800ae80 <HAL_PCDEx_LPM_Callback+0x18>
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d01f      	beq.n	800aebe <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ae7e:	e03b      	b.n	800aef8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a1b      	ldr	r3, [r3, #32]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d007      	beq.n	800ae98 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ae88:	f000 f83c 	bl	800af04 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae8c:	4b1c      	ldr	r3, [pc, #112]	; (800af00 <HAL_PCDEx_LPM_Callback+0x98>)
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	4a1b      	ldr	r2, [pc, #108]	; (800af00 <HAL_PCDEx_LPM_Callback+0x98>)
 800ae92:	f023 0306 	bic.w	r3, r3, #6
 800ae96:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	6812      	ldr	r2, [r2, #0]
 800aea6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aeaa:	f023 0301 	bic.w	r3, r3, #1
 800aeae:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7fe faaf 	bl	800941a <USBD_LL_Resume>
    break;
 800aebc:	e01c      	b.n	800aef8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	6812      	ldr	r2, [r2, #0]
 800aecc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aed0:	f043 0301 	orr.w	r3, r3, #1
 800aed4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aedc:	4618      	mov	r0, r3
 800aede:	f7fe fa86 	bl	80093ee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d005      	beq.n	800aef6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aeea:	4b05      	ldr	r3, [pc, #20]	; (800af00 <HAL_PCDEx_LPM_Callback+0x98>)
 800aeec:	691b      	ldr	r3, [r3, #16]
 800aeee:	4a04      	ldr	r2, [pc, #16]	; (800af00 <HAL_PCDEx_LPM_Callback+0x98>)
 800aef0:	f043 0306 	orr.w	r3, r3, #6
 800aef4:	6113      	str	r3, [r2, #16]
    break;
 800aef6:	bf00      	nop
}
 800aef8:	bf00      	nop
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	e000ed00 	.word	0xe000ed00

0800af04 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800af08:	f7f5 fca6 	bl	8000858 <SystemClock_Config>
}
 800af0c:	bf00      	nop
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af1e:	79fb      	ldrb	r3, [r7, #7]
 800af20:	2b03      	cmp	r3, #3
 800af22:	d817      	bhi.n	800af54 <USBD_Get_USB_Status+0x44>
 800af24:	a201      	add	r2, pc, #4	; (adr r2, 800af2c <USBD_Get_USB_Status+0x1c>)
 800af26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2a:	bf00      	nop
 800af2c:	0800af3d 	.word	0x0800af3d
 800af30:	0800af43 	.word	0x0800af43
 800af34:	0800af49 	.word	0x0800af49
 800af38:	0800af4f 	.word	0x0800af4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	73fb      	strb	r3, [r7, #15]
    break;
 800af40:	e00b      	b.n	800af5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af42:	2303      	movs	r3, #3
 800af44:	73fb      	strb	r3, [r7, #15]
    break;
 800af46:	e008      	b.n	800af5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af48:	2301      	movs	r3, #1
 800af4a:	73fb      	strb	r3, [r7, #15]
    break;
 800af4c:	e005      	b.n	800af5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af4e:	2303      	movs	r3, #3
 800af50:	73fb      	strb	r3, [r7, #15]
    break;
 800af52:	e002      	b.n	800af5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af54:	2303      	movs	r3, #3
 800af56:	73fb      	strb	r3, [r7, #15]
    break;
 800af58:	bf00      	nop
  }
  return usb_status;
 800af5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <malloc>:
 800af68:	4b02      	ldr	r3, [pc, #8]	; (800af74 <malloc+0xc>)
 800af6a:	4601      	mov	r1, r0
 800af6c:	6818      	ldr	r0, [r3, #0]
 800af6e:	f000 b82b 	b.w	800afc8 <_malloc_r>
 800af72:	bf00      	nop
 800af74:	20000178 	.word	0x20000178

0800af78 <free>:
 800af78:	4b02      	ldr	r3, [pc, #8]	; (800af84 <free+0xc>)
 800af7a:	4601      	mov	r1, r0
 800af7c:	6818      	ldr	r0, [r3, #0]
 800af7e:	f000 b8f3 	b.w	800b168 <_free_r>
 800af82:	bf00      	nop
 800af84:	20000178 	.word	0x20000178

0800af88 <sbrk_aligned>:
 800af88:	b570      	push	{r4, r5, r6, lr}
 800af8a:	4e0e      	ldr	r6, [pc, #56]	; (800afc4 <sbrk_aligned+0x3c>)
 800af8c:	460c      	mov	r4, r1
 800af8e:	6831      	ldr	r1, [r6, #0]
 800af90:	4605      	mov	r5, r0
 800af92:	b911      	cbnz	r1, 800af9a <sbrk_aligned+0x12>
 800af94:	f000 f8ac 	bl	800b0f0 <_sbrk_r>
 800af98:	6030      	str	r0, [r6, #0]
 800af9a:	4621      	mov	r1, r4
 800af9c:	4628      	mov	r0, r5
 800af9e:	f000 f8a7 	bl	800b0f0 <_sbrk_r>
 800afa2:	1c43      	adds	r3, r0, #1
 800afa4:	d00a      	beq.n	800afbc <sbrk_aligned+0x34>
 800afa6:	1cc4      	adds	r4, r0, #3
 800afa8:	f024 0403 	bic.w	r4, r4, #3
 800afac:	42a0      	cmp	r0, r4
 800afae:	d007      	beq.n	800afc0 <sbrk_aligned+0x38>
 800afb0:	1a21      	subs	r1, r4, r0
 800afb2:	4628      	mov	r0, r5
 800afb4:	f000 f89c 	bl	800b0f0 <_sbrk_r>
 800afb8:	3001      	adds	r0, #1
 800afba:	d101      	bne.n	800afc0 <sbrk_aligned+0x38>
 800afbc:	f04f 34ff 	mov.w	r4, #4294967295
 800afc0:	4620      	mov	r0, r4
 800afc2:	bd70      	pop	{r4, r5, r6, pc}
 800afc4:	20002118 	.word	0x20002118

0800afc8 <_malloc_r>:
 800afc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afcc:	1ccd      	adds	r5, r1, #3
 800afce:	f025 0503 	bic.w	r5, r5, #3
 800afd2:	3508      	adds	r5, #8
 800afd4:	2d0c      	cmp	r5, #12
 800afd6:	bf38      	it	cc
 800afd8:	250c      	movcc	r5, #12
 800afda:	2d00      	cmp	r5, #0
 800afdc:	4607      	mov	r7, r0
 800afde:	db01      	blt.n	800afe4 <_malloc_r+0x1c>
 800afe0:	42a9      	cmp	r1, r5
 800afe2:	d905      	bls.n	800aff0 <_malloc_r+0x28>
 800afe4:	230c      	movs	r3, #12
 800afe6:	603b      	str	r3, [r7, #0]
 800afe8:	2600      	movs	r6, #0
 800afea:	4630      	mov	r0, r6
 800afec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aff0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b0c4 <_malloc_r+0xfc>
 800aff4:	f000 f868 	bl	800b0c8 <__malloc_lock>
 800aff8:	f8d8 3000 	ldr.w	r3, [r8]
 800affc:	461c      	mov	r4, r3
 800affe:	bb5c      	cbnz	r4, 800b058 <_malloc_r+0x90>
 800b000:	4629      	mov	r1, r5
 800b002:	4638      	mov	r0, r7
 800b004:	f7ff ffc0 	bl	800af88 <sbrk_aligned>
 800b008:	1c43      	adds	r3, r0, #1
 800b00a:	4604      	mov	r4, r0
 800b00c:	d155      	bne.n	800b0ba <_malloc_r+0xf2>
 800b00e:	f8d8 4000 	ldr.w	r4, [r8]
 800b012:	4626      	mov	r6, r4
 800b014:	2e00      	cmp	r6, #0
 800b016:	d145      	bne.n	800b0a4 <_malloc_r+0xdc>
 800b018:	2c00      	cmp	r4, #0
 800b01a:	d048      	beq.n	800b0ae <_malloc_r+0xe6>
 800b01c:	6823      	ldr	r3, [r4, #0]
 800b01e:	4631      	mov	r1, r6
 800b020:	4638      	mov	r0, r7
 800b022:	eb04 0903 	add.w	r9, r4, r3
 800b026:	f000 f863 	bl	800b0f0 <_sbrk_r>
 800b02a:	4581      	cmp	r9, r0
 800b02c:	d13f      	bne.n	800b0ae <_malloc_r+0xe6>
 800b02e:	6821      	ldr	r1, [r4, #0]
 800b030:	1a6d      	subs	r5, r5, r1
 800b032:	4629      	mov	r1, r5
 800b034:	4638      	mov	r0, r7
 800b036:	f7ff ffa7 	bl	800af88 <sbrk_aligned>
 800b03a:	3001      	adds	r0, #1
 800b03c:	d037      	beq.n	800b0ae <_malloc_r+0xe6>
 800b03e:	6823      	ldr	r3, [r4, #0]
 800b040:	442b      	add	r3, r5
 800b042:	6023      	str	r3, [r4, #0]
 800b044:	f8d8 3000 	ldr.w	r3, [r8]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d038      	beq.n	800b0be <_malloc_r+0xf6>
 800b04c:	685a      	ldr	r2, [r3, #4]
 800b04e:	42a2      	cmp	r2, r4
 800b050:	d12b      	bne.n	800b0aa <_malloc_r+0xe2>
 800b052:	2200      	movs	r2, #0
 800b054:	605a      	str	r2, [r3, #4]
 800b056:	e00f      	b.n	800b078 <_malloc_r+0xb0>
 800b058:	6822      	ldr	r2, [r4, #0]
 800b05a:	1b52      	subs	r2, r2, r5
 800b05c:	d41f      	bmi.n	800b09e <_malloc_r+0xd6>
 800b05e:	2a0b      	cmp	r2, #11
 800b060:	d917      	bls.n	800b092 <_malloc_r+0xca>
 800b062:	1961      	adds	r1, r4, r5
 800b064:	42a3      	cmp	r3, r4
 800b066:	6025      	str	r5, [r4, #0]
 800b068:	bf18      	it	ne
 800b06a:	6059      	strne	r1, [r3, #4]
 800b06c:	6863      	ldr	r3, [r4, #4]
 800b06e:	bf08      	it	eq
 800b070:	f8c8 1000 	streq.w	r1, [r8]
 800b074:	5162      	str	r2, [r4, r5]
 800b076:	604b      	str	r3, [r1, #4]
 800b078:	4638      	mov	r0, r7
 800b07a:	f104 060b 	add.w	r6, r4, #11
 800b07e:	f000 f829 	bl	800b0d4 <__malloc_unlock>
 800b082:	f026 0607 	bic.w	r6, r6, #7
 800b086:	1d23      	adds	r3, r4, #4
 800b088:	1af2      	subs	r2, r6, r3
 800b08a:	d0ae      	beq.n	800afea <_malloc_r+0x22>
 800b08c:	1b9b      	subs	r3, r3, r6
 800b08e:	50a3      	str	r3, [r4, r2]
 800b090:	e7ab      	b.n	800afea <_malloc_r+0x22>
 800b092:	42a3      	cmp	r3, r4
 800b094:	6862      	ldr	r2, [r4, #4]
 800b096:	d1dd      	bne.n	800b054 <_malloc_r+0x8c>
 800b098:	f8c8 2000 	str.w	r2, [r8]
 800b09c:	e7ec      	b.n	800b078 <_malloc_r+0xb0>
 800b09e:	4623      	mov	r3, r4
 800b0a0:	6864      	ldr	r4, [r4, #4]
 800b0a2:	e7ac      	b.n	800affe <_malloc_r+0x36>
 800b0a4:	4634      	mov	r4, r6
 800b0a6:	6876      	ldr	r6, [r6, #4]
 800b0a8:	e7b4      	b.n	800b014 <_malloc_r+0x4c>
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	e7cc      	b.n	800b048 <_malloc_r+0x80>
 800b0ae:	230c      	movs	r3, #12
 800b0b0:	603b      	str	r3, [r7, #0]
 800b0b2:	4638      	mov	r0, r7
 800b0b4:	f000 f80e 	bl	800b0d4 <__malloc_unlock>
 800b0b8:	e797      	b.n	800afea <_malloc_r+0x22>
 800b0ba:	6025      	str	r5, [r4, #0]
 800b0bc:	e7dc      	b.n	800b078 <_malloc_r+0xb0>
 800b0be:	605b      	str	r3, [r3, #4]
 800b0c0:	deff      	udf	#255	; 0xff
 800b0c2:	bf00      	nop
 800b0c4:	20002114 	.word	0x20002114

0800b0c8 <__malloc_lock>:
 800b0c8:	4801      	ldr	r0, [pc, #4]	; (800b0d0 <__malloc_lock+0x8>)
 800b0ca:	f000 b84b 	b.w	800b164 <__retarget_lock_acquire_recursive>
 800b0ce:	bf00      	nop
 800b0d0:	20002258 	.word	0x20002258

0800b0d4 <__malloc_unlock>:
 800b0d4:	4801      	ldr	r0, [pc, #4]	; (800b0dc <__malloc_unlock+0x8>)
 800b0d6:	f000 b846 	b.w	800b166 <__retarget_lock_release_recursive>
 800b0da:	bf00      	nop
 800b0dc:	20002258 	.word	0x20002258

0800b0e0 <memset>:
 800b0e0:	4402      	add	r2, r0
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d100      	bne.n	800b0ea <memset+0xa>
 800b0e8:	4770      	bx	lr
 800b0ea:	f803 1b01 	strb.w	r1, [r3], #1
 800b0ee:	e7f9      	b.n	800b0e4 <memset+0x4>

0800b0f0 <_sbrk_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4d06      	ldr	r5, [pc, #24]	; (800b10c <_sbrk_r+0x1c>)
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	4608      	mov	r0, r1
 800b0fa:	602b      	str	r3, [r5, #0]
 800b0fc:	f7f6 f8d0 	bl	80012a0 <_sbrk>
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	d102      	bne.n	800b10a <_sbrk_r+0x1a>
 800b104:	682b      	ldr	r3, [r5, #0]
 800b106:	b103      	cbz	r3, 800b10a <_sbrk_r+0x1a>
 800b108:	6023      	str	r3, [r4, #0]
 800b10a:	bd38      	pop	{r3, r4, r5, pc}
 800b10c:	20002254 	.word	0x20002254

0800b110 <__errno>:
 800b110:	4b01      	ldr	r3, [pc, #4]	; (800b118 <__errno+0x8>)
 800b112:	6818      	ldr	r0, [r3, #0]
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	20000178 	.word	0x20000178

0800b11c <__libc_init_array>:
 800b11c:	b570      	push	{r4, r5, r6, lr}
 800b11e:	4d0d      	ldr	r5, [pc, #52]	; (800b154 <__libc_init_array+0x38>)
 800b120:	4c0d      	ldr	r4, [pc, #52]	; (800b158 <__libc_init_array+0x3c>)
 800b122:	1b64      	subs	r4, r4, r5
 800b124:	10a4      	asrs	r4, r4, #2
 800b126:	2600      	movs	r6, #0
 800b128:	42a6      	cmp	r6, r4
 800b12a:	d109      	bne.n	800b140 <__libc_init_array+0x24>
 800b12c:	4d0b      	ldr	r5, [pc, #44]	; (800b15c <__libc_init_array+0x40>)
 800b12e:	4c0c      	ldr	r4, [pc, #48]	; (800b160 <__libc_init_array+0x44>)
 800b130:	f000 f866 	bl	800b200 <_init>
 800b134:	1b64      	subs	r4, r4, r5
 800b136:	10a4      	asrs	r4, r4, #2
 800b138:	2600      	movs	r6, #0
 800b13a:	42a6      	cmp	r6, r4
 800b13c:	d105      	bne.n	800b14a <__libc_init_array+0x2e>
 800b13e:	bd70      	pop	{r4, r5, r6, pc}
 800b140:	f855 3b04 	ldr.w	r3, [r5], #4
 800b144:	4798      	blx	r3
 800b146:	3601      	adds	r6, #1
 800b148:	e7ee      	b.n	800b128 <__libc_init_array+0xc>
 800b14a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b14e:	4798      	blx	r3
 800b150:	3601      	adds	r6, #1
 800b152:	e7f2      	b.n	800b13a <__libc_init_array+0x1e>
 800b154:	0800b2b0 	.word	0x0800b2b0
 800b158:	0800b2b0 	.word	0x0800b2b0
 800b15c:	0800b2b0 	.word	0x0800b2b0
 800b160:	0800b2b4 	.word	0x0800b2b4

0800b164 <__retarget_lock_acquire_recursive>:
 800b164:	4770      	bx	lr

0800b166 <__retarget_lock_release_recursive>:
 800b166:	4770      	bx	lr

0800b168 <_free_r>:
 800b168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b16a:	2900      	cmp	r1, #0
 800b16c:	d044      	beq.n	800b1f8 <_free_r+0x90>
 800b16e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b172:	9001      	str	r0, [sp, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	f1a1 0404 	sub.w	r4, r1, #4
 800b17a:	bfb8      	it	lt
 800b17c:	18e4      	addlt	r4, r4, r3
 800b17e:	f7ff ffa3 	bl	800b0c8 <__malloc_lock>
 800b182:	4a1e      	ldr	r2, [pc, #120]	; (800b1fc <_free_r+0x94>)
 800b184:	9801      	ldr	r0, [sp, #4]
 800b186:	6813      	ldr	r3, [r2, #0]
 800b188:	b933      	cbnz	r3, 800b198 <_free_r+0x30>
 800b18a:	6063      	str	r3, [r4, #4]
 800b18c:	6014      	str	r4, [r2, #0]
 800b18e:	b003      	add	sp, #12
 800b190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b194:	f7ff bf9e 	b.w	800b0d4 <__malloc_unlock>
 800b198:	42a3      	cmp	r3, r4
 800b19a:	d908      	bls.n	800b1ae <_free_r+0x46>
 800b19c:	6825      	ldr	r5, [r4, #0]
 800b19e:	1961      	adds	r1, r4, r5
 800b1a0:	428b      	cmp	r3, r1
 800b1a2:	bf01      	itttt	eq
 800b1a4:	6819      	ldreq	r1, [r3, #0]
 800b1a6:	685b      	ldreq	r3, [r3, #4]
 800b1a8:	1949      	addeq	r1, r1, r5
 800b1aa:	6021      	streq	r1, [r4, #0]
 800b1ac:	e7ed      	b.n	800b18a <_free_r+0x22>
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	b10b      	cbz	r3, 800b1b8 <_free_r+0x50>
 800b1b4:	42a3      	cmp	r3, r4
 800b1b6:	d9fa      	bls.n	800b1ae <_free_r+0x46>
 800b1b8:	6811      	ldr	r1, [r2, #0]
 800b1ba:	1855      	adds	r5, r2, r1
 800b1bc:	42a5      	cmp	r5, r4
 800b1be:	d10b      	bne.n	800b1d8 <_free_r+0x70>
 800b1c0:	6824      	ldr	r4, [r4, #0]
 800b1c2:	4421      	add	r1, r4
 800b1c4:	1854      	adds	r4, r2, r1
 800b1c6:	42a3      	cmp	r3, r4
 800b1c8:	6011      	str	r1, [r2, #0]
 800b1ca:	d1e0      	bne.n	800b18e <_free_r+0x26>
 800b1cc:	681c      	ldr	r4, [r3, #0]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	6053      	str	r3, [r2, #4]
 800b1d2:	440c      	add	r4, r1
 800b1d4:	6014      	str	r4, [r2, #0]
 800b1d6:	e7da      	b.n	800b18e <_free_r+0x26>
 800b1d8:	d902      	bls.n	800b1e0 <_free_r+0x78>
 800b1da:	230c      	movs	r3, #12
 800b1dc:	6003      	str	r3, [r0, #0]
 800b1de:	e7d6      	b.n	800b18e <_free_r+0x26>
 800b1e0:	6825      	ldr	r5, [r4, #0]
 800b1e2:	1961      	adds	r1, r4, r5
 800b1e4:	428b      	cmp	r3, r1
 800b1e6:	bf04      	itt	eq
 800b1e8:	6819      	ldreq	r1, [r3, #0]
 800b1ea:	685b      	ldreq	r3, [r3, #4]
 800b1ec:	6063      	str	r3, [r4, #4]
 800b1ee:	bf04      	itt	eq
 800b1f0:	1949      	addeq	r1, r1, r5
 800b1f2:	6021      	streq	r1, [r4, #0]
 800b1f4:	6054      	str	r4, [r2, #4]
 800b1f6:	e7ca      	b.n	800b18e <_free_r+0x26>
 800b1f8:	b003      	add	sp, #12
 800b1fa:	bd30      	pop	{r4, r5, pc}
 800b1fc:	20002114 	.word	0x20002114

0800b200 <_init>:
 800b200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b202:	bf00      	nop
 800b204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b206:	bc08      	pop	{r3}
 800b208:	469e      	mov	lr, r3
 800b20a:	4770      	bx	lr

0800b20c <_fini>:
 800b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20e:	bf00      	nop
 800b210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b212:	bc08      	pop	{r3}
 800b214:	469e      	mov	lr, r3
 800b216:	4770      	bx	lr
