{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\Dropbox\\\\PC\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\gyroscopePlot.tsx\";\nimport React from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { Box } from '@react-three/drei';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GyroscopePlot = ({\n  data\n}) => {\n  // Use the data to determine the position or rotation of the 3D object\n  // For simplicity, let's assume data affects the rotation of a box\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      position: [0, 0, 0],\n      rotation: [data[0], data[1], data[2]],\n      children: /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        color: 'orange'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n_c = GyroscopePlot;\nexport default GyroscopePlot;\nvar _c;\n$RefreshReg$(_c, \"GyroscopePlot\");","map":{"version":3,"names":["React","Canvas","Box","jsxDEV","_jsxDEV","GyroscopePlot","data","children","fileName","_jsxFileName","lineNumber","columnNumber","position","rotation","color","_c","$RefreshReg$"],"sources":["C:/Users/mathe/Dropbox/PC/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/gyroscopePlot.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport { Box } from '@react-three/drei';\r\n\r\nconst GyroscopePlot = ({ data }) => {\r\n    // Use the data to determine the position or rotation of the 3D object\r\n    // For simplicity, let's assume data affects the rotation of a box\r\n    return (\r\n        <Canvas>\r\n            <ambientLight />\r\n            <pointLight position={[10, 10, 10]} />\r\n            <Box position={[0, 0, 0]} rotation={[data[0], data[1], data[2]]}>\r\n                <meshStandardMaterial color={'orange'} />\r\n            </Box>\r\n        </Canvas>\r\n    );\r\n};\r\n\r\nexport default GyroscopePlot;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,GAAG,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAChC;EACA;EACA,oBACIF,OAAA,CAACH,MAAM;IAAAM,QAAA,gBACHH,OAAA;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC,eAChBP,OAAA;MAAYQ,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;IAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtCP,OAAA,CAACF,GAAG;MAACU,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAACC,QAAQ,EAAE,CAACP,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAE;MAAAC,QAAA,eAC5DH,OAAA;QAAsBU,KAAK,EAAE;MAAS;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEjB,CAAC;AAACI,EAAA,GAZIV,aAAa;AAcnB,eAAeA,aAAa;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}