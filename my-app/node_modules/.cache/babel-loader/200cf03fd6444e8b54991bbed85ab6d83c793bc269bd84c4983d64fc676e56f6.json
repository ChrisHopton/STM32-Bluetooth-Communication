{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dropbox\\\\PC (4)\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\gyroscopePlot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GyroscopePlot = ({\n  data,\n  scale = 0.1\n}) => {\n  _s();\n  // scale factor\n  const mountRef = useRef(null);\n  const lineRef = useRef(null);\n  useEffect(() => {\n    const width = 800; // Increase width as needed\n    const height = 800; // Increase height as needed\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.set(0, 0, 50); // Move the camera further away\n\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(width, height);\n    renderer.setClearColor(0xffffff, 1);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Enlarge the GridHelper\n    const gridHelper = new THREE.GridHelper(50, 50); // Increase the grid size\n    scene.add(gridHelper);\n    // Add red line for X-axis centerline\n    const materialRedX = new THREE.LineBasicMaterial({\n      color: 0xff0000\n    });\n    const pointsRedX = [];\n    pointsRedX.push(new THREE.Vector3(-25, 0, 0));\n    pointsRedX.push(new THREE.Vector3(25, 0, 0));\n    const geometryRedX = new THREE.BufferGeometry().setFromPoints(pointsRedX);\n    const lineRedX = new THREE.Line(geometryRedX, materialRedX);\n    scene.add(lineRedX);\n\n    // Add red line for Y-axis centerline\n    const materialRedY = new THREE.LineBasicMaterial({\n      color: 0xff0000\n    });\n    const pointsRedY = [];\n    pointsRedY.push(new THREE.Vector3(0, -25, 0));\n    pointsRedY.push(new THREE.Vector3(0, 25, 0));\n    const geometryRedY = new THREE.BufferGeometry().setFromPoints(pointsRedY);\n    const lineRedY = new THREE.Line(geometryRedY, materialRedY);\n    scene.add(lineRedY);\n\n    // GridHelper for Y and Z axes, rotated to align with these axes\n    const gridHelperYZ = new THREE.GridHelper(50, 50);\n    gridHelperYZ.rotation.x = Math.PI / 2; // Rotate 90 degrees around X\n    scene.add(gridHelperYZ);\n\n    // GridHelper for X and Y axes, rotated to align with these axes\n    const gridHelperXY = new THREE.GridHelper(50, 50);\n    gridHelperXY.rotation.z = Math.PI / 2; // Rotate 90 degrees around Z\n    scene.add(gridHelperXY);\n\n    // Create an initial empty line\n    const geometry = new THREE.BufferGeometry();\n    const material = new THREE.LineBasicMaterial({\n      color: 0x0000ff\n    });\n    lineRef.current = new THREE.Line(geometry, material);\n    scene.add(lineRef.current);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n    return () => {\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n  useEffect(() => {\n    if (lineRef.current) {\n      const scaledPoints = data.map(d => new THREE.Vector3(d.x * scale, d.y * scale, d.z * scale));\n      lineRef.current.geometry.dispose();\n      lineRef.current.geometry = new THREE.BufferGeometry().setFromPoints(scaledPoints);\n    }\n  }, [data, scale]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '800px',\n      height: '800px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 12\n  }, this);\n};\n_s(GyroscopePlot, \"4o2Gxzjjzvz/4c6MHw0xSYkSM3s=\");\n_c = GyroscopePlot;\nexport default GyroscopePlot;\nvar _c;\n$RefreshReg$(_c, \"GyroscopePlot\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","jsxDEV","_jsxDEV","GyroscopePlot","data","scale","_s","mountRef","lineRef","width","height","scene","Scene","camera","PerspectiveCamera","position","set","renderer","WebGLRenderer","antialias","setSize","setClearColor","current","appendChild","domElement","gridHelper","GridHelper","add","materialRedX","LineBasicMaterial","color","pointsRedX","push","Vector3","geometryRedX","BufferGeometry","setFromPoints","lineRedX","Line","materialRedY","pointsRedY","geometryRedY","lineRedY","gridHelperYZ","rotation","x","Math","PI","gridHelperXY","z","geometry","material","controls","animate","requestAnimationFrame","update","render","removeChild","scaledPoints","map","d","y","dispose","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Dropbox/PC (4)/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/gyroscopePlot.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nconst GyroscopePlot = ({ data, scale = 0.1 }) => { // scale factor\r\n    const mountRef = useRef(null);\r\n    const lineRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const width = 800; // Increase width as needed\r\n        const height = 800; // Increase height as needed\r\n\r\n        const scene = new THREE.Scene();\r\n        const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n        camera.position.set(0, 0, 50); // Move the camera further away\r\n\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        renderer.setSize(width, height);\r\n        renderer.setClearColor(0xffffff, 1); \r\n        mountRef.current.appendChild(renderer.domElement);\r\n\r\n        // Enlarge the GridHelper\r\n        const gridHelper = new THREE.GridHelper(50, 50); // Increase the grid size\r\n        scene.add(gridHelper);\r\n        // Add red line for X-axis centerline\r\n    const materialRedX = new THREE.LineBasicMaterial({ color: 0xff0000 });\r\n    const pointsRedX = [];\r\n    pointsRedX.push(new THREE.Vector3(-25, 0, 0));\r\n    pointsRedX.push(new THREE.Vector3(25, 0, 0));\r\n    const geometryRedX = new THREE.BufferGeometry().setFromPoints(pointsRedX);\r\n    const lineRedX = new THREE.Line(geometryRedX, materialRedX);\r\n    scene.add(lineRedX);\r\n\r\n    // Add red line for Y-axis centerline\r\n    const materialRedY = new THREE.LineBasicMaterial({ color: 0xff0000 });\r\n    const pointsRedY = [];\r\n    pointsRedY.push(new THREE.Vector3(0, -25, 0));\r\n    pointsRedY.push(new THREE.Vector3(0, 25, 0));\r\n    const geometryRedY = new THREE.BufferGeometry().setFromPoints(pointsRedY);\r\n    const lineRedY = new THREE.Line(geometryRedY, materialRedY);\r\n    scene.add(lineRedY);\r\n\r\n        \r\n        // GridHelper for Y and Z axes, rotated to align with these axes\r\n    const gridHelperYZ = new THREE.GridHelper(50, 50);\r\n    gridHelperYZ.rotation.x = Math.PI / 2; // Rotate 90 degrees around X\r\n    scene.add(gridHelperYZ);\r\n\r\n    // GridHelper for X and Y axes, rotated to align with these axes\r\n    const gridHelperXY = new THREE.GridHelper(50, 50);\r\n    gridHelperXY.rotation.z = Math.PI / 2; // Rotate 90 degrees around Z\r\n    scene.add(gridHelperXY);\r\n\r\n        // Create an initial empty line\r\n        const geometry = new THREE.BufferGeometry();\r\n        const material = new THREE.LineBasicMaterial({ color: 0x0000ff });\r\n        lineRef.current = new THREE.Line(geometry, material);\r\n        scene.add(lineRef.current);\r\n\r\n        const controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n        const animate = () => {\r\n            requestAnimationFrame(animate);\r\n            controls.update(); \r\n            renderer.render(scene, camera);\r\n        };\r\n\r\n        animate();\r\n\r\n        return () => {\r\n            mountRef.current.removeChild(renderer.domElement);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (lineRef.current) {\r\n            const scaledPoints = data.map(d => new THREE.Vector3(d.x * scale, d.y * scale, d.z * scale));\r\n            lineRef.current.geometry.dispose(); \r\n            lineRef.current.geometry = new THREE.BufferGeometry().setFromPoints(scaledPoints);\r\n        }\r\n    }, [data, scale]);\r\n\r\n    return <div ref={mountRef} style={{ width: '800px', height: '800px' }} />;\r\n};\r\n\r\nexport default GyroscopePlot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}