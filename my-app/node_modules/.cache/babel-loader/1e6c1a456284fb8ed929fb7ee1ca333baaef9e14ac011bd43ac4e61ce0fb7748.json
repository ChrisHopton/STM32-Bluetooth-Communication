{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\Dropbox\\\\PC\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\gyroscopePlot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GyroscopePlot = ({\n  data\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    const width = 400; // Adjust width as needed\n    const height = 400; // Adjust height as needed\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(width, height);\n    renderer.setClearColor(0xffffff, 1); // Set background color to white\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Add GridHelper\n    const gridHelper = new THREE.GridHelper(10, 10);\n    scene.add(gridHelper);\n\n    // Convert gyroscope data to points\n    const points = data.map(d => new THREE.Vector3(d.x, d.y, d.z));\n    const geometry = new THREE.BufferGeometry().setFromPoints(points);\n    const material = new THREE.LineBasicMaterial({\n      color: 0x0000ff\n    });\n    const line = new THREE.Line(geometry, material);\n    scene.add(line);\n    camera.position.set(0, 0, 15);\n\n    // OrbitControls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update(); // Only required if controls.enableDamping or controls.autoRotate are set to true\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Clean up\n    return () => {\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '400px',\n      height: '400px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 12\n  }, this);\n};\n_s(GyroscopePlot, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = GyroscopePlot;\nexport default GyroscopePlot;\nvar _c;\n$RefreshReg$(_c, \"GyroscopePlot\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","jsxDEV","_jsxDEV","GyroscopePlot","data","_s","mountRef","width","height","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","setSize","setClearColor","current","appendChild","domElement","gridHelper","GridHelper","add","points","map","d","Vector3","x","y","z","geometry","BufferGeometry","setFromPoints","material","LineBasicMaterial","color","line","Line","position","set","controls","animate","requestAnimationFrame","update","render","removeChild","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mathe/Dropbox/PC/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/gyroscopePlot.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nconst GyroscopePlot = ({ data }) => {\r\n    const mountRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const width = 400; // Adjust width as needed\r\n        const height = 400; // Adjust height as needed\r\n\r\n        const scene = new THREE.Scene();\r\n        const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n\r\n        renderer.setSize(width, height);\r\n        renderer.setClearColor(0xffffff, 1); // Set background color to white\r\n        mountRef.current.appendChild(renderer.domElement);\r\n\r\n        // Add GridHelper\r\n        const gridHelper = new THREE.GridHelper(10, 10);\r\n        scene.add(gridHelper);\r\n\r\n        // Convert gyroscope data to points\r\n        const points = data.map(d => new THREE.Vector3(d.x, d.y, d.z));\r\n        const geometry = new THREE.BufferGeometry().setFromPoints(points);\r\n        const material = new THREE.LineBasicMaterial({ color: 0x0000ff });\r\n        const line = new THREE.Line(geometry, material);\r\n        scene.add(line);\r\n\r\n        camera.position.set(0, 0, 15);\r\n\r\n        // OrbitControls\r\n        const controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n        const animate = () => {\r\n            requestAnimationFrame(animate);\r\n            controls.update(); // Only required if controls.enableDamping or controls.autoRotate are set to true\r\n            renderer.render(scene, camera);\r\n        };\r\n\r\n        animate();\r\n\r\n        // Clean up\r\n        return () => {\r\n            mountRef.current.removeChild(renderer.domElement);\r\n        };\r\n    }, [data]);\r\n\r\n    return <div ref={mountRef} style={{ width: '400px', height: '400px' }} />;\r\n};\r\n\r\nexport default GyroscopePlot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}