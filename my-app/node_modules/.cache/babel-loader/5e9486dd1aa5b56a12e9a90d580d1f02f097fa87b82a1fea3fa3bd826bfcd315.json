{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dropbox\\\\PC (4)\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\BluetoothComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NavbarWithBluetooth = () => {\n  _s();\n  // State and functions from BluetoothComponent\n  const [connectedDevice, setConnectedDevice] = useState(null);\n  const [dataCharacteristic, setDataCharacteristic] = useState(null);\n  const [inputData, setInputData] = useState('');\n  const [messages, setMessages] = useState([]);\n  const log = message => {\n    setMessages(prevMessages => [...prevMessages, message]);\n  };\n  const handleConnectClick = () => {\n    navigator.bluetooth.requestDevice({\n      acceptAllDevices: true,\n      optionalServices: ['0000ffe0-0000-1000-8000-00805f9b34fb']\n    }).then(device => {\n      log(`Connecting to ${device.name}...`);\n      setConnectedDevice(device);\n      return device.gatt.connect();\n    }).then(server => server.getPrimaryService('0000ffe0-0000-1000-8000-00805f9b34fb')).then(service => service.getCharacteristic('0000ffe1-0000-1000-8000-00805f9b34fb')).then(characteristic => {\n      log('Connected. Ready to send and receive data.');\n      setDataCharacteristic(characteristic);\n      characteristic.addEventListener('characteristicvaluechanged', handleCharacteristicValueChanged);\n      return characteristic.startNotifications();\n    }).then(() => {\n      log('Notifications started');\n    }).catch(error => {\n      log('Error: ' + error);\n    });\n  };\n  const handleCharacteristicValueChanged = event => {\n    const target = event.target;\n    const value = target.value;\n    let decoder = new TextDecoder('utf-8');\n    let message = '';\n    for (let i = 0; i < value.byteLength; i++) {\n      message += String.fromCharCode(value.getUint8(i));\n    }\n    log('Received: ' + message);\n  };\n  const handleSendClick = () => {\n    let dataToSend = inputData + '\\r\\n';\n    const data = new TextEncoder().encode(dataToSend);\n    if (dataCharacteristic) {\n      const method = dataCharacteristic.properties.writeWithoutResponse ? 'writeValueWithoutResponse' : 'writeValue';\n      setTimeout(() => {\n        dataCharacteristic[method](data).then(() => {\n          log('Data sent: ' + dataToSend);\n        }).catch(error => {\n          log('Send Error: ' + error);\n        });\n      }, 100);\n    } else {\n      log('Characteristic not found.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"flex dark:bg-slate-900 items-center relative justify-between bg-white px-5 py-6 w-full\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-2\",\n        onClick: handleConnectClick,\n        children: connectedDevice ? `Connected: ${connectedDevice.name}` : 'Connect Bluetooth'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), connectedDevice && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popover-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"border border-gray-400 p-2 rounded mb-2\",\n        value: inputData,\n        onChange: e => setInputData(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\",\n        onClick: handleSendClick,\n        children: \"Send Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 border border-gray-300 p-4 h-64 overflow-auto\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-2\",\n          children: msg\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(NavbarWithBluetooth, \"qHZgs515qK6OZ3yFtuHuDSYvCcM=\");\n_c = NavbarWithBluetooth;\nexport default NavbarWithBluetooth;\nvar _c;\n$RefreshReg$(_c, \"NavbarWithBluetooth\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","NavbarWithBluetooth","_s","connectedDevice","setConnectedDevice","dataCharacteristic","setDataCharacteristic","inputData","setInputData","messages","setMessages","log","message","prevMessages","handleConnectClick","navigator","bluetooth","requestDevice","acceptAllDevices","optionalServices","then","device","name","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","addEventListener","handleCharacteristicValueChanged","startNotifications","catch","error","event","target","value","decoder","TextDecoder","i","byteLength","String","fromCharCode","getUint8","handleSendClick","dataToSend","data","TextEncoder","encode","method","properties","writeWithoutResponse","setTimeout","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","map","msg","index","_c","$RefreshReg$"],"sources":["C:/Dropbox/PC (4)/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/BluetoothComponent.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst NavbarWithBluetooth: React.FC = () => {\r\n    // State and functions from BluetoothComponent\r\n    const [connectedDevice, setConnectedDevice] = useState<BluetoothDevice | null>(null);\r\n    const [dataCharacteristic, setDataCharacteristic] = useState<BluetoothRemoteGATTCharacteristic | null>(null);\r\n    const [inputData, setInputData] = useState('');\r\n    const [messages, setMessages] = useState<string[]>([]);\r\n\r\n    const log = (message: string) => {\r\n        setMessages(prevMessages => [...prevMessages, message]);\r\n    };\r\n\r\n    const handleConnectClick = () => {\r\n        navigator.bluetooth.requestDevice({\r\n            acceptAllDevices: true,\r\n            optionalServices: ['0000ffe0-0000-1000-8000-00805f9b34fb']\r\n        })\r\n        .then(device => {\r\n            log(`Connecting to ${device.name}...`);\r\n            setConnectedDevice(device);\r\n            return device.gatt.connect();\r\n        })\r\n        .then(server => server.getPrimaryService('0000ffe0-0000-1000-8000-00805f9b34fb'))\r\n        .then(service => service.getCharacteristic('0000ffe1-0000-1000-8000-00805f9b34fb'))\r\n        .then(characteristic => {\r\n            log('Connected. Ready to send and receive data.');\r\n            setDataCharacteristic(characteristic);\r\n            characteristic.addEventListener('characteristicvaluechanged', handleCharacteristicValueChanged);\r\n            return characteristic.startNotifications();\r\n        })\r\n        .then(() => {\r\n            log('Notifications started');\r\n        })\r\n        .catch(error => {\r\n            log('Error: ' + error);\r\n        });\r\n    };\r\n\r\n    const handleCharacteristicValueChanged = (event: Event) => {\r\n        const target = event.target as BluetoothRemoteGATTCharacteristic;\r\n        const value = target.value;\r\n        let decoder = new TextDecoder('utf-8');\r\n        let message = '';\r\n\r\n        for (let i = 0; i < value.byteLength; i++) {\r\n            message += String.fromCharCode(value.getUint8(i));\r\n        }\r\n\r\n        log('Received: ' + message);\r\n    };\r\n\r\n    const handleSendClick = () => {\r\n        let dataToSend = inputData + '\\r\\n';\r\n        const data = new TextEncoder().encode(dataToSend);\r\n\r\n        if (dataCharacteristic) {\r\n            const method = dataCharacteristic.properties.writeWithoutResponse ? 'writeValueWithoutResponse' : 'writeValue';\r\n\r\n            setTimeout(() => {\r\n                dataCharacteristic[method](data)\r\n                .then(() => {\r\n                    log('Data sent: ' + dataToSend);\r\n                })\r\n                .catch(error => {\r\n                    log('Send Error: ' + error);\r\n                });\r\n            }, 100);\r\n        } else {\r\n            log('Characteristic not found.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* Navbar code */}\r\n            <nav className=\"flex dark:bg-slate-900 items-center relative justify-between bg-white px-5 py-6 w-full\">\r\n                {/* Navbar content */}\r\n                {/* Bluetooth connect button */}\r\n                <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-2\" onClick={handleConnectClick}>\r\n                    {connectedDevice ? `Connected: ${connectedDevice.name}` : 'Connect Bluetooth'}\r\n                </button>\r\n                {/* Rest of the Navbar content */}\r\n            </nav>\r\n\r\n            {/* Bluetooth details popover (hidden or shown based on state) */}\r\n            {connectedDevice && (\r\n                <div className=\"popover-details\">\r\n                    {/* You can structure this popover as needed */}\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"border border-gray-400 p-2 rounded mb-2\" \r\n                        value={inputData} \r\n                        onChange={(e) => setInputData(e.target.value)} \r\n                    />\r\n                    <button className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\" onClick={handleSendClick}>Send Data</button>\r\n\r\n                    <div className=\"mt-4 border border-gray-300 p-4 h-64 overflow-auto\">\r\n                        {messages.map((msg, index) => (\r\n                            <div key={index} className=\"mb-2\">{msg}</div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavbarWithBluetooth;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}