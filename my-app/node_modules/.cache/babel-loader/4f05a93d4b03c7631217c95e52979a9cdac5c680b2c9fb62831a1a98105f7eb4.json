{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\Dropbox\\\\PC\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\gyroscopePlot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { Canvas, extend } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nextend({\n  OrbitControls\n});\nconst GyroscopePlot = ({\n  data\n}) => {\n  _s();\n  const geometry = useMemo(() => {\n    const geom = new THREE.BufferGeometry();\n    if (data && data.length > 0) {\n      const positions = new Float32Array(data.flatMap(d => [d.x, d.y, d.z]));\n      geom.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n      console.log(\"Geometry updated\", positions);\n    }\n    return geom;\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"points\", {\n    geometry: geometry,\n    children: /*#__PURE__*/_jsxDEV(\"pointsMaterial\", {\n      color: 'orange',\n      size: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_s(GyroscopePlot, \"02hlve5eMynmluEywvGvnlLCucU=\");\n_c = GyroscopePlot;\nconst Scene = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GyroscopePlot, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n        args: [1, 1, 1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        color: 'red'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"orbitControls\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_c2 = Scene;\nconst App = () => {\n  const data = [{\n    x: 1,\n    y: 2,\n    z: 3\n  }, {\n    x: 4,\n    y: 5,\n    z: 6\n  }];\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: /*#__PURE__*/_jsxDEV(Scene, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GyroscopePlot\");\n$RefreshReg$(_c2, \"Scene\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useMemo","Canvas","extend","OrbitControls","THREE","jsxDEV","_jsxDEV","Fragment","_Fragment","GyroscopePlot","data","_s","geometry","geom","BufferGeometry","length","positions","Float32Array","flatMap","d","x","y","z","setAttribute","BufferAttribute","console","log","children","color","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","Scene","intensity","position","args","_c2","App","_c3","$RefreshReg$"],"sources":["C:/Users/mathe/Dropbox/PC/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/gyroscopePlot.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\r\nimport { Canvas, extend, useThree } from '@react-three/fiber';\r\nimport { OrbitControls } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\nextend({ OrbitControls });\r\n\r\nconst GyroscopePlot = ({ data }) => {\r\n    const geometry = useMemo(() => {\r\n        const geom = new THREE.BufferGeometry();\r\n        if (data && data.length > 0) {\r\n            const positions = new Float32Array(data.flatMap(d => [d.x, d.y, d.z]));\r\n            geom.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n            console.log(\"Geometry updated\", positions);\r\n        }\r\n        return geom;\r\n    }, [data]);\r\n\r\n    return (\r\n        <points geometry={geometry}>\r\n            <pointsMaterial color={'orange'} size={1} />\r\n        </points>\r\n    );\r\n};\r\n\r\nconst Scene = ({ data }) => {\r\n    return (\r\n        <>\r\n            <ambientLight intensity={0.5} />\r\n            <pointLight position={[10, 10, 10]} />\r\n            <GyroscopePlot data={data} />\r\n            <mesh>\r\n                <boxBufferGeometry args={[1, 1, 1]} />\r\n                <meshStandardMaterial color={'red'} />\r\n            </mesh>\r\n            <orbitControls />\r\n        </>\r\n    );\r\n};\r\n\r\nconst App = () => {\r\n    const data = [{ x: 1, y: 2, z: 3 }, { x: 4, y: 5, z: 6 }];\r\n\r\n    return (\r\n        <Canvas>\r\n            <Scene data={data} />\r\n        </Canvas>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}