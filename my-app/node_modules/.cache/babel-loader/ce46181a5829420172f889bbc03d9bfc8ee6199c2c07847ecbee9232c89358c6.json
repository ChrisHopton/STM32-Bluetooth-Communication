{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dropbox\\\\PC (4)\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\gyroscopePlot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GyroscopePlot = ({\n  data,\n  scale = 0.9\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const lineRef = useRef(null);\n  useEffect(() => {\n    const width = 800;\n    const height = 800;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xFFFFFF); // White background like MATLAB\n\n    // Camera setup (MATLAB-like angle)\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.set(50, 50, 50); // Elevated angle\n    camera.lookAt(0, 0, 0);\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(width, height);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Grid Helper (MATLAB style)\n    const gridHelper = new THREE.GridHelper(100, 20, 0xBBBBBB, 0xBBBBBB);\n    scene.add(gridHelper);\n\n    // Axes setup\n    const axesHelper = new THREE.AxesHelper(50);\n    scene.add(axesHelper);\n\n    // Line setup\n    const material = new THREE.LineBasicMaterial({\n      color: 0x0000FF\n    }); // Blue line like MATLAB\n    const geometry = new THREE.BufferGeometry();\n    lineRef.current = new THREE.Line(geometry, material);\n    scene.add(lineRef.current);\n\n    // OrbitControls for interactivity (optional)\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = true;\n    controls.enableRotate = true;\n\n    // Lighting (subtle to match MATLAB's style)\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.75);\n    scene.add(ambientLight);\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Cleanup\n    return () => {\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n  useEffect(() => {\n    if (lineRef.current) {\n      const points = data.map(d => new THREE.Vector3(d.x * scale, d.y * scale, d.z * scale));\n      lineRef.current.geometry.dispose();\n      lineRef.current.geometry = new THREE.BufferGeometry().setFromPoints(points);\n    }\n  }, [data, scale]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '800px',\n      height: '800px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 12\n  }, this);\n};\n_s(GyroscopePlot, \"4o2Gxzjjzvz/4c6MHw0xSYkSM3s=\");\n_c = GyroscopePlot;\nexport default GyroscopePlot;\nvar _c;\n$RefreshReg$(_c, \"GyroscopePlot\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","jsxDEV","_jsxDEV","GyroscopePlot","data","scale","_s","mountRef","lineRef","width","height","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","lookAt","renderer","WebGLRenderer","antialias","setSize","current","appendChild","domElement","gridHelper","GridHelper","add","axesHelper","AxesHelper","material","LineBasicMaterial","color","geometry","BufferGeometry","Line","controls","enableZoom","enableRotate","ambientLight","AmbientLight","animate","requestAnimationFrame","update","render","removeChild","points","map","d","Vector3","x","y","z","dispose","setFromPoints","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Dropbox/PC (4)/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/gyroscopePlot.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nconst GyroscopePlot = ({ data, scale = 0.9 }) => {\r\n    const mountRef = useRef(null);\r\n    const lineRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const width = 800;\r\n        const height = 800;\r\n\r\n        // Scene setup\r\n        const scene = new THREE.Scene();\r\n        scene.background = new THREE.Color(0xFFFFFF); // White background like MATLAB\r\n\r\n        // Camera setup (MATLAB-like angle)\r\n        const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n        camera.position.set(50, 50, 50); // Elevated angle\r\n        camera.lookAt(0, 0, 0);\r\n\r\n        // Renderer setup\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        renderer.setSize(width, height);\r\n        mountRef.current.appendChild(renderer.domElement);\r\n\r\n        // Grid Helper (MATLAB style)\r\n        const gridHelper = new THREE.GridHelper(100, 20, 0xBBBBBB, 0xBBBBBB);\r\n        scene.add(gridHelper);\r\n\r\n        // Axes setup\r\n        const axesHelper = new THREE.AxesHelper(50);\r\n        scene.add(axesHelper);\r\n\r\n        // Line setup\r\n        const material = new THREE.LineBasicMaterial({ color: 0x0000FF }); // Blue line like MATLAB\r\n        const geometry = new THREE.BufferGeometry();\r\n        lineRef.current = new THREE.Line(geometry, material);\r\n        scene.add(lineRef.current);\r\n\r\n        // OrbitControls for interactivity (optional)\r\n        const controls = new OrbitControls(camera, renderer.domElement);\r\n        controls.enableZoom = true;\r\n        controls.enableRotate = true;\r\n\r\n        // Lighting (subtle to match MATLAB's style)\r\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.75);\r\n        scene.add(ambientLight);\r\n\r\n        // Animation loop\r\n        const animate = () => {\r\n            requestAnimationFrame(animate);\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n\r\n        // Cleanup\r\n        return () => {\r\n            mountRef.current.removeChild(renderer.domElement);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (lineRef.current) {\r\n            const points = data.map(d => new THREE.Vector3(d.x * scale, d.y * scale, d.z * scale));\r\n            lineRef.current.geometry.dispose();\r\n            lineRef.current.geometry = new THREE.BufferGeometry().setFromPoints(points);\r\n        }\r\n    }, [data, scale]);\r\n\r\n    return <div ref={mountRef} style={{ width: '800px', height: '800px' }} />;\r\n};\r\n\r\nexport default GyroscopePlot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}