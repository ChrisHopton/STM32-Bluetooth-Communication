{"ast":null,"code":"// Ensure the uid() function is defined in your code as you've shown earlier\n\nconst fetchChatGPTResponse = async userMessage => {\n  try {\n    const accessToken = \"YOUR_ACCESS_TOKEN\"; // Replace with your access token\n    const response = await fetch(\"https://chat.openai.com/backend-api/conversation\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${accessToken}` // Replace with your access token\n      },\n\n      body: JSON.stringify({\n        action: \"next\",\n        messages: [{\n          role: \"user\",\n          content: userMessage\n        }],\n        model: \"text-davinci-002-render\",\n        parent_message_id: uid() // Generate a unique ID for the message\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch response from ChatGPT\");\n    }\n    const responseData = await response.json();\n    return responseData.choices[0].message.content;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};\n\n// Example usage:\nconst userMessage = \"Hello, ChatGPT!\";\nfetchChatGPTResponse(userMessage).then(aiResponse => {\n  console.log(\"AI Response:\", aiResponse);\n}).catch(error => {\n  console.error(\"Error:\", error);\n});","map":{"version":3,"names":["fetchChatGPTResponse","userMessage","accessToken","response","fetch","method","headers","body","JSON","stringify","action","messages","role","content","model","parent_message_id","uid","ok","Error","responseData","json","choices","message","error","console","then","aiResponse","log","catch"],"sources":["C:/Users/mathe/Dropbox/PC/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/OpenAIAPI.tsx"],"sourcesContent":["// Ensure the uid() function is defined in your code as you've shown earlier\r\n\r\nconst fetchChatGPTResponse = async (userMessage) => {\r\n    try {\r\n      const accessToken = \"YOUR_ACCESS_TOKEN\"; // Replace with your access token\r\n      const response = await fetch(\"https://chat.openai.com/backend-api/conversation\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${accessToken}`, // Replace with your access token\r\n        },\r\n        body: JSON.stringify({\r\n          action: \"next\",\r\n          messages: [\r\n            {\r\n              role: \"user\",\r\n              content: userMessage,\r\n            },\r\n          ],\r\n          model: \"text-davinci-002-render\",\r\n          parent_message_id: uid(), // Generate a unique ID for the message\r\n        }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch response from ChatGPT\");\r\n      }\r\n  \r\n      const responseData = await response.json();\r\n      return responseData.choices[0].message.content;\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  // Example usage:\r\n  const userMessage = \"Hello, ChatGPT!\";\r\n  fetchChatGPTResponse(userMessage)\r\n    .then((aiResponse) => {\r\n      console.log(\"AI Response:\", aiResponse);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error:\", error);\r\n    });\r\n  "],"mappings":"AAAA;;AAEA,MAAMA,oBAAoB,GAAG,MAAOC,WAAW,IAAK;EAChD,IAAI;IACF,MAAMC,WAAW,GAAG,mBAAmB,CAAC,CAAC;IACzC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kDAAkD,EAAE;MAC/EC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASJ,WAAY,EAAC,CAAE;MAC5C,CAAC;;MACDK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,MAAM,EAAE,MAAM;QACdC,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,MAAM;UACZC,OAAO,EAAEZ;QACX,CAAC,CACF;QACDa,KAAK,EAAE,yBAAyB;QAChCC,iBAAiB,EAAEC,GAAG,CAAC,CAAC,CAAE;MAC5B,CAAC;IACH,CAAC,CAAC;;IAEF,IAAI,CAACb,QAAQ,CAACc,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;IAC1D;IAEA,MAAMC,YAAY,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAC1C,OAAOD,YAAY,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACT,OAAO;EAChD,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAMtB,WAAW,GAAG,iBAAiB;AACrCD,oBAAoB,CAACC,WAAW,CAAC,CAC9BwB,IAAI,CAAEC,UAAU,IAAK;EACpBF,OAAO,CAACG,GAAG,CAAC,cAAc,EAAED,UAAU,CAAC;AACzC,CAAC,CAAC,CACDE,KAAK,CAAEL,KAAK,IAAK;EAChBC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;AAChC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}