{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\Dropbox\\\\PC\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\gyroscopePlot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { Points, PointMaterial } from '@react-three/drei';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GyroscopePlot = ({\n  data\n}) => {\n  _s();\n  // Create a ref to store the bufferGeometry\n  const bufferRef = useRef();\n\n  // Update the bufferGeometry when data changes\n  useEffect(() => {\n    if (bufferRef.current) {\n      const positions = data.flatMap(d => [d.x, d.y, d.z]);\n      bufferRef.current.setAttribute('position', new THREE.BufferAttribute(new Float32Array(positions), 3));\n      bufferRef.current.attributes.position.needsUpdate = true;\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Points, {\n      children: [/*#__PURE__*/_jsxDEV(\"bufferGeometry\", {\n        ref: bufferRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PointMaterial, {\n        color: 'orange',\n        size: 0.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n_s(GyroscopePlot, \"+gQpFV/pn6pIfviIv1QScdXxacs=\");\n_c = GyroscopePlot;\nexport default GyroscopePlot;\nvar _c;\n$RefreshReg$(_c, \"GyroscopePlot\");","map":{"version":3,"names":["React","useEffect","useRef","Canvas","Points","PointMaterial","jsxDEV","_jsxDEV","GyroscopePlot","data","_s","bufferRef","current","positions","flatMap","d","x","y","z","setAttribute","THREE","BufferAttribute","Float32Array","attributes","position","needsUpdate","children","intensity","fileName","_jsxFileName","lineNumber","columnNumber","ref","color","size","_c","$RefreshReg$"],"sources":["C:/Users/mathe/Dropbox/PC/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/gyroscopePlot.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport { Points, PointMaterial } from '@react-three/drei';\r\n\r\nconst GyroscopePlot = ({ data }) => {\r\n    // Create a ref to store the bufferGeometry\r\n    const bufferRef = useRef();\r\n\r\n    // Update the bufferGeometry when data changes\r\n    useEffect(() => {\r\n        if (bufferRef.current) {\r\n            const positions = data.flatMap(d => [d.x, d.y, d.z]);\r\n            bufferRef.current.setAttribute('position', new THREE.BufferAttribute(new Float32Array(positions), 3));\r\n            bufferRef.current.attributes.position.needsUpdate = true;\r\n        }\r\n    }, [data]);\r\n\r\n    return (\r\n        <Canvas>\r\n            <ambientLight intensity={0.5} />\r\n            <pointLight position={[10, 10, 10]} /> \r\n            <Points>\r\n                <bufferGeometry ref={bufferRef} />\r\n                <PointMaterial color={'orange'} size={0.5} />\r\n            </Points>\r\n        </Canvas>\r\n    );\r\n};\r\n\r\n\r\nexport default GyroscopePlot;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAcC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,MAAM,EAAEC,aAAa,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAChC;EACA,MAAMC,SAAS,GAAGT,MAAM,CAAC,CAAC;;EAE1B;EACAD,SAAS,CAAC,MAAM;IACZ,IAAIU,SAAS,CAACC,OAAO,EAAE;MACnB,MAAMC,SAAS,GAAGJ,IAAI,CAACK,OAAO,CAACC,CAAC,IAAI,CAACA,CAAC,CAACC,CAAC,EAAED,CAAC,CAACE,CAAC,EAAEF,CAAC,CAACG,CAAC,CAAC,CAAC;MACpDP,SAAS,CAACC,OAAO,CAACO,YAAY,CAAC,UAAU,EAAE,IAAIC,KAAK,CAACC,eAAe,CAAC,IAAIC,YAAY,CAACT,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MACrGF,SAAS,CAACC,OAAO,CAACW,UAAU,CAACC,QAAQ,CAACC,WAAW,GAAG,IAAI;IAC5D;EACJ,CAAC,EAAE,CAAChB,IAAI,CAAC,CAAC;EAEV,oBACIF,OAAA,CAACJ,MAAM;IAAAuB,QAAA,gBACHnB,OAAA;MAAcoB,SAAS,EAAE;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChCxB,OAAA;MAAYiB,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtCxB,OAAA,CAACH,MAAM;MAAAsB,QAAA,gBACHnB,OAAA;QAAgByB,GAAG,EAAErB;MAAU;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClCxB,OAAA,CAACF,aAAa;QAAC4B,KAAK,EAAE,QAAS;QAACC,IAAI,EAAE;MAAI;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEjB,CAAC;AAACrB,EAAA,CAvBIF,aAAa;AAAA2B,EAAA,GAAb3B,aAAa;AA0BnB,eAAeA,aAAa;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}