{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\Dropbox\\\\PC\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\OpenAIAPI.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  const [response, setResponse] = useState(null);\n  useEffect(() => {\n    const getToken = async () => {\n      try {\n        const resp = await fetch(\"https://chat.openai.com/api/auth/session\");\n        if (resp.status === 403) {\n          throw new Error('CLOUDFLARE');\n        }\n        const data = await resp.json();\n        if (!data.accessToken) {\n          throw new Error('ERROR');\n        }\n        return data.accessToken;\n      } catch (err) {\n        throw new Error('ERROR');\n      }\n    };\n    const getResponse = async question => {\n      try {\n        const accessToken = await getToken();\n        const res = await fetch(\"https://chat.openai.com/backend-api/conversation\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"Bearer \" + accessToken\n          },\n          body: JSON.stringify({\n            action: \"next\",\n            messages: [{\n              id: uid(),\n              role: \"user\",\n              content: {\n                content_type: \"text\",\n                parts: [question]\n              }\n            }],\n            model: \"text-davinci-002-render\",\n            parent_message_id: uid()\n          })\n        });\n        const reader = res.body.getReader();\n        let responseData = '';\n        while (true) {\n          const {\n            done,\n            value\n          } = await reader.read();\n          if (done) break;\n          if (done === undefined || value === undefined) {\n            throw new Error('ERROR');\n          }\n          responseData += new TextDecoder().decode(value);\n        }\n        setResponse(responseData);\n      } catch (e) {\n        setResponse(e.message);\n      }\n    };\n\n    // Example usage:\n    const question = \"Your question goes here\";\n    getResponse(question);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: response === null ? 'Loading...' : response\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"UzygO7jZ75H4HW8mRsa6teov5jY=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChatApp","_s","response","setResponse","getToken","resp","fetch","status","Error","data","json","accessToken","err","getResponse","question","res","method","headers","body","JSON","stringify","action","messages","id","uid","role","content","content_type","parts","model","parent_message_id","reader","getReader","responseData","done","value","read","undefined","TextDecoder","decode","e","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mathe/Dropbox/PC/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/OpenAIAPI.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ChatApp: React.FC = () => {\r\n  const [response, setResponse] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const getToken = async () => {\r\n      try {\r\n        const resp = await fetch(\"https://chat.openai.com/api/auth/session\");\r\n        if (resp.status === 403) {\r\n          throw new Error('CLOUDFLARE');\r\n        }\r\n        const data = await resp.json();\r\n        if (!data.accessToken) {\r\n          throw new Error('ERROR');\r\n        }\r\n        return data.accessToken;\r\n      } catch (err) {\r\n        throw new Error('ERROR');\r\n      }\r\n    };\r\n\r\n    const getResponse = async (question: string) => {\r\n      try {\r\n        const accessToken = await getToken();\r\n        const res = await fetch(\"https://chat.openai.com/backend-api/conversation\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": \"Bearer \" + accessToken,\r\n          },\r\n          body: JSON.stringify({\r\n            action: \"next\",\r\n            messages: [\r\n              {\r\n                id: uid(),\r\n                role: \"user\",\r\n                content: {\r\n                  content_type: \"text\",\r\n                  parts: [question]\r\n                }\r\n              }\r\n            ],\r\n            model: \"text-davinci-002-render\",\r\n            parent_message_id: uid()\r\n          })\r\n        });\r\n        const reader = res.body.getReader();\r\n        let responseData = '';\r\n\r\n        while (true) {\r\n          const { done, value } = await reader.read();\r\n          if (done) break;\r\n          if (done === undefined || value === undefined) {\r\n            throw new Error('ERROR');\r\n          }\r\n          responseData += new TextDecoder().decode(value);\r\n        }\r\n\r\n        setResponse(responseData);\r\n      } catch (e) {\r\n        setResponse(e.message);\r\n      }\r\n    };\r\n\r\n    // Example usage:\r\n    const question = \"Your question goes here\";\r\n    getResponse(question);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Render the response or loading/error messages */}\r\n      {response === null ? 'Loading...' : response}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}