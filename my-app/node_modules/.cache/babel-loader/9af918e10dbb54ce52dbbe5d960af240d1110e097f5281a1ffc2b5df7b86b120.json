{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dropbox\\\\PC (4)\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\gyroscopePlot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport * as FontJSON from './helvetiker_regular.typeface.json'; // Include the font file in your project\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GyroscopePlot = ({\n  data,\n  scale = 0.1\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const lineRef = useRef(null);\n  useEffect(() => {\n    const width = 800;\n    const height = 800;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xFFFFFF); // White background\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.set(50, 50, 50);\n    camera.lookAt(0, 0, 0);\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(width, height);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Grid Helpers for all axes\n    const gridHelper = new THREE.GridHelper(100, 20, 0x000000, 0x000000); // X-Z plane\n    scene.add(gridHelper);\n    const gridHelperYZ = new THREE.GridHelper(100, 20, 0x000000, 0x000000); // Y-Z plane\n    gridHelperYZ.rotation.x = Math.PI / 2;\n    scene.add(gridHelperYZ);\n    const gridHelperXY = new THREE.GridHelper(100, 20, 0x000000, 0x000000); // X-Y plane\n    gridHelperXY.rotation.z = Math.PI / 2;\n    scene.add(gridHelperXY);\n\n    // Axes Helper\n    const axesHelper = new THREE.AxesHelper(50);\n    scene.add(axesHelper);\n\n    // Lighting setup\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.75);\n    scene.add(ambientLight);\n\n    // Line setup\n    const material = new THREE.LineBasicMaterial({\n      color: 0x0000FF\n    });\n    const geometry = new THREE.BufferGeometry();\n    lineRef.current = new THREE.Line(geometry, material);\n    scene.add(lineRef.current);\n\n    // OrbitControls\n    const controls = new OrbitControls(camera, renderer.domElement);\n\n    // Axes Labels\n    const fontLoader = new FontLoader();\n    fontLoader.load(FontJSON, function (font) {\n      const textMaterial = new THREE.MeshBasicMaterial({\n        color: 0x000000\n      });\n      const xAxisGeo = new THREE.TextGeometry('X', {\n        font: font,\n        size: 2,\n        height: 0\n      });\n      const yAxisGeo = new THREE.TextGeometry('Y', {\n        font: font,\n        size: 2,\n        height: 0\n      });\n      const zAxisGeo = new THREE.TextGeometry('Z', {\n        font: font,\n        size: 2,\n        height: 0\n      });\n      const xAxisMesh = new THREE.Mesh(xAxisGeo, textMaterial);\n      const yAxisMesh = new THREE.Mesh(yAxisGeo, textMaterial);\n      const zAxisMesh = new THREE.Mesh(zAxisGeo, textMaterial);\n      xAxisMesh.position.set(55, 0, 0);\n      yAxisMesh.position.set(0, 55, 0);\n      zAxisMesh.position.set(0, 0, 55);\n      scene.add(xAxisMesh);\n      scene.add(yAxisMesh);\n      scene.add(zAxisMesh);\n    });\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Cleanup\n    return () => {\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n  useEffect(() => {\n    if (lineRef.current) {\n      const points = data.map(d => new THREE.Vector3(d.x * scale, d.y * scale, d.z * scale));\n      lineRef.current.geometry.dispose();\n      lineRef.current.geometry = new THREE.BufferGeometry().setFromPoints(points);\n    }\n  }, [data, scale]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '800px',\n      height: '800px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 12\n  }, this);\n};\n_s(GyroscopePlot, \"4o2Gxzjjzvz/4c6MHw0xSYkSM3s=\");\n_c = GyroscopePlot;\nexport default GyroscopePlot;\nvar _c;\n$RefreshReg$(_c, \"GyroscopePlot\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","FontLoader","FontJSON","jsxDEV","_jsxDEV","GyroscopePlot","data","scale","_s","mountRef","lineRef","width","height","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","lookAt","renderer","WebGLRenderer","antialias","setSize","current","appendChild","domElement","gridHelper","GridHelper","add","gridHelperYZ","rotation","x","Math","PI","gridHelperXY","z","axesHelper","AxesHelper","ambientLight","AmbientLight","material","LineBasicMaterial","color","geometry","BufferGeometry","Line","controls","fontLoader","load","font","textMaterial","MeshBasicMaterial","xAxisGeo","TextGeometry","size","yAxisGeo","zAxisGeo","xAxisMesh","Mesh","yAxisMesh","zAxisMesh","animate","requestAnimationFrame","update","render","removeChild","points","map","d","Vector3","y","dispose","setFromPoints","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Dropbox/PC (4)/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/gyroscopePlot.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\r\nimport * as FontJSON from './helvetiker_regular.typeface.json'; // Include the font file in your project\r\n\r\nconst GyroscopePlot = ({ data, scale = 0.1 }) => {\r\n    const mountRef = useRef(null);\r\n    const lineRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const width = 800;\r\n        const height = 800;\r\n\r\n        // Scene setup\r\n        const scene = new THREE.Scene();\r\n        scene.background = new THREE.Color(0xFFFFFF); // White background\r\n\r\n        // Camera setup\r\n        const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n        camera.position.set(50, 50, 50);\r\n        camera.lookAt(0, 0, 0);\r\n\r\n        // Renderer setup\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        renderer.setSize(width, height);\r\n        mountRef.current.appendChild(renderer.domElement);\r\n\r\n        // Grid Helpers for all axes\r\n        const gridHelper = new THREE.GridHelper(100, 20, 0x000000, 0x000000); // X-Z plane\r\n        scene.add(gridHelper);\r\n\r\n        const gridHelperYZ = new THREE.GridHelper(100, 20, 0x000000, 0x000000); // Y-Z plane\r\n        gridHelperYZ.rotation.x = Math.PI / 2;\r\n        scene.add(gridHelperYZ);\r\n\r\n        const gridHelperXY = new THREE.GridHelper(100, 20, 0x000000, 0x000000); // X-Y plane\r\n        gridHelperXY.rotation.z = Math.PI / 2;\r\n        scene.add(gridHelperXY);\r\n\r\n        // Axes Helper\r\n        const axesHelper = new THREE.AxesHelper(50);\r\n        scene.add(axesHelper);\r\n\r\n        // Lighting setup\r\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.75);\r\n        scene.add(ambientLight);\r\n\r\n        // Line setup\r\n        const material = new THREE.LineBasicMaterial({ color: 0x0000FF });\r\n        const geometry = new THREE.BufferGeometry();\r\n        lineRef.current = new THREE.Line(geometry, material);\r\n        scene.add(lineRef.current);\r\n\r\n        // OrbitControls\r\n        const controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n        // Axes Labels\r\n        const fontLoader = new FontLoader();\r\n        fontLoader.load(FontJSON, function (font) {\r\n            const textMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\r\n            \r\n            const xAxisGeo = new THREE.TextGeometry('X', { font: font, size: 2, height: 0 });\r\n            const yAxisGeo = new THREE.TextGeometry('Y', { font: font, size: 2, height: 0 });\r\n            const zAxisGeo = new THREE.TextGeometry('Z', { font: font, size: 2, height: 0 });\r\n\r\n            const xAxisMesh = new THREE.Mesh(xAxisGeo, textMaterial);\r\n            const yAxisMesh = new THREE.Mesh(yAxisGeo, textMaterial);\r\n            const zAxisMesh = new THREE.Mesh(zAxisGeo, textMaterial);\r\n\r\n            xAxisMesh.position.set(55, 0, 0);\r\n            yAxisMesh.position.set(0, 55, 0);\r\n            zAxisMesh.position.set(0, 0, 55);\r\n\r\n            scene.add(xAxisMesh);\r\n            scene.add(yAxisMesh);\r\n            scene.add(zAxisMesh);\r\n        });\r\n\r\n        // Animation loop\r\n        const animate = () => {\r\n            requestAnimationFrame(animate);\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n\r\n        // Cleanup\r\n        return () => {\r\n            mountRef.current.removeChild(renderer.domElement);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (lineRef.current) {\r\n            const points = data.map(d => new THREE.Vector3(d.x * scale, d.y * scale, d.z * scale));\r\n            lineRef.current.geometry.dispose();\r\n            lineRef.current.geometry = new THREE.BufferGeometry().setFromPoints(points);\r\n        }\r\n    }, [data, scale]);\r\n\r\n    return <div ref={mountRef} style={{ width: '800px', height: '800px' }} />;\r\n};\r\n\r\nexport default GyroscopePlot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}