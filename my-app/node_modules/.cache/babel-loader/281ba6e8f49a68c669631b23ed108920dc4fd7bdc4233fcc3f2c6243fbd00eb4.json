{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dropbox\\\\PC (4)\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\ChatRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport GyroscopePlot from './gyroscopePlot';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = ({\n  bluetoothMessage,\n  onSendResponseMessage\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [useChatModel, setUseChatModel] = useState(true);\n  const [userId, setUserId] = useState('');\n  const [gyroData, setGyroData] = useState([]);\n  const [activeTab, setActiveTab] = useState('chat');\n  useEffect(() => {\n    setUserId(generateUserId());\n  }, []);\n  const isGyroscopeData = message => {\n    // Implement a check to determine if the message is gyroscope data\n    // For example, a simple check could be based on the format of the message\n    return message.split(',').length === 3;\n  };\n\n  // Function to parse gyroscope data\n  const parseGyroscopeData = message => {\n    const cleanedMessage = message.replace(/[\\[\\]\\s]/g, '');\n    const [x, y, z] = cleanedMessage.split(',').map(Number);\n    setGyroData(prevData => [...prevData, {\n      x,\n      y,\n      z\n    }]);\n    console.log(\"Gyroscope Data: \", {\n      x,\n      y,\n      z\n    }); // Add this line for debugging\n  };\n\n  const sendApiRequest = updatedMessages => {\n    const endpoint = useChatModel ? 'http://localhost:3001/chat-generate-message' : 'http://localhost:3001/data-generate-message';\n    fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        messages: updatedMessages\n      })\n    }).then(response => response.json()).then(data => {\n      const apiResponse = data.message || data.content;\n      setMessages(prev => [...prev, {\n        content: data.message || data.content,\n        sender: 'api'\n      }]);\n      onSendResponseMessage(apiResponse);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  const handleBluetoothMessage = bluetoothMessage => {\n    if (!bluetoothMessage.trim()) return;\n    if (isGyroscopeData(bluetoothMessage)) {\n      parseGyroscopeData(bluetoothMessage);\n    } else {\n      // Handle regular messages\n      const newMessage = {\n        content: bluetoothMessage,\n        sender: 'user'\n      };\n      const updatedMessages = [...messages, newMessage];\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n\n      // Make an API call for regular messages\n      sendApiRequest(updatedMessages);\n    }\n  };\n  const sendMessage = () => {\n    if (!inputText.trim()) return;\n    const newMessage = {\n      content: inputText,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    setInputText('');\n    const endpoint = useChatModel ? 'http://localhost:3001/chat-generate-message' : 'http://localhost:3001/data-generate-message';\n    fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        messages: [...messages, newMessage]\n      })\n    }).then(response => {\n      // Check if the response is an image\n      const contentType = response.headers.get(\"content-type\");\n      //console.log(\"Here: \", contentType);\n      if (contentType && contentType.includes(\"image\")) {\n        return response.blob();\n      }\n      return response.json();\n    }).then(data => {\n      if (data instanceof Blob) {\n        // Convert blob to URL and set it as the message content\n        const imageUrl = URL.createObjectURL(data);\n        setMessages(prev => [...prev, {\n          content: `<img src=\"${imageUrl}\" alt=\"Generated Plot\"/>`,\n          sender: 'api'\n        }]);\n      } else {\n        // Handle non-image response\n        setMessages(prev => [...prev, {\n          content: data.message || data.content,\n          sender: 'assistant'\n        }]);\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  const components = {\n    code({\n      node,\n      inline,\n      className,\n      children,\n      ...props\n    }) {\n      const match = /language-(\\w+)/.exec(className || '');\n      return !inline && match ? /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n        style: vscDarkPlus,\n        language: match[1],\n        PreTag: \"div\",\n        ...props,\n        children: String(children).replace(/\\n$/, '')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"code\", {\n        className: className,\n        ...props,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  useEffect(() => {\n    console.log(\"ChatComponent received message: \", bluetoothMessage);\n    if (bluetoothMessage) {\n      handleBluetoothMessage(bluetoothMessage);\n    }\n  }, [bluetoothMessage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center w-screen min-h-screen bg-gray-100 text-gray-800 p-10\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 flex sticky border-b\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-4 py-2 text-sm font-medium ${activeTab === 'chat' ? 'border-b-2 border-blue-500 text-blue-500' : 'text-gray-500 hover:text-blue-500'}`,\n        onClick: () => setActiveTab('chat'),\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-4 py-2 text-sm font-medium ${activeTab === 'gyro' ? 'border-b-2 border-blue-500 text-blue-500' : 'text-gray-500 hover:text-blue-500'}`,\n        onClick: () => setActiveTab('gyro'),\n        children: \"Gyroscope\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }, this), activeTab === 'chat' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col flex-grow w-full max-w-xl bg-white shadow-xl rounded-lg overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col flex-grow h-0 p-4 overflow-auto\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex w-full mt-2 space-x-3 max-w-xs ${msg.sender === 'user' ? 'ml-auto justify-end' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${msg.sender === 'user' ? 'bg-blue-600 text-white' : 'bg-gray-300 text-black'} p-3 rounded-lg`,\n            children: msg.sender === 'gyro' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Gyroscope Data: \", msg.content]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n              components: components,\n              children: msg.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-gray-500 leading-none\",\n            children: \"Just now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-300 p-4 flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"flex items-center h-10 w-full rounded px-3 text-sm\",\n          type: \"text\",\n          placeholder: \"Type your message\\u2026\",\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          onKeyDown: e => {\n            if (e.key === 'Enter') {\n              sendMessage();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-2\",\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gyroscope-plot-container\",\n      children: gyroData && gyroData.length > 0 ? /*#__PURE__*/_jsxDEV(GyroscopePlot, {\n        data: gyroData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No gyroscope data available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"+G4iiaEg7xgDFNPCw5ktdziDTmg=\");\n_c = ChatComponent;\nexport default ChatComponent;\nconst generateUserId = () => {\n  return Math.random().toString(36).substring(2, 15);\n};\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","ReactMarkdown","Prism","SyntaxHighlighter","vscDarkPlus","GyroscopePlot","jsxDEV","_jsxDEV","ChatComponent","bluetoothMessage","onSendResponseMessage","_s","messages","setMessages","inputText","setInputText","useChatModel","setUseChatModel","userId","setUserId","gyroData","setGyroData","activeTab","setActiveTab","generateUserId","isGyroscopeData","message","split","length","parseGyroscopeData","cleanedMessage","replace","x","y","z","map","Number","prevData","console","log","sendApiRequest","updatedMessages","endpoint","fetch","method","headers","body","JSON","stringify","then","response","json","data","apiResponse","content","prev","sender","catch","error","handleBluetoothMessage","trim","newMessage","prevMessages","sendMessage","contentType","get","includes","blob","Blob","imageUrl","URL","createObjectURL","components","code","node","inline","className","children","props","match","exec","style","language","PreTag","String","fileName","_jsxFileName","lineNumber","columnNumber","onClick","msg","index","type","placeholder","value","onChange","e","target","onKeyDown","key","_c","Math","random","toString","substring","$RefreshReg$"],"sources":["C:/Dropbox/PC (4)/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/ChatRoom.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport GyroscopePlot from './gyroscopePlot';\r\n\r\ninterface ChatComponentProps {\r\n  bluetoothMessage: string;\r\n  onSendResponseMessage: (message: string) => void;\r\n}\r\n\r\nconst ChatComponent: React.FC<ChatComponentProps> = ({ bluetoothMessage, onSendResponseMessage }) => {\r\n  const [messages, setMessages] = useState<{ content: string, sender: 'user' | 'api' }[]>([]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [useChatModel, setUseChatModel] = useState(true);\r\n  const [userId, setUserId] = useState('');\r\n  const [gyroData, setGyroData] = useState([]);\r\n  const [activeTab, setActiveTab] = useState('chat');\r\n\r\n  useEffect(() => {\r\n    setUserId(generateUserId());\r\n  }, []);\r\n\r\n  const isGyroscopeData = (message) => {\r\n    // Implement a check to determine if the message is gyroscope data\r\n    // For example, a simple check could be based on the format of the message\r\n    return message.split(',').length === 3;\r\n};\r\n\r\n// Function to parse gyroscope data\r\nconst parseGyroscopeData = (message) => {\r\n  const cleanedMessage = message.replace(/[\\[\\]\\s]/g, '');\r\n  const [x, y, z] = cleanedMessage.split(',').map(Number);\r\n  setGyroData(prevData => [...prevData, { x, y, z }]);\r\n  console.log(\"Gyroscope Data: \", { x, y, z }); // Add this line for debugging\r\n};\r\n\r\n\r\nconst sendApiRequest = (updatedMessages) => {\r\n  const endpoint = useChatModel ? 'http://localhost:3001/chat-generate-message' : 'http://localhost:3001/data-generate-message';\r\n\r\n  fetch(endpoint, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ userId, messages: updatedMessages }),\r\n  })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      const apiResponse = data.message || data.content;\r\n      setMessages(prev => [...prev, { content: data.message || data.content, sender: 'api' }]);\r\n      onSendResponseMessage(apiResponse);\r\n    })\r\n    .catch(error => {\r\n      console.error('Error:', error);\r\n    });\r\n};\r\n\r\n\r\n\r\nconst handleBluetoothMessage = (bluetoothMessage) => {\r\n  if (!bluetoothMessage.trim()) return;\r\n\r\n  if (isGyroscopeData(bluetoothMessage)) {\r\n    parseGyroscopeData(bluetoothMessage);\r\n  } else {\r\n    // Handle regular messages\r\n    const newMessage = { content: bluetoothMessage, sender: 'user' };\r\n    const updatedMessages = [...messages, newMessage];\r\n    setMessages(prevMessages => [...prevMessages, newMessage]);\r\n\r\n    // Make an API call for regular messages\r\n    sendApiRequest(updatedMessages);\r\n  }\r\n};\r\n\r\n\r\n  const sendMessage = () => {\r\n    if (!inputText.trim()) return;\r\n  \r\n    const newMessage = { content: inputText, sender: 'user' };\r\n    setMessages(prevMessages => [...prevMessages, newMessage]);\r\n    setInputText('');\r\n  \r\n    const endpoint = useChatModel ? 'http://localhost:3001/chat-generate-message' : 'http://localhost:3001/data-generate-message';\r\n  \r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ userId, messages: [...messages, newMessage] }),\r\n    })\r\n      .then(response => {\r\n        // Check if the response is an image\r\n        const contentType = response.headers.get(\"content-type\");\r\n        //console.log(\"Here: \", contentType);\r\n        if (contentType && contentType.includes(\"image\")) {\r\n          return response.blob();\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        if (data instanceof Blob) {\r\n          // Convert blob to URL and set it as the message content\r\n          const imageUrl = URL.createObjectURL(data);\r\n          setMessages(prev => [...prev, { content: `<img src=\"${imageUrl}\" alt=\"Generated Plot\"/>`, sender: 'api' }]);\r\n        } else {\r\n          // Handle non-image response\r\n          setMessages(prev => [...prev, { content: data.message || data.content, sender: 'assistant' }]);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error:', error);\r\n      });\r\n  };\r\n  \r\n\r\n  const components = {\r\n    code({ node, inline, className, children, ...props }) {\r\n      const match = /language-(\\w+)/.exec(className || '');\r\n      return !inline && match ? (\r\n        <SyntaxHighlighter style={vscDarkPlus} language={match[1]} PreTag=\"div\" {...props}>\r\n          {String(children).replace(/\\n$/, '')}\r\n        </SyntaxHighlighter>\r\n      ) : (\r\n        <code className={className} {...props}>\r\n          {children}\r\n        </code>\r\n      );\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"ChatComponent received message: \", bluetoothMessage);\r\n    if (bluetoothMessage) {\r\n      handleBluetoothMessage(bluetoothMessage);\r\n    }\r\n  }, [bluetoothMessage]);\r\n\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center w-screen min-h-screen bg-gray-100 text-gray-800 p-10\">\r\n    {/* Tab container with modern styling */}\r\n    <div className=\"mb-4 flex sticky border-b\">\r\n      \r\n      <button\r\n        className={`px-4 py-2 text-sm font-medium ${activeTab === 'chat' ? 'border-b-2 border-blue-500 text-blue-500' : 'text-gray-500 hover:text-blue-500'}`}\r\n        onClick={() => setActiveTab('chat')}\r\n      >\r\n        Chat\r\n      </button>\r\n      <button\r\n        className={`px-4 py-2 text-sm font-medium ${activeTab === 'gyro' ? 'border-b-2 border-blue-500 text-blue-500' : 'text-gray-500 hover:text-blue-500'}`}\r\n        onClick={() => setActiveTab('gyro')}\r\n      >\r\n        Gyroscope\r\n      </button>\r\n    </div>\r\n  \r\n      {/* Conditional rendering based on the active tab */}\r\n      {activeTab === 'chat' ? (\r\n    \r\n        <div className=\"flex flex-col flex-grow w-full max-w-xl bg-white shadow-xl rounded-lg overflow-hidden\">\r\n          <div className=\"flex flex-col flex-grow h-0 p-4 overflow-auto\">\r\n            {messages.map((msg, index) => (\r\n              <div key={index} className={`flex w-full mt-2 space-x-3 max-w-xs ${msg.sender === 'user' ? 'ml-auto justify-end' : ''}`}>\r\n                <div className={`${msg.sender === 'user' ? 'bg-blue-600 text-white' : 'bg-gray-300 text-black'} p-3 rounded-lg`}>\r\n                  {msg.sender === 'gyro' ? (\r\n                    <div key={index}>Gyroscope Data: {msg.content}</div>\r\n                  ) : (\r\n                    <ReactMarkdown components={components}>{msg.content}</ReactMarkdown>\r\n                  )}\r\n                </div>\r\n                <span className=\"text-xs text-gray-500 leading-none\">Just now</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n  \r\n          <div className=\"bg-gray-300 p-4 flex\">\r\n            <input\r\n              className=\"flex items-center h-10 w-full rounded px-3 text-sm\"\r\n              type=\"text\"\r\n              placeholder=\"Type your message…\"\r\n              value={inputText}\r\n              onChange={(e) => setInputText(e.target.value)}\r\n              onKeyDown={(e) => {\r\n                if (e.key === 'Enter') {\r\n                  sendMessage();\r\n                }\r\n              }}\r\n            />\r\n  \r\n            <button\r\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-2\"\r\n              onClick={sendMessage}\r\n            >\r\n              Send\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"gyroscope-plot-container\">\r\n          {gyroData && gyroData.length > 0 ? (\r\n            <GyroscopePlot data={gyroData} />\r\n          ) : (\r\n            <p>No gyroscope data available.</p>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n          };\r\n  \r\n\r\nexport default ChatComponent;\r\n\r\nconst generateUserId = () => {\r\n  return Math.random().toString(36).substring(2, 15);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}