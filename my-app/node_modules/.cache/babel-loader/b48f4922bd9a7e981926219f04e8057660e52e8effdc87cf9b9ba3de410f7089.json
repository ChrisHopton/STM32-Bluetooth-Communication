{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\Dropbox\\\\PC\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\BluetoothComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// State and functions from BluetoothComponent\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [connectedDevice, setConnectedDevice] = useState(null);\nconst [dataCharacteristic, setDataCharacteristic] = useState(null);\nconst [inputData, setInputData] = useState('');\nconst [messages, setMessages] = useState([]);\nconst BluetoothComponent = ({\n  onReceiveBluetoothMessage,\n  onResponseMessage\n}) => {\n  _s();\n  useEffect(() => {\n    if (onResponseMessage && dataCharacteristic) {\n      sendData(onResponseMessage);\n    }\n  }, [onResponseMessage, dataCharacteristic]);\n  const sendData = dataToSend => {\n    const data = new TextEncoder().encode(dataToSend + '\\r\\n');\n    if (dataCharacteristic) {\n      const method = dataCharacteristic.properties.writeWithoutResponse ? 'writeValueWithoutResponse' : 'writeValue';\n      dataCharacteristic[method](data).then(() => {\n        log('Data sent: ' + dataToSend);\n      }).catch(error => {\n        log('Send Error: ' + error);\n      });\n    } else {\n      log('Characteristic not found.');\n    }\n  };\n  const log = message => {\n    setMessages(prevMessages => [...prevMessages, message]);\n  };\n  const handleConnectClick = () => {\n    navigator.bluetooth.requestDevice({\n      acceptAllDevices: true,\n      optionalServices: ['0000ffe0-0000-1000-8000-00805f9b34fb']\n    }).then(device => {\n      log(`Connecting to ${device.name}...`);\n      setConnectedDevice(device);\n      return device.gatt.connect();\n    }).then(server => server.getPrimaryService('0000ffe0-0000-1000-8000-00805f9b34fb')).then(service => service.getCharacteristic('0000ffe1-0000-1000-8000-00805f9b34fb')).then(characteristic => {\n      log('Connected. Ready to send and receive data.');\n      setDataCharacteristic(characteristic);\n      characteristic.addEventListener('characteristicvaluechanged', handleCharacteristicValueChanged);\n      return characteristic.startNotifications();\n    }).then(() => {\n      log('Notifications started');\n    }).catch(error => {\n      log('Error: ' + error);\n    });\n  };\n  const handleCharacteristicValueChanged = event => {\n    const target = event.target;\n    const value = target.value;\n    let decoder = new TextDecoder('utf-8');\n    let message = '';\n    for (let i = 0; i < value.byteLength; i++) {\n      message += String.fromCharCode(value.getUint8(i));\n    }\n    message = message.trim(); // This will remove any whitespace or control characters from both ends\n    message = message.replace(/\\x00/g, ''); // Replace with the actual character code\n\n    log('Received: ' + message);\n    onReceiveBluetoothMessage(message);\n  };\n  const handleSendClick = () => {\n    let dataToSend = inputData + '\\r\\n';\n    const data = new TextEncoder().encode(dataToSend);\n    if (dataCharacteristic) {\n      const method = dataCharacteristic.properties.writeWithoutResponse ? 'writeValueWithoutResponse' : 'writeValue';\n      setTimeout(() => {\n        dataCharacteristic[method](data).then(() => {\n          log('Data sent: ' + dataToSend);\n        }).catch(error => {\n          log('Send Error: ' + error);\n        });\n      }, 100);\n    } else {\n      log('Characteristic not found.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"flex dark:bg-slate-900 items-center relative justify-between bg-white px-5 py-6 w-full\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-2\",\n        onClick: handleConnectClick,\n        children: connectedDevice ? `Connected: ${connectedDevice.name}` : 'Connect Bluetooth'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n_s(BluetoothComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BluetoothComponent;\nexport default BluetoothComponent;\nvar _c;\n$RefreshReg$(_c, \"BluetoothComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","connectedDevice","setConnectedDevice","dataCharacteristic","setDataCharacteristic","inputData","setInputData","messages","setMessages","BluetoothComponent","onReceiveBluetoothMessage","onResponseMessage","_s","sendData","dataToSend","data","TextEncoder","encode","method","properties","writeWithoutResponse","then","log","catch","error","message","prevMessages","handleConnectClick","navigator","bluetooth","requestDevice","acceptAllDevices","optionalServices","device","name","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","addEventListener","handleCharacteristicValueChanged","startNotifications","event","target","value","decoder","TextDecoder","i","byteLength","String","fromCharCode","getUint8","trim","replace","handleSendClick","setTimeout","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mathe/Dropbox/PC/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/BluetoothComponent.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n    // State and functions from BluetoothComponent\r\n    const [connectedDevice, setConnectedDevice] = useState<BluetoothDevice | null>(null);\r\n    const [dataCharacteristic, setDataCharacteristic] = useState<BluetoothRemoteGATTCharacteristic | null>(null);\r\n    const [inputData, setInputData] = useState('');\r\n    const [messages, setMessages] = useState<string[]>([]);\r\n\r\nconst BluetoothComponent = ({ onReceiveBluetoothMessage, onResponseMessage }) => {\r\n    useEffect(() => {\r\n        if (onResponseMessage && dataCharacteristic) {\r\n            sendData(onResponseMessage);\r\n        }\r\n    }, [onResponseMessage, dataCharacteristic]);\r\n\r\n    const sendData = (dataToSend) => {\r\n        const data = new TextEncoder().encode(dataToSend + '\\r\\n');\r\n\r\n        if (dataCharacteristic) {\r\n            const method = dataCharacteristic.properties.writeWithoutResponse ? 'writeValueWithoutResponse' : 'writeValue';\r\n\r\n            dataCharacteristic[method](data)\r\n                .then(() => {\r\n                    log('Data sent: ' + dataToSend);\r\n                })\r\n                .catch(error => {\r\n                    log('Send Error: ' + error);\r\n                });\r\n        } else {\r\n            log('Characteristic not found.');\r\n        }\r\n    };\r\n\r\n\r\n    const log = (message: string) => {\r\n        setMessages(prevMessages => [...prevMessages, message]);\r\n    };\r\n\r\n    const handleConnectClick = () => {\r\n        navigator.bluetooth.requestDevice({\r\n            acceptAllDevices: true,\r\n            optionalServices: ['0000ffe0-0000-1000-8000-00805f9b34fb']\r\n        })\r\n        .then(device => {\r\n            log(`Connecting to ${device.name}...`);\r\n            setConnectedDevice(device);\r\n            return device.gatt.connect();\r\n        })\r\n        .then(server => server.getPrimaryService('0000ffe0-0000-1000-8000-00805f9b34fb'))\r\n        .then(service => service.getCharacteristic('0000ffe1-0000-1000-8000-00805f9b34fb'))\r\n        .then(characteristic => {\r\n            log('Connected. Ready to send and receive data.');\r\n            setDataCharacteristic(characteristic);\r\n            characteristic.addEventListener('characteristicvaluechanged', handleCharacteristicValueChanged);\r\n            return characteristic.startNotifications();\r\n        })\r\n        .then(() => {\r\n            log('Notifications started');\r\n        })\r\n        .catch(error => {\r\n            log('Error: ' + error);\r\n        });\r\n    };\r\n\r\n    const handleCharacteristicValueChanged = (event: Event) => {\r\n        const target = event.target as BluetoothRemoteGATTCharacteristic;\r\n        const value = target.value;\r\n        let decoder = new TextDecoder('utf-8');\r\n        let message = '';\r\n    \r\n        for (let i = 0; i < value.byteLength; i++) {\r\n            message += String.fromCharCode(value.getUint8(i));\r\n        }\r\n    \r\n        message = message.trim(); // This will remove any whitespace or control characters from both ends\r\n        message = message.replace(/\\x00/g, ''); // Replace with the actual character code\r\n\r\n    \r\n        log('Received: ' + message);\r\n        onReceiveBluetoothMessage(message);\r\n    };\r\n    \r\n\r\n    const handleSendClick = () => {\r\n        let dataToSend = inputData + '\\r\\n';\r\n        const data = new TextEncoder().encode(dataToSend);\r\n\r\n        if (dataCharacteristic) {\r\n            const method = dataCharacteristic.properties.writeWithoutResponse ? 'writeValueWithoutResponse' : 'writeValue';\r\n\r\n            setTimeout(() => {\r\n                dataCharacteristic[method](data)\r\n                .then(() => {\r\n                    log('Data sent: ' + dataToSend);\r\n                })\r\n                .catch(error => {\r\n                    log('Send Error: ' + error);\r\n                });\r\n            }, 100);\r\n        } else {\r\n            log('Characteristic not found.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* Navbar code */}\r\n            <nav className=\"flex dark:bg-slate-900 items-center relative justify-between bg-white px-5 py-6 w-full\">\r\n                {/* Navbar content */}\r\n                {/* Bluetooth connect button */}\r\n                <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-2\" onClick={handleConnectClick}>\r\n                    {connectedDevice ? `Connected: ${connectedDevice.name}` : 'Connect Bluetooth'}\r\n                </button>\r\n                {/* Rest of the Navbar content */}\r\n            </nav>\r\n\r\n            {/* Bluetooth details popover (hidden or shown based on state) */}\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BluetoothComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}