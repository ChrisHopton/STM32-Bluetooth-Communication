{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\Dropbox\\\\PC\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\ChatRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = ({\n  bluetoothMessage,\n  onSendResponseMessage\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [useChatModel, setUseChatModel] = useState(true);\n  const [userId, setUserId] = useState('');\n  useEffect(() => {\n    setUserId(generateUserId());\n  }, []);\n  const isGyroscopeData = message => {\n    // Implement a check to determine if the message is gyroscope data\n    // For example, a simple check could be based on the format of the message\n    return message.split(',').length === 3 && message.split(',').every(part => !isNaN(parseFloat(part)));\n  };\n\n  // Function to parse gyroscope data\n  const parseGyroscopeData = message => {\n    return message.split(',').map(Number);\n  };\n  const sendApiRequest = updatedMessages => {\n    const endpoint = useChatModel ? 'http://localhost:3001/chat-generate-message' : 'http://localhost:3001/data-generate-message';\n    fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        messages: updatedMessages\n      })\n    }).then(response => response.json()).then(data => {\n      const apiResponse = data.message || data.content;\n      setMessages(prev => [...prev, {\n        content: data.message || data.content,\n        sender: 'api'\n      }]);\n      onSendResponseMessage(apiResponse);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  const handleBluetoothMessage = bluetoothMessage => {\n    if (!bluetoothMessage.trim()) return;\n    if (isGyroscopeData(bluetoothMessage)) {\n      const gyroData = parseGyroscopeData(bluetoothMessage);\n      // Add the gyroscope data directly to the messages state\n      setMessages(prevMessages => [...prevMessages, {\n        content: JSON.stringify(gyroData),\n        sender: 'gyro'\n      }]);\n    } else {\n      // Handle regular messages\n      const newMessage = {\n        content: bluetoothMessage,\n        sender: 'user'\n      };\n      const updatedMessages = [...messages, newMessage];\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n\n      // Make an API call for regular messages\n      sendApiRequest(updatedMessages);\n    }\n  };\n  const sendMessage = () => {\n    if (!inputText.trim()) return;\n    const newMessage = {\n      content: inputText,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    setInputText('');\n    const endpoint = useChatModel ? 'http://localhost:3001/chat-generate-message' : 'http://localhost:3001/data-generate-message';\n    fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        messages: [...messages, newMessage]\n      })\n    }).then(response => {\n      // Check if the response is an image\n      const contentType = response.headers.get(\"content-type\");\n      //console.log(\"Here: \", contentType);\n      if (contentType && contentType.includes(\"image\")) {\n        return response.blob();\n      }\n      return response.json();\n    }).then(data => {\n      if (data instanceof Blob) {\n        // Convert blob to URL and set it as the message content\n        const imageUrl = URL.createObjectURL(data);\n        setMessages(prev => [...prev, {\n          content: `<img src=\"${imageUrl}\" alt=\"Generated Plot\"/>`,\n          sender: 'api'\n        }]);\n      } else {\n        // Handle non-image response\n        setMessages(prev => [...prev, {\n          content: data.message || data.content,\n          sender: 'assistant'\n        }]);\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  const components = {\n    code({\n      node,\n      inline,\n      className,\n      children,\n      ...props\n    }) {\n      const match = /language-(\\w+)/.exec(className || '');\n      return !inline && match ? /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n        style: vscDarkPlus,\n        language: match[1],\n        PreTag: \"div\",\n        ...props,\n        children: String(children).replace(/\\n$/, '')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"code\", {\n        className: className,\n        ...props,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  useEffect(() => {\n    console.log(\"ChatComponent received message: \", bluetoothMessage);\n    if (bluetoothMessage) {\n      handleBluetoothMessage(bluetoothMessage);\n    }\n  }, [bluetoothMessage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center w-screen min-h-screen bg-gray-100 text-gray-800 p-10\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col flex-grow w-full max-w-xl bg-white shadow-xl rounded-lg overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col flex-grow h-0 p-4 overflow-auto\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex w-full mt-2 space-x-3 max-w-xs ${msg.sender === 'user' ? 'ml-auto justify-end' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${msg.sender === 'user' ? 'bg-blue-600 text-white' : 'bg-gray-300 text-black'} p-3 rounded-lg`,\n            children: msg.sender === 'gyro' ?\n            /*#__PURE__*/\n            // Placeholder for gyroscope data - replace with your 3D plot component\n            _jsxDEV(\"div\", {\n              children: [\"Gyroscope Data: \", msg.content]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this) : msg.content.startsWith('<img') ? /*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: msg.content\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n              components: components,\n              children: msg.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-gray-500 leading-none\",\n            children: \"Just now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 9\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 5\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-300 p-4 flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"flex items-center h-10 w-full rounded px-3 text-sm\",\n          type: \"text\",\n          placeholder: \"Type your message\\u2026\",\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          onKeyDown: e => {\n            if (e.key === 'Enter') {\n              sendMessage();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-2\",\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"relative inline-flex cursor-pointer items-center ml-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"peer sr-only\",\n            checked: !useChatModel,\n            onChange: () => setUseChatModel(!useChatModel)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"peer flex h-8 items-center gap-4 rounded-full bg-orange-600 px-3 after:absolute after:left-1 after:h-6 after:w-16 after:rounded-full after:bg-white/50 after:transition-all after:content-[''] peer-checked:bg-slate-700 peer-checked:after:translate-x-full peer-focus:outline-none dark:border-slate-700 dark:bg-slate-700 text-sm text-white\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Google\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"OpenAI\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"1cIWOjoZHs3WtIovuQOY8CWl0AA=\");\n_c = ChatComponent;\nexport default ChatComponent;\nconst generateUserId = () => {\n  return Math.random().toString(36).substring(2, 15);\n};\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","ReactMarkdown","Prism","SyntaxHighlighter","vscDarkPlus","jsxDEV","_jsxDEV","ChatComponent","bluetoothMessage","onSendResponseMessage","_s","messages","setMessages","inputText","setInputText","useChatModel","setUseChatModel","userId","setUserId","generateUserId","isGyroscopeData","message","split","length","every","part","isNaN","parseFloat","parseGyroscopeData","map","Number","sendApiRequest","updatedMessages","endpoint","fetch","method","headers","body","JSON","stringify","then","response","json","data","apiResponse","content","prev","sender","catch","error","console","handleBluetoothMessage","trim","gyroData","prevMessages","newMessage","sendMessage","contentType","get","includes","blob","Blob","imageUrl","URL","createObjectURL","components","code","node","inline","className","children","props","match","exec","style","language","PreTag","String","replace","fileName","_jsxFileName","lineNumber","columnNumber","log","msg","index","startsWith","dangerouslySetInnerHTML","__html","type","placeholder","value","onChange","e","target","onKeyDown","key","onClick","checked","_c","Math","random","toString","substring","$RefreshReg$"],"sources":["C:/Users/mathe/Dropbox/PC/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/ChatRoom.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n\r\ninterface ChatComponentProps {\r\n  bluetoothMessage: string;\r\n  onSendResponseMessage: (message: string) => void;\r\n}\r\n\r\nconst ChatComponent: React.FC<ChatComponentProps> = ({ bluetoothMessage, onSendResponseMessage }) => {\r\n  const [messages, setMessages] = useState<{ content: string, sender: 'user' | 'api' }[]>([]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [useChatModel, setUseChatModel] = useState(true);\r\n  const [userId, setUserId] = useState('');\r\n\r\n  useEffect(() => {\r\n    setUserId(generateUserId());\r\n  }, []);\r\n\r\n  const isGyroscopeData = (message) => {\r\n    // Implement a check to determine if the message is gyroscope data\r\n    // For example, a simple check could be based on the format of the message\r\n    return message.split(',').length === 3 && message.split(',').every(part => !isNaN(parseFloat(part)));\r\n};\r\n\r\n// Function to parse gyroscope data\r\nconst parseGyroscopeData = (message) => {\r\n    return message.split(',').map(Number);\r\n};\r\n\r\nconst sendApiRequest = (updatedMessages) => {\r\n  const endpoint = useChatModel ? 'http://localhost:3001/chat-generate-message' : 'http://localhost:3001/data-generate-message';\r\n\r\n  fetch(endpoint, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ userId, messages: updatedMessages }),\r\n  })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      const apiResponse = data.message || data.content;\r\n      setMessages(prev => [...prev, { content: data.message || data.content, sender: 'api' }]);\r\n      onSendResponseMessage(apiResponse);\r\n    })\r\n    .catch(error => {\r\n      console.error('Error:', error);\r\n    });\r\n};\r\n\r\n\r\n\r\nconst handleBluetoothMessage = (bluetoothMessage) => {\r\n  if (!bluetoothMessage.trim()) return;\r\n\r\n  if (isGyroscopeData(bluetoothMessage)) {\r\n    const gyroData = parseGyroscopeData(bluetoothMessage);\r\n    // Add the gyroscope data directly to the messages state\r\n    setMessages(prevMessages => [...prevMessages, { content: JSON.stringify(gyroData), sender: 'gyro' }]);\r\n  } else {\r\n    // Handle regular messages\r\n    const newMessage = { content: bluetoothMessage, sender: 'user' };\r\n    const updatedMessages = [...messages, newMessage];\r\n    setMessages(prevMessages => [...prevMessages, newMessage]);\r\n\r\n    // Make an API call for regular messages\r\n    sendApiRequest(updatedMessages);\r\n  }\r\n};\r\n\r\n\r\n  const sendMessage = () => {\r\n    if (!inputText.trim()) return;\r\n  \r\n    const newMessage = { content: inputText, sender: 'user' };\r\n    setMessages(prevMessages => [...prevMessages, newMessage]);\r\n    setInputText('');\r\n  \r\n    const endpoint = useChatModel ? 'http://localhost:3001/chat-generate-message' : 'http://localhost:3001/data-generate-message';\r\n  \r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ userId, messages: [...messages, newMessage] }),\r\n    })\r\n      .then(response => {\r\n        // Check if the response is an image\r\n        const contentType = response.headers.get(\"content-type\");\r\n        //console.log(\"Here: \", contentType);\r\n        if (contentType && contentType.includes(\"image\")) {\r\n          return response.blob();\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        if (data instanceof Blob) {\r\n          // Convert blob to URL and set it as the message content\r\n          const imageUrl = URL.createObjectURL(data);\r\n          setMessages(prev => [...prev, { content: `<img src=\"${imageUrl}\" alt=\"Generated Plot\"/>`, sender: 'api' }]);\r\n        } else {\r\n          // Handle non-image response\r\n          setMessages(prev => [...prev, { content: data.message || data.content, sender: 'assistant' }]);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error:', error);\r\n      });\r\n  };\r\n  \r\n\r\n  const components = {\r\n    code({ node, inline, className, children, ...props }) {\r\n      const match = /language-(\\w+)/.exec(className || '');\r\n      return !inline && match ? (\r\n        <SyntaxHighlighter style={vscDarkPlus} language={match[1]} PreTag=\"div\" {...props}>\r\n          {String(children).replace(/\\n$/, '')}\r\n        </SyntaxHighlighter>\r\n      ) : (\r\n        <code className={className} {...props}>\r\n          {children}\r\n        </code>\r\n      );\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"ChatComponent received message: \", bluetoothMessage);\r\n    if (bluetoothMessage) {\r\n      handleBluetoothMessage(bluetoothMessage);\r\n    }\r\n  }, [bluetoothMessage]);\r\n\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center w-screen min-h-screen bg-gray-100 text-gray-800 p-10\">\r\n      \r\n      <div className=\"flex flex-col flex-grow w-full max-w-xl bg-white shadow-xl rounded-lg overflow-hidden\">\r\n        <div className=\"flex flex-col flex-grow h-0 p-4 overflow-auto\">\r\n        {messages.map((msg, index) => (\r\n    <div key={index} className={`flex w-full mt-2 space-x-3 max-w-xs ${msg.sender === 'user' ? 'ml-auto justify-end' : ''}`}>\r\n        <div className={`${msg.sender === 'user' ? 'bg-blue-600 text-white' : 'bg-gray-300 text-black'} p-3 rounded-lg`}>\r\n            {msg.sender === 'gyro' ? (\r\n                // Placeholder for gyroscope data - replace with your 3D plot component\r\n                <div>Gyroscope Data: {msg.content}</div>\r\n            ) : msg.content.startsWith('<img') ? (\r\n                <div dangerouslySetInnerHTML={{ __html: msg.content }} />\r\n            ) : (\r\n                <ReactMarkdown components={components}>{msg.content}</ReactMarkdown>\r\n            )}\r\n        </div>\r\n        <span className=\"text-xs text-gray-500 leading-none\">Just now</span>\r\n    </div>\r\n))}\r\n\r\n        </div>\r\n\r\n        <div className=\"bg-gray-300 p-4 flex\">\r\n          <input\r\n            className=\"flex items-center h-10 w-full rounded px-3 text-sm\"\r\n            type=\"text\"\r\n            placeholder=\"Type your message…\"\r\n            value={inputText}\r\n            onChange={(e) => setInputText(e.target.value)}\r\n            onKeyDown={(e) => {\r\n              if (e.key === 'Enter') {\r\n                sendMessage();\r\n              }\r\n            }}\r\n          />\r\n\r\n          <button\r\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-2\"\r\n\r\n            onClick={sendMessage}\r\n          >\r\n            Send\r\n          </button>\r\n          <label className=\"relative inline-flex cursor-pointer items-center ml-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"peer sr-only\"\r\n            checked={!useChatModel}\r\n            onChange={() => setUseChatModel(!useChatModel)}\r\n          />\r\n          <div\r\n            className=\"peer flex h-8 items-center gap-4 rounded-full bg-orange-600 px-3 after:absolute after:left-1 after:h-6 after:w-16 after:rounded-full after:bg-white/50 after:transition-all after:content-[''] peer-checked:bg-slate-700 peer-checked:after:translate-x-full peer-focus:outline-none dark:border-slate-700 dark:bg-slate-700 text-sm text-white\"\r\n          >\r\n            <span>Google</span>\r\n            <span>OpenAI</span>\r\n          </div>\r\n        </label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatComponent;\r\n\r\nconst generateUserId = () => {\r\n  return Math.random().toString(36).substring(2, 15);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}