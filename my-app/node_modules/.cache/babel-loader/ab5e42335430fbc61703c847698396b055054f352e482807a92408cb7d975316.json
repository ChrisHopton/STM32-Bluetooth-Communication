{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dropbox\\\\PC (4)\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\ChatRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const sendMessage = () => {\n    if (!inputText.trim()) return;\n    const newMessage = {\n      content: inputText,\n      sender: 'user'\n    };\n    const updatedMessages = [...messages, newMessage];\n    setMessages(updatedMessages);\n    fetch('http://localhost:3001/generate-message', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        prompt: inputText\n      })\n    }).then(response => response.json()).then(data => {\n      setMessages(prev => [...prev, {\n        content: data.content,\n        sender: 'api'\n      }]);\n      setInputText('');\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center w-screen min-h-screen bg-gray-100 text-gray-800 p-10\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col flex-grow w-full max-w-xl bg-white shadow-xl rounded-lg overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col flex-grow h-0 p-4 overflow-auto\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: isImageURL(msg.content) ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: msg.content,\n            alt: \"Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: msg.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: inputText,\n        onChange: e => setInputText(e.target.value),\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatComponent, \"XjzYOZb5NzW+E6XGKBVKwRlePKo=\");\n_c = ChatComponent;\nexport default ChatComponent;\nfunction isImageURL(url) {\n  // You can implement your own logic to check if the URL is an image URL\n  // For example, you can check if the URL ends with common image extensions like .jpg, .png, .gif, etc.\n  // Here's a basic example:\n  return /\\.(jpg|jpeg|png|gif)$/i.test(url);\n}\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatComponent","_s","messages","setMessages","inputText","setInputText","sendMessage","trim","newMessage","content","sender","updatedMessages","fetch","method","headers","body","JSON","stringify","prompt","then","response","json","data","prev","catch","error","console","className","children","map","msg","index","isImageURL","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","type","onClick","_c","url","test","$RefreshReg$"],"sources":["C:/Dropbox/PC (4)/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/ChatRoom.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst ChatComponent: React.FC = () => {\r\n  const [messages, setMessages] = useState<{content: string, sender: 'user' | 'api'}[]>([]);\r\n  const [inputText, setInputText] = useState('');\r\n\r\n  const sendMessage = () => {\r\n    if (!inputText.trim()) return;\r\n\r\n    const newMessage = { content: inputText, sender: 'user' };\r\n    const updatedMessages = [...messages, newMessage];\r\n    setMessages(updatedMessages);\r\n\r\n    fetch('http://localhost:3001/generate-message', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ prompt: inputText }),\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      setMessages(prev => [...prev, { content: data.content, sender: 'api' }]);\r\n      setInputText('');\r\n      \r\n    })\r\n    .catch(error => {\r\n      console.error('Error:', error);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center w-screen min-h-screen bg-gray-100 text-gray-800 p-10\">\r\n      <div className=\"flex flex-col flex-grow w-full max-w-xl bg-white shadow-xl rounded-lg overflow-hidden\">\r\n        <div className=\"flex flex-col flex-grow h-0 p-4 overflow-auto\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index}>\r\n            {/* Check if the message content is an image URL */}\r\n            {isImageURL(msg.content) ? (\r\n              <img src={msg.content} alt=\"Image\" />\r\n            ) : (\r\n              <p>{msg.content}</p>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        value={inputText}\r\n        onChange={e => setInputText(e.target.value)}\r\n        type=\"text\"\r\n      />\r\n      <button onClick={sendMessage}>Send</button>\r\n    </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ChatComponent;\r\n\r\nfunction isImageURL(url) {\r\n    // You can implement your own logic to check if the URL is an image URL\r\n    // For example, you can check if the URL ends with common image extensions like .jpg, .png, .gif, etc.\r\n    // Here's a basic example:\r\n    return /\\.(jpg|jpeg|png|gif)$/i.test(url);\r\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}