{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\Dropbox\\\\PC\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\OpenAIAPI.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport OpenAI from 'openai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [inputMessage, setInputMessage] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [aiResponse, setAIResponse] = useState('');\n  const openai = new OpenAI({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n    dangerouslyAllowBrowser: true\n  });\n  const handleInputChange = e => {\n    setInputMessage(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Add the user's message to the chat history\n    const userMessage = {\n      role: 'user',\n      content: inputMessage\n    };\n    setChatHistory([...chatHistory, userMessage]);\n\n    // Send user message to ChatGPT\n    try {\n      const completion = await openai.chat.completions.create({\n        messages: [...chatHistory, userMessage],\n        // Include chat history in the request\n        model: 'gpt-3.5-turbo'\n      });\n\n      // Extract and add AI's response to chat history\n      const aiMessage = {\n        role: 'assistant',\n        content: completion.choices[0].message.content\n      };\n      setChatHistory([...chatHistory, aiMessage]);\n      setAIResponse(aiMessage.content);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n\n    // Clear the input field\n    setInputMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-history\",\n      children: chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.role}`,\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputMessage,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"0Tdl9d6lDkdnoEMrypNfU4QlTxA=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","OpenAI","jsxDEV","_jsxDEV","ChatInterface","_s","inputMessage","setInputMessage","chatHistory","setChatHistory","aiResponse","setAIResponse","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","handleInputChange","e","target","value","handleSubmit","preventDefault","userMessage","role","content","completion","chat","completions","create","messages","model","aiMessage","choices","message","error","console","children","className","map","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/mathe/Dropbox/PC/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/OpenAIAPI.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport OpenAI from 'openai';\r\n\r\nconst ChatInterface = () => {\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [aiResponse, setAIResponse] = useState('');\r\n\r\n  const openai = new OpenAI({ apiKey: process.env.REACT_APP_OPENAI_API_KEY, dangerouslyAllowBrowser: true });\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputMessage(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Add the user's message to the chat history\r\n    const userMessage = { role: 'user', content: inputMessage };\r\n    setChatHistory([...chatHistory, userMessage]);\r\n\r\n    // Send user message to ChatGPT\r\n    try {\r\n      const completion = await openai.chat.completions.create({\r\n        messages: [...chatHistory, userMessage], // Include chat history in the request\r\n        model: 'gpt-3.5-turbo',\r\n      });\r\n\r\n      // Extract and add AI's response to chat history\r\n      const aiMessage = { role: 'assistant', content: completion.choices[0].message.content };\r\n      setChatHistory([...chatHistory, aiMessage]);\r\n      setAIResponse(aiMessage.content);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n\r\n    // Clear the input field\r\n    setInputMessage('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"chat-history\">\r\n        {chatHistory.map((message, index) => (\r\n          <div key={index} className={`message ${message.role}`}>\r\n            {message.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={handleSubmit} className=\"message-form\">\r\n        <input\r\n          type=\"text\"\r\n          value={inputMessage}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Type your message...\"\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}