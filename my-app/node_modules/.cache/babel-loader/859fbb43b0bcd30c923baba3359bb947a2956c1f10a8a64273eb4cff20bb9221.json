{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dropbox\\\\PC (4)\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\BluetoothComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BluetoothComponent = () => {\n  _s();\n  const [connectedDevice, setConnectedDevice] = useState(null);\n  const [dataCharacteristic, setDataCharacteristic] = useState(null);\n  const [inputData, setInputData] = useState('');\n  useEffect(() => {\n    // Any additional setup can go here\n  }, []);\n  const handleConnectClick = () => {\n    navigator.bluetooth.requestDevice({\n      acceptAllDevices: true,\n      optionalServices: ['0000ffe0-0000-1000-8000-00805f9b34fb'] // Replace with your service UUID\n    }).then(device => {\n      log(`Connecting to ${device.name}...`);\n      setConnectedDevice(device);\n      return device.gatt.connect();\n    }).then(server => server.getPrimaryService('0000ffe0-0000-1000-8000-00805f9b34fb')) // Replace with your service UUID\n    .then(service => service.getCharacteristic('0000ffe1-0000-1000-8000-00805f9b34fb')) // Replace with your characteristic UUID\n    .then(characteristic => {\n      log('Connected. Ready to send and receive data.');\n      setDataCharacteristic(characteristic);\n      return characteristic.startNotifications();\n    }).then(() => {\n      log('Notifications started');\n      dataCharacteristic === null || dataCharacteristic === void 0 ? void 0 : dataCharacteristic.addEventListener('characteristicvaluechanged', handleCharacteristicValueChanged);\n    }).catch(error => {\n      log('Error: ' + error);\n    });\n  };\n  const handleCharacteristicValueChanged = event => {\n    const target = event.target;\n    const value = target.value;\n    let decoder = new TextDecoder('utf-8');\n    let message = '';\n\n    // Read bytes one by one and decode accordingly\n    for (let i = 0; i < value.byteLength; i++) {\n      message += String.fromCharCode(value.getUint8(i));\n    }\n    log('Received: ' + message);\n  };\n  const handleSendClick = () => {\n    let dataToSend = inputData; // Assuming inputData is a state variable holding input data\n    dataToSend += '\\r\\n'; // Append \\r for CR and \\n for NL\n    const data = new TextEncoder().encode(dataToSend);\n    if (dataCharacteristic) {\n      const method = dataCharacteristic.properties.writeWithoutResponse ? 'writeValueWithoutResponse' : 'writeValue';\n\n      // Use setTimeout to delay the sending of data\n      setTimeout(() => {\n        dataCharacteristic[method](data).then(() => {\n          log('Data sent: ' + dataToSend);\n        }).catch(error => {\n          log('Send Error: ' + error);\n        });\n      }, 100); // 100 ms delay\n    } else {\n      log('Characteristic not found.');\n    }\n  };\n  const log = text => {\n    // Implement a logging mechanism, possibly updating state to render logs\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputData,\n      onChange: e => setInputData(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConnectClick,\n      children: \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendClick,\n      children: \"Send Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(BluetoothComponent, \"jn2OiUyWNEEXUNVKyVq674BVA8U=\");\n_c = BluetoothComponent;\nexport default BluetoothComponent;\nvar _c;\n$RefreshReg$(_c, \"BluetoothComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","BluetoothComponent","_s","connectedDevice","setConnectedDevice","dataCharacteristic","setDataCharacteristic","inputData","setInputData","handleConnectClick","navigator","bluetooth","requestDevice","acceptAllDevices","optionalServices","then","device","log","name","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","startNotifications","addEventListener","handleCharacteristicValueChanged","catch","error","event","target","value","decoder","TextDecoder","message","i","byteLength","String","fromCharCode","getUint8","handleSendClick","dataToSend","data","TextEncoder","encode","method","properties","writeWithoutResponse","setTimeout","text","children","type","onChange","e","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Dropbox/PC (4)/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/BluetoothComponent.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst BluetoothComponent = () => {\r\n  const [connectedDevice, setConnectedDevice] = useState<BluetoothDevice | null>(null);\r\n  const [dataCharacteristic, setDataCharacteristic] = useState<BluetoothRemoteGATTCharacteristic | null>(null);\r\n  const [inputData, setInputData] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    // Any additional setup can go here\r\n  }, []);\r\n\r\n  const handleConnectClick = () => {\r\n    navigator.bluetooth.requestDevice({\r\n      acceptAllDevices: true,\r\n      optionalServices: ['0000ffe0-0000-1000-8000-00805f9b34fb'] // Replace with your service UUID\r\n    })\r\n    .then(device => {\r\n      log(`Connecting to ${device.name}...`);\r\n      setConnectedDevice(device);\r\n      return device.gatt.connect();\r\n    })\r\n    .then(server => server.getPrimaryService('0000ffe0-0000-1000-8000-00805f9b34fb')) // Replace with your service UUID\r\n    .then(service => service.getCharacteristic('0000ffe1-0000-1000-8000-00805f9b34fb')) // Replace with your characteristic UUID\r\n    .then(characteristic => {\r\n      log('Connected. Ready to send and receive data.');\r\n      setDataCharacteristic(characteristic);\r\n      return characteristic.startNotifications();\r\n    })\r\n    .then(() => {\r\n      log('Notifications started');\r\n      dataCharacteristic?.addEventListener('characteristicvaluechanged', handleCharacteristicValueChanged);\r\n    })\r\n    .catch(error => {\r\n      log('Error: ' + error);\r\n    });\r\n  };\r\n\r\n  const handleCharacteristicValueChanged = (event: Event) => {\r\n    const target = event.target as BluetoothRemoteGATTCharacteristic;\r\n    const value = target.value;\r\n    let decoder = new TextDecoder('utf-8');\r\n    let message = '';\r\n  \r\n    // Read bytes one by one and decode accordingly\r\n    for (let i = 0; i < value.byteLength; i++) {\r\n      message += String.fromCharCode(value.getUint8(i));\r\n    }\r\n  \r\n    log('Received: ' + message);\r\n  };\r\n  \r\n\r\n  const handleSendClick = () => {\r\n    let dataToSend = inputData; // Assuming inputData is a state variable holding input data\r\n    dataToSend += '\\r\\n'; // Append \\r for CR and \\n for NL\r\n    const data = new TextEncoder().encode(dataToSend);\r\n  \r\n    if (dataCharacteristic) {\r\n      const method = dataCharacteristic.properties.writeWithoutResponse ? 'writeValueWithoutResponse' : 'writeValue';\r\n  \r\n      // Use setTimeout to delay the sending of data\r\n      setTimeout(() => {\r\n        dataCharacteristic[method](data)\r\n        .then(() => {\r\n          log('Data sent: ' + dataToSend);\r\n        })\r\n        .catch(error => {\r\n          log('Send Error: ' + error);\r\n        });\r\n      }, 100); // 100 ms delay\r\n    } else {\r\n      log('Characteristic not found.');\r\n    }\r\n  };\r\n  \r\n\r\n  const log = (text: string) => {\r\n    // Implement a logging mechanism, possibly updating state to render logs\r\n  };\r\n\r\nreturn (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={inputData}\r\n        onChange={(e) => setInputData(e.target.value)}\r\n      />\r\n      <button onClick={handleConnectClick}>Connect</button>\r\n      <button onClick={handleSendClick}>Send Data</button>\r\n      {/* ... other components */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BluetoothComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}