{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dropbox\\\\PC (4)\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\BluetoothComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BluetoothComponent = () => {\n  _s();\n  const [connectedDevice, setConnectedDevice] = useState(null);\n  const [dataCharacteristic, setDataCharacteristic] = useState(null);\n  useEffect(() => {\n    // Any additional setup can go here\n  }, []);\n  const handleConnectClick = () => {\n    navigator.bluetooth.requestDevice({\n      acceptAllDevices: true,\n      optionalServices: ['0000ffe0-0000-1000-8000-00805f9b34fb'] // Replace with your service UUID\n    }).then(device => {\n      log(`Connecting to ${device.name}...`);\n      setConnectedDevice(device);\n      return device.gatt.connect();\n    }).then(server => server.getPrimaryService('0000ffe0-0000-1000-8000-00805f9b34fb')) // Replace with your service UUID\n    .then(service => service.getCharacteristic('0000ffe1-0000-1000-8000-00805f9b34fb')) // Replace with your characteristic UUID\n    .then(characteristic => {\n      log('Connected. Ready to send and receive data.');\n      setDataCharacteristic(characteristic);\n      return characteristic.startNotifications();\n    }).then(() => {\n      log('Notifications started');\n      dataCharacteristic === null || dataCharacteristic === void 0 ? void 0 : dataCharacteristic.addEventListener('characteristicvaluechanged', handleCharacteristicValueChanged);\n    }).catch(error => {\n      log('Error: ' + error);\n    });\n  };\n  const handleCharacteristicValueChanged = event => {\n    // Implementation similar to your original JavaScript code\n  };\n  const handleSendClick = () => {\n    // Implementation similar to your original JavaScript code\n  };\n  const log = text => {\n    // Implement a logging mechanism, possibly updating state to render logs\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConnectClick,\n      children: \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendClick,\n      children: \"Send Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(BluetoothComponent, \"v2+Ug2aisjZAODeT8UOhT5zs+HY=\");\n_c = BluetoothComponent;\nexport default BluetoothComponent;\nvar _c;\n$RefreshReg$(_c, \"BluetoothComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","BluetoothComponent","_s","connectedDevice","setConnectedDevice","dataCharacteristic","setDataCharacteristic","handleConnectClick","navigator","bluetooth","requestDevice","acceptAllDevices","optionalServices","then","device","log","name","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","startNotifications","addEventListener","handleCharacteristicValueChanged","catch","error","event","handleSendClick","text","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Dropbox/PC (4)/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/BluetoothComponent.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst BluetoothComponent = () => {\r\n  const [connectedDevice, setConnectedDevice] = useState<BluetoothDevice | null>(null);\r\n  const [dataCharacteristic, setDataCharacteristic] = useState<BluetoothRemoteGATTCharacteristic | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Any additional setup can go here\r\n  }, []);\r\n\r\n  const handleConnectClick = () => {\r\n    navigator.bluetooth.requestDevice({\r\n      acceptAllDevices: true,\r\n      optionalServices: ['0000ffe0-0000-1000-8000-00805f9b34fb'] // Replace with your service UUID\r\n    })\r\n    .then(device => {\r\n      log(`Connecting to ${device.name}...`);\r\n      setConnectedDevice(device);\r\n      return device.gatt.connect();\r\n    })\r\n    .then(server => server.getPrimaryService('0000ffe0-0000-1000-8000-00805f9b34fb')) // Replace with your service UUID\r\n    .then(service => service.getCharacteristic('0000ffe1-0000-1000-8000-00805f9b34fb')) // Replace with your characteristic UUID\r\n    .then(characteristic => {\r\n      log('Connected. Ready to send and receive data.');\r\n      setDataCharacteristic(characteristic);\r\n      return characteristic.startNotifications();\r\n    })\r\n    .then(() => {\r\n      log('Notifications started');\r\n      dataCharacteristic?.addEventListener('characteristicvaluechanged', handleCharacteristicValueChanged);\r\n    })\r\n    .catch(error => {\r\n      log('Error: ' + error);\r\n    });\r\n  };\r\n\r\n  const handleCharacteristicValueChanged = (event: Event) => {\r\n    // Implementation similar to your original JavaScript code\r\n  };\r\n\r\n  const handleSendClick = () => {\r\n    // Implementation similar to your original JavaScript code\r\n  };\r\n\r\n  const log = (text: string) => {\r\n    // Implement a logging mechanism, possibly updating state to render logs\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleConnectClick}>Connect</button>\r\n      <button onClick={handleSendClick}>Send Data</button>\r\n      {/* Additional UI elements */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BluetoothComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGP,QAAQ,CAAyB,IAAI,CAAC;EACpF,MAAM,CAACQ,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGT,QAAQ,CAA2C,IAAI,CAAC;EAE5GC,SAAS,CAAC,MAAM;IACd;EAAA,CACD,EAAE,EAAE,CAAC;EAEN,MAAMS,kBAAkB,GAAGA,CAAA,KAAM;IAC/BC,SAAS,CAACC,SAAS,CAACC,aAAa,CAAC;MAChCC,gBAAgB,EAAE,IAAI;MACtBC,gBAAgB,EAAE,CAAC,sCAAsC,CAAC,CAAC;IAC7D,CAAC,CAAC,CACDC,IAAI,CAACC,MAAM,IAAI;MACdC,GAAG,CAAE,iBAAgBD,MAAM,CAACE,IAAK,KAAI,CAAC;MACtCZ,kBAAkB,CAACU,MAAM,CAAC;MAC1B,OAAOA,MAAM,CAACG,IAAI,CAACC,OAAO,CAAC,CAAC;IAC9B,CAAC,CAAC,CACDL,IAAI,CAACM,MAAM,IAAIA,MAAM,CAACC,iBAAiB,CAAC,sCAAsC,CAAC,CAAC,CAAC;IAAA,CACjFP,IAAI,CAACQ,OAAO,IAAIA,OAAO,CAACC,iBAAiB,CAAC,sCAAsC,CAAC,CAAC,CAAC;IAAA,CACnFT,IAAI,CAACU,cAAc,IAAI;MACtBR,GAAG,CAAC,4CAA4C,CAAC;MACjDT,qBAAqB,CAACiB,cAAc,CAAC;MACrC,OAAOA,cAAc,CAACC,kBAAkB,CAAC,CAAC;IAC5C,CAAC,CAAC,CACDX,IAAI,CAAC,MAAM;MACVE,GAAG,CAAC,uBAAuB,CAAC;MAC5BV,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEoB,gBAAgB,CAAC,4BAA4B,EAAEC,gCAAgC,CAAC;IACtG,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdb,GAAG,CAAC,SAAS,GAAGa,KAAK,CAAC;IACxB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMF,gCAAgC,GAAIG,KAAY,IAAK;IACzD;EAAA,CACD;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B;EAAA,CACD;EAED,MAAMf,GAAG,GAAIgB,IAAY,IAAK;IAC5B;EAAA,CACD;EAED,oBACE/B,OAAA;IAAAgC,QAAA,gBACEhC,OAAA;MAAQiC,OAAO,EAAE1B,kBAAmB;MAAAyB,QAAA,EAAC;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrDrC,OAAA;MAAQiC,OAAO,EAAEH,eAAgB;MAAAE,QAAA,EAAC;IAAS;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEjD,CAAC;AAEV,CAAC;AAACnC,EAAA,CArDID,kBAAkB;AAAAqC,EAAA,GAAlBrC,kBAAkB;AAuDxB,eAAeA,kBAAkB;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}