{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\Dropbox\\\\PC\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\OpenAIAPI.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport OpenAI from \"openai\";\n\n// Check if we're running in a Node.js environment\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isNodeEnvironment = typeof window === \"undefined\";\nconsole.log(\"heelo\");\nconsole.log(process.env.OPENAI_API_KEY);\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY\n});\n\n// Load environment variables from .env file (only in Node.js)\nif (isNodeEnvironment) {\n  const dotenv = require(\"dotenv\");\n  dotenv.config();\n}\nconst MyComponent = () => {\n  _s();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const completion = await openai.chat.completions.create({\n          messages: [{\n            role: \"system\",\n            content: \"You are a helpful assistant.\"\n          }],\n          model: \"gpt-3.5-turbo\"\n        });\n        console.log(completion.choices[0]);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(MyComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MyComponent;\nexport default MyComponent;\nvar _c;\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"names":["React","useEffect","OpenAI","jsxDEV","_jsxDEV","isNodeEnvironment","window","console","log","process","env","OPENAI_API_KEY","openai","apiKey","REACT_APP_OPENAI_API_KEY","dotenv","require","config","MyComponent","_s","fetchData","completion","chat","completions","create","messages","role","content","model","choices","error","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mathe/Dropbox/PC/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/OpenAIAPI.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport OpenAI from \"openai\";\r\n\r\n// Check if we're running in a Node.js environment\r\nconst isNodeEnvironment = typeof window === \"undefined\";\r\nconsole.log(\"heelo\")\r\nconsole.log(process.env.OPENAI_API_KEY)\r\nconst openai = new OpenAI({ apiKey: process.env.REACT_APP_OPENAI_API_KEY });\r\n\r\n// Load environment variables from .env file (only in Node.js)\r\nif (isNodeEnvironment) {\r\n  const dotenv = require(\"dotenv\");\r\n\r\n  dotenv.config();\r\n}\r\n\r\n\r\n\r\nconst MyComponent: React.FC = () => {\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const completion = await openai.chat.completions.create({\r\n          messages: [{ role: \"system\", content: \"You are a helpful assistant.\" }],\r\n          model: \"gpt-3.5-turbo\",\r\n        });\r\n\r\n        console.log(completion.choices[0]);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Your React component content goes here */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,QAAQ;;AAE3B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,iBAAiB,GAAG,OAAOC,MAAM,KAAK,WAAW;AACvDC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;AACpBD,OAAO,CAACC,GAAG,CAACC,OAAO,CAACC,GAAG,CAACC,cAAc,CAAC;AACvC,MAAMC,MAAM,GAAG,IAAIV,MAAM,CAAC;EAAEW,MAAM,EAAEJ,OAAO,CAACC,GAAG,CAACI;AAAyB,CAAC,CAAC;;AAE3E;AACA,IAAIT,iBAAiB,EAAE;EACrB,MAAMU,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;EAEhCD,MAAM,CAACE,MAAM,CAAC,CAAC;AACjB;AAIA,MAAMC,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClClB,SAAS,CAAC,MAAM;IACd,MAAMmB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,UAAU,GAAG,MAAMT,MAAM,CAACU,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;UACtDC,QAAQ,EAAE,CAAC;YAAEC,IAAI,EAAE,QAAQ;YAAEC,OAAO,EAAE;UAA+B,CAAC,CAAC;UACvEC,KAAK,EAAE;QACT,CAAC,CAAC;QAEFrB,OAAO,CAACC,GAAG,CAACa,UAAU,CAACQ,OAAO,CAAC,CAAC,CAAC,CAAC;MACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdvB,OAAO,CAACuB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDV,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEhB,OAAA;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEK,CAAC;AAEV,CAAC;AAACf,EAAA,CAvBID,WAAqB;AAAAiB,EAAA,GAArBjB,WAAqB;AAyB3B,eAAeA,WAAW;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}