{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\Dropbox\\\\PC\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\gyroscopePlot.tsx\";\nimport React from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { Line } from '@react-three/drei';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GyroscopePlot = ({\n  data\n}) => {\n  //     const renderer = new THREE.WebGLRenderer();\n  // renderer.setSize( window.innerWidth, window.innerHeight );\n  // document.body.appendChild( renderer.domElement );\n\n  // const camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 500 );\n  // camera.position.set( 0, 0, 100 );\n  // camera.lookAt( 0, 0, 0 );\n\n  // const scene = new THREE.Scene();\n\n  //     const points = [];\n  // points.push( new THREE.Vector3( - 10, 0, 0 ) );\n  // points.push( new THREE.Vector3( 0, 10, 0 ) );\n\n  // //create a blue LineBasicMaterial\n  // const material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\n  // points.push( new THREE.Vector3( 10, 0, 0 ) );\n\n  // const geometry = new THREE.BufferGeometry().setFromPoints( points );\n  // const line = new THREE.Line( geometry, material );\n\n  // scene.add( line );\n  // renderer.render( scene, camera );\n\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    style: {\n      height: \"500px\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      points: points,\n      color: \"orange\",\n      lineWidth: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_c = GyroscopePlot;\nexport default GyroscopePlot;\nvar _c;\n$RefreshReg$(_c, \"GyroscopePlot\");","map":{"version":3,"names":["React","Canvas","Line","jsxDEV","_jsxDEV","GyroscopePlot","data","style","height","width","children","intensity","fileName","_jsxFileName","lineNumber","columnNumber","position","points","color","lineWidth","_c","$RefreshReg$"],"sources":["C:/Users/mathe/Dropbox/PC/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/gyroscopePlot.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport { Line } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\nconst GyroscopePlot = ({ data }) => {\r\n\r\n//     const renderer = new THREE.WebGLRenderer();\r\n// renderer.setSize( window.innerWidth, window.innerHeight );\r\n// document.body.appendChild( renderer.domElement );\r\n\r\n// const camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 500 );\r\n// camera.position.set( 0, 0, 100 );\r\n// camera.lookAt( 0, 0, 0 );\r\n\r\n// const scene = new THREE.Scene();\r\n\r\n//     const points = [];\r\n// points.push( new THREE.Vector3( - 10, 0, 0 ) );\r\n// points.push( new THREE.Vector3( 0, 10, 0 ) );\r\n\r\n// //create a blue LineBasicMaterial\r\n// const material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\r\n// points.push( new THREE.Vector3( 10, 0, 0 ) );\r\n\r\n// const geometry = new THREE.BufferGeometry().setFromPoints( points );\r\n// const line = new THREE.Line( geometry, material );\r\n\r\n// scene.add( line );\r\n// renderer.render( scene, camera );\r\n\r\n    return (\r\n        <Canvas style={{ height: \"500px\", width: \"100%\" }}>\r\n            <ambientLight intensity={0.5} />\r\n            <pointLight position={[10, 10, 10]} />\r\n            <Line points={points} color=\"orange\" lineWidth={1} />\r\n        </Canvas>\r\n    );\r\n};\r\n\r\nexport default GyroscopePlot;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,IAAI,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAEpC;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEI,oBACIF,OAAA,CAACH,MAAM;IAACM,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9CN,OAAA;MAAcO,SAAS,EAAE;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChCX,OAAA;MAAYY,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;IAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtCX,OAAA,CAACF,IAAI;MAACe,MAAM,EAAEA,MAAO;MAACC,KAAK,EAAC,QAAQ;MAACC,SAAS,EAAE;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAEjB,CAAC;AAACK,EAAA,GAjCIf,aAAa;AAmCnB,eAAeA,aAAa;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}