{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\Dropbox\\\\PC\\\\Documents\\\\GitHub\\\\STM32-Bluetooth-Communication\\\\my-app\\\\src\\\\components\\\\OpenAIAPI.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [inputMessage, setInputMessage] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [aiResponse, setAIResponse] = useState('');\n  const handleInputChange = e => {\n    setInputMessage(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Add the user's message to the chat history\n    const userMessage = {\n      role: 'user',\n      content: inputMessage\n    };\n    setChatHistory([...chatHistory, userMessage]);\n\n    // Simulate AI's response (you can replace this with actual API calls)\n    const aiMessage = simulateAIResponse(inputMessage);\n    setChatHistory([...chatHistory, aiMessage]);\n    setAIResponse(aiMessage.content);\n\n    // Clear the input field\n    setInputMessage('');\n  };\n\n  // Simulate AI response based on user input (replace with actual AI logic)\n  const simulateAIResponse = userInput => {\n    // Replace this with your AI logic or API calls\n    const aiMessage = {\n      role: 'assistant',\n      content: `AI response to: ${userInput}`\n    };\n    return aiMessage;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-history\",\n      children: chatHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.role}`,\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputMessage,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"0Tdl9d6lDkdnoEMrypNfU4QlTxA=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatInterface","_s","inputMessage","setInputMessage","chatHistory","setChatHistory","aiResponse","setAIResponse","handleInputChange","e","target","value","handleSubmit","preventDefault","userMessage","role","content","aiMessage","simulateAIResponse","userInput","children","className","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/mathe/Dropbox/PC/Documents/GitHub/STM32-Bluetooth-Communication/my-app/src/components/OpenAIAPI.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst ChatInterface = () => {\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [aiResponse, setAIResponse] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputMessage(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Add the user's message to the chat history\r\n    const userMessage = { role: 'user', content: inputMessage };\r\n    setChatHistory([...chatHistory, userMessage]);\r\n\r\n    // Simulate AI's response (you can replace this with actual API calls)\r\n    const aiMessage = simulateAIResponse(inputMessage);\r\n    setChatHistory([...chatHistory, aiMessage]);\r\n    setAIResponse(aiMessage.content);\r\n\r\n    // Clear the input field\r\n    setInputMessage('');\r\n  };\r\n\r\n  // Simulate AI response based on user input (replace with actual AI logic)\r\n  const simulateAIResponse = (userInput) => {\r\n    // Replace this with your AI logic or API calls\r\n    const aiMessage = { role: 'assistant', content: `AI response to: ${userInput}` };\r\n    return aiMessage;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"chat-history\">\r\n        {chatHistory.map((message, index) => (\r\n          <div key={index} className={`message ${message.role}`}>\r\n            {message.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={handleSubmit} className=\"message-form\">\r\n        <input\r\n          type=\"text\"\r\n          value={inputMessage}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Type your message...\"\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMW,iBAAiB,GAAIC,CAAC,IAAK;IAC/BN,eAAe,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOH,CAAC,IAAK;IAChCA,CAAC,CAACI,cAAc,CAAC,CAAC;;IAElB;IACA,MAAMC,WAAW,GAAG;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEd;IAAa,CAAC;IAC3DG,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAEU,WAAW,CAAC,CAAC;;IAE7C;IACA,MAAMG,SAAS,GAAGC,kBAAkB,CAAChB,YAAY,CAAC;IAClDG,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAEa,SAAS,CAAC,CAAC;IAC3CV,aAAa,CAACU,SAAS,CAACD,OAAO,CAAC;;IAEhC;IACAb,eAAe,CAAC,EAAE,CAAC;EACrB,CAAC;;EAED;EACA,MAAMe,kBAAkB,GAAIC,SAAS,IAAK;IACxC;IACA,MAAMF,SAAS,GAAG;MAAEF,IAAI,EAAE,WAAW;MAAEC,OAAO,EAAG,mBAAkBG,SAAU;IAAE,CAAC;IAChF,OAAOF,SAAS;EAClB,CAAC;EAED,oBACElB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAKsB,SAAS,EAAC,cAAc;MAAAD,QAAA,EAC1BhB,WAAW,CAACkB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC9BzB,OAAA;QAAiBsB,SAAS,EAAG,WAAUE,OAAO,CAACR,IAAK,EAAE;QAAAK,QAAA,EACnDG,OAAO,CAACP;MAAO,GADRQ,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN7B,OAAA;MAAM8B,QAAQ,EAAEjB,YAAa;MAACS,SAAS,EAAC,cAAc;MAAAD,QAAA,gBACpDrB,OAAA;QACE+B,IAAI,EAAC,MAAM;QACXnB,KAAK,EAAET,YAAa;QACpB6B,QAAQ,EAAEvB,iBAAkB;QAC5BwB,WAAW,EAAC;MAAsB;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACF7B,OAAA;QAAQ+B,IAAI,EAAC,QAAQ;QAAAV,QAAA,EAAC;MAAI;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAC3B,EAAA,CApDID,aAAa;AAAAiC,EAAA,GAAbjC,aAAa;AAsDnB,eAAeA,aAAa;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}